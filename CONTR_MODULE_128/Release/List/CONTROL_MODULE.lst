
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm Wed Jul 29 16:04:11 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1061): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1065): warning: Register r12 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1066): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rtc_status=R5
                 	.DEF _TOUCH_X=R6
                 	.DEF _TOUCH_Y=R8
                 	.DEF _TOUCH_X_LAST=R10
                 	.DEF _TOUCH_Y_LAST=R12
                 	.DEF _i=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 04c5 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0ab5 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 09b8 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0a14 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0a54 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0a7f 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _Default_Parameters:
0003e6 01f4
0003e7 000a
0003e8 012c      	.DB  0xF4,0x1,0xA,0x0,0x2C,0x1
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0003e9 0000      	.DW  0x0000
                 
                 _0x186:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1409): warning: .cseg .db misalignment - padding zero byte
0003ea 00f0      	.DB  0xF0
                 _0x187:
0003eb 010e      	.DB  0xE,0x1
                 _0x188:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1413): warning: .cseg .db misalignment - padding zero byte
0003ec 0064      	.DB  0x64
                 _0x189:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1415): warning: .cseg .db misalignment - padding zero byte
0003ed 00f0      	.DB  0xF0
                 _0x18A:
0003ee 010e      	.DB  0xE,0x1
                 _0x18B:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1419): warning: .cseg .db misalignment - padding zero byte
0003ef 0078      	.DB  0x78
                 _0x18C:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1421): warning: .cseg .db misalignment - padding zero byte
0003f0 00dc      	.DB  0xDC
                 _0x18D:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1423): warning: .cseg .db misalignment - padding zero byte
0003f1 00f0      	.DB  0xF0
                 _0x18E:
0003f2 010e      	.DB  0xE,0x1
                 _0x18F:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1427): warning: .cseg .db misalignment - padding zero byte
0003f3 00f0      	.DB  0xF0
                 _0x190:
0003f4 0154      	.DB  0x54,0x1
                 _0x191:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1431): warning: .cseg .db misalignment - padding zero byte
0003f5 00f0      	.DB  0xF0
                 _0x192:
0003f6 010e      	.DB  0xE,0x1
                 _0x193:
0003f7 0168      	.DB  0x68,0x1
                 _0x194:
0003f8 01cc      	.DB  0xCC,0x1
                 _0x195:
0003f9 0bb8      	.DB  0xB8,0xB
                 _0x196:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1441): warning: .cseg .db misalignment - padding zero byte
0003fa 00fa      	.DB  0xFA
                 _0x197:
0003fb 03e8      	.DB  0xE8,0x3
                 _0x1DB:
0003fc 0032
0003fd 0032
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1445): warning: .cseg .db misalignment - padding zero byte
0003fe 0032      	.DB  0x32,0x0,0x32,0x0,0x32
                 _0x1DC:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1447): warning: .cseg .db misalignment - padding zero byte
0003ff 003c      	.DB  0x3C
                 _0x0:
000400 2020
000401 2020
000402 0020
000403 c5cc      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xCC,0xC5
000404 decd
000405 2000
000406 2b20
000407 2000      	.DB  0xCD,0xDE,0x0,0x20,0x20,0x2B,0x0,0x20
000408 2d20
000409 cf00
00040a d3c0
00040b c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
00040c 2000
00040d 2020
00040e 2020
00040f 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000410 2020
000411 2020
000412 2020
000413 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000414 0020
000415 c0cd
000416 d0cf
000417 c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
000418 cdc5
000419 c5c8
00041a d400
00041b c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
00041c d200
00041d cace
00041e cd00
00041f cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
000420 dfd0
000421 c5c6
000422 c8cd
000423 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000424 20c8
000425 ced2
000426 00ca
000427 cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
000428 c1c7
000429 c6d3
00042a c5c4
00042b c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
00042c 00df
00042d c5c4
00042e cad1
00042f ccce      	.DB  0xDF,0x0,0xC4,0xC5,0xD1,0xCA,0xCE,0xCC
000430 d100
000431 c0d2
000432 d2d0
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1461): warning: .cseg .db misalignment - padding zero byte
000433 0000      	.DB  0x0,0xD1,0xD2,0xC0,0xD0,0xD2,0x0
                 _0x2080060:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1463): warning: .cseg .db misalignment - padding zero byte
000434 0001      	.DB  0x1
                 _0x2080000:
000435 4e2d
000436 4e41
000437 4900
000438 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1466): warning: .cseg .db misalignment - padding zero byte
000439 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00043a 0001      	.DW  0x01
00043b 0002      	.DW  0x02
00043c 07d2      	.DW  __REG_BIT_VARS*2
                 
00043d 0001      	.DW  0x01
00043e 097a      	.DW  _BTN1_Y_Begin
00043f 07d4      	.DW  _0x186*2
                 
000440 0002      	.DW  0x02
000441 097c      	.DW  _BTN1_Y_End
000442 07d6      	.DW  _0x187*2
                 
000443 0001      	.DW  0x01
000444 0980      	.DW  _BTN1_X_End
000445 07d8      	.DW  _0x188*2
                 
000446 0001      	.DW  0x01
000447 0982      	.DW  _BTN2_Y_Begin
000448 07da      	.DW  _0x189*2
                 
000449 0002      	.DW  0x02
00044a 0984      	.DW  _BTN2_Y_End
00044b 07dc      	.DW  _0x18A*2
                 
00044c 0001      	.DW  0x01
00044d 0986      	.DW  _BTN2_X_Begin
00044e 07de      	.DW  _0x18B*2
                 
00044f 0001      	.DW  0x01
000450 0988      	.DW  _BTN2_X_End
000451 07e0      	.DW  _0x18C*2
                 
000452 0001      	.DW  0x01
000453 098a      	.DW  _BTN3_Y_Begin
000454 07e2      	.DW  _0x18D*2
                 
000455 0002      	.DW  0x02
000456 098c      	.DW  _BTN3_Y_End
000457 07e4      	.DW  _0x18E*2
                 
000458 0001      	.DW  0x01
000459 098e      	.DW  _BTN3_X_Begin
00045a 07e6      	.DW  _0x18F*2
                 
00045b 0002      	.DW  0x02
00045c 0990      	.DW  _BTN3_X_End
00045d 07e8      	.DW  _0x190*2
                 
00045e 0001      	.DW  0x01
00045f 0992      	.DW  _BTN4_Y_Begin
000460 07ea      	.DW  _0x191*2
                 
000461 0002      	.DW  0x02
000462 0994      	.DW  _BTN4_Y_End
000463 07ec      	.DW  _0x192*2
                 
000464 0002      	.DW  0x02
000465 0996      	.DW  _BTN4_X_Begin
000466 07ee      	.DW  _0x193*2
                 
000467 0002      	.DW  0x02
000468 0998      	.DW  _BTN4_X_End
000469 07f0      	.DW  _0x194*2
                 
00046a 0002      	.DW  0x02
00046b 09a6      	.DW  _LEDGREEN_max
00046c 07f2      	.DW  _0x195*2
                 
00046d 0001      	.DW  0x01
00046e 09a8      	.DW  _LEDRED_max
00046f 07f4      	.DW  _0x196*2
                 
000470 0002      	.DW  0x02
000471 09aa      	.DW  _LEDBLUE_max
000472 07f6      	.DW  _0x197*2
                 
000473 0006      	.DW  0x06
000474 0500      	.DW  _0x1CA
000475 0800      	.DW  _0x0*2
                 
000476 0006      	.DW  0x06
000477 0506      	.DW  _0x1CA+6
000478 0800      	.DW  _0x0*2
                 
000479 0006      	.DW  0x06
00047a 050c      	.DW  _0x1CA+12
00047b 0800      	.DW  _0x0*2
                 
00047c 0006      	.DW  0x06
00047d 0512      	.DW  _0x1CA+18
00047e 0800      	.DW  _0x0*2
                 
00047f 0005      	.DW  0x05
000480 0518      	.DW  _0x1CE
000481 0806      	.DW  _0x0*2+6
                 
000482 0004      	.DW  0x04
000483 051d      	.DW  _0x1CE+5
000484 080b      	.DW  _0x0*2+11
                 
000485 0004      	.DW  0x04
000486 0521      	.DW  _0x1CE+9
000487 080f      	.DW  _0x0*2+15
                 
000488 0006      	.DW  0x06
000489 0525      	.DW  _0x1CE+13
00048a 0813      	.DW  _0x0*2+19
                 
00048b 0005      	.DW  0x05
00048c 09d0      	.DW  _ValueLast
00048d 07f8      	.DW  _0x1DB*2
                 
00048e 0001      	.DW  0x01
00048f 09d6      	.DW  _multiplier
000490 07fe      	.DW  _0x1DC*2
                 
000491 0011      	.DW  0x11
000492 052b      	.DW  _0x1F6
000493 0819      	.DW  _0x0*2+25
                 
000494 0011      	.DW  0x11
000495 053c      	.DW  _0x1F6+17
000496 0819      	.DW  _0x0*2+25
                 
000497 000b      	.DW  0x0B
000498 054d      	.DW  _0x1F6+34
000499 082a      	.DW  _0x0*2+42
                 
00049a 0004      	.DW  0x04
00049b 0558      	.DW  _0x1F6+45
00049c 0835      	.DW  _0x0*2+53
                 
00049d 0004      	.DW  0x04
00049e 055c      	.DW  _0x1F6+49
00049f 0839      	.DW  _0x0*2+57
                 
0004a0 0004      	.DW  0x04
0004a1 0560      	.DW  _0x1F6+53
0004a2 0835      	.DW  _0x0*2+53
                 
0004a3 0011      	.DW  0x11
0004a4 0564      	.DW  _0x1F6+57
0004a5 083d      	.DW  _0x0*2+61
                 
0004a6 000c      	.DW  0x0C
0004a7 0575      	.DW  _0x1F6+74
0004a8 084e      	.DW  _0x0*2+78
                 
0004a9 0007      	.DW  0x07
0004aa 0581      	.DW  _0x201
0004ab 085a      	.DW  _0x0*2+90
                 
0004ac 0007      	.DW  0x07
0004ad 0588      	.DW  _0x201+7
0004ae 085a      	.DW  _0x0*2+90
                 
0004af 0007      	.DW  0x07
0004b0 058f      	.DW  _0x201+14
0004b1 085a      	.DW  _0x0*2+90
                 
0004b2 0007      	.DW  0x07
0004b3 0596      	.DW  _0x201+21
0004b4 0823      	.DW  _0x0*2+35
                 
0004b5 0007      	.DW  0x07
0004b6 059d      	.DW  _0x201+28
0004b7 0823      	.DW  _0x0*2+35
                 
0004b8 0007      	.DW  0x07
0004b9 05a4      	.DW  _0x201+35
0004ba 0823      	.DW  _0x0*2+35
                 
0004bb 0006      	.DW  0x06
0004bc 05ab      	.DW  _0x201+42
0004bd 0861      	.DW  _0x0*2+97
                 
0004be 0006      	.DW  0x06
0004bf 05b1      	.DW  _0x201+48
0004c0 0813      	.DW  _0x0*2+19
                 
0004c1 0001      	.DW  0x01
0004c2 09d8      	.DW  __seed_G104
0004c3 0868      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
0004c4 0000      	.DW  0
                 
                 __RESET:
0004c5 94f8      	CLI
0004c6 27ee      	CLR  R30
0004c7 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0004c8 e0f1      	LDI  R31,1
0004c9 bff5      	OUT  MCUCR,R31
0004ca bfe5      	OUT  MCUCR,R30
0004cb 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0004cd e1f8      	LDI  R31,0x18
0004ce bdf1      	OUT  WDTCR,R31
0004cf bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0004d0 e08d      	LDI  R24,(14-2)+1
0004d1 e0a2      	LDI  R26,2
0004d2 27bb      	CLR  R27
                 __CLEAR_REG:
0004d3 93ed      	ST   X+,R30
0004d4 958a      	DEC  R24
0004d5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0004d6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0004d7 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0004d8 e0a0      	LDI  R26,LOW(__SRAM_START)
0004d9 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0004da 93ed      	ST   X+,R30
0004db 9701      	SBIW R24,1
0004dc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0004dd e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0004de e0f8      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0004df 9185      	LPM  R24,Z+
0004e0 9195      	LPM  R25,Z+
0004e1 9700      	SBIW R24,0
0004e2 f061      	BREQ __GLOBAL_INI_END
0004e3 91a5      	LPM  R26,Z+
0004e4 91b5      	LPM  R27,Z+
0004e5 9005      	LPM  R0,Z+
0004e6 9015      	LPM  R1,Z+
0004e7 01bf      	MOVW R22,R30
0004e8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0004e9 9005      	LPM  R0,Z+
0004ea 920d      	ST   X+,R0
0004eb 9701      	SBIW R24,1
0004ec f7e1      	BRNE __GLOBAL_INI_LOOP
0004ed 01fb      	MOVW R30,R22
0004ee cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0004ef bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0004f0 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0004f1 bfed      	OUT  SPL,R30
0004f2 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0004f3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0004f4 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0004f5 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0004f6 940c 0e37 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <spi.h>
                 ;#include <string.h>
                 ;#include "PCF8583.h"
                 ;unsigned char rtc_status;
                 ;bit rtc_alarm;
                 ;
                 ;unsigned char rtc_read(unsigned char chip,unsigned char address)
                 ; 0000 0006 {
                 
                 	.CSEG
                 ;unsigned char a;
                 ;a=(chip<<1)|0xa0;
                 ;	chip -> Y+2
                 ;	address -> Y+1
                 ;	a -> R17
                 ;i2c_start();
                 ;i2c_write(a);
                 ;i2c_write(address);
                 ;i2c_start();
                 ;i2c_write(a|1);
                 ;a=i2c_read(0);
                 ;i2c_stop();
                 ;return a;
                 ;}
                 ;
                 ;void rtc_write(unsigned char chip, unsigned char address,unsigned char data)
                 ;{
                 ;i2c_start();
                 ;	chip -> Y+2
                 ;	address -> Y+1
                 ;	data -> Y+0
                 ;i2c_write((chip<<1)|0xa0);
                 ;i2c_write(address);
                 ;i2c_write(data);
                 ;i2c_stop();
                 ;}
                 ;
                 ;unsigned char rtc_get_status(unsigned char chip)
                 ;{
                 ;rtc_status=rtc_read(chip,0);
                 ;	chip -> Y+0
                 ;rtc_alarm=(rtc_status&2);
                 ;return rtc_status;
                 ;}
                 ;
                 ;void rtc_init(unsigned char chip, unsigned char dated_alarm)
                 ;{
                 ;unsigned char d;
                 ;d=0x90;
                 ;	chip -> Y+2
                 ;	dated_alarm -> Y+1
                 ;	d -> R17
                 ;if (dated_alarm) d=0xb0;
                 ;rtc_status=0;
                 ;rtc_alarm=0;
                 ;rtc_write(chip,0,0);
                 ;rtc_write(chip,4,rtc_read(chip,4)&0x3f);
                 ;rtc_write(chip,8,d);
                 ;}
                 ;
                 ;void rtc_stop(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status|=0x80;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_start(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status&=0x7f;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_hold_off(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status&=0xbf;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_hold_on(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status|=0x40;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;unsigned char rtc_read_bcd(unsigned char chip,unsigned char addr)
                 ;{
                 ;return bcd2bin(rtc_read(chip,addr));
                 ;	chip -> Y+1
                 ;	addr -> Y+0
                 ;}
                 ;
                 ;void rtc_write_bcd(unsigned char chip,unsigned char addr,unsigned char data)
                 ;{
                 ;rtc_write(chip,addr,bin2bcd(data));
                 ;	chip -> Y+2
                 ;	addr -> Y+1
                 ;	data -> Y+0
                 ;}
                 ;
                 ;void rtc_write_word(unsigned char chip,unsigned char addr,unsigned data)
                 ;{
                 ;rtc_write(chip,addr,(unsigned char) data&0xff);
                 ;	chip -> Y+3
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 ;rtc_write(chip,++addr,(unsigned char)(data>>8));
                 ;}
                 ;
                 ;void rtc_write_date(unsigned char chip,unsigned char addr,unsigned char date,
                 ;unsigned year)
                 ;{
                 ;rtc_write(chip,addr,bin2bcd(date)|(((unsigned char) year&3)<<6));
                 ;	chip -> Y+4
                 ;	addr -> Y+3
                 ;	date -> Y+2
                 ;	year -> Y+0
                 ;}
                 ;
                 ;void rtc_get_time(unsigned char chip,unsigned char *hour,unsigned char *min,
                 ;unsigned char *sec,unsigned char *hsec)
                 ;{
                 ;rtc_hold_on(chip);
                 ;	chip -> Y+8
                 ;	*hour -> Y+6
                 ;	*min -> Y+4
                 ;	*sec -> Y+2
                 ;	*hsec -> Y+0
                 ;*hsec=rtc_read_bcd(chip,1);
                 ;*sec=rtc_read_bcd(chip,2);
                 ;*min=rtc_read_bcd(chip,3);
                 ;*hour=rtc_read_bcd(chip,4);
                 ;rtc_hold_off(chip);
                 ;}
                 ;
                 ;void rtc_set_time(unsigned char chip,unsigned char hour,unsigned char min,
                 ;unsigned char sec,unsigned char hsec)
                 ;{
                 ;rtc_stop(chip);
                 ;	chip -> Y+4
                 ;	hour -> Y+3
                 ;	min -> Y+2
                 ;	sec -> Y+1
                 ;	hsec -> Y+0
                 ;rtc_write_bcd(chip,1,hsec);
                 ;rtc_write_bcd(chip,2,sec);
                 ;rtc_write_bcd(chip,3,min);
                 ;rtc_write_bcd(chip,4,hour);
                 ;rtc_start(chip);
                 ;}
                 ;
                 ;void rtc_get_date(unsigned char chip,unsigned char *date,unsigned char *month,
                 ;unsigned *year)
                 ;{
                 ;unsigned char dy;
                 ;unsigned y1;
                 ;rtc_hold_on(chip);
                 ;	chip -> Y+10
                 ;	*date -> Y+8
                 ;	*month -> Y+6
                 ;	*year -> Y+4
                 ;	dy -> R17
                 ;	y1 -> R18,R19
                 ;dy=rtc_read(chip,5);
                 ;*month=bcd2bin(rtc_read(chip,6)&0x1f);
                 ;rtc_hold_off(chip);
                 ;*date=bcd2bin(dy&0x3f);
                 ;dy>>=6;
                 ;y1=rtc_read(chip,0x10)|((unsigned) rtc_read(chip,0x11)<<8);
                 ;if (((unsigned char) y1&3)!=dy) rtc_write_word(chip,0x10,++y1);
                 ;*year=y1;
                 ;}
                 ;
                 ;void rtc_set_date(unsigned char chip,unsigned char date,unsigned char month,
                 ;unsigned year)
                 ;{
                 ;rtc_write_word(chip,0x10,year);
                 ;	chip -> Y+4
                 ;	date -> Y+3
                 ;	month -> Y+2
                 ;	year -> Y+0
                 ;rtc_stop(chip);
                 ;rtc_write_date(chip,5,date,year);
                 ;rtc_write_bcd(chip,6,month);
                 ;rtc_start(chip);
                 ;}
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;/*flash char RotationByte[256] =
                 ;{
                 ;0b00000000, //0
                 ;0b10000000, //128
                 ;0b01000000, //64
                 ;0b11000000, //192
                 ;0b00100000, //32
                 ;0b10100000, //160
                 ;0b01100000, //96
                 ;0b11100000, //224
                 ;0b00010000, //16
                 ;0b10010000, //144
                 ;0b01010000, //80
                 ;0b11010000, //208
                 ;0b00110000, //48
                 ;0b10110000, //176
                 ;0b01110000, //112
                 ;0b11110000, //240
                 ;0b00001000, //8
                 ;0b10001000, //136
                 ;0b01001000, //72
                 ;0b11001000, //200
                 ;0b00101000, //40
                 ;0b10101000, //168
                 ;0b01101000, //104
                 ;0b11101000, //232
                 ;0b00011000, //24
                 ;0b10011000, //152
                 ;0b01011000, //88
                 ;0b11011000, //216
                 ;0b00111000, //56
                 ;0b10111000, //184
                 ;0b01111000, //120
                 ;0b11111000, //248
                 ;0b00000100, //4
                 ;0b10000100, //132
                 ;0b01000100, //68
                 ;0b11000100, //196
                 ;0b00100100, //36
                 ;0b10100100, //164
                 ;0b01100100, //100
                 ;0b11100100, //228
                 ;0b00010100, //20
                 ;0b10010100, //148
                 ;0b01010100, //84
                 ;0b11010100, //212
                 ;0b00110100, //52
                 ;0b10110100, //180
                 ;0b01110100, //116
                 ;0b11110100, //244
                 ;0b00001100, //12
                 ;0b10001100, //140
                 ;0b01001100, //76
                 ;0b11001100, //204
                 ;0b00101100, //44
                 ;0b10101100, //172
                 ;0b01101100, //108
                 ;0b11101100, //236
                 ;0b00011100, //28
                 ;0b10011100, //156
                 ;0b01011100, //92
                 ;0b11011100, //220
                 ;0b00111100, //60
                 ;0b10111100, //188
                 ;0b01111100, //124
                 ;0b11111100, //252
                 ;0b00000010, //2
                 ;0b10000010, //130
                 ;0b01000010, //66
                 ;0b11000010, //194
                 ;0b00100010, //34
                 ;0b10100010, //162
                 ;0b01100010, //98
                 ;0b11100010, //226
                 ;0b00010010, //18
                 ;0b10010010, //146
                 ;0b01010010, //82
                 ;0b11010010, //210
                 ;0b00110010, //50
                 ;0b10110010, //178
                 ;0b01110010, //114
                 ;0b11110010, //242
                 ;0b00001010, //10
                 ;0b10001010, //138
                 ;0b01001010, //74
                 ;0b11001010, //202
                 ;0b00101010, //42
                 ;0b10101010, //170
                 ;0b01101010, //106
                 ;0b11101010, //234
                 ;0b00011010, //26
                 ;0b10011010, //154
                 ;0b01011010, //90
                 ;0b11011010, //218
                 ;0b00111010, //58
                 ;0b10111010, //186
                 ;0b01111010, //122
                 ;0b11111010, //250
                 ;0b00000110, //6
                 ;0b10000110, //134
                 ;0b01000110, //70
                 ;0b11000110, //198
                 ;0b00100110, //38
                 ;0b10100110, //166
                 ;0b01100110, //102
                 ;0b11100110, //230
                 ;0b00010110, //22
                 ;0b10010110, //150
                 ;0b01010110, //86
                 ;0b11010110, //214
                 ;0b00110110, //54
                 ;0b10110110, //182
                 ;0b01110110, //118
                 ;0b11110110, //246
                 ;0b00001110, //14
                 ;0b10001110, //142
                 ;0b01001110, //78
                 ;0b11001110, //206
                 ;0b00101110, //46
                 ;0b10101110, //174
                 ;0b01101110, //110
                 ;0b11101110, //238
                 ;0b00011110, //30
                 ;0b10011110, //158
                 ;0b01011110, //94
                 ;0b11011110, //222
                 ;0b00111110, //62
                 ;0b10111110, //190
                 ;0b01111110, //126
                 ;0b11111110, //254
                 ;0b00000001, //1
                 ;0b10000001, //129
                 ;0b01000001, //65
                 ;0b11000001, //193
                 ;0b00100001, //33
                 ;0b10100001, //161
                 ;0b01100001, //97
                 ;0b11100001, //225
                 ;0b00010001, //17
                 ;0b10010001, //145
                 ;0b01010001, //81
                 ;0b11010001, //209
                 ;0b00110001, //49
                 ;0b10110001, //177
                 ;0b01110001, //113
                 ;0b11110001, //241
                 ;0b00001001, //9
                 ;0b10001001, //137
                 ;0b01001001, //73
                 ;0b11001001, //201
                 ;0b00101001, //41
                 ;0b10101001, //169
                 ;0b01101001, //105
                 ;0b11101001, //233
                 ;0b00011001, //25
                 ;0b10011001, //153
                 ;0b01011001, //89
                 ;0b11011001, //217
                 ;0b00111001, //57
                 ;0b10111001, //185
                 ;0b01111001, //121
                 ;0b11111001, //249
                 ;0b00000101, //5
                 ;0b10000101, //133
                 ;0b01000101, //69
                 ;0b11000101, //197
                 ;0b00100101, //37
                 ;0b10100101, //165
                 ;0b01100101, //101
                 ;0b11100101, //229
                 ;0b00010101, //21
                 ;0b10010101, //149
                 ;0b01010101, //85
                 ;0b11010101, //213
                 ;0b00110101, //53
                 ;0b10110101, //181
                 ;0b01110101, //117
                 ;0b11110101, //245
                 ;0b00001101, //13
                 ;0b10001101, //141
                 ;0b01001101, //77
                 ;0b11001101, //205
                 ;0b00101101, //45
                 ;0b10101101, //173
                 ;0b01101101, //109
                 ;0b11101101, //237
                 ;0b00011101, //29
                 ;0b10011101, //157
                 ;0b01011101, //93
                 ;0b11011101, //221
                 ;0b00111101, //61
                 ;0b10111101, //189
                 ;0b01111101, //125
                 ;0b11111101, //253
                 ;0b00000011, //3
                 ;0b10000011, //131
                 ;0b01000011, //67
                 ;0b11000011, //195
                 ;0b00100011, //35
                 ;0b10100011, //163
                 ;0b01100011, //99
                 ;0b11100011, //227
                 ;0b00010011, //19
                 ;0b10010011, //147
                 ;0b01010011, //83
                 ;0b11010011, //211
                 ;0b00110011, //51
                 ;0b10110011, //179
                 ;0b01110011, //115
                 ;0b11110011, //243
                 ;0b00001011, //11
                 ;0b10001011, //139
                 ;0b01001011, //75
                 ;0b11001011, //203
                 ;0b00101011, //43
                 ;0b10101011, //171
                 ;0b01101011, //107
                 ;0b11101011, //235
                 ;0b00011011, //27
                 ;0b10011011, //155
                 ;0b01011011, //91
                 ;0b11011011, //219
                 ;0b00111011, //59
                 ;0b10111011, //187
                 ;0b01111011, //123
                 ;0b11111011, //251
                 ;0b00000111, //7
                 ;0b10000111, //135
                 ;0b01000111, //71
                 ;0b11000111, //199
                 ;0b00100111, //39
                 ;0b10100111, //167
                 ;0b01100111, //103
                 ;0b11100111, //231
                 ;0b00010111, //23
                 ;0b10010111, //151
                 ;0b01010111, //87
                 ;0b11010111, //215
                 ;0b00110111, //55
                 ;0b10110111, //183
                 ;0b01110111, //119
                 ;0b11110111, //247
                 ;0b00001111, //15
                 ;0b10001111, //143
                 ;0b01001111, //79
                 ;0b11001111, //207
                 ;0b00101111, //47
                 ;0b10101111, //175
                 ;0b01101111, //111
                 ;0b11101111, //239
                 ;0b00011111, //31
                 ;0b10011111, //159
                 ;0b01011111, //95
                 ;0b11011111, //223
                 ;0b00111111, //63
                 ;0b10111111, //191
                 ;0b01111111, //127
                 ;0b11111111, //255
                 ;};
                 ;*/
                 ;unsigned char RotateByte(unsigned char Value)
                 ; 0000 0008 {
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
0004f8 940e 1049 	CALL SUBOPT_0x0
0004fa 95f5      	ASR  R31
0004fb 95e7      	ROR  R30
0004fc 75e5      	ANDI R30,LOW(0x55)
0004fd 2fae      	MOV  R26,R30
0004fe 81e8      	LD   R30,Y
0004ff 0fee      	LSL  R30
000500 7aea      	ANDI R30,LOW(0xAA)
000501 2bea      	OR   R30,R26
000502 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
000503 940e 1049 	CALL SUBOPT_0x0
000505 940e 14f9 	CALL __ASRW2
000507 73e3      	ANDI R30,LOW(0x33)
000508 2fae      	MOV  R26,R30
000509 81e8      	LD   R30,Y
00050a 0fee      	LSL  R30
00050b 0fee      	LSL  R30
00050c 7cec      	ANDI R30,LOW(0xCC)
00050d 2bea      	OR   R30,R26
00050e 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
00050f 940e 1049 	CALL SUBOPT_0x0
000511 940e 14f5 	CALL __ASRW4
000513 70ef      	ANDI R30,LOW(0xF)
000514 2fae      	MOV  R26,R30
000515 81e8      	LD   R30,Y
000516 95e2      	SWAP R30
000517 7fe0      	ANDI R30,LOW(0xF0)
000518 2bea      	OR   R30,R26
000519 83e8      	ST   Y,R30
                 ;  return Value;
00051a c023      	RJMP _0x20C0006
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
00051b 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
00051c 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
00051d 940e 104c 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
00051f 981d      	CBI  0x3,5
                 ;  delay_ms(100);
000520 940e 104c 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
000522 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
000523 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
000524 940e 104c 	CALL SUBOPT_0x1
                 ;}
000526 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
000527 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
000528 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
000529 940e 1052 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
00052b 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00052c 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00052d 9896      	CBI  0x12,6
                 ;  #asm("nop")
00052e 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00052f 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000530 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000531 0000      	nop
000532 c00b      	RJMP _0x20C0005
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
000533 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000534 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
000535 940e 1052 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
000537 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000538 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000539 9896      	CBI  0x12,6
                 ;  #asm("nop")
00053a 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00053b 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
00053c 9a96      	SBI  0x12,6
                 ;  #asm("nop")
00053d 0000      	nop
                 _0x20C0005:
                 ;} // SSD1963_Writedata
                 _0x20C0006:
00053e 9621      	ADIW R28,1
00053f 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000540 931a      	ST   -Y,R17
000541 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
000542 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
000543 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
000544 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000545 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
000546 bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
000547 bb05      	OUT  0x15,R16
                 ;  #asm("nop")
000548 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000549 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00054a 9896      	CBI  0x12,6
                 ;  #asm("nop")
00054b 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00054c 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
00054d 9a96      	SBI  0x12,6
                 ;  #asm("nop")
00054e 0000      	nop
                 ;} // SSD1963_Writedata
00054f 8119      	LDD  R17,Y+1
000550 8108      	LDD  R16,Y+0
000551 9624      	ADIW R28,4
000552 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_Reset();
000553 dfc7      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
000554 940e 105a 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000556 940e 105a 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000558 940e 105a 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
00055a ece8      	LDI  R30,LOW(200)
00055b e0f0      	LDI  R31,HIGH(200)
00055c 940e 105e 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
00055e eee2      	LDI  R30,LOW(226)
00055f 93ea      	ST   -Y,R30
000560 dfc6      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
000561 e2e3      	LDI  R30,LOW(35)
000562 93ea      	ST   -Y,R30
000563 dfcf      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
000564 e0e2      	LDI  R30,LOW(2)
000565 940e 1062 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
000567 eee0      	LDI  R30,LOW(224)
000568 940e 1069 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
00056a 940e 1070 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
00056c eee0      	LDI  R30,LOW(224)
00056d 940e 1073 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
00056f 940e 105a 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
000571 e7e8      	LDI  R30,LOW(120)
000572 e0f0      	LDI  R31,HIGH(120)
000573 940e 105e 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
000575 eee6      	LDI  R30,LOW(230)
000576 940e 1069 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
000578 edea      	LDI  R30,LOW(218)
000579 93ea      	ST   -Y,R30
00057a dfb8      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
00057b e7e3      	LDI  R30,LOW(115)
00057c 93ea      	ST   -Y,R30
00057d dfb5      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
00057e ebe0      	LDI  R30,LOW(176)
00057f 93ea      	ST   -Y,R30
000580 dfa6      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
000581 e2e4      	LDI  R30,LOW(36)
000582 940e 107a 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
000584 940e 1081 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
000586 edef      	LDI  R30,LOW(223)
000587 940e 1085 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
000589 e0ef      	LDI  R30,LOW(15)
00058a 940e 107a 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
00058c ebe4      	LDI  R30,LOW(180)
00058d 940e 1073 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
00058f e8e4      	LDI  R30,LOW(132)
000590 940e 107a 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
000592 e5ea      	LDI  R30,LOW(90)
000593 93ea      	ST   -Y,R30
000594 df9e      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
000595 e0ea      	LDI  R30,LOW(10)
000596 940e 107a 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
000598 e0e8      	LDI  R30,LOW(8)
000599 940e 107a 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
00059b ebe6      	LDI  R30,LOW(182)
00059c 940e 1069 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
00059e e2ec      	LDI  R30,LOW(44)
00059f 940e 107a 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
0005a1 e0ec      	LDI  R30,LOW(12)
0005a2 93ea      	ST   -Y,R30
0005a3 df8f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
0005a4 e0ea      	LDI  R30,LOW(10)
0005a5 93ea      	ST   -Y,R30
0005a6 df8c      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
0005a7 e0e0      	LDI  R30,LOW(0)
0005a8 940e 1062 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
0005aa ebea      	LDI  R30,LOW(186)
0005ab 93ea      	ST   -Y,R30
0005ac df7a      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
0005ad e0ef      	LDI  R30,LOW(15)
0005ae 93ea      	ST   -Y,R30
0005af df83      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
0005b0 ebe8      	LDI  R30,LOW(184)
0005b1 93ea      	ST   -Y,R30
0005b2 df74      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
0005b3 e0e7      	LDI  R30,LOW(7)
0005b4 940e 1085 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
0005b6 e3e6      	LDI  R30,LOW(54)
0005b7 940e 1073 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
0005b9 ebec      	LDI  R30,LOW(188)
0005ba 93ea      	ST   -Y,R30
0005bb df6b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
0005bc e5e0      	LDI  R30,LOW(80)
0005bd 93ea      	ST   -Y,R30
0005be df74      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
0005bf e9e0      	LDI  R30,LOW(144)
0005c0 93ea      	ST   -Y,R30
0005c1 df71      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
0005c2 e5e0      	LDI  R30,LOW(80)
0005c3 940e 1085 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
0005c5 efe0      	LDI  R30,LOW(240)
0005c6 940e 1073 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
0005c8 e0e5      	LDI  R30,LOW(5)
0005c9 e0f0      	LDI  R31,HIGH(5)
0005ca 940e 105e 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
0005cc e2e9      	LDI  R30,LOW(41)
0005cd 93ea      	ST   -Y,R30
0005ce df58      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
0005cf ede0      	LDI  R30,LOW(208)
0005d0 93ea      	ST   -Y,R30
0005d1 df55      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
0005d2 e0ed      	LDI  R30,LOW(13)
0005d3 93ea      	ST   -Y,R30
0005d4 df5e      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
0005d5 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
0005d6 e2ea      	LDI  R30,LOW(42)
0005d7 93ea      	ST   -Y,R30
0005d8 df4e      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
0005d9 81ef      	LDD  R30,Y+7
0005da 93ea      	ST   -Y,R30
0005db df57      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
0005dc 81ee      	LDD  R30,Y+6
0005dd 93ea      	ST   -Y,R30
0005de df54      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
0005df 81ed      	LDD  R30,Y+5
0005e0 93ea      	ST   -Y,R30
0005e1 df51      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
0005e2 81ec      	LDD  R30,Y+4
0005e3 93ea      	ST   -Y,R30
0005e4 df4e      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
0005e5 e2eb      	LDI  R30,LOW(43)
0005e6 93ea      	ST   -Y,R30
0005e7 df3f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
0005e8 81eb      	LDD  R30,Y+3
0005e9 93ea      	ST   -Y,R30
0005ea df48      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
0005eb 81ea      	LDD  R30,Y+2
0005ec 93ea      	ST   -Y,R30
0005ed df45      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
0005ee 81e9      	LDD  R30,Y+1
0005ef 93ea      	ST   -Y,R30
0005f0 df42      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
0005f1 81e8      	LD   R30,Y
0005f2 93ea      	ST   -Y,R30
0005f3 df3f      	RCALL _SSD1963_WriteData_b8
                 ;}
0005f4 9628      	ADIW R28,8
0005f5 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
0005f6 940e 15d0 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
0005f8 e2e8      	LDI  R30,LOW(40)
0005f9 93ea      	ST   -Y,R30
0005fa df2c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
0005fb 940e 1089 	CALL SUBOPT_0xC
0005fd edef      	LDI  R30,LOW(479)
0005fe e0f1      	LDI  R31,HIGH(479)
0005ff 940e 108e 	CALL SUBOPT_0xD
000601 e0ef      	LDI  R30,LOW(271)
000602 e0f1      	LDI  R31,HIGH(271)
000603 940e 1091 	CALL SUBOPT_0xE
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
000605 e000     +LDI R16 , LOW ( 0 )
000606 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x33:
                +
000607 3100     +CPI R16 , LOW ( 272 )
000608 e0e1     +LDI R30 , HIGH ( 272 )
000609 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
00060a f480      	BRSH _0x35
                 ;  {
                 ;    y=0;
                +
00060b e020     +LDI R18 , LOW ( 0 )
00060c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x36:
                +
00060d 3e20     +CPI R18 , LOW ( 480 )
00060e e0e1     +LDI R30 , HIGH ( 480 )
00060f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
000610 f438      	BRSH _0x38
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
000611 81ec      	LDD  R30,Y+4
000612 81fd      	LDD  R31,Y+4+1
000613 940e 1099 	CALL SUBOPT_0xF
                 ;      y++;
                +
000615 5f2f     +SUBI R18 , LOW ( - 1 )
000616 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
000617 cff5      	RJMP _0x36
                 _0x38:
                 ;  x++;
                +
000618 5f0f     +SUBI R16 , LOW ( - 1 )
000619 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
00061a cfec      	RJMP _0x33
                 _0x35:
                 ;  SSD1963_WriteCmd(0x29);
00061b e2e9      	LDI  R30,LOW(41)
00061c 93ea      	ST   -Y,R30
00061d df09      	RCALL _SSD1963_WriteCmd
                 ;}
00061e 940e 15d7 	CALL __LOADLOCR4
000620 9626      	ADIW R28,6
000621 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
000622 931a      	ST   -Y,R17
000623 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
000624 940e 109d 	CALL SUBOPT_0x10
000626 85aa      	LDD  R26,Y+10
000627 85bb      	LDD  R27,Y+10+1
000628 9650      	ADIW R26,16
000629 9711      	SBIW R26,1
00062a 93ba      	ST   -Y,R27
00062b 93aa      	ST   -Y,R26
00062c 940e 10a2 	CALL SUBOPT_0x11
00062e 85ac      	LDD  R26,Y+12
00062f 85bd      	LDD  R27,Y+12+1
000630 9650      	ADIW R26,16
000631 9711      	SBIW R26,1
000632 93ba      	ST   -Y,R27
000633 93aa      	ST   -Y,R26
000634 dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
000635 e2ec      	LDI  R30,LOW(44)
000636 93ea      	ST   -Y,R30
000637 deef      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
000638 e010      	LDI  R17,LOW(0)
                 _0x3A:
000639 3210      	CPI  R17,32
00063a f4e8      	BRSH _0x3B
                 ;  {
                 ;    for (j = 0; j < 8; j++)
00063b e000      	LDI  R16,LOW(0)
                 _0x3D:
00063c 3008      	CPI  R16,8
00063d f4c0      	BRSH _0x3E
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
00063e 2fe1      	MOV  R30,R17
00063f 85aa      	LDD  R26,Y+10
000640 85bb      	LDD  R27,Y+10+1
000641 e0f0      	LDI  R31,0
000642 0fea      	ADD  R30,R26
000643 1ffb      	ADC  R31,R27
000644 9014      	LPM  R1,Z
000645 2fe0      	MOV  R30,R16
000646 e8a0      	LDI  R26,LOW(128)
000647 940e 14ed 	CALL __LSRB12
000649 21e1      	AND  R30,R1
00064a 30e1      	CPI  R30,LOW(0x1)
00064b f018      	BRLO _0x3F
00064c 81ec      	LDD  R30,Y+4
00064d 81fd      	LDD  R31,Y+4+1
00064e c002      	RJMP _0x236
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3F:
00064f 81ea      	LDD  R30,Y+2
000650 81fb      	LDD  R31,Y+2+1
                 _0x236:
000651 93fa      	ST   -Y,R31
000652 93ea      	ST   -Y,R30
000653 deec      	RCALL _SSD1963_WriteData_b16
                 ;    }
000654 5f0f      	SUBI R16,-1
000655 cfe6      	RJMP _0x3D
                 _0x3E:
                 ;  }
000656 5f1f      	SUBI R17,-1
000657 cfe1      	RJMP _0x3A
                 _0x3B:
                 ;}
000658 8119      	LDD  R17,Y+1
000659 8108      	LDD  R16,Y+0
00065a c2c2      	RJMP _0x20C0004
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
00065b 85e8      	LDD  R30,Y+8
00065c e0f0      	LDI  R31,0
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
00065d 33e0      	CPI  R30,LOW(0x30)
00065e e0a0      	LDI  R26,HIGH(0x30)
00065f 07fa      	CPC  R31,R26
000660 f419      	BRNE _0x44
000661 e0ec      	LDI  R30,LOW(_S_48*2)
000662 e0f1      	LDI  R31,HIGH(_S_48*2)
000663 c18e      	RJMP _0x237
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x44:
000664 33e1      	CPI  R30,LOW(0x31)
000665 e0a0      	LDI  R26,HIGH(0x31)
000666 07fa      	CPC  R31,R26
000667 f419      	BRNE _0x45
000668 e2ec      	LDI  R30,LOW(_S_49*2)
000669 e0f1      	LDI  R31,HIGH(_S_49*2)
00066a c187      	RJMP _0x237
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x45:
00066b 33e2      	CPI  R30,LOW(0x32)
00066c e0a0      	LDI  R26,HIGH(0x32)
00066d 07fa      	CPC  R31,R26
00066e f419      	BRNE _0x46
00066f e4ec      	LDI  R30,LOW(_S_50*2)
000670 e0f1      	LDI  R31,HIGH(_S_50*2)
000671 c180      	RJMP _0x237
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x46:
000672 33e3      	CPI  R30,LOW(0x33)
000673 e0a0      	LDI  R26,HIGH(0x33)
000674 07fa      	CPC  R31,R26
000675 f419      	BRNE _0x47
000676 e6ec      	LDI  R30,LOW(_S_51*2)
000677 e0f1      	LDI  R31,HIGH(_S_51*2)
000678 c179      	RJMP _0x237
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x47:
000679 33e4      	CPI  R30,LOW(0x34)
00067a e0a0      	LDI  R26,HIGH(0x34)
00067b 07fa      	CPC  R31,R26
00067c f419      	BRNE _0x48
00067d e8ec      	LDI  R30,LOW(_S_52*2)
00067e e0f1      	LDI  R31,HIGH(_S_52*2)
00067f c172      	RJMP _0x237
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x48:
000680 33e5      	CPI  R30,LOW(0x35)
000681 e0a0      	LDI  R26,HIGH(0x35)
000682 07fa      	CPC  R31,R26
000683 f419      	BRNE _0x49
000684 eaec      	LDI  R30,LOW(_S_53*2)
000685 e0f1      	LDI  R31,HIGH(_S_53*2)
000686 c16b      	RJMP _0x237
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x49:
000687 33e6      	CPI  R30,LOW(0x36)
000688 e0a0      	LDI  R26,HIGH(0x36)
000689 07fa      	CPC  R31,R26
00068a f419      	BRNE _0x4A
00068b ecec      	LDI  R30,LOW(_S_54*2)
00068c e0f1      	LDI  R31,HIGH(_S_54*2)
00068d c164      	RJMP _0x237
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x4A:
00068e 33e7      	CPI  R30,LOW(0x37)
00068f e0a0      	LDI  R26,HIGH(0x37)
000690 07fa      	CPC  R31,R26
000691 f419      	BRNE _0x4B
000692 eeec      	LDI  R30,LOW(_S_55*2)
000693 e0f1      	LDI  R31,HIGH(_S_55*2)
000694 c15d      	RJMP _0x237
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x4B:
000695 33e8      	CPI  R30,LOW(0x38)
000696 e0a0      	LDI  R26,HIGH(0x38)
000697 07fa      	CPC  R31,R26
000698 f419      	BRNE _0x4C
000699 e0ec      	LDI  R30,LOW(_S_56*2)
00069a e0f2      	LDI  R31,HIGH(_S_56*2)
00069b c156      	RJMP _0x237
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4C:
00069c 33e9      	CPI  R30,LOW(0x39)
00069d e0a0      	LDI  R26,HIGH(0x39)
00069e 07fa      	CPC  R31,R26
00069f f419      	BRNE _0x4D
0006a0 e2ec      	LDI  R30,LOW(_S_57*2)
0006a1 e0f2      	LDI  R31,HIGH(_S_57*2)
0006a2 c14f      	RJMP _0x237
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4D:
0006a3 32e1      	CPI  R30,LOW(0x21)
0006a4 e0a0      	LDI  R26,HIGH(0x21)
0006a5 07fa      	CPC  R31,R26
0006a6 f419      	BRNE _0x4E
0006a7 e6ec      	LDI  R30,LOW(_S_33*2)
0006a8 e0f2      	LDI  R31,HIGH(_S_33*2)
0006a9 c148      	RJMP _0x237
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4E:
0006aa 32e8      	CPI  R30,LOW(0x28)
0006ab e0a0      	LDI  R26,HIGH(0x28)
0006ac 07fa      	CPC  R31,R26
0006ad f419      	BRNE _0x4F
0006ae e8ec      	LDI  R30,LOW(_S_40*2)
0006af e0f2      	LDI  R31,HIGH(_S_40*2)
0006b0 c141      	RJMP _0x237
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4F:
0006b1 32e9      	CPI  R30,LOW(0x29)
0006b2 e0a0      	LDI  R26,HIGH(0x29)
0006b3 07fa      	CPC  R31,R26
0006b4 f419      	BRNE _0x50
0006b5 eaec      	LDI  R30,LOW(_S_41*2)
0006b6 e0f2      	LDI  R31,HIGH(_S_41*2)
0006b7 c13a      	RJMP _0x237
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x50:
0006b8 32ef      	CPI  R30,LOW(0x2F)
0006b9 e0a0      	LDI  R26,HIGH(0x2F)
0006ba 07fa      	CPC  R31,R26
0006bb f419      	BRNE _0x51
0006bc ecec      	LDI  R30,LOW(_S_47*2)
0006bd e0f2      	LDI  R31,HIGH(_S_47*2)
0006be c133      	RJMP _0x237
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x51:
0006bf 33ea      	CPI  R30,LOW(0x3A)
0006c0 e0a0      	LDI  R26,HIGH(0x3A)
0006c1 07fa      	CPC  R31,R26
0006c2 f419      	BRNE _0x52
0006c3 e2ec      	LDI  R30,LOW(_S_58*2)
0006c4 e0f3      	LDI  R31,HIGH(_S_58*2)
0006c5 c12c      	RJMP _0x237
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x52:
0006c6 33ec      	CPI  R30,LOW(0x3C)
0006c7 e0a0      	LDI  R26,HIGH(0x3C)
0006c8 07fa      	CPC  R31,R26
0006c9 f419      	BRNE _0x53
0006ca e4ec      	LDI  R30,LOW(_S_60*2)
0006cb e0f3      	LDI  R31,HIGH(_S_60*2)
0006cc c125      	RJMP _0x237
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x53:
0006cd 33ed      	CPI  R30,LOW(0x3D)
0006ce e0a0      	LDI  R26,HIGH(0x3D)
0006cf 07fa      	CPC  R31,R26
0006d0 f419      	BRNE _0x54
0006d1 e6ec      	LDI  R30,LOW(_S_61*2)
0006d2 e0f3      	LDI  R31,HIGH(_S_61*2)
0006d3 c11e      	RJMP _0x237
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x54:
0006d4 33ee      	CPI  R30,LOW(0x3E)
0006d5 e0a0      	LDI  R26,HIGH(0x3E)
0006d6 07fa      	CPC  R31,R26
0006d7 f419      	BRNE _0x55
0006d8 e8ec      	LDI  R30,LOW(_S_62*2)
0006d9 e0f3      	LDI  R31,HIGH(_S_62*2)
0006da c117      	RJMP _0x237
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x55:
0006db 33ef      	CPI  R30,LOW(0x3F)
0006dc e0a0      	LDI  R26,HIGH(0x3F)
0006dd 07fa      	CPC  R31,R26
0006de f419      	BRNE _0x56
0006df eaec      	LDI  R30,LOW(_S_63*2)
0006e0 e0f3      	LDI  R31,HIGH(_S_63*2)
0006e1 c110      	RJMP _0x237
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x56:
0006e2 32eb      	CPI  R30,LOW(0x2B)
0006e3 e0a0      	LDI  R26,HIGH(0x2B)
0006e4 07fa      	CPC  R31,R26
0006e5 f419      	BRNE _0x57
0006e6 eeec      	LDI  R30,LOW(_S_43*2)
0006e7 e0f2      	LDI  R31,HIGH(_S_43*2)
0006e8 c109      	RJMP _0x237
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x57:
0006e9 32ed      	CPI  R30,LOW(0x2D)
0006ea e0a0      	LDI  R26,HIGH(0x2D)
0006eb 07fa      	CPC  R31,R26
0006ec f419      	BRNE _0x58
0006ed e0ec      	LDI  R30,LOW(_S_45*2)
0006ee e0f3      	LDI  R31,HIGH(_S_45*2)
0006ef c102      	RJMP _0x237
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x58:
0006f0 3ce0      	CPI  R30,LOW(0xC0)
0006f1 e0a0      	LDI  R26,HIGH(0xC0)
0006f2 07fa      	CPC  R31,R26
0006f3 f419      	BRNE _0x59
0006f4 ecec      	LDI  R30,LOW(_S_192*2)
0006f5 e0f3      	LDI  R31,HIGH(_S_192*2)
0006f6 c0fb      	RJMP _0x237
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x59:
0006f7 3ce1      	CPI  R30,LOW(0xC1)
0006f8 e0a0      	LDI  R26,HIGH(0xC1)
0006f9 07fa      	CPC  R31,R26
0006fa f419      	BRNE _0x5A
0006fb eeec      	LDI  R30,LOW(_S_193*2)
0006fc e0f3      	LDI  R31,HIGH(_S_193*2)
0006fd c0f4      	RJMP _0x237
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x5A:
0006fe 3ce2      	CPI  R30,LOW(0xC2)
0006ff e0a0      	LDI  R26,HIGH(0xC2)
000700 07fa      	CPC  R31,R26
000701 f419      	BRNE _0x5B
000702 e0ec      	LDI  R30,LOW(_S_194*2)
000703 e0f4      	LDI  R31,HIGH(_S_194*2)
000704 c0ed      	RJMP _0x237
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x5B:
000705 3ce3      	CPI  R30,LOW(0xC3)
000706 e0a0      	LDI  R26,HIGH(0xC3)
000707 07fa      	CPC  R31,R26
000708 f419      	BRNE _0x5C
000709 e2ec      	LDI  R30,LOW(_S_195*2)
00070a e0f4      	LDI  R31,HIGH(_S_195*2)
00070b c0e6      	RJMP _0x237
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5C:
00070c 3ce4      	CPI  R30,LOW(0xC4)
00070d e0a0      	LDI  R26,HIGH(0xC4)
00070e 07fa      	CPC  R31,R26
00070f f419      	BRNE _0x5D
000710 e4ec      	LDI  R30,LOW(_S_196*2)
000711 e0f4      	LDI  R31,HIGH(_S_196*2)
000712 c0df      	RJMP _0x237
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5D:
000713 3ce5      	CPI  R30,LOW(0xC5)
000714 e0a0      	LDI  R26,HIGH(0xC5)
000715 07fa      	CPC  R31,R26
000716 f419      	BRNE _0x5E
000717 e6ec      	LDI  R30,LOW(_S_197*2)
000718 e0f4      	LDI  R31,HIGH(_S_197*2)
000719 c0d8      	RJMP _0x237
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5E:
00071a 3ce6      	CPI  R30,LOW(0xC6)
00071b e0a0      	LDI  R26,HIGH(0xC6)
00071c 07fa      	CPC  R31,R26
00071d f419      	BRNE _0x5F
00071e e8ec      	LDI  R30,LOW(_S_198*2)
00071f e0f4      	LDI  R31,HIGH(_S_198*2)
000720 c0d1      	RJMP _0x237
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5F:
000721 3ce7      	CPI  R30,LOW(0xC7)
000722 e0a0      	LDI  R26,HIGH(0xC7)
000723 07fa      	CPC  R31,R26
000724 f419      	BRNE _0x60
000725 eaec      	LDI  R30,LOW(_S_199*2)
000726 e0f4      	LDI  R31,HIGH(_S_199*2)
000727 c0ca      	RJMP _0x237
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x60:
000728 3ce8      	CPI  R30,LOW(0xC8)
000729 e0a0      	LDI  R26,HIGH(0xC8)
00072a 07fa      	CPC  R31,R26
00072b f419      	BRNE _0x61
00072c ecec      	LDI  R30,LOW(_S_200*2)
00072d e0f4      	LDI  R31,HIGH(_S_200*2)
00072e c0c3      	RJMP _0x237
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x61:
00072f 3ce9      	CPI  R30,LOW(0xC9)
000730 e0a0      	LDI  R26,HIGH(0xC9)
000731 07fa      	CPC  R31,R26
000732 f419      	BRNE _0x62
000733 eeec      	LDI  R30,LOW(_S_201*2)
000734 e0f4      	LDI  R31,HIGH(_S_201*2)
000735 c0bc      	RJMP _0x237
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x62:
000736 3cea      	CPI  R30,LOW(0xCA)
000737 e0a0      	LDI  R26,HIGH(0xCA)
000738 07fa      	CPC  R31,R26
000739 f419      	BRNE _0x63
00073a e0ec      	LDI  R30,LOW(_S_202*2)
00073b e0f5      	LDI  R31,HIGH(_S_202*2)
00073c c0b5      	RJMP _0x237
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x63:
00073d 3ceb      	CPI  R30,LOW(0xCB)
00073e e0a0      	LDI  R26,HIGH(0xCB)
00073f 07fa      	CPC  R31,R26
000740 f419      	BRNE _0x64
000741 e2ec      	LDI  R30,LOW(_S_203*2)
000742 e0f5      	LDI  R31,HIGH(_S_203*2)
000743 c0ae      	RJMP _0x237
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x64:
000744 3cec      	CPI  R30,LOW(0xCC)
000745 e0a0      	LDI  R26,HIGH(0xCC)
000746 07fa      	CPC  R31,R26
000747 f419      	BRNE _0x65
000748 e4ec      	LDI  R30,LOW(_S_204*2)
000749 e0f5      	LDI  R31,HIGH(_S_204*2)
00074a c0a7      	RJMP _0x237
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x65:
00074b 3ced      	CPI  R30,LOW(0xCD)
00074c e0a0      	LDI  R26,HIGH(0xCD)
00074d 07fa      	CPC  R31,R26
00074e f419      	BRNE _0x66
00074f e6ec      	LDI  R30,LOW(_S_205*2)
000750 e0f5      	LDI  R31,HIGH(_S_205*2)
000751 c0a0      	RJMP _0x237
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x66:
000752 3cee      	CPI  R30,LOW(0xCE)
000753 e0a0      	LDI  R26,HIGH(0xCE)
000754 07fa      	CPC  R31,R26
000755 f419      	BRNE _0x67
000756 e8ec      	LDI  R30,LOW(_S_206*2)
000757 e0f5      	LDI  R31,HIGH(_S_206*2)
000758 c099      	RJMP _0x237
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x67:
000759 3cef      	CPI  R30,LOW(0xCF)
00075a e0a0      	LDI  R26,HIGH(0xCF)
00075b 07fa      	CPC  R31,R26
00075c f419      	BRNE _0x68
00075d eaec      	LDI  R30,LOW(_S_207*2)
00075e e0f5      	LDI  R31,HIGH(_S_207*2)
00075f c092      	RJMP _0x237
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x68:
000760 3de0      	CPI  R30,LOW(0xD0)
000761 e0a0      	LDI  R26,HIGH(0xD0)
000762 07fa      	CPC  R31,R26
000763 f419      	BRNE _0x69
000764 ecec      	LDI  R30,LOW(_S_208*2)
000765 e0f5      	LDI  R31,HIGH(_S_208*2)
000766 c08b      	RJMP _0x237
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x69:
000767 3de1      	CPI  R30,LOW(0xD1)
000768 e0a0      	LDI  R26,HIGH(0xD1)
000769 07fa      	CPC  R31,R26
00076a f419      	BRNE _0x6A
00076b eeec      	LDI  R30,LOW(_S_209*2)
00076c e0f5      	LDI  R31,HIGH(_S_209*2)
00076d c084      	RJMP _0x237
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x6A:
00076e 3de2      	CPI  R30,LOW(0xD2)
00076f e0a0      	LDI  R26,HIGH(0xD2)
000770 07fa      	CPC  R31,R26
000771 f419      	BRNE _0x6B
000772 e0ec      	LDI  R30,LOW(_S_210*2)
000773 e0f6      	LDI  R31,HIGH(_S_210*2)
000774 c07d      	RJMP _0x237
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x6B:
000775 3de3      	CPI  R30,LOW(0xD3)
000776 e0a0      	LDI  R26,HIGH(0xD3)
000777 07fa      	CPC  R31,R26
000778 f419      	BRNE _0x6C
000779 e2ec      	LDI  R30,LOW(_S_211*2)
00077a e0f6      	LDI  R31,HIGH(_S_211*2)
00077b c076      	RJMP _0x237
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6C:
00077c 3de4      	CPI  R30,LOW(0xD4)
00077d e0a0      	LDI  R26,HIGH(0xD4)
00077e 07fa      	CPC  R31,R26
00077f f419      	BRNE _0x6D
000780 e4ec      	LDI  R30,LOW(_S_212*2)
000781 e0f6      	LDI  R31,HIGH(_S_212*2)
000782 c06f      	RJMP _0x237
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6D:
000783 3de5      	CPI  R30,LOW(0xD5)
000784 e0a0      	LDI  R26,HIGH(0xD5)
000785 07fa      	CPC  R31,R26
000786 f419      	BRNE _0x6E
000787 e6ec      	LDI  R30,LOW(_S_213*2)
000788 e0f6      	LDI  R31,HIGH(_S_213*2)
000789 c068      	RJMP _0x237
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6E:
00078a 3de6      	CPI  R30,LOW(0xD6)
00078b e0a0      	LDI  R26,HIGH(0xD6)
00078c 07fa      	CPC  R31,R26
00078d f419      	BRNE _0x6F
00078e e8ec      	LDI  R30,LOW(_S_214*2)
00078f e0f6      	LDI  R31,HIGH(_S_214*2)
000790 c061      	RJMP _0x237
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6F:
000791 3de7      	CPI  R30,LOW(0xD7)
000792 e0a0      	LDI  R26,HIGH(0xD7)
000793 07fa      	CPC  R31,R26
000794 f419      	BRNE _0x70
000795 eaec      	LDI  R30,LOW(_S_215*2)
000796 e0f6      	LDI  R31,HIGH(_S_215*2)
000797 c05a      	RJMP _0x237
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x70:
000798 3de8      	CPI  R30,LOW(0xD8)
000799 e0a0      	LDI  R26,HIGH(0xD8)
00079a 07fa      	CPC  R31,R26
00079b f419      	BRNE _0x71
00079c ecec      	LDI  R30,LOW(_S_216*2)
00079d e0f6      	LDI  R31,HIGH(_S_216*2)
00079e c053      	RJMP _0x237
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x71:
00079f 3de9      	CPI  R30,LOW(0xD9)
0007a0 e0a0      	LDI  R26,HIGH(0xD9)
0007a1 07fa      	CPC  R31,R26
0007a2 f419      	BRNE _0x72
0007a3 eeec      	LDI  R30,LOW(_S_217*2)
0007a4 e0f6      	LDI  R31,HIGH(_S_217*2)
0007a5 c04c      	RJMP _0x237
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x72:
0007a6 3dea      	CPI  R30,LOW(0xDA)
0007a7 e0a0      	LDI  R26,HIGH(0xDA)
0007a8 07fa      	CPC  R31,R26
0007a9 f419      	BRNE _0x73
0007aa e0ec      	LDI  R30,LOW(_S_218*2)
0007ab e0f7      	LDI  R31,HIGH(_S_218*2)
0007ac c045      	RJMP _0x237
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x73:
0007ad 3deb      	CPI  R30,LOW(0xDB)
0007ae e0a0      	LDI  R26,HIGH(0xDB)
0007af 07fa      	CPC  R31,R26
0007b0 f419      	BRNE _0x74
0007b1 e2ec      	LDI  R30,LOW(_S_219*2)
0007b2 e0f7      	LDI  R31,HIGH(_S_219*2)
0007b3 c03e      	RJMP _0x237
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x74:
0007b4 3dec      	CPI  R30,LOW(0xDC)
0007b5 e0a0      	LDI  R26,HIGH(0xDC)
0007b6 07fa      	CPC  R31,R26
0007b7 f419      	BRNE _0x75
0007b8 e4ec      	LDI  R30,LOW(_S_220*2)
0007b9 e0f7      	LDI  R31,HIGH(_S_220*2)
0007ba c037      	RJMP _0x237
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x75:
0007bb 3ded      	CPI  R30,LOW(0xDD)
0007bc e0a0      	LDI  R26,HIGH(0xDD)
0007bd 07fa      	CPC  R31,R26
0007be f419      	BRNE _0x76
0007bf e6ec      	LDI  R30,LOW(_S_221*2)
0007c0 e0f7      	LDI  R31,HIGH(_S_221*2)
0007c1 c030      	RJMP _0x237
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x76:
0007c2 3dee      	CPI  R30,LOW(0xDE)
0007c3 e0a0      	LDI  R26,HIGH(0xDE)
0007c4 07fa      	CPC  R31,R26
0007c5 f419      	BRNE _0x77
0007c6 e8ec      	LDI  R30,LOW(_S_222*2)
0007c7 e0f7      	LDI  R31,HIGH(_S_222*2)
0007c8 c029      	RJMP _0x237
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x77:
0007c9 3def      	CPI  R30,LOW(0xDF)
0007ca e0a0      	LDI  R26,HIGH(0xDF)
0007cb 07fa      	CPC  R31,R26
0007cc f419      	BRNE _0x78
0007cd eaec      	LDI  R30,LOW(_S_223*2)
0007ce e0f7      	LDI  R31,HIGH(_S_223*2)
0007cf c022      	RJMP _0x237
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x78:
0007d0 32ee      	CPI  R30,LOW(0x2E)
0007d1 e0a0      	LDI  R26,HIGH(0x2E)
0007d2 07fa      	CPC  R31,R26
0007d3 f419      	BRNE _0x79
0007d4 eaec      	LDI  R30,LOW(_S_46*2)
0007d5 e0f0      	LDI  R31,HIGH(_S_46*2)
0007d6 c01b      	RJMP _0x237
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x79:
0007d7 32e0      	CPI  R30,LOW(0x20)
0007d8 e0a0      	LDI  R26,HIGH(0x20)
0007d9 07fa      	CPC  R31,R26
0007da f419      	BRNE _0x7A
0007db e4ec      	LDI  R30,LOW(_S_32*2)
0007dc e0f2      	LDI  R31,HIGH(_S_32*2)
0007dd c014      	RJMP _0x237
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x7A:
0007de 30e1      	CPI  R30,LOW(0x1)
0007df e0a0      	LDI  R26,HIGH(0x1)
0007e0 07fa      	CPC  R31,R26
0007e1 f419      	BRNE _0x7B
0007e2 ecec      	LDI  R30,LOW(_S_UP*2)
0007e3 e0f0      	LDI  R31,HIGH(_S_UP*2)
0007e4 c00d      	RJMP _0x237
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x7B:
0007e5 30e2      	CPI  R30,LOW(0x2)
0007e6 e0a0      	LDI  R26,HIGH(0x2)
0007e7 07fa      	CPC  R31,R26
0007e8 f419      	BRNE _0x7C
0007e9 eeec      	LDI  R30,LOW(_S_DOWN*2)
0007ea e0f0      	LDI  R31,HIGH(_S_DOWN*2)
0007eb c006      	RJMP _0x237
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7C:
0007ec 30e3      	CPI  R30,LOW(0x3)
0007ed e0a0      	LDI  R26,HIGH(0x3)
0007ee 07fa      	CPC  R31,R26
0007ef f469      	BRNE _0x43
0007f0 e8ec      	LDI  R30,LOW(_blank_symb*2)
0007f1 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x237:
0007f2 93fa      	ST   -Y,R31
0007f3 93ea      	ST   -Y,R30
0007f4 940e 109d 	CALL SUBOPT_0x10
0007f6 940e 109d 	CALL SUBOPT_0x10
0007f8 940e 109d 	CALL SUBOPT_0x10
0007fa 940e 109d 	CALL SUBOPT_0x10
0007fc de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x43:
                 ;}
0007fd 9629      	ADIW R28,9
0007fe 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7E:
0007ff 85a8      	LDD  R26,Y+8
000800 85b9      	LDD  R27,Y+8+1
000801 91ec      	LD   R30,X
000802 30e0      	CPI  R30,0
000803 f099      	BREQ _0x80
000804 91ed      	LD   R30,X+
000805 87a8      	STD  Y+8,R26
000806 87b9      	STD  Y+8+1,R27
000807 93ea      	ST   -Y,R30
000808 940e 10a7 	CALL SUBOPT_0x12
00080a 940e 10a7 	CALL SUBOPT_0x12
00080c 940e 10a7 	CALL SUBOPT_0x12
00080e 940e 10a7 	CALL SUBOPT_0x12
000810 de4a      	RCALL _SSD1963_PutChar16
000811 81ee      	LDD  R30,Y+6
000812 81ff      	LDD  R31,Y+6+1
000813 9670      	ADIW R30,16
000814 83ee      	STD  Y+6,R30
000815 83ff      	STD  Y+6+1,R31
000816 cfe8      	RJMP _0x7E
                 _0x80:
                 ;}
000817 962a      	ADIW R28,10
000818 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  {
                 ;    case 5 :
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10000;
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 1000;
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;      Value %= 100;
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10;
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;    break;
                 ;  }
                 ;}
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000819 940e 10ac 	CALL SUBOPT_0x13
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
00081b 940e 10be 	CALL SUBOPT_0x14
                 ;  if (j < 0) j *= -1;
00081d f412      	BRPL _0x8D
00081e 940e 10c8 	CALL SUBOPT_0x15
                 ;  k = StopY - StartY + 1;
                 _0x8D:
000820 940e 10cf 	CALL SUBOPT_0x16
                 ;  if (k < 0) k *= -1;
000822 f422      	BRPL _0x8E
000823 940e 10df 	CALL SUBOPT_0x17
000825 940e 10e4 	CALL SUBOPT_0x18
                 ;  k = k * j;
                 _0x8E:
000827 940e 10ef 	CALL SUBOPT_0x19
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x90:
000829 940e 1102 	CALL SUBOPT_0x1A
00082b f43c      	BRGE _0x91
00082c 85ea      	LDD  R30,Y+10
00082d 85fb      	LDD  R31,Y+10+1
00082e 940e 1099 	CALL SUBOPT_0xF
000830 940e 110a 	CALL SUBOPT_0x1B
000832 cff6      	RJMP _0x90
                 _0x91:
000833 c105      	RJMP _0x20C0003
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
000834 972a      	SBIW R28,10
000835 940e 15ce 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
000837 8da9      	LDD  R26,Y+25
000838 8dba      	LDD  R27,Y+25+1
000839 89ef      	LDD  R30,Y+23
00083a 8df8      	LDD  R31,Y+23+1
00083b 1bea      	SUB  R30,R26
00083c 0bfb      	SBC  R31,R27
00083d 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
00083e 2355      	TST  R21
00083f f432      	BRPL _0x92
000840 01fa      	MOVW R30,R20
000841 efaf      	LDI  R26,LOW(65535)
000842 efbf      	LDI  R27,HIGH(65535)
000843 940e 152b 	CALL __MULW12
000845 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x92:
000846 89ad      	LDD  R26,Y+21
000847 89be      	LDD  R27,Y+21+1
000848 89eb      	LDD  R30,Y+19
000849 89fc      	LDD  R31,Y+19+1
00084a 1bea      	SUB  R30,R26
00084b 0bfb      	SBC  R31,R27
00084c 87ee      	STD  Y+14,R30
00084d 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
00084e 85af      	LDD  R26,Y+15
00084f 23aa      	TST  R26
000850 f432      	BRPL _0x93
000851 efaf      	LDI  R26,LOW(65535)
000852 efbf      	LDI  R27,HIGH(65535)
000853 940e 152b 	CALL __MULW12
000855 87ee      	STD  Y+14,R30
000856 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x93:
000857 89ef      	LDD  R30,Y+23
000858 8df8      	LDD  R31,Y+23+1
000859 8da9      	LDD  R26,Y+25
00085a 8dba      	LDD  R27,Y+25+1
00085b 17ae      	CP   R26,R30
00085c 07bf      	CPC  R27,R31
00085d f418      	BRSH _0x94
00085e e0e1      	LDI  R30,LOW(1)
00085f e0f0      	LDI  R31,HIGH(1)
000860 c002      	RJMP _0x95
                 _0x94:
000861 efef      	LDI  R30,LOW(65535)
000862 efff      	LDI  R31,HIGH(65535)
                 _0x95:
000863 87ec      	STD  Y+12,R30
000864 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
000865 89eb      	LDD  R30,Y+19
000866 89fc      	LDD  R31,Y+19+1
000867 89ad      	LDD  R26,Y+21
000868 89be      	LDD  R27,Y+21+1
000869 17ae      	CP   R26,R30
00086a 07bf      	CPC  R27,R31
00086b f418      	BRSH _0x97
00086c e0e1      	LDI  R30,LOW(1)
00086d e0f0      	LDI  R31,HIGH(1)
00086e c002      	RJMP _0x98
                 _0x97:
00086f efef      	LDI  R30,LOW(65535)
000870 efff      	LDI  R31,HIGH(65535)
                 _0x98:
000871 87ea      	STD  Y+10,R30
000872 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
000873 85ae      	LDD  R26,Y+14
000874 85bf      	LDD  R27,Y+14+1
000875 01fa      	MOVW R30,R20
000876 1bea      	SUB  R30,R26
000877 0bfb      	SBC  R31,R27
000878 87e8      	STD  Y+8,R30
000879 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x9A:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
00087a 8de9      	LDD  R30,Y+25
00087b 8dfa      	LDD  R31,Y+25+1
00087c 93fa      	ST   -Y,R31
00087d 93ea      	ST   -Y,R30
00087e 89ea      	LDD  R30,Y+18
00087f 940e 1117 	CALL SUBOPT_0x1C
000881 93fa      	ST   -Y,R31
000882 93ea      	ST   -Y,R30
000883 8de9      	LDD  R30,Y+25
000884 8dfa      	LDD  R31,Y+25+1
000885 93fa      	ST   -Y,R31
000886 93ea      	ST   -Y,R30
000887 89ee      	LDD  R30,Y+22
000888 940e 1117 	CALL SUBOPT_0x1C
00088a 940e 1091 	CALL SUBOPT_0xE
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
00088c 89a8      	LDD  R26,Y+16
00088d 27bb      	CLR  R27
00088e 89e8      	LDD  R30,Y+16
00088f e0f0      	LDI  R31,0
000890 940e 152b 	CALL __MULW12
000892 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
000893 e000     +LDI R16 , LOW ( 0 )
000894 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9E:
                +
000895 1720     +CP R18 , R16
000896 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000897 f03c      	BRLT _0x9F
000898 89e9      	LDD  R30,Y+17
000899 89fa      	LDD  R31,Y+17+1
00089a 940e 1099 	CALL SUBOPT_0xF
                +
00089c 5f0f     +SUBI R16 , LOW ( - 1 )
00089d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00089e cff6      	RJMP _0x9E
                 _0x9F:
00089f 89ef      	LDD  R30,Y+23
0008a0 8df8      	LDD  R31,Y+23+1
0008a1 8da9      	LDD  R26,Y+25
0008a2 8dba      	LDD  R27,Y+25+1
0008a3 17ea      	CP   R30,R26
0008a4 07fb      	CPC  R31,R27
0008a5 f439      	BRNE _0xA1
0008a6 89eb      	LDD  R30,Y+19
0008a7 89fc      	LDD  R31,Y+19+1
0008a8 89ad      	LDD  R26,Y+21
0008a9 89be      	LDD  R27,Y+21+1
0008aa 17ea      	CP   R30,R26
0008ab 07fb      	CPC  R31,R27
0008ac f009      	BREQ _0xA2
                 _0xA1:
0008ad c001      	RJMP _0xA0
                 _0xA2:
                 ;		break;
0008ae c032      	RJMP _0x9C
                 ;
                 ;		error2 = error * 2;
                 _0xA0:
0008af 85e8      	LDD  R30,Y+8
0008b0 85f9      	LDD  R31,Y+8+1
0008b1 0fee      	LSL  R30
0008b2 1fff      	ROL  R31
0008b3 83ee      	STD  Y+6,R30
0008b4 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
0008b5 85ee      	LDD  R30,Y+14
0008b6 85ff      	LDD  R31,Y+14+1
0008b7 940e 14d9 	CALL __ANEGW1
0008b9 81ae      	LDD  R26,Y+6
0008ba 81bf      	LDD  R27,Y+6+1
0008bb 17ea      	CP   R30,R26
0008bc 07fb      	CPC  R31,R27
0008bd f474      	BRGE _0xA3
                 ;		{
                 ;			error -= deltaY;
0008be 85ae      	LDD  R26,Y+14
0008bf 85bf      	LDD  R27,Y+14+1
0008c0 940e 111d 	CALL SUBOPT_0x1D
0008c2 87e8      	STD  Y+8,R30
0008c3 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
0008c4 85ec      	LDD  R30,Y+12
0008c5 85fd      	LDD  R31,Y+12+1
0008c6 8da9      	LDD  R26,Y+25
0008c7 8dba      	LDD  R27,Y+25+1
0008c8 0fea      	ADD  R30,R26
0008c9 1ffb      	ADC  R31,R27
0008ca 8fe9      	STD  Y+25,R30
0008cb 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA3:
0008cc 81ae      	LDD  R26,Y+6
0008cd 81bf      	LDD  R27,Y+6+1
0008ce 17a4      	CP   R26,R20
0008cf 07b5      	CPC  R27,R21
0008d0 f47c      	BRGE _0xA4
                 ;		{
                 ;			error += deltaX;
0008d1 01fa      	MOVW R30,R20
0008d2 85a8      	LDD  R26,Y+8
0008d3 85b9      	LDD  R27,Y+8+1
0008d4 0fea      	ADD  R30,R26
0008d5 1ffb      	ADC  R31,R27
0008d6 87e8      	STD  Y+8,R30
0008d7 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
0008d8 85ea      	LDD  R30,Y+10
0008d9 85fb      	LDD  R31,Y+10+1
0008da 89ad      	LDD  R26,Y+21
0008db 89be      	LDD  R27,Y+21+1
0008dc 0fea      	ADD  R30,R26
0008dd 1ffb      	ADC  R31,R27
0008de 8bed      	STD  Y+21,R30
0008df 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA4:
0008e0 cf99      	RJMP _0x9A
                 _0x9C:
                 ;}
0008e1 940e 15d5 	CALL __LOADLOCR6
0008e3 966b      	ADIW R28,27
0008e4 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
0008e5 940e 10a2 	CALL SUBOPT_0x11
0008e7 940e 10a2 	CALL SUBOPT_0x11
0008e9 940e 10a2 	CALL SUBOPT_0x11
0008eb 85e8      	LDD  R30,Y+8
0008ec 85f9      	LDD  R31,Y+8+1
0008ed 940e 1122 	CALL SUBOPT_0x1E
0008ef 940e 109d 	CALL SUBOPT_0x10
0008f1 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
0008f2 940e 10a2 	CALL SUBOPT_0x11
0008f4 81ec      	LDD  R30,Y+4
0008f5 81fd      	LDD  R31,Y+4+1
0008f6 940e 1122 	CALL SUBOPT_0x1E
0008f8 940e 10a2 	CALL SUBOPT_0x11
0008fa 940e 10a2 	CALL SUBOPT_0x11
0008fc 940e 109d 	CALL SUBOPT_0x10
0008fe df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
0008ff 940e 10a2 	CALL SUBOPT_0x11
000901 940e 10a2 	CALL SUBOPT_0x11
000903 81ae      	LDD  R26,Y+6
000904 81bf      	LDD  R27,Y+6+1
000905 940e 111d 	CALL SUBOPT_0x1D
000907 93fa      	ST   -Y,R31
000908 93ea      	ST   -Y,R30
000909 940e 10a2 	CALL SUBOPT_0x11
00090b 940e 109d 	CALL SUBOPT_0x10
00090d df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
00090e 81aa      	LDD  R26,Y+2
00090f 81bb      	LDD  R27,Y+2+1
000910 940e 111d 	CALL SUBOPT_0x1D
000912 93fa      	ST   -Y,R31
000913 93ea      	ST   -Y,R30
000914 940e 10a2 	CALL SUBOPT_0x11
000916 940e 10a2 	CALL SUBOPT_0x11
000918 940e 10a2 	CALL SUBOPT_0x11
00091a 940e 109d 	CALL SUBOPT_0x10
00091c defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x20C0004:
00091d 962c      	ADIW R28,12
00091e 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
00091f 940e 10ac 	CALL SUBOPT_0x13
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
000921 940e 10be 	CALL SUBOPT_0x14
                 ;  if (j < 0) j *= -1;
000923 f412      	BRPL _0xA5
000924 940e 10c8 	CALL SUBOPT_0x15
                 ;  k = StopY - StartY + 1;
                 _0xA5:
000926 940e 10cf 	CALL SUBOPT_0x16
                 ;  if (k < 0) k *= -1;
000928 f422      	BRPL _0xA6
000929 940e 10df 	CALL SUBOPT_0x17
00092b 940e 10e4 	CALL SUBOPT_0x18
                 ;  k = k * j;
                 _0xA6:
00092d 940e 10ef 	CALL SUBOPT_0x19
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA8:
00092f 940e 1102 	CALL SUBOPT_0x1A
000931 f43c      	BRGE _0xA9
000932 85ea      	LDD  R30,Y+10
000933 85fb      	LDD  R31,Y+10+1
000934 940e 1099 	CALL SUBOPT_0xF
000936 940e 110a 	CALL SUBOPT_0x1B
000938 cff6      	RJMP _0xA8
                 _0xA9:
                 _0x20C0003:
000939 8119      	LDD  R17,Y+1
00093a 8108      	LDD  R16,Y+0
00093b 9664      	ADIW R28,20
00093c 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;char i;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ; 0000 0009 {
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
00093d 931a      	ST   -Y,R17
00093e 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00093f 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000940 940e 1070 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
000942 ede3      	LDI  R30,LOW(211)
000943 940e 1129 	CALL SUBOPT_0x1F
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000945 c05b      	RJMP _0x20C0002
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000946 931a      	ST   -Y,R17
000947 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000948 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000949 940e 1070 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
00094b e9e3      	LDI  R30,LOW(147)
00094c 940e 1129 	CALL SUBOPT_0x1F
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
00094e c052      	RJMP _0x20C0002
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
00094f 981a      	CBI  0x3,2
                 ;  delay_ms(5);
000950 e0e5      	LDI  R30,LOW(5)
000951 e0f0      	LDI  R31,HIGH(5)
000952 940e 105e 	CALL SUBOPT_0x4
                 ;  spi(0b10010000);
000954 e9e0      	LDI  R30,LOW(144)
000955 93ea      	ST   -Y,R30
000956 940e 1042 	CALL _spi
                 ;  delay_us(100);
                +
000958 e980     +LDI R24 , LOW ( 400 )
000959 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00095a 9701     +SBIW R24 , 1
00095b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
00095c e0e0      	LDI  R30,LOW(0)
00095d 93ea      	ST   -Y,R30
00095e 940e 1042 	CALL _spi
                 ;  spi(0x00);
000960 e0e0      	LDI  R30,LOW(0)
000961 93ea      	ST   -Y,R30
000962 940e 1042 	CALL _spi
                 ;  TOUCH_CS = 1;
000964 9a1a      	SBI  0x3,2
                 ;}
000965 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
000966 931a      	ST   -Y,R17
000967 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000968 dfd4      	RCALL _TSC2046_getADC_X
000969 51e4      	SUBI R30,LOW(1300)
00096a 40f5      	SBCI R31,HIGH(1300)
00096b 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
00096c 2311      	TST  R17
00096d f412      	BRPL _0xBA
                +
00096e e000     +LDI R16 , LOW ( 0 )
00096f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xBA:
000970 940e 1142 	CALL SUBOPT_0x20
                +
000972 e5e5     +LDI R30 , LOW ( 0x4275D555 )
000973 edf5     +LDI R31 , HIGH ( 0x4275D555 )
000974 e765     +LDI R22 , BYTE3 ( 0x4275D555 )
000975 e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
000976 940e 114a 	CALL SUBOPT_0x21
                 ;  return res;
000978 c028      	RJMP _0x20C0002
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
000979 931a      	ST   -Y,R17
00097a 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00097b dfca      	RCALL _TSC2046_getADC_Y
00097c 53e4      	SUBI R30,LOW(2100)
00097d 40f8      	SBCI R31,HIGH(2100)
00097e 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
00097f 2311      	TST  R17
000980 f412      	BRPL _0xBB
                +
000981 e000     +LDI R16 , LOW ( 0 )
000982 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xBB:
000983 940e 1142 	CALL SUBOPT_0x20
                +
000985 e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
000986 e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
000987 ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
000988 e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
000989 940e 114a 	CALL SUBOPT_0x21
                 ;  return res;
00098b c015      	RJMP _0x20C0002
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;  //TOUCH_CS = 0;
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  //delay_us(10);
                 ;  //TOUCH_IRQ_PORT = 1;
                 ;  //TOUCH_CS = 1;
                 ;  if (TOUCH_IRQ < 1)
00098c 931a      	ST   -Y,R17
00098d 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
00098e e010      	LDI  R17,0
00098f e0a0      	LDI  R26,0
000990 990b      	SBIC 0x1,3
000991 e0a1      	LDI  R26,1
000992 30a1      	CPI  R26,LOW(0x1)
000993 f460      	BRSH _0xBC
                 ;  {
                 ;    tempX = 0;
000994 940e 1151 	CALL SUBOPT_0x22
                 ;    tempY = 0;
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000996 e000      	LDI  R16,LOW(0)
                 _0xBE:
000997 3100      	CPI  R16,16
000998 f420      	BRSH _0xBF
                 ;    {
                 ;      tempX += TSC2046_getX();
000999 940e 1163 	CALL SUBOPT_0x23
                 ;      tempY += TSC2046_getY();
                 ;    }
00099b 5f0f      	SUBI R16,-1
00099c cffa      	RJMP _0xBE
                 _0xBF:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
00099d 940e 1190 	CALL SUBOPT_0x24
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
                 ;    TSC2046_Stop();
                 ;    res = 1;
00099f e011      	LDI  R17,LOW(1)
                 ;  }
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  return res;
                 _0xBC:
0009a0 2fe1      	MOV  R30,R17
                 _0x20C0002:
0009a1 9109      	LD   R16,Y+
0009a2 9119      	LD   R17,Y+
0009a3 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  TOUCH_CS = 0;
0009a4 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
0009a5 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
0009a6 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0009a7 958a     +DEC R24
0009a8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
0009a9 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
0009aa 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
0009ab 940e 1151 	CALL SUBOPT_0x22
                 ;    tempY = 0;
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
0009ad 2444      	CLR  R4
                 _0xC9:
0009ae e1e0      	LDI  R30,LOW(16)
0009af 164e      	CP   R4,R30
0009b0 f420      	BRSH _0xCA
                 ;    {
                 ;      tempX += TSC2046_getX();
0009b1 940e 1163 	CALL SUBOPT_0x23
                 ;      tempY += TSC2046_getY();
                 ;    }
0009b3 9443      	INC  R4
0009b4 cff9      	RJMP _0xC9
                 _0xCA:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
0009b5 940e 1190 	CALL SUBOPT_0x24
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
                 ;    TSC2046_Stop();
                 ;}
0009b7 9508      	RET
                 ;#include "SPI_routines.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : SPI_routines.c ******
                 ;//**************************************************
                 ;#include "SPI_routines.h"
                 ;
                 ;unsigned char SPI_transmit(unsigned char data)
                 ; 0000 000A {
                 ;// Start transmission
                 ;SPDR = data;
                 ;	data -> Y+0
                 ;
                 ;// Wait for transmission complete
                 ;while(!(SPSR & (1<<SPIF)));
                 ;  data = SPDR;
                 ;
                 ;return(data);
                 ;}
                 ;
                 ;unsigned char SPI_receive(void)
                 ;{
                 ;unsigned char data;
                 ;// Wait for reception complete
                 ;
                 ;SPDR = 0xff;
                 ;	data -> R17
                 ;while(!(SPSR & (1<<SPIF)));
                 ;  data = SPDR;
                 ;
                 ;// Return data register
                 ;return data;
                 ;}
                 ;#include "SD_routines.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : SD_routines.c ******
                 ;//**************************************************
                 ;#include "SPI_routines.h"
                 ;#include "SD_routines.h"
                 ;
                 ;//******************************************************************
                 ;//Function: to initialize the SD card in SPI mode
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_init(void)
                 ; 0000 000B {
                 ;  unsigned char i, response, retry = 0;
                 ;
                 ;  SD_CS_ASSERT;
                 ;	i -> R17
                 ;	response -> R16
                 ;	retry -> R19
                 ;  do
                 ;  {
                 ;    for(i=0;i<10;i++) SPI_transmit(0xff);
                 ;    retry++;
                 ;    if(retry>0xfe) return 1; //time out
                 ;  }
                 ;  while(response != 0x01);
                 ;
                 ;  SD_CS_DEASSERT;
                 ;
                 ;  SPI_transmit (0xff);
                 ;  SPI_transmit (0xff);
                 ;
                 ;  retry = 0;
                 ;
                 ;  do
                 ;  {
                 ;    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
                 ;    response = SD_sendCommand(SEND_OP_COND, 0); //resend command (for compatibility with some cards)
                 ;    retry++;
                 ;    if(retry>0xfe) return 1; //time out
                 ;  }
                 ;  while(response);
                 ;
                 ;
                 ;  SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
                 ;  SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512
                 ;
                 ;  return 0; //normal return
                 ;}
                 ;
                 ;//******************************************************************
                 ;//Function: to send a command to SD card
                 ;//Arguments: unsigned char (8-bit command value)
                 ;// & unsigned long (32-bit command argument)
                 ;//return: unsigned char; response byte
                 ;//******************************************************************
                 ;unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
                 ;{
                 ;unsigned char response, retry=0;
                 ;
                 ;
                 ;SD_CS_ASSERT;
                 ;	cmd -> Y+6
                 ;	arg -> Y+2
                 ;	response -> R17
                 ;	retry -> R16
                 ;
                 ;
                 ;SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
                 ;SPI_transmit(arg>>24);
                 ;SPI_transmit(arg>>16);
                 ;SPI_transmit(arg>>8);
                 ;SPI_transmit(arg);
                 ;SPI_transmit(0x95);
                 ;
                 ;
                 ;while((response = SPI_receive()) == 0xff) //wait response
                 ;   if(retry++ > 0xfe) break; //time out error
                 ;
                 ;
                 ;SPI_receive(); //extra 8 CLK
                 ;SD_CS_DEASSERT;
                 ;
                 ;
                 ;return response; //return state
                 ;}
                 ;
                 ;
                 ;//******************************************************************
                 ;//Function: to read a single block from SD card
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_readSingleBlock(unsigned long startBlock)
                 ;{
                 ;unsigned char response;
                 ;unsigned int i, retry=0;
                 ;
                 ;response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock<<9); //read a Block command
                 ;	startBlock -> Y+6
                 ;	response -> R17
                 ;	i -> R18,R19
                 ;	retry -> R20,R21
                 ;//block address converted to starting address of 512 byte Block
                 ;if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
                 ;  return response;
                 ;
                 ;SD_CS_ASSERT;
                 ;
                 ;while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
                 ;  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
                 ;
                 ;  for(i=0; i<512; i++) //read 512 bytes
                 ;  buffer[i] = SPI_receive();
                 ;SPI_receive();
                 ;
                 ;
                 ;SPI_receive(); //extra 8 clock pulses
                 ;SD_CS_DEASSERT;
                 ;return 0;
                 ;}
                 ;
                 ;//******************************************************************
                 ;//Function: to write to a single block of SD card
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_writeSingleBlock(unsigned long startBlock)
                 ;{
                 ;unsigned char response;
                 ;unsigned int i, retry=0;
                 ;
                 ;
                 ;response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock<<9); //write a Block command
                 ;	startBlock -> Y+6
                 ;	response -> R17
                 ;	i -> R18,R19
                 ;	retry -> R20,R21
                 ;if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
                 ;return response;
                 ;
                 ;
                 ;SD_CS_ASSERT;
                 ;
                 ;
                 ;SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
                 ;
                 ;
                 ;for(i=0; i<512; i++)    //send 512 bytes data
                 ;  SPI_transmit(buffer[i]);
                 ;SPI_transmit(0xff);
                 ;
                 ;
                 ;response = SPI_receive();
                 ;
                 ;
                 ;if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
                 ;{                              //AAA='101'-data rejected due to CRC error
                 ;  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
                 ;  return response;
                 ;}
                 ;
                 ;
                 ;while(!SPI_receive()) //wait for SD card to complete writing and get idle
                 ;if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
                 ;
                 ;
                 ;SD_CS_DEASSERT;
                 ;SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
                 ;SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
                 ;
                 ;
                 ;while(!SPI_receive()) //wait for SD card to complete writing and get idle
                 ;   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
                 ;SD_CS_DEASSERT;
                 ;
                 ;
                 ;return 0;
                 ;}
                 ;#include "FAT32.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : FAT32.c ******
                 ;//**************************************************
                 ;#include "FAT32.h"
                 ;#include "SD_routines.h"
                 ;
                 ;//***************************************************************************
                 ;//Function: to read data from boot sector of SD card, to determine important
                 ;//parameters like bytesPerSector, sectorsPerCluster etc.
                 ;//Arguments: none
                 ;//return: none
                 ;//***************************************************************************
                 ;unsigned char getBootSectorData (void)
                 ; 0000 000C {
                 ;  struct BS_Structure *bpb; //mapping the buffer onto the structure
                 ;  struct MBRinfo_Structure *mbr;
                 ;  struct partitionInfo_Structure *partition;
                 ;  unsigned long dataSectors;
                 ;
                 ;  unusedSectors = 0;
                 ;	*bpb -> R16,R17
                 ;	*mbr -> R18,R19
                 ;	*partition -> R20,R21
                 ;	dataSectors -> Y+6
                 ;
                 ;  SD_readSingleBlock(0);
                 ;  bpb = (struct BS_Structure *)buffer;
                 ;
                 ;  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) //check if it is boot sector
                 ;  {
                 ;    mbr = (struct MBRinfo_Structure *) buffer;         //if it is not boot sector, it must be MBR
                 ;    if(mbr->signature != 0xaa55) return 1;            //if it is not even MBR then it's not FAT32
                 ;    partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
                 ;    unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
                 ;    SD_readSingleBlock(partition->firstSector);//read the bpb sector
                 ;    bpb = (struct BS_Structure *)buffer;
                 ;    if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)  return 1;
                 ;  }
                 ;
                 ;  bytesPerSector      = bpb->bytesPerSector;
                 ;  sectorPerCluster    = bpb->sectorPerCluster;
                 ;  reservedSectorCount = bpb->reservedSectorCount;
                 ;  rootCluster         = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
                 ;  firstDataSector     = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
                 ;  dataSectors         = bpb->totalSectors_F32 - bpb->reservedSectorCount - ( bpb->numberofFATs * bpb->FATsize_F32);
                 ;  totalClusters       = dataSectors / sectorPerCluster;
                 ;
                 ;  if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
                 ;    freeClusterCountUpdated = 0;
                 ;  else freeClusterCountUpdated = 1;
                 ;
                 ;  return 0;
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to calculate first sector address of any given cluster
                 ;//Arguments: cluster number for which first sector is to be found
                 ;//return: first sector address
                 ;//***************************************************************************
                 ;unsigned long getFirstSector(unsigned long clusterNumber)
                 ;{
                 ;  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
                 ;	clusterNumber -> Y+0
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: get cluster entry value from FAT to find out the next cluster in the chain
                 ;//or set new cluster entry in FAT
                 ;//Arguments: 1. current cluster number, 2. get_set (=GET, if next cluster is to be found or = SET,
                 ;//if next cluster is to be set 3. next cluster number, if argument#2 = SET, else 0
                 ;//return: next cluster number, if if argument#2 = GET, else 0
                 ;//****************************************************************************
                 ;unsigned long getSetNextCluster (unsigned long clusterNumber,
                 ;                                 unsigned char get_set,
                 ;                                 unsigned long clusterEntry)
                 ;{
                 ;  unsigned int  FATEntryOffset;
                 ;  unsigned long *FATEntryValue;
                 ;  unsigned long FATEntrySector;
                 ;  unsigned char retry = 0;
                 ;
                 ;  //get sector number of the cluster entry in the FAT
                 ;  FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
                 ;	clusterNumber -> Y+15
                 ;	get_set -> Y+14
                 ;	clusterEntry -> Y+10
                 ;	FATEntryOffset -> R16,R17
                 ;	*FATEntryValue -> R18,R19
                 ;	FATEntrySector -> Y+6
                 ;	retry -> R21
                 ;  //get the offset address in that sector number
                 ;  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
                 ;  //read the sector into a buffer
                 ;  while(retry <10)
                 ;  {
                 ;    if(!SD_readSingleBlock(FATEntrySector)) break;
                 ;    retry++;
                 ;  }
                 ;
                 ;  //get the cluster address from the buffer
                 ;  FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
                 ;
                 ;  if(get_set == GET) return ((*FATEntryValue) & 0x0fffffff);
                 ;
                 ;  *FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
                 ;
                 ;  SD_writeSingleBlock(FATEntrySector);
                 ;
                 ;  return 0;
                 ;}
                 ;
                 ;//********************************************************************************************
                 ;//Function: to get or set next free cluster or total free clusters in FSinfo sector of SD card
                 ;//Arguments: 1.flag:TOTAL_FREE or NEXT_FREE,
                 ;//           2.flag: GET or SET
                 ;//           3.new FS entry, when argument2 is SET; or 0, when argument2 is GET
                 ;//return: -next free cluster, if arg1 is NEXT_FREE & arg2 is GET
                 ;//        -total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
                 ;//        -0xffffffff, if any error or if arg2 is SET
                 ;//********************************************************************************************
                 ;unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
                 ;{
                 ;  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
                 ;  unsigned char error;
                 ;
                 ;  SD_readSingleBlock(unusedSectors + 1);
                 ;	totOrNext -> Y+9
                 ;	get_set -> Y+8
                 ;	FSEntry -> Y+4
                 ;	*FS -> R16,R17
                 ;	error -> R19
                 ;
                 ;  if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
                 ;    return 0xffffffff;
                 ;
                 ;
                 ;  if(get_set == GET)
                 ;  {
                 ;    if(totOrNext == TOTAL_FREE) return(FS->freeClusterCount);
                 ;    else // when totOrNext = NEXT_FREE
                 ;    return(FS->nextFreeCluster);
                 ;  }
                 ;  else
                 ;  {
                 ;    if(totOrNext == TOTAL_FREE) FS->freeClusterCount = FSEntry;
                 ;    else // when totOrNext = NEXT_FREE
                 ;      FS->nextFreeCluster = FSEntry;
                 ;    error = SD_writeSingleBlock(unusedSectors + 1); return error;   //update FSinfo
                 ;  }
                 ;  return 0xffffffff;
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to convert normal short file name into FAT format
                 ;//Arguments: pointer to the file name
                 ;//return: 0-if no error, 1-if error
                 ;//****************************************************************************
                 ;unsigned char convertFileName (unsigned char *fileName)
                 ;{
                 ;  unsigned char fileNameFAT[11];
                 ;  unsigned char j, k, dot;
                 ;
                 ;  for(j = 0; j < 11; j++)
                 ;	*fileName -> Y+15
                 ;	fileNameFAT -> Y+4
                 ;	j -> R17
                 ;	k -> R16
                 ;	dot -> R19
                 ;    if (fileName[j] == '.') dot = j;
                 ;
                 ;  if(dot>8) return dot;
                 ;
                 ;  for(k=0; k<dot; k++) //setting file name
                 ;    fileNameFAT[k] = fileName[k];
                 ;    fileNameFAT[k] = ' ';
                 ;  for(k=8; k<11; k++) //setting file extention
                 ;  {
                 ;    if (fileName[dot] != 0)
                 ;      fileNameFAT[k] = fileName[dot++];
                 ;    else //filling extension trail with blanks
                 ;      while( k < 11)
                 ;        fileNameFAT[k++] = ' ';
                 ;
                 ;  for(j = 0; j < 11; j++) //converting small letters to caps
                 ;    if ((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
                 ;      fileNameFAT[j] -= 0x20;
                 ;
                 ;  for(j = 0; j < 11; j++)
                 ;    fileName[j] = fileNameFAT[j];
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to get DIR/FILE list or a single file address (cluster number) or to delete a specified file
                 ;//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
                 ;//return: first cluster of the file, if flag = GET_FILE
                 ;//        print file/dir list of the root directory, if flag = GET_LIST
                 ;//        Delete the file mentioned in arg#2, if flag = DELETE
                 ;//****************************************************************************
                 ;struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
                 ;{
                 ;unsigned long cluster, sector, firstSector;
                 ;struct dir_Structure *dir;
                 ;unsigned int i;
                 ;unsigned char j;
                 ;
                 ;cluster = rootCluster; //root cluster
                 ;	flag -> Y+20
                 ;	*fileName -> Y+18
                 ;	cluster -> Y+14
                 ;	sector -> Y+10
                 ;	firstSector -> Y+6
                 ;	*dir -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R21
                 ;
                 ;while(1)
                 ;{
                 ;   firstSector = getFirstSector (cluster);
                 ;
                 ;   for(sector = 0; sector < sectorPerCluster; sector++)
                 ;   {
                 ;     SD_readSingleBlock (firstSector + sector);
                 ;
                 ;     for(i=0; i<bytesPerSector; i+=32)
                 ;     {
                 ;            dir = (struct dir_Structure *) &buffer[i];
                 ;
                 ;        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
                 ;        {
                 ;          if((flag == GET_FILE) || (flag == DELETE))
                 ;          //transmitString("File does not exist!");
                 ;          return 0;
                 ;        }
                 ;
                 ;        else if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
                 ;        {
                 ;          if((flag == GET_FILE) || (flag == DELETE))
                 ;          {
                 ;            for(j=0; j<11; j++)
                 ;              if(dir->name[j] != fileName[j]) break;
                 ;            if(j == 11)
                 ;            {
                 ;              if(flag == GET_FILE)
                 ;              return (dir);
                 ;            }
                 ;          }
                 ;       }
                 ;     }
                 ;   }
                 ;   cluster = (getSetNextCluster (cluster, GET, 0));
                 ;   if(cluster > 0x0ffffff6) return 0;
                 ;   if(cluster == 0)
                 ;   {
                 ;   //transmitString("Error in getting cluster");
                 ;   return 0;}
                 ; }
                 ;return 0;
                 ;}
                 ;
                 ;#define M_PI 3.14159265
                 ;
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 0015 #endasm
                 ;#include <i2c.h>
                 ;
                 ;
                 ;#define sinf sin
                 ;unsigned int k;
                 ;unsigned C_H, C_L;
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 240
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 004F {
                 _usart0_rx_isr:
0009b8 940e 11b0 	CALL SUBOPT_0x25
                 ; 0000 0050 char status,data;
                 ; 0000 0051 status=UCSR0A;
0009ba 931a      	ST   -Y,R17
0009bb 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0009bc b11b      	IN   R17,11
                 ; 0000 0052 data=UDR0;
0009bd b10c      	IN   R16,12
                 ; 0000 0053 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0009be 2fe1      	MOV  R30,R17
0009bf 71ec      	ANDI R30,LOW(0x1C)
0009c0 f4d9      	BRNE _0x160
                 ; 0000 0054    {
                 ; 0000 0055    rx_buffer0[rx_wr_index0++]=data;
0009c1 91e0 08c6 	LDS  R30,_rx_wr_index0
0009c3 5fef      	SUBI R30,-LOW(1)
0009c4 93e0 08c6 	STS  _rx_wr_index0,R30
0009c6 940e 11b6 	CALL SUBOPT_0x26
0009c8 8300      	ST   Z,R16
                 ; 0000 0056 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0057    // special case for receiver buffer size=256
                 ; 0000 0058    if (++rx_counter0 == 0)
                 ; 0000 0059       {
                 ; 0000 005A #else
                 ; 0000 005B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0009c9 91a0 08c6 	LDS  R26,_rx_wr_index0
0009cb 3fa0      	CPI  R26,LOW(0xF0)
0009cc f419      	BRNE _0x161
0009cd e0e0      	LDI  R30,LOW(0)
0009ce 93e0 08c6 	STS  _rx_wr_index0,R30
                 ; 0000 005C    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x161:
0009d0 91a0 08c8 	LDS  R26,_rx_counter0
0009d2 5faf      	SUBI R26,-LOW(1)
0009d3 93a0 08c8 	STS  _rx_counter0,R26
0009d5 3fa0      	CPI  R26,LOW(0xF0)
0009d6 f429      	BRNE _0x162
                 ; 0000 005D       {
                 ; 0000 005E       rx_counter0=0;
0009d7 e0e0      	LDI  R30,LOW(0)
0009d8 93e0 08c8 	STS  _rx_counter0,R30
                 ; 0000 005F #endif
                 ; 0000 0060       rx_buffer_overflow0=1;
0009da 9468      	SET
0009db f821      	BLD  R2,1
                 ; 0000 0061       }
                 ; 0000 0062    }
                 _0x162:
                 ; 0000 0063 }
                 _0x160:
0009dc 9109      	LD   R16,Y+
0009dd 9119      	LD   R17,Y+
0009de c0bc      	RJMP _0x23F
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 006A {
                 _getchar0:
                 ; 0000 006B char data;
                 ; 0000 006C while (rx_counter0==0);
0009df 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x163:
0009e0 91e0 08c8 	LDS  R30,_rx_counter0
0009e2 30e0      	CPI  R30,0
0009e3 f3e1      	BREQ _0x163
                 ; 0000 006D data=rx_buffer0[rx_rd_index0++];
0009e4 91e0 08c7 	LDS  R30,_rx_rd_index0
0009e6 5fef      	SUBI R30,-LOW(1)
0009e7 93e0 08c7 	STS  _rx_rd_index0,R30
0009e9 940e 11b6 	CALL SUBOPT_0x26
0009eb 8110      	LD   R17,Z
                 ; 0000 006E #if RX_BUFFER_SIZE0 != 256
                 ; 0000 006F if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0009ec 91a0 08c7 	LDS  R26,_rx_rd_index0
0009ee 3fa0      	CPI  R26,LOW(0xF0)
0009ef f419      	BRNE _0x166
0009f0 e0e0      	LDI  R30,LOW(0)
0009f1 93e0 08c7 	STS  _rx_rd_index0,R30
                 ; 0000 0070 #endif
                 ; 0000 0071 #asm("cli")
                 _0x166:
0009f3 94f8      	cli
                 ; 0000 0072 --rx_counter0;
0009f4 91e0 08c8 	LDS  R30,_rx_counter0
0009f6 50e1      	SUBI R30,LOW(1)
0009f7 93e0 08c8 	STS  _rx_counter0,R30
                 ; 0000 0073 #asm("sei")
0009f9 9478      	sei
                 ; 0000 0074 return data;
0009fa c1c7      	RJMP _0x20C0001
                 ; 0000 0075 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void getclear0(void)
                 ; 0000 007A {
                 _getclear0:
                 ; 0000 007B while (rx_counter0 > 0)
                 _0x167:
0009fb 91a0 08c8 	LDS  R26,_rx_counter0
0009fd 30a1      	CPI  R26,LOW(0x1)
0009fe f0a0      	BRLO _0x169
                 ; 0000 007C {
                 ; 0000 007D    rx_rd_index0++;
0009ff 91e0 08c7 	LDS  R30,_rx_rd_index0
000a01 5fef      	SUBI R30,-LOW(1)
000a02 93e0 08c7 	STS  _rx_rd_index0,R30
                 ; 0000 007E    #if RX_BUFFER_SIZE0 != 256
                 ; 0000 007F    if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
000a04 91a0 08c7 	LDS  R26,_rx_rd_index0
000a06 3fa0      	CPI  R26,LOW(0xF0)
000a07 f419      	BRNE _0x16A
000a08 e0e0      	LDI  R30,LOW(0)
000a09 93e0 08c7 	STS  _rx_rd_index0,R30
                 ; 0000 0080    #endif
                 ; 0000 0081    #asm("cli")
                 _0x16A:
000a0b 94f8      	cli
                 ; 0000 0082    --rx_counter0;
000a0c 91e0 08c8 	LDS  R30,_rx_counter0
000a0e 50e1      	SUBI R30,LOW(1)
000a0f 93e0 08c8 	STS  _rx_counter0,R30
                 ; 0000 0083    #asm("sei")
000a11 9478      	sei
                 ; 0000 0084 }
000a12 cfe8      	RJMP _0x167
                 _0x169:
                 ; 0000 0085 }
000a13 9508      	RET
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0093 {
                 _usart0_tx_isr:
000a14 940e 11b0 	CALL SUBOPT_0x25
                 ; 0000 0094 if (tx_counter0)
000a16 91e0 08d3 	LDS  R30,_tx_counter0
000a18 30e0      	CPI  R30,0
000a19 f099      	BREQ _0x16B
                 ; 0000 0095    {
                 ; 0000 0096    --tx_counter0;
000a1a 50e1      	SUBI R30,LOW(1)
000a1b 93e0 08d3 	STS  _tx_counter0,R30
                 ; 0000 0097    UDR0=tx_buffer0[tx_rd_index0++];
000a1d 91e0 08d2 	LDS  R30,_tx_rd_index0
000a1f 5fef      	SUBI R30,-LOW(1)
000a20 93e0 08d2 	STS  _tx_rd_index0,R30
000a22 940e 11bb 	CALL SUBOPT_0x27
000a24 81e0      	LD   R30,Z
000a25 b9ec      	OUT  0xC,R30
                 ; 0000 0098 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0099    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000a26 91a0 08d2 	LDS  R26,_tx_rd_index0
000a28 30a8      	CPI  R26,LOW(0x8)
000a29 f419      	BRNE _0x16C
000a2a e0e0      	LDI  R30,LOW(0)
000a2b 93e0 08d2 	STS  _tx_rd_index0,R30
                 ; 0000 009A #endif
                 ; 0000 009B    }
                 _0x16C:
                 ; 0000 009C }
                 _0x16B:
000a2d c06d      	RJMP _0x23F
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar0(char c)
                 ; 0000 00A3 {
                 _putchar0:
                 ; 0000 00A4 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x16D:
000a2e 91a0 08d3 	LDS  R26,_tx_counter0
000a30 30a8      	CPI  R26,LOW(0x8)
000a31 f3e1      	BREQ _0x16D
                 ; 0000 00A5 #asm("cli")
000a32 94f8      	cli
                 ; 0000 00A6 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000a33 91e0 08d3 	LDS  R30,_tx_counter0
000a35 30e0      	CPI  R30,0
000a36 f411      	BRNE _0x171
000a37 995d      	SBIC 0xB,5
000a38 c016      	RJMP _0x170
                 _0x171:
                 ; 0000 00A7    {
                 ; 0000 00A8    tx_buffer0[tx_wr_index0++]=c;
000a39 91e0 08d1 	LDS  R30,_tx_wr_index0
000a3b 5fef      	SUBI R30,-LOW(1)
000a3c 93e0 08d1 	STS  _tx_wr_index0,R30
000a3e 940e 11bb 	CALL SUBOPT_0x27
000a40 81a8      	LD   R26,Y
000a41 83a0      	STD  Z+0,R26
                 ; 0000 00A9 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00AA    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000a42 91a0 08d1 	LDS  R26,_tx_wr_index0
000a44 30a8      	CPI  R26,LOW(0x8)
000a45 f419      	BRNE _0x173
000a46 e0e0      	LDI  R30,LOW(0)
000a47 93e0 08d1 	STS  _tx_wr_index0,R30
                 ; 0000 00AB #endif
                 ; 0000 00AC    ++tx_counter0;
                 _0x173:
000a49 91e0 08d3 	LDS  R30,_tx_counter0
000a4b 5fef      	SUBI R30,-LOW(1)
000a4c 93e0 08d3 	STS  _tx_counter0,R30
                 ; 0000 00AD    }
                 ; 0000 00AE else
000a4e c002      	RJMP _0x174
                 _0x170:
                 ; 0000 00AF    UDR0=c;
000a4f 81e8      	LD   R30,Y
000a50 b9ec      	OUT  0xC,R30
                 ; 0000 00B0 #asm("sei")
                 _0x174:
000a51 9478      	sei
                 ; 0000 00B1 }
000a52 9621      	ADIW R28,1
000a53 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00C4 {
                 _usart1_rx_isr:
000a54 940e 11b0 	CALL SUBOPT_0x25
                 ; 0000 00C5 char status,data;
                 ; 0000 00C6 status=UCSR1A;
000a56 931a      	ST   -Y,R17
000a57 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000a58 9110 009b 	LDS  R17,155
                 ; 0000 00C7 data=UDR1;
000a5a 9100 009c 	LDS  R16,156
                 ; 0000 00C8 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000a5c 2fe1      	MOV  R30,R17
000a5d 71ec      	ANDI R30,LOW(0x1C)
000a5e f4e9      	BRNE _0x175
                 ; 0000 00C9    {
                 ; 0000 00CA    rx_buffer1[rx_wr_index1++]=data;
000a5f 91e0 08f4 	LDS  R30,_rx_wr_index1
000a61 5fef      	SUBI R30,-LOW(1)
000a62 93e0 08f4 	STS  _rx_wr_index1,R30
000a64 50e1      	SUBI R30,LOW(1)
000a65 e0f0      	LDI  R31,0
000a66 52ec      	SUBI R30,LOW(-_rx_buffer1)
000a67 4ff7      	SBCI R31,HIGH(-_rx_buffer1)
000a68 8300      	ST   Z,R16
                 ; 0000 00CB #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00CC    // special case for receiver buffer size=256
                 ; 0000 00CD    if (++rx_counter1 == 0)
                 ; 0000 00CE       {
                 ; 0000 00CF #else
                 ; 0000 00D0    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000a69 91a0 08f4 	LDS  R26,_rx_wr_index1
000a6b 32a0      	CPI  R26,LOW(0x20)
000a6c f419      	BRNE _0x176
000a6d e0e0      	LDI  R30,LOW(0)
000a6e 93e0 08f4 	STS  _rx_wr_index1,R30
                 ; 0000 00D1    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0x176:
000a70 91a0 08f6 	LDS  R26,_rx_counter1
000a72 5faf      	SUBI R26,-LOW(1)
000a73 93a0 08f6 	STS  _rx_counter1,R26
000a75 32a0      	CPI  R26,LOW(0x20)
000a76 f429      	BRNE _0x177
                 ; 0000 00D2       {
                 ; 0000 00D3       rx_counter1=0;
000a77 e0e0      	LDI  R30,LOW(0)
000a78 93e0 08f6 	STS  _rx_counter1,R30
                 ; 0000 00D4 #endif
                 ; 0000 00D5       rx_buffer_overflow1=1;
000a7a 9468      	SET
000a7b f822      	BLD  R2,2
                 ; 0000 00D6       }
                 ; 0000 00D7    }
                 _0x177:
                 ; 0000 00D8 }
                 _0x175:
000a7c 9109      	LD   R16,Y+
000a7d 9119      	LD   R17,Y+
000a7e c01c      	RJMP _0x23F
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 00DD {
                 ; 0000 00DE char data;
                 ; 0000 00DF while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 00E0 data=rx_buffer1[rx_rd_index1++];
                 ; 0000 00E1 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00E2 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 00E3 #endif
                 ; 0000 00E4 #asm("cli")
                 ; 0000 00E5 --rx_counter1;
                 ; 0000 00E6 #asm("sei")
                 ; 0000 00E7 return data;
                 ; 0000 00E8 }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 128
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 00F6 {
                 _usart1_tx_isr:
000a7f 940e 11b0 	CALL SUBOPT_0x25
                 ; 0000 00F7 if (tx_counter1)
000a81 91e0 0979 	LDS  R30,_tx_counter1
000a83 30e0      	CPI  R30,0
000a84 f0b1      	BREQ _0x17C
                 ; 0000 00F8    {
                 ; 0000 00F9    --tx_counter1;
000a85 50e1      	SUBI R30,LOW(1)
000a86 93e0 0979 	STS  _tx_counter1,R30
                 ; 0000 00FA    UDR1=tx_buffer1[tx_rd_index1++];
000a88 91e0 0978 	LDS  R30,_tx_rd_index1
000a8a 5fef      	SUBI R30,-LOW(1)
000a8b 93e0 0978 	STS  _tx_rd_index1,R30
000a8d 50e1      	SUBI R30,LOW(1)
000a8e e0f0      	LDI  R31,0
000a8f 50e9      	SUBI R30,LOW(-_tx_buffer1)
000a90 4ff7      	SBCI R31,HIGH(-_tx_buffer1)
000a91 81e0      	LD   R30,Z
000a92 93e0 009c 	STS  156,R30
                 ; 0000 00FB #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00FC    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000a94 91a0 0978 	LDS  R26,_tx_rd_index1
000a96 38a0      	CPI  R26,LOW(0x80)
000a97 f419      	BRNE _0x17D
000a98 e0e0      	LDI  R30,LOW(0)
000a99 93e0 0978 	STS  _tx_rd_index1,R30
                 ; 0000 00FD #endif
                 ; 0000 00FE    }
                 _0x17D:
                 ; 0000 00FF }
                 _0x17C:
                 _0x23F:
000a9b 91e9      	LD   R30,Y+
000a9c bfef      	OUT  SREG,R30
000a9d 91f9      	LD   R31,Y+
000a9e 91e9      	LD   R30,Y+
000a9f 91a9      	LD   R26,Y+
000aa0 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar1(char c)
                 ; 0000 0104 {
                 ; 0000 0105 while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 ; 0000 0106 #asm("cli")
                 ; 0000 0107 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 0108    {
                 ; 0000 0109    tx_buffer1[tx_wr_index1++]=c;
                 ; 0000 010A #if TX_BUFFER_SIZE1 != 256
                 ; 0000 010B    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
                 ; 0000 010C #endif
                 ; 0000 010D    ++tx_counter1;
                 ; 0000 010E    }
                 ; 0000 010F else
                 ; 0000 0110    UDR1=c;
                 ; 0000 0111 #asm("sei")
                 ; 0000 0112 }
                 ;#pragma used-
                 ;
                 ;
                 ;
                 ;#define BTN_StartX 0
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;unsigned int BTN1_Y_Begin = BTN_StartY;
                 
                 	.DSEG
                 ;unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN1_X_Begin = BTN_StartX;
                 ;unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;volatile char Button_Pressed;
                 ;
                 ;#define BACKLIGHT 6
                 ;#define LEDGREEN 3
                 ;#define LEDRED 4
                 ;#define LEDBLUE 5
                 ;
                 ;volatile char Hour, Minute, Seconds, mSeconds, Day, Month;
                 ;volatile unsigned int Year;
                 ;
                 ;#define DateTime_X 300
                 ;#define DateTime_Y 256
                 ;
                 ;volatile unsigned int mSec;
                 ;
                 ;char SD_Ready;
                 ;unsigned char error, FAT32_active;
                 ;volatile long cluster, firstSector, nextSector;
                 ;volatile unsigned char buffer[512];
                 ;volatile long firstDataSector, rootCluster, totalClusters, byteCounter, fileSize;
                 ;volatile unsigned int bytesPerSector, sectorPerCluster, reservedSectorCount;
                 ;
                 ;volatile unsigned int LEDGREEN_mSec, LEDRED_mSec, LEDBLUE_mSec, LEDGREEN_max = 3000, LEDRED_max = 250, LEDBLUE_max = 1000;
                 ;
                 ;#define Pulse_X_Min 270
                 ;#define Pulse_X_Max 430
                 ;#define Pulse_Y_Min 0
                 ;#define Pulse_Y_Max 48
                 ;volatile unsigned int Pulse_X, Pulse_Y_Last, Pulse_mSec, Pulse_Value, Pulse_Counter, Pulse_ScreenValue;
                 ;volatile char Pulse_Flag, Pulse_ScreenFlag;
                 ;
                 ;#define Pulse_Value_X 430
                 ;#define Pulse_Value_Y 0
                 ;
                 ;#define Pulse_Enable PORTB.0
                 ;
                 ;#define Cardio_X_Min 0
                 ;#define Cardio_X_Max 480
                 ;#define Cardio_Y_Min 50
                 ;#define Cardio_Y_Max 232
                 ;volatile unsigned int Cardio_X, Cardio_Y_Last, Cardio_mSec, Cardio_Value, Cardio_Counter;
                 ;volatile float Cardio_Divider;
                 ;volatile int CardioMassive[128], CardioMassive_Counter;
                 ;
                 ;// 0 - высота осциллограммы
                 ;// 1 - длина шага осциллограммы
                 ;// 2 - высота отпределителя пульса
                 ;eeprom unsigned int WorkParameters[3] = {500, 10, 300};
                 ;flash unsigned int Default_Parameters[3] = {500, 10, 300};
                 ;eeprom char EEPROM_FLAG;
                 ;char Parameter_Counter;
                 ;
                 ;// Красный светодиод - был пульс и пропал
                 ;// Синий светодиод - низкий заряд батареи
                 ;// Зеленый светодиод - нормальная работа
                 ;
                 ;volatile char Alarm, Battery_Discharged, State;
                 ;
                 ;#define Battery_Width 24
                 ;#define Battery_Height 50
                 ;#define Battery_X 0
                 ;#define Battery_Y 0
                 ;
                 ;#define RS485 PORTD.4
                 ;
                 ;#define ScanLine_Length 25
                 ;unsigned int ScanLine_X;
                 ;
                 ;volatile unsigned int Refresh_mSec, Battery_Value, ADC0, ADC1, ADC2, Sleep_mSec;
                 ;volatile long longADC;
                 ;unsigned int Alarm_mSec;
                 ;
                 ;#define Address_Slave 'G'
                 ;
                 ;void SwitchPORTF(char Number, char Value)
                 ; 0000 017C {
                 
                 	.CSEG
                 _SwitchPORTF:
                 ; 0000 017D   switch(Value)
                 ;	Number -> Y+1
                 ;	Value -> Y+0
000aa1 940e 1049 	CALL SUBOPT_0x0
                 ; 0000 017E   {
                 ; 0000 017F     case 0 :
000aa3 9730      	SBIW R30,0
000aa4 f429      	BRNE _0x19B
                 ; 0000 0180       PORTF &= ~(0b00000001 << Number);
000aa5 940e 11c0 	CALL SUBOPT_0x28
000aa7 95e0      	COM  R30
000aa8 21e1      	AND  R30,R1
000aa9 c007      	RJMP _0x239
                 ; 0000 0181     break;
                 ; 0000 0182     case 1 :
                 _0x19B:
000aaa 30e1      	CPI  R30,LOW(0x1)
000aab e0a0      	LDI  R26,HIGH(0x1)
000aac 07fa      	CPC  R31,R26
000aad f429      	BRNE _0x19A
                 ; 0000 0183       PORTF |= 0b00000001 << Number;
000aae 940e 11c0 	CALL SUBOPT_0x28
000ab0 29e1      	OR   R30,R1
                 _0x239:
000ab1 2fa6      	MOV  R26,R22
000ab2 93ec      	ST   X,R30
                 ; 0000 0184     break;
                 ; 0000 0185   }
                 _0x19A:
                 ; 0000 0186 }
000ab3 9622      	ADIW R28,2
000ab4 9508      	RET
                 ;
                 ;unsigned int WaitADC_mSec;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 018C {
                 _timer0_ovf_isr:
000ab5 920a      	ST   -Y,R0
000ab6 921a      	ST   -Y,R1
000ab7 92fa      	ST   -Y,R15
000ab8 936a      	ST   -Y,R22
000ab9 937a      	ST   -Y,R23
000aba 938a      	ST   -Y,R24
000abb 939a      	ST   -Y,R25
000abc 93aa      	ST   -Y,R26
000abd 93ba      	ST   -Y,R27
000abe 93ea      	ST   -Y,R30
000abf 93fa      	ST   -Y,R31
000ac0 b7ef      	IN   R30,SREG
000ac1 93ea      	ST   -Y,R30
                 ; 0000 018D   TCNT0=0x06;
000ac2 e0e6      	LDI  R30,LOW(6)
000ac3 bfe2      	OUT  0x32,R30
                 ; 0000 018E   mSec++;
000ac4 e9ab      	LDI  R26,LOW(_mSec)
000ac5 e0b9      	LDI  R27,HIGH(_mSec)
000ac6 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 018F   WaitADC_mSec++;
000ac8 ecae      	LDI  R26,LOW(_WaitADC_mSec)
000ac9 e0b9      	LDI  R27,HIGH(_WaitADC_mSec)
000aca 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 0190   Pulse_mSec++;
000acc eba0      	LDI  R26,LOW(_Pulse_mSec)
000acd e0b9      	LDI  R27,HIGH(_Pulse_mSec)
000ace 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 0191   Refresh_mSec++;
000ad0 eca8      	LDI  R26,LOW(_Refresh_mSec)
000ad1 e0b9      	LDI  R27,HIGH(_Refresh_mSec)
000ad2 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 0192   Sleep_mSec++;
000ad4 ecaa      	LDI  R26,LOW(_Sleep_mSec)
000ad5 e0b9      	LDI  R27,HIGH(_Sleep_mSec)
000ad6 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 0193   Alarm_mSec++;
000ad8 ecac      	LDI  R26,LOW(_Alarm_mSec)
000ad9 e0b9      	LDI  R27,HIGH(_Alarm_mSec)
000ada 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 0194   if (Alarm < 1)
000adc 91a0 09c3 	LDS  R26,_Alarm
000ade 30a1      	CPI  R26,LOW(0x1)
000adf f010      	BRLO PC+3
000ae0 940c 0b2e 	JMP _0x19D
                 ; 0000 0195   {
                 ; 0000 0196     if (Battery_Discharged < 1)
000ae2 91a0 09c4 	LDS  R26,_Battery_Discharged
000ae4 30a1      	CPI  R26,LOW(0x1)
000ae5 f520      	BRSH _0x19E
                 ; 0000 0197     {
                 ; 0000 0198       SwitchPORTF(LEDRED, 1);
000ae6 940e 11cf 	CALL SUBOPT_0x2A
                 ; 0000 0199       SwitchPORTF(LEDBLUE, 1);
000ae8 940e 11d5 	CALL SUBOPT_0x2B
                 ; 0000 019A       LEDGREEN_mSec++;
000aea eaa0      	LDI  R26,LOW(_LEDGREEN_mSec)
000aeb e0b9      	LDI  R27,HIGH(_LEDGREEN_mSec)
000aec 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 019B       if (LEDGREEN_mSec > 30) SwitchPORTF(LEDGREEN, 1);
000aee 91a0 09a0 	LDS  R26,_LEDGREEN_mSec
000af0 91b0 09a1 	LDS  R27,_LEDGREEN_mSec+1
000af2 975f      	SBIW R26,31
000af3 f010      	BRLO _0x19F
000af4 940e 11db 	CALL SUBOPT_0x2C
                 ; 0000 019C       if (LEDGREEN_mSec > LEDGREEN_max) {LEDGREEN_mSec = 0; SwitchPORTF(LEDGREEN, 0);}
                 _0x19F:
000af6 91e0 09a6 	LDS  R30,_LEDGREEN_max
000af8 91f0 09a7 	LDS  R31,_LEDGREEN_max+1
000afa 91a0 09a0 	LDS  R26,_LEDGREEN_mSec
000afc 91b0 09a1 	LDS  R27,_LEDGREEN_mSec+1
000afe 17ea      	CP   R30,R26
000aff 07fb      	CPC  R31,R27
000b00 f440      	BRSH _0x1A0
000b01 e0e0      	LDI  R30,LOW(0)
000b02 93e0 09a0 	STS  _LEDGREEN_mSec,R30
000b04 93e0 09a1 	STS  _LEDGREEN_mSec+1,R30
000b06 e0e3      	LDI  R30,LOW(3)
000b07 940e 11e1 	CALL SUBOPT_0x2D
                 ; 0000 019D     }
                 _0x1A0:
                 ; 0000 019E     else
000b09 c023      	RJMP _0x1A1
                 _0x19E:
                 ; 0000 019F     {
                 ; 0000 01A0       SwitchPORTF(LEDGREEN, 1);
000b0a 940e 11db 	CALL SUBOPT_0x2C
                 ; 0000 01A1       SwitchPORTF(LEDRED, 1);
000b0c 940e 11cf 	CALL SUBOPT_0x2A
                 ; 0000 01A2       LEDBLUE_mSec++;
000b0e eaa4      	LDI  R26,LOW(_LEDBLUE_mSec)
000b0f e0b9      	LDI  R27,HIGH(_LEDBLUE_mSec)
000b10 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 01A3       if (LEDBLUE_mSec > 30) SwitchPORTF(LEDBLUE, 1);
000b12 91a0 09a4 	LDS  R26,_LEDBLUE_mSec
000b14 91b0 09a5 	LDS  R27,_LEDBLUE_mSec+1
000b16 975f      	SBIW R26,31
000b17 f010      	BRLO _0x1A2
000b18 940e 11d5 	CALL SUBOPT_0x2B
                 ; 0000 01A4       if (LEDBLUE_mSec > LEDBLUE_max) {LEDBLUE_mSec = 0; SwitchPORTF(LEDBLUE, 0);}
                 _0x1A2:
000b1a 91e0 09aa 	LDS  R30,_LEDBLUE_max
000b1c 91f0 09ab 	LDS  R31,_LEDBLUE_max+1
000b1e 91a0 09a4 	LDS  R26,_LEDBLUE_mSec
000b20 91b0 09a5 	LDS  R27,_LEDBLUE_mSec+1
000b22 17ea      	CP   R30,R26
000b23 07fb      	CPC  R31,R27
000b24 f440      	BRSH _0x1A3
000b25 e0e0      	LDI  R30,LOW(0)
000b26 93e0 09a4 	STS  _LEDBLUE_mSec,R30
000b28 93e0 09a5 	STS  _LEDBLUE_mSec+1,R30
000b2a e0e5      	LDI  R30,LOW(5)
000b2b 940e 11e1 	CALL SUBOPT_0x2D
                 ; 0000 01A5     }
                 _0x1A3:
                 _0x1A1:
                 ; 0000 01A6   }
                 ; 0000 01A7   else
000b2d c023      	RJMP _0x1A4
                 _0x19D:
                 ; 0000 01A8   {
                 ; 0000 01A9     SwitchPORTF(LEDGREEN, 1);
000b2e 940e 11db 	CALL SUBOPT_0x2C
                 ; 0000 01AA     SwitchPORTF(LEDBLUE, 1);
000b30 940e 11d5 	CALL SUBOPT_0x2B
                 ; 0000 01AB     LEDRED_mSec++;
000b32 eaa2      	LDI  R26,LOW(_LEDRED_mSec)
000b33 e0b9      	LDI  R27,HIGH(_LEDRED_mSec)
000b34 940e 11c9 	CALL SUBOPT_0x29
                 ; 0000 01AC     if (LEDRED_mSec > 30) SwitchPORTF(LEDRED, 1);
000b36 91a0 09a2 	LDS  R26,_LEDRED_mSec
000b38 91b0 09a3 	LDS  R27,_LEDRED_mSec+1
000b3a 975f      	SBIW R26,31
000b3b f010      	BRLO _0x1A5
000b3c 940e 11cf 	CALL SUBOPT_0x2A
                 ; 0000 01AD     if (LEDRED_mSec > LEDRED_max) {LEDRED_mSec = 0; SwitchPORTF(LEDRED, 0);}
                 _0x1A5:
000b3e 91e0 09a8 	LDS  R30,_LEDRED_max
000b40 91f0 09a9 	LDS  R31,_LEDRED_max+1
000b42 91a0 09a2 	LDS  R26,_LEDRED_mSec
000b44 91b0 09a3 	LDS  R27,_LEDRED_mSec+1
000b46 17ea      	CP   R30,R26
000b47 07fb      	CPC  R31,R27
000b48 f440      	BRSH _0x1A6
000b49 e0e0      	LDI  R30,LOW(0)
000b4a 93e0 09a2 	STS  _LEDRED_mSec,R30
000b4c 93e0 09a3 	STS  _LEDRED_mSec+1,R30
000b4e e0e4      	LDI  R30,LOW(4)
000b4f 940e 11e1 	CALL SUBOPT_0x2D
                 ; 0000 01AE   }
                 _0x1A6:
                 _0x1A4:
                 ; 0000 01AF }
000b51 91e9      	LD   R30,Y+
000b52 bfef      	OUT  SREG,R30
000b53 91f9      	LD   R31,Y+
000b54 91e9      	LD   R30,Y+
000b55 91b9      	LD   R27,Y+
000b56 91a9      	LD   R26,Y+
000b57 9199      	LD   R25,Y+
000b58 9189      	LD   R24,Y+
000b59 9179      	LD   R23,Y+
000b5a 9169      	LD   R22,Y+
000b5b 90f9      	LD   R15,Y+
000b5c 9019      	LD   R1,Y+
000b5d 9009      	LD   R0,Y+
000b5e 9518      	RETI
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 01B5 {
                 ; 0000 01B6 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
                 ; 0000 01B7 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 01B8 delay_us(10);
                 ; 0000 01B9 // Start the AD conversion
                 ; 0000 01BA ADCSRA|=0x40;
                 ; 0000 01BB // Wait for the AD conversion to complete
                 ; 0000 01BC while ((ADCSRA & 0x10)==0);
                 ; 0000 01BD ADCSRA|=0x10;
                 ; 0000 01BE return ADCW;
                 ; 0000 01BF }
                 ;
                 ;char SDCardInit(void)
                 ; 0000 01C2 {
                 ; 0000 01C3   delay_ms(50);
                 ; 0000 01C4   if (SD_init() == 1)
                 ; 0000 01C5   {
                 ; 0000 01C6     SD_Ready = 0;
                 ; 0000 01C7     //PutString(SDAbsent, 199);
                 ; 0000 01C8   }
                 ; 0000 01C9   else
                 ; 0000 01CA   {
                 ; 0000 01CB     SD_Ready = 1;
                 ; 0000 01CC     //PutString(SDReady, 99);
                 ; 0000 01CD     //Minute_mSec = 0;
                 ; 0000 01CE     //while (Minute_mSec < 999)
                 ; 0000 01CF     //{
                 ; 0000 01D0 //      PutAntAnimation(49); // выводить анимацию
                 ; 0000 01D1 //      RefreshLEDDisplay();
                 ; 0000 01D2     //}
                 ; 0000 01D3   }
                 ; 0000 01D4   delay_ms(1);
                 ; 0000 01D5 
                 ; 0000 01D6   FAT32_active = 1;
                 ; 0000 01D7   error = getBootSectorData (); //read boot sector and keep necessary data in global variables
                 ; 0000 01D8   if(error)
                 ; 0000 01D9   {
                 ; 0000 01DA //    PutString(SDnoFAT32, 199); // FAT32 incompatible drive
                 ; 0000 01DB     FAT32_active = 0;
                 ; 0000 01DC     SD_Ready = 0;
                 ; 0000 01DD   }
                 ; 0000 01DE   return SD_Ready;
                 ; 0000 01DF }
                 ;
                 ;char GetButton(void)
                 ; 0000 01E2 {
                 _GetButton:
                 ; 0000 01E3   char res = 0;
                 ; 0000 01E4   if (TSC2046_GetCoordinates())
000b5f 931a      	ST   -Y,R17
                 ;	res -> R17
000b60 e010      	LDI  R17,0
000b61 de2a      	RCALL _TSC2046_GetCoordinates
000b62 30e0      	CPI  R30,0
000b63 f411      	BRNE PC+3
000b64 940c 0bc2 	JMP _0x1AD
                 ; 0000 01E5   {
                 ; 0000 01E6     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000b66 940e 11e6 	CALL SUBOPT_0x2E
000b68 15e6      	CP   R30,R6
000b69 05f7      	CPC  R31,R7
000b6a f428      	BRSH _0x1AF
000b6b 940e 11eb 	CALL SUBOPT_0x2F
000b6d 166e      	CP   R6,R30
000b6e 067f      	CPC  R7,R31
000b6f f008      	BRLO _0x1B0
                 _0x1AF:
000b70 c00c      	RJMP _0x1AE
                 _0x1B0:
                 ; 0000 01E7     {
                 ; 0000 01E8       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
000b71 940e 11f0 	CALL SUBOPT_0x30
000b73 15e8      	CP   R30,R8
000b74 05f9      	CPC  R31,R9
000b75 f428      	BRSH _0x1B2
000b76 940e 11f5 	CALL SUBOPT_0x31
000b78 168e      	CP   R8,R30
000b79 069f      	CPC  R9,R31
000b7a f008      	BRLO _0x1B3
                 _0x1B2:
000b7b c001      	RJMP _0x1B1
                 _0x1B3:
000b7c e011      	LDI  R17,LOW(1)
                 ; 0000 01E9     }
                 _0x1B1:
                 ; 0000 01EA     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0x1AE:
000b7d 940e 11fa 	CALL SUBOPT_0x32
000b7f 15e6      	CP   R30,R6
000b80 05f7      	CPC  R31,R7
000b81 f428      	BRSH _0x1B5
000b82 940e 11ff 	CALL SUBOPT_0x33
000b84 166e      	CP   R6,R30
000b85 067f      	CPC  R7,R31
000b86 f008      	BRLO _0x1B6
                 _0x1B5:
000b87 c00c      	RJMP _0x1B4
                 _0x1B6:
                 ; 0000 01EB     {
                 ; 0000 01EC       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000b88 940e 1204 	CALL SUBOPT_0x34
000b8a 15e8      	CP   R30,R8
000b8b 05f9      	CPC  R31,R9
000b8c f428      	BRSH _0x1B8
000b8d 940e 1209 	CALL SUBOPT_0x35
000b8f 168e      	CP   R8,R30
000b90 069f      	CPC  R9,R31
000b91 f008      	BRLO _0x1B9
                 _0x1B8:
000b92 c001      	RJMP _0x1B7
                 _0x1B9:
000b93 e012      	LDI  R17,LOW(2)
                 ; 0000 01ED     }
                 _0x1B7:
                 ; 0000 01EE     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0x1B4:
000b94 940e 120e 	CALL SUBOPT_0x36
000b96 15e6      	CP   R30,R6
000b97 05f7      	CPC  R31,R7
000b98 f428      	BRSH _0x1BB
000b99 940e 1213 	CALL SUBOPT_0x37
000b9b 166e      	CP   R6,R30
000b9c 067f      	CPC  R7,R31
000b9d f008      	BRLO _0x1BC
                 _0x1BB:
000b9e c00c      	RJMP _0x1BA
                 _0x1BC:
                 ; 0000 01EF     {
                 ; 0000 01F0       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000b9f 940e 1218 	CALL SUBOPT_0x38
000ba1 15e8      	CP   R30,R8
000ba2 05f9      	CPC  R31,R9
000ba3 f428      	BRSH _0x1BE
000ba4 940e 121d 	CALL SUBOPT_0x39
000ba6 168e      	CP   R8,R30
000ba7 069f      	CPC  R9,R31
000ba8 f008      	BRLO _0x1BF
                 _0x1BE:
000ba9 c001      	RJMP _0x1BD
                 _0x1BF:
000baa e013      	LDI  R17,LOW(3)
                 ; 0000 01F1     }
                 _0x1BD:
                 ; 0000 01F2     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x1BA:
000bab 940e 1222 	CALL SUBOPT_0x3A
000bad 15e6      	CP   R30,R6
000bae 05f7      	CPC  R31,R7
000baf f428      	BRSH _0x1C1
000bb0 940e 1227 	CALL SUBOPT_0x3B
000bb2 166e      	CP   R6,R30
000bb3 067f      	CPC  R7,R31
000bb4 f008      	BRLO _0x1C2
                 _0x1C1:
000bb5 c00c      	RJMP _0x1C0
                 _0x1C2:
                 ; 0000 01F3     {
                 ; 0000 01F4       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
000bb6 940e 122c 	CALL SUBOPT_0x3C
000bb8 15e8      	CP   R30,R8
000bb9 05f9      	CPC  R31,R9
000bba f428      	BRSH _0x1C4
000bbb 940e 1231 	CALL SUBOPT_0x3D
000bbd 168e      	CP   R8,R30
000bbe 069f      	CPC  R9,R31
000bbf f008      	BRLO _0x1C5
                 _0x1C4:
000bc0 c001      	RJMP _0x1C3
                 _0x1C5:
000bc1 e014      	LDI  R17,LOW(4)
                 ; 0000 01F5     }
                 _0x1C3:
                 ; 0000 01F6 
                 ; 0000 01F7   }
                 _0x1C0:
                 ; 0000 01F8   return res;
                 _0x1AD:
                 _0x20C0001:
000bc2 2fe1      	MOV  R30,R17
000bc3 9119      	LD   R17,Y+
000bc4 9508      	RET
                 ; 0000 01F9 }
                 ;
                 ;long CalcLongValue(long Value1, unsigned int Value2)
                 ; 0000 01FC {
                 ; 0000 01FD   return (Value1 * Value2) / 1000;
                 ;	Value1 -> Y+2
                 ;	Value2 -> Y+0
                 ; 0000 01FE }
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 0201 {
                 _Repaint_Button:
                 ; 0000 0202   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000bc5 81ec      	LDD  R30,Y+4
000bc6 940e 1236 	CALL SUBOPT_0x3E
                 ; 0000 0203   {
                 ; 0000 0204     case 1 :
000bc8 f469      	BRNE _0x1C9
                 ; 0000 0205       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bc9 e0e0     +LDI R30 , LOW ( _0x1CA + ( 0 ) )
000bca e0f5     +LDI R31 , HIGH ( _0x1CA + ( 0 ) )
                 	__POINTW1MN _0x1CA,0
000bcb 940e 123b 	CALL SUBOPT_0x3F
000bcd 940e 1242 	CALL SUBOPT_0x40
000bcf 940e 109d 	CALL SUBOPT_0x10
000bd1 940e 1247 	CALL SUBOPT_0x41
                 ; 0000 0206       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bd3 940e 123b 	CALL SUBOPT_0x3F
000bd5 c032      	RJMP _0x23B
                 ; 0000 0207     break;
                 ; 0000 0208     case 2 :
                 _0x1C9:
000bd6 30e2      	CPI  R30,LOW(0x2)
000bd7 e0a0      	LDI  R26,HIGH(0x2)
000bd8 07fa      	CPC  R31,R26
000bd9 f469      	BRNE _0x1CB
                 ; 0000 0209       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bda e0e6     +LDI R30 , LOW ( _0x1CA + ( 6 ) )
000bdb e0f5     +LDI R31 , HIGH ( _0x1CA + ( 6 ) )
                 	__POINTW1MN _0x1CA,6
000bdc 940e 124c 	CALL SUBOPT_0x42
000bde 940e 1242 	CALL SUBOPT_0x40
000be0 940e 109d 	CALL SUBOPT_0x10
000be2 940e 1247 	CALL SUBOPT_0x41
                 ; 0000 020A       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000be4 940e 124c 	CALL SUBOPT_0x42
000be6 c021      	RJMP _0x23B
                 ; 0000 020B     break;
                 ; 0000 020C     case 3 :
                 _0x1CB:
000be7 30e3      	CPI  R30,LOW(0x3)
000be8 e0a0      	LDI  R26,HIGH(0x3)
000be9 07fa      	CPC  R31,R26
000bea f469      	BRNE _0x1CC
                 ; 0000 020D       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000beb e0ec     +LDI R30 , LOW ( _0x1CA + ( 12 ) )
000bec e0f5     +LDI R31 , HIGH ( _0x1CA + ( 12 ) )
                 	__POINTW1MN _0x1CA,12
000bed 940e 1253 	CALL SUBOPT_0x43
000bef 940e 1242 	CALL SUBOPT_0x40
000bf1 940e 109d 	CALL SUBOPT_0x10
000bf3 940e 1247 	CALL SUBOPT_0x41
                 ; 0000 020E       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bf5 940e 1253 	CALL SUBOPT_0x43
000bf7 c010      	RJMP _0x23B
                 ; 0000 020F     break;
                 ; 0000 0210     case 4 :
                 _0x1CC:
000bf8 30e4      	CPI  R30,LOW(0x4)
000bf9 e0a0      	LDI  R26,HIGH(0x4)
000bfa 07fa      	CPC  R31,R26
000bfb f4b1      	BRNE _0x1C8
                 ; 0000 0211       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bfc e1e2     +LDI R30 , LOW ( _0x1CA + ( 18 ) )
000bfd e0f5     +LDI R31 , HIGH ( _0x1CA + ( 18 ) )
                 	__POINTW1MN _0x1CA,18
000bfe 940e 125a 	CALL SUBOPT_0x44
000c00 940e 1242 	CALL SUBOPT_0x40
000c02 940e 109d 	CALL SUBOPT_0x10
000c04 940e 1247 	CALL SUBOPT_0x41
                 ; 0000 0212       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c06 940e 125a 	CALL SUBOPT_0x44
                 _0x23B:
000c08 963f      	ADIW R30,15
000c09 9738      	SBIW R30,8
000c0a 93fa      	ST   -Y,R31
000c0b 93ea      	ST   -Y,R30
000c0c 940e 109d 	CALL SUBOPT_0x10
000c0e 940e 109d 	CALL SUBOPT_0x10
000c10 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0213     break;
                 ; 0000 0214   }
                 _0x1C8:
                 ; 0000 0215 }
000c12 9627      	ADIW R28,7
000c13 9508      	RET
                 
                 	.DSEG
                 _0x1CA:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0218 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0219   // рисуем окошко под батарею
                 ; 0000 021A // SSD1963_DrawFillRect(Battery_X + 3, Battery_Width - 3, Battery_Y, Battery_Y + 2, GREEN);
                 ; 0000 021B // SSD1963_DrawRect(Battery_X, Battery_Width, Battery_Y + 2, Battery_Height, 1, GREEN);
                 ; 0000 021C   // рисуем кнопки
                 ; 0000 021D   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000c14 940e 11e6 	CALL SUBOPT_0x2E
000c16 93fa      	ST   -Y,R31
000c17 93ea      	ST   -Y,R30
000c18 940e 11eb 	CALL SUBOPT_0x2F
000c1a 93fa      	ST   -Y,R31
000c1b 93ea      	ST   -Y,R30
000c1c 940e 11f0 	CALL SUBOPT_0x30
000c1e 93fa      	ST   -Y,R31
000c1f 93ea      	ST   -Y,R30
000c20 940e 11f5 	CALL SUBOPT_0x31
000c22 940e 1261 	CALL SUBOPT_0x45
                 ; 0000 021E   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000c24 940e 11fa 	CALL SUBOPT_0x32
000c26 93fa      	ST   -Y,R31
000c27 93ea      	ST   -Y,R30
000c28 940e 11ff 	CALL SUBOPT_0x33
000c2a 93fa      	ST   -Y,R31
000c2b 93ea      	ST   -Y,R30
000c2c 940e 1204 	CALL SUBOPT_0x34
000c2e 93fa      	ST   -Y,R31
000c2f 93ea      	ST   -Y,R30
000c30 940e 1209 	CALL SUBOPT_0x35
000c32 940e 1261 	CALL SUBOPT_0x45
                 ; 0000 021F   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000c34 940e 120e 	CALL SUBOPT_0x36
000c36 93fa      	ST   -Y,R31
000c37 93ea      	ST   -Y,R30
000c38 940e 1213 	CALL SUBOPT_0x37
000c3a 93fa      	ST   -Y,R31
000c3b 93ea      	ST   -Y,R30
000c3c 940e 1218 	CALL SUBOPT_0x38
000c3e 93fa      	ST   -Y,R31
000c3f 93ea      	ST   -Y,R30
000c40 940e 121d 	CALL SUBOPT_0x39
000c42 940e 1261 	CALL SUBOPT_0x45
                 ; 0000 0220   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000c44 940e 1222 	CALL SUBOPT_0x3A
000c46 93fa      	ST   -Y,R31
000c47 93ea      	ST   -Y,R30
000c48 940e 1227 	CALL SUBOPT_0x3B
000c4a 93fa      	ST   -Y,R31
000c4b 93ea      	ST   -Y,R30
000c4c 940e 122c 	CALL SUBOPT_0x3C
000c4e 93fa      	ST   -Y,R31
000c4f 93ea      	ST   -Y,R30
000c50 940e 1231 	CALL SUBOPT_0x3D
000c52 940e 1261 	CALL SUBOPT_0x45
                 ; 0000 0221   // рисуем окантовку
                 ; 0000 0222   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000c54 940e 11e6 	CALL SUBOPT_0x2E
000c56 9631      	ADIW R30,1
000c57 93fa      	ST   -Y,R31
000c58 93ea      	ST   -Y,R30
000c59 940e 11eb 	CALL SUBOPT_0x2F
000c5b 9731      	SBIW R30,1
000c5c 93fa      	ST   -Y,R31
000c5d 93ea      	ST   -Y,R30
000c5e 940e 11f0 	CALL SUBOPT_0x30
000c60 9631      	ADIW R30,1
000c61 93fa      	ST   -Y,R31
000c62 93ea      	ST   -Y,R30
000c63 940e 11f5 	CALL SUBOPT_0x31
000c65 940e 1269 	CALL SUBOPT_0x46
000c67 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0223   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000c69 940e 11fa 	CALL SUBOPT_0x32
000c6b 9631      	ADIW R30,1
000c6c 93fa      	ST   -Y,R31
000c6d 93ea      	ST   -Y,R30
000c6e 940e 11ff 	CALL SUBOPT_0x33
000c70 9731      	SBIW R30,1
000c71 93fa      	ST   -Y,R31
000c72 93ea      	ST   -Y,R30
000c73 940e 1204 	CALL SUBOPT_0x34
000c75 9631      	ADIW R30,1
000c76 93fa      	ST   -Y,R31
000c77 93ea      	ST   -Y,R30
000c78 940e 1209 	CALL SUBOPT_0x35
000c7a 940e 1269 	CALL SUBOPT_0x46
000c7c 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0224   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000c7e 940e 120e 	CALL SUBOPT_0x36
000c80 9631      	ADIW R30,1
000c81 93fa      	ST   -Y,R31
000c82 93ea      	ST   -Y,R30
000c83 940e 1213 	CALL SUBOPT_0x37
000c85 9731      	SBIW R30,1
000c86 93fa      	ST   -Y,R31
000c87 93ea      	ST   -Y,R30
000c88 940e 1218 	CALL SUBOPT_0x38
000c8a 9631      	ADIW R30,1
000c8b 93fa      	ST   -Y,R31
000c8c 93ea      	ST   -Y,R30
000c8d 940e 121d 	CALL SUBOPT_0x39
000c8f 940e 1269 	CALL SUBOPT_0x46
000c91 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0225   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000c93 940e 1222 	CALL SUBOPT_0x3A
000c95 9631      	ADIW R30,1
000c96 93fa      	ST   -Y,R31
000c97 93ea      	ST   -Y,R30
000c98 940e 1227 	CALL SUBOPT_0x3B
000c9a 9731      	SBIW R30,1
000c9b 93fa      	ST   -Y,R31
000c9c 93ea      	ST   -Y,R30
000c9d 940e 122c 	CALL SUBOPT_0x3C
000c9f 9631      	ADIW R30,1
000ca0 93fa      	ST   -Y,R31
000ca1 93ea      	ST   -Y,R30
000ca2 940e 1231 	CALL SUBOPT_0x3D
000ca4 940e 1269 	CALL SUBOPT_0x46
000ca6 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0226 
                 ; 0000 0227   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
                +
000ca8 e1e8     +LDI R30 , LOW ( _0x1CE + ( 0 ) )
000ca9 e0f5     +LDI R31 , HIGH ( _0x1CE + ( 0 ) )
                 	__POINTW1MN _0x1CE,0
000caa 93fa      	ST   -Y,R31
000cab 93ea      	ST   -Y,R30
000cac e0e1      	LDI  R30,LOW(1)
000cad 93ea      	ST   -Y,R30
000cae 940e 1089 	CALL SUBOPT_0xC
000cb0 940e 126f 	CALL SUBOPT_0x47
                 ; 0000 0228   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000cb2 e1ed     +LDI R30 , LOW ( _0x1CE + ( 5 ) )
000cb3 e0f5     +LDI R31 , HIGH ( _0x1CE + ( 5 ) )
                 	__POINTW1MN _0x1CE,5
000cb4 940e 1275 	CALL SUBOPT_0x48
000cb6 940e 1089 	CALL SUBOPT_0xC
000cb8 940e 126f 	CALL SUBOPT_0x47
                 ; 0000 0229   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000cba e2e1     +LDI R30 , LOW ( _0x1CE + ( 9 ) )
000cbb e0f5     +LDI R31 , HIGH ( _0x1CE + ( 9 ) )
                 	__POINTW1MN _0x1CE,9
000cbc 93fa      	ST   -Y,R31
000cbd 93ea      	ST   -Y,R30
000cbe e0e3      	LDI  R30,LOW(3)
000cbf 93ea      	ST   -Y,R30
000cc0 940e 1089 	CALL SUBOPT_0xC
000cc2 940e 126f 	CALL SUBOPT_0x47
                 ; 0000 022A   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000cc4 e2e5     +LDI R30 , LOW ( _0x1CE + ( 13 ) )
000cc5 e0f5     +LDI R31 , HIGH ( _0x1CE + ( 13 ) )
                 	__POINTW1MN _0x1CE,13
000cc6 940e 127a 	CALL SUBOPT_0x49
000cc8 940e 126f 	CALL SUBOPT_0x47
                 ; 0000 022B   /*SSD1963_PutChar16('К', 0, 136, WHITE, BLACK);
                 ; 0000 022C   SSD1963_PutChar16('А', 0, 152, WHITE, BLACK);
                 ; 0000 022D   SSD1963_PutChar16('Р', 0, 168, WHITE, BLACK);
                 ; 0000 022E   SSD1963_PutChar16('Д', 0, 184, WHITE, BLACK);
                 ; 0000 022F   SSD1963_PutChar16('И', 0, 200, WHITE, BLACK);
                 ; 0000 0230   SSD1963_PutChar16('О', 0, 216, WHITE, BLACK);      */
                 ; 0000 0231 }
000cca 9508      	RET
                 
                 	.DSEG
                 _0x1CE:
000518           	.BYTE 0x13
                 ;
                 ;void Paint_ScanLine(unsigned int X_Min, unsigned int X_Max, unsigned int Y_Min, unsigned int Y_Max, unsigned int Color, unsigned int Length)
                 ; 0000 0234 {
                 
                 	.CSEG
                 ; 0000 0235   signed int ScanLine_NetHeight, ScanLine_NetWidth;
                 ; 0000 0236   if (ScanLine_X == 0) ScanLine_X = X_Min;
                 ;	X_Min -> Y+14
                 ;	X_Max -> Y+12
                 ;	Y_Min -> Y+10
                 ;	Y_Max -> Y+8
                 ;	Color -> Y+6
                 ;	Length -> Y+4
                 ;	ScanLine_NetHeight -> R16,R17
                 ;	ScanLine_NetWidth -> R18,R19
                 ; 0000 0237   ScanLine_NetHeight = (Y_Max - Y_Min) - Length;
                 ; 0000 0238   ScanLine_NetWidth = (X_Max - X_Min) - Length;
                 ; 0000 0239   while (ScanLine_NetHeight > 0)
                 ; 0000 023A   {
                 ; 0000 023B     SSD1963_DrawFastLine(X_Min, X_Max, Y_Min + ScanLine_NetHeight, Y_Min + ScanLine_NetHeight, Color);
                 ; 0000 023C     ScanLine_NetHeight -= Length;
                 ; 0000 023D   }
                 ; 0000 023E   while (ScanLine_NetWidth > 0)
                 ; 0000 023F   {
                 ; 0000 0240     SSD1963_DrawFastLine(X_Min + ScanLine_NetWidth, X_Min + ScanLine_NetWidth, Y_Min, Y_Max, Color);
                 ; 0000 0241     ScanLine_NetWidth -= Length;
                 ; 0000 0242   }
                 ; 0000 0243 
                 ; 0000 0244 //  if ((ScanLine_X % Length) < 1)  SSD1963_DrawFastLine(ScanLine_X, ScanLine_X, Y_Min, Y_Max, Color);
                 ; 0000 0245   //if ((Counter % Length) < 1)  SSD1963_DrawFastLine(Counter, Counter, Y_Min, Y_Max, Color);
                 ; 0000 0246 //  ScanLine_X += Counter; // увеличеваем Х сетки
                 ; 0000 0247 //  if (ScanLine_X > X_Max - Length - 1) // если добежали до конца отведённого пространства
                 ; 0000 0248 //  {
                 ; 0000 0249 //    ScanLine_X = X_Min; // уходим обратно
                 ; 0000 024A //  }
                 ; 0000 024B }
                 ;
                 ;void Paint_Pulse(unsigned int Value, unsigned int Color)
                 ; 0000 024E {
                 ; 0000 024F   if (Pulse_ScreenFlag != Pulse_Flag)
                 ;	Value -> Y+2
                 ;	Color -> Y+0
                 ; 0000 0250   {
                 ; 0000 0251     if (Pulse_Flag == 1) Pulse_ScreenValue = Pulse_Y_Min + 5;
                 ; 0000 0252     else if (Pulse_Flag == 0) Pulse_ScreenValue = Pulse_Y_Max - 5;
                 ; 0000 0253     Pulse_ScreenFlag = Pulse_Flag;
                 ; 0000 0254     Alarm_mSec = 0;
                 ; 0000 0255     Alarm = 0;
                 ; 0000 0256   }
                 ; 0000 0257 
                 ; 0000 0258   SSD1963_DrawFastLine(Pulse_X, Pulse_X + Value, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем за собой столбец пикселей
                 ; 0000 0259   SSD1963_DrawLine(Pulse_X, Pulse_X + Value, Pulse_Y_Last, Pulse_ScreenValue, Color, 1); // пишем точку в столбце
                 ; 0000 025A   Pulse_X += Value; // увеличиваем Х пульса
                 ; 0000 025B   Pulse_Y_Last = Pulse_ScreenValue; // определяем предыдущую точку пульса
                 ; 0000 025C   Pulse_ScreenValue = Pulse_Y_Max / 2;
                 ; 0000 025D   if (Pulse_X > Pulse_X_Max - (2 * Value)) // если добежали до конца отведённого пространства
                 ; 0000 025E   {
                 ; 0000 025F     SSD1963_DrawFastLine(Pulse_X, Pulse_X_Max, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 0260     Pulse_X = Pulse_X_Min; // уходим обратно
                 ; 0000 0261     SSD1963_DrawFastLine(Pulse_X - Value, Pulse_X, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 0262   }
                 ; 0000 0263 }
                 ;
                 ;signed int ValueLast[3]={Cardio_Y_Min,Cardio_Y_Min,Cardio_Y_Min};
                 
                 	.DSEG
                 ;signed int multiplier = 60;
                 ;
                 ;void Paint_3phase(char a, char b, char c)
                 ; 0000 0269 {
                 
                 	.CSEG
                 _Paint_3phase:
                 ; 0000 026A     signed int Value[3];
                 ; 0000 026B     unsigned int Color[] = {GREEN, YELLOW, RED};
                 ; 0000 026C     unsigned int Length = WorkParameters[1];
                 ; 0000 026D     signed int mid = ((Cardio_Y_Max - Cardio_Y_Min)>>1) + Cardio_Y_Min;
                 ; 0000 026E     unsigned int temp;
                 ; 0000 026F     char i;
                 ; 0000 0270 
                 ; 0000 0271     Value[0] = a;
000ccb 940e 127f 	CALL SUBOPT_0x4A
                 ;	a -> Y+21
                 ;	b -> Y+20
                 ;	c -> Y+19
                 ;	Value -> Y+13
                 ;	Color -> Y+7
                 ;	Length -> R16,R17
                 ;	mid -> R18,R19
                 ;	temp -> R20,R21
                 ;	i -> Y+6
000ccd 89ed      	LDD  R30,Y+21
000cce e0f0      	LDI  R31,0
000ccf 87ed      	STD  Y+13,R30
000cd0 87fe      	STD  Y+13+1,R31
                 ; 0000 0272     Value[1] = b;
000cd1 89ec      	LDD  R30,Y+20
000cd2 e0f0      	LDI  R31,0
000cd3 87ef      	STD  Y+15,R30
000cd4 8bf8      	STD  Y+15+1,R31
                 ; 0000 0273     Value[2] = c;
000cd5 89eb      	LDD  R30,Y+19
000cd6 e0f0      	LDI  R31,0
000cd7 8be9      	STD  Y+17,R30
000cd8 8bfa      	STD  Y+17+1,R31
                 ; 0000 0274 
                 ; 0000 0275     // очищаем за собой столбец пикселей
                 ; 0000 0276     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK);
000cd9 940e 1296 	CALL SUBOPT_0x4B
000cdb 940e 12a6 	CALL SUBOPT_0x4C
000cdd 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 0277 
                 ; 0000 0278     //Линия нуля
                 ; 0000 0279     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid, mid, DGRAY);
000cdf 940e 1296 	CALL SUBOPT_0x4B
000ce1 933a      	ST   -Y,R19
000ce2 932a      	ST   -Y,R18
000ce3 933a      	ST   -Y,R19
000ce4 932a      	ST   -Y,R18
000ce5 940e 12ad 	CALL SUBOPT_0x4D
                 ; 0000 027A     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid+50, mid+50, DGRAY);
000ce7 01f9      	MOVW R30,R18
000ce8 96f2      	ADIW R30,50
000ce9 93fa      	ST   -Y,R31
000cea 93ea      	ST   -Y,R30
000ceb 01f9      	MOVW R30,R18
000cec 96f2      	ADIW R30,50
000ced 93fa      	ST   -Y,R31
000cee 93ea      	ST   -Y,R30
000cef 940e 12ad 	CALL SUBOPT_0x4D
                 ; 0000 027B     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid-50, mid-50, DGRAY);
000cf1 01f9      	MOVW R30,R18
000cf2 97f2      	SBIW R30,50
000cf3 93fa      	ST   -Y,R31
000cf4 93ea      	ST   -Y,R30
000cf5 01f9      	MOVW R30,R18
000cf6 97f2      	SBIW R30,50
000cf7 940e 12b4 	CALL SUBOPT_0x4E
                 ; 0000 027C 
                 ; 0000 027D     for(i=0; i<3; i++)
                 _0x1DE:
000cf9 81ae      	LDD  R26,Y+6
000cfa 30a3      	CPI  R26,LOW(0x3)
000cfb f010      	BRLO PC+3
000cfc 940c 0d48 	JMP _0x1DF
                 ; 0000 027E     {
                 ; 0000 027F         Value[i] -= 128;
000cfe 940e 12bf 	CALL SUBOPT_0x4F
000d00 940e 12c6 	CALL SUBOPT_0x50
000d02 940e 12cb 	CALL SUBOPT_0x51
                 ; 0000 0280         Value[i] *= multiplier;
000d04 940e 12d0 	CALL SUBOPT_0x52
                 ; 0000 0281         Value[i] >>= 7;
000d06 940e 12c6 	CALL SUBOPT_0x50
000d08 940e 12e0 	CALL SUBOPT_0x53
                 ; 0000 0282         if(Value[i]&0x0100) Value[i] |= 0xFF00;
000d0a 940e 12e7 	CALL SUBOPT_0x54
000d0c 70f1      	ANDI R31,HIGH(0x100)
000d0d f039      	BREQ _0x1E0
000d0e 940e 12bf 	CALL SUBOPT_0x4F
000d10 940e 12c6 	CALL SUBOPT_0x50
000d12 6fff      	ORI  R31,HIGH(0xFF00)
000d13 93fe      	ST   -X,R31
000d14 93ee      	ST   -X,R30
                 ; 0000 0283 
                 ; 0000 0284         Value[i] += mid;
                 _0x1E0:
000d15 940e 12bf 	CALL SUBOPT_0x4F
000d17 940e 12c6 	CALL SUBOPT_0x50
000d19 0fe2      	ADD  R30,R18
000d1a 1ff3      	ADC  R31,R19
000d1b 93fe      	ST   -X,R31
000d1c 93ee      	ST   -X,R30
                 ; 0000 0285         if(Value[i] >= Cardio_Y_Max) Value[i] = Cardio_Y_Max - 1;
000d1d 940e 12bf 	CALL SUBOPT_0x4F
000d1f 940e 12e7 	CALL SUBOPT_0x54
000d21 3ee8      	CPI  R30,LOW(0xE8)
000d22 e0a0      	LDI  R26,HIGH(0xE8)
000d23 07fa      	CPC  R31,R26
000d24 f024      	BRLT _0x1E1
000d25 940e 12bf 	CALL SUBOPT_0x4F
000d27 940e 12ec 	CALL SUBOPT_0x55
                 ; 0000 0286         if(Value[i] < Cardio_Y_Min) Value[i] = Cardio_Y_Min;
                 _0x1E1:
000d29 940e 12bf 	CALL SUBOPT_0x4F
000d2b 940e 12e7 	CALL SUBOPT_0x54
000d2d 97f2      	SBIW R30,50
000d2e f424      	BRGE _0x1E2
000d2f 940e 12bf 	CALL SUBOPT_0x4F
000d31 940e 12f3 	CALL SUBOPT_0x56
                 ; 0000 0287 
                 ; 0000 0288         // пишем точку в столбце
                 ; 0000 0289         SSD1963_DrawLine(Cardio_X, Cardio_X + Length, ValueLast[i], Value[i], Color[i], 2);
                 _0x1E2:
000d33 940e 1296 	CALL SUBOPT_0x4B
000d35 940e 12fa 	CALL SUBOPT_0x57
000d37 940e 1301 	CALL SUBOPT_0x58
000d39 940e 130a 	CALL SUBOPT_0x59
000d3b 940e 1275 	CALL SUBOPT_0x48
000d3d 940e 1313 	CALL SUBOPT_0x5A
                 ; 0000 028A         ValueLast[i] = Value[i]; // определяем предыдущую точку кардиограммы
000d3f 940e 12e7 	CALL SUBOPT_0x54
000d41 01d0      	MOVW R26,R0
000d42 93ed      	ST   X+,R30
000d43 93fc      	ST   X,R31
                 ; 0000 028B     }
000d44 81ee      	LDD  R30,Y+6
000d45 5fef      	SUBI R30,-LOW(1)
000d46 83ee      	STD  Y+6,R30
000d47 cfb1      	RJMP _0x1DE
                 _0x1DF:
                 ; 0000 028C 
                 ; 0000 028D     Cardio_X += Length; // увеличеваем Х кардиограммы
000d48 940e 131f 	CALL SUBOPT_0x5B
                 ; 0000 028E 
                 ; 0000 028F   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
000d4a f440      	BRSH _0x1E3
                 ; 0000 0290   {
                 ; 0000 0291     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000d4b 940e 1335 	CALL SUBOPT_0x5C
000d4d 940e 1340 	CALL SUBOPT_0x5D
                 ; 0000 0292     Cardio_X = Cardio_X_Min; // уходим обратно
                 ; 0000 0293     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000d4f 940e 12a6 	CALL SUBOPT_0x4C
000d51 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 0294   }
                 ; 0000 0295 }
                 _0x1E3:
000d53 940e 15d5 	CALL __LOADLOCR6
000d55 9666      	ADIW R28,22
000d56 9508      	RET
                 ;
                 ;void Paint_2phase(char a, char b)
                 ; 0000 0298 {
                 _Paint_2phase:
                 ; 0000 0299     signed int Value[3];
                 ; 0000 029A     unsigned int Color[] = {GREEN, YELLOW, RED};
                 ; 0000 029B     unsigned int Length = WorkParameters[1];
                 ; 0000 029C     signed int mid = ((Cardio_Y_Max - Cardio_Y_Min)>>1) + Cardio_Y_Min;
                 ; 0000 029D     unsigned int temp;
                 ; 0000 029E     char i;
                 ; 0000 029F 
                 ; 0000 02A0     Value[0] = a;
000d57 940e 127f 	CALL SUBOPT_0x4A
                 ;	a -> Y+20
                 ;	b -> Y+19
                 ;	Value -> Y+13
                 ;	Color -> Y+7
                 ;	Length -> R16,R17
                 ;	mid -> R18,R19
                 ;	temp -> R20,R21
                 ;	i -> Y+6
000d59 89ec      	LDD  R30,Y+20
000d5a e0f0      	LDI  R31,0
000d5b 87ed      	STD  Y+13,R30
000d5c 87fe      	STD  Y+13+1,R31
                 ; 0000 02A1     Value[1] = b;
000d5d 89eb      	LDD  R30,Y+19
000d5e e0f0      	LDI  R31,0
000d5f 87ef      	STD  Y+15,R30
000d60 8bf8      	STD  Y+15+1,R31
                 ; 0000 02A2     //Value[2] = c;
                 ; 0000 02A3 
                 ; 0000 02A4     // очищаем за собой столбец пикселей
                 ; 0000 02A5     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK);
000d61 940e 1296 	CALL SUBOPT_0x4B
000d63 940e 12a6 	CALL SUBOPT_0x4C
000d65 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 02A6 
                 ; 0000 02A7     //Линия нуля
                 ; 0000 02A8     //SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid, mid, DGRAY);
                 ; 0000 02A9     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid+40, mid+40, DGRAY);
000d67 940e 1296 	CALL SUBOPT_0x4B
000d69 01f9      	MOVW R30,R18
000d6a 96b8      	ADIW R30,40
000d6b 93fa      	ST   -Y,R31
000d6c 93ea      	ST   -Y,R30
000d6d 01f9      	MOVW R30,R18
000d6e 96b8      	ADIW R30,40
000d6f 93fa      	ST   -Y,R31
000d70 93ea      	ST   -Y,R30
000d71 940e 12ad 	CALL SUBOPT_0x4D
                 ; 0000 02AA     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid-40, mid-40, DGRAY);
000d73 01f9      	MOVW R30,R18
000d74 97b8      	SBIW R30,40
000d75 93fa      	ST   -Y,R31
000d76 93ea      	ST   -Y,R30
000d77 01f9      	MOVW R30,R18
000d78 97b8      	SBIW R30,40
000d79 940e 12b4 	CALL SUBOPT_0x4E
                 ; 0000 02AB 
                 ; 0000 02AC     for(i=0; i<2; i++)
                 _0x1E5:
000d7b 81ae      	LDD  R26,Y+6
000d7c 30a2      	CPI  R26,LOW(0x2)
000d7d f010      	BRLO PC+3
000d7e 940c 0ddc 	JMP _0x1E6
                 ; 0000 02AD     {
                 ; 0000 02AE         Value[i] -= 128;
000d80 940e 12bf 	CALL SUBOPT_0x4F
000d82 940e 12c6 	CALL SUBOPT_0x50
000d84 940e 12cb 	CALL SUBOPT_0x51
                 ; 0000 02AF         Value[i] *= multiplier;
000d86 940e 12d0 	CALL SUBOPT_0x52
                 ; 0000 02B0         Value[i] >>= 7;
000d88 940e 12c6 	CALL SUBOPT_0x50
000d8a 940e 12e0 	CALL SUBOPT_0x53
                 ; 0000 02B1         if(Value[i]&0x0100) Value[i] |= 0xFF00;
000d8c 940e 12e7 	CALL SUBOPT_0x54
000d8e 70f1      	ANDI R31,HIGH(0x100)
000d8f f039      	BREQ _0x1E7
000d90 940e 12bf 	CALL SUBOPT_0x4F
000d92 940e 12c6 	CALL SUBOPT_0x50
000d94 6fff      	ORI  R31,HIGH(0xFF00)
000d95 93fe      	ST   -X,R31
000d96 93ee      	ST   -X,R30
                 ; 0000 02B2 
                 ; 0000 02B3         if(i==0) Value[i] += mid+40;
                 _0x1E7:
000d97 81ee      	LDD  R30,Y+6
000d98 30e0      	CPI  R30,0
000d99 f451      	BRNE _0x1E8
000d9a 940e 12bf 	CALL SUBOPT_0x4F
000d9c 940e 1348 	CALL SUBOPT_0x5E
000d9e 96b8      	ADIW R30,40
000d9f 0fea      	ADD  R30,R26
000da0 1ffb      	ADC  R31,R27
000da1 01d0      	MOVW R26,R0
000da2 93ed      	ST   X+,R30
000da3 93fc      	ST   X,R31
                 ; 0000 02B4         if(i==1) Value[i] += mid-40;
                 _0x1E8:
000da4 81ae      	LDD  R26,Y+6
000da5 30a1      	CPI  R26,LOW(0x1)
000da6 f451      	BRNE _0x1E9
000da7 940e 12bf 	CALL SUBOPT_0x4F
000da9 940e 1348 	CALL SUBOPT_0x5E
000dab 97b8      	SBIW R30,40
000dac 0fea      	ADD  R30,R26
000dad 1ffb      	ADC  R31,R27
000dae 01d0      	MOVW R26,R0
000daf 93ed      	ST   X+,R30
000db0 93fc      	ST   X,R31
                 ; 0000 02B5         if(Value[i] >= Cardio_Y_Max) Value[i] = Cardio_Y_Max - 1;
                 _0x1E9:
000db1 940e 12bf 	CALL SUBOPT_0x4F
000db3 940e 12e7 	CALL SUBOPT_0x54
000db5 3ee8      	CPI  R30,LOW(0xE8)
000db6 e0a0      	LDI  R26,HIGH(0xE8)
000db7 07fa      	CPC  R31,R26
000db8 f024      	BRLT _0x1EA
000db9 940e 12bf 	CALL SUBOPT_0x4F
000dbb 940e 12ec 	CALL SUBOPT_0x55
                 ; 0000 02B6         if(Value[i] < Cardio_Y_Min) Value[i] = Cardio_Y_Min;
                 _0x1EA:
000dbd 940e 12bf 	CALL SUBOPT_0x4F
000dbf 940e 12e7 	CALL SUBOPT_0x54
000dc1 97f2      	SBIW R30,50
000dc2 f424      	BRGE _0x1EB
000dc3 940e 12bf 	CALL SUBOPT_0x4F
000dc5 940e 12f3 	CALL SUBOPT_0x56
                 ; 0000 02B7 
                 ; 0000 02B8         // пишем точку в столбце
                 ; 0000 02B9         SSD1963_DrawLine(Cardio_X, Cardio_X + Length, ValueLast[i], Value[i], Color[i], 2);
                 _0x1EB:
000dc7 940e 1296 	CALL SUBOPT_0x4B
000dc9 940e 12fa 	CALL SUBOPT_0x57
000dcb 940e 1301 	CALL SUBOPT_0x58
000dcd 940e 130a 	CALL SUBOPT_0x59
000dcf 940e 1275 	CALL SUBOPT_0x48
000dd1 940e 1313 	CALL SUBOPT_0x5A
                 ; 0000 02BA         ValueLast[i] = Value[i]; // определяем предыдущую точку кардиограммы
000dd3 940e 12e7 	CALL SUBOPT_0x54
000dd5 01d0      	MOVW R26,R0
000dd6 93ed      	ST   X+,R30
000dd7 93fc      	ST   X,R31
                 ; 0000 02BB     }
000dd8 81ee      	LDD  R30,Y+6
000dd9 5fef      	SUBI R30,-LOW(1)
000dda 83ee      	STD  Y+6,R30
000ddb cf9f      	RJMP _0x1E5
                 _0x1E6:
                 ; 0000 02BC 
                 ; 0000 02BD     Cardio_X += Length; // увеличеваем Х кардиограммы
000ddc 940e 131f 	CALL SUBOPT_0x5B
                 ; 0000 02BE 
                 ; 0000 02BF   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
000dde f440      	BRSH _0x1EC
                 ; 0000 02C0   {
                 ; 0000 02C1     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000ddf 940e 1335 	CALL SUBOPT_0x5C
000de1 940e 1340 	CALL SUBOPT_0x5D
                 ; 0000 02C2     Cardio_X = Cardio_X_Min; // уходим обратно
                 ; 0000 02C3     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000de3 940e 12a6 	CALL SUBOPT_0x4C
000de5 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 02C4   }
                 ; 0000 02C5 }
                 _0x1EC:
000de7 940e 15d5 	CALL __LOADLOCR6
000de9 9665      	ADIW R28,21
000dea 9508      	RET
                 ;
                 ;
                 ;void Paint_Cardio(unsigned int Value, unsigned int Color, unsigned int Length)
                 ; 0000 02C9 {
                 ; 0000 02CA   signed int temp, temp2;
                 ; 0000 02CB   temp = Cardio_Y_Max - (Value / Cardio_Divider);
                 ;	Value -> Y+8
                 ;	Color -> Y+6
                 ;	Length -> Y+4
                 ;	temp -> R16,R17
                 ;	temp2 -> R18,R19
                 ; 0000 02CC   if (temp < Cardio_Y_Min) temp = Cardio_Y_Min;
                 ; 0000 02CD   if (temp > Cardio_Y_Max) temp = Cardio_Y_Max - 1;
                 ; 0000 02CE   temp2 = Cardio_Y_Max - (WorkParameters[2] / Cardio_Divider);
                 ; 0000 02CF   if (temp2 < Cardio_Y_Min) temp2 = Cardio_Y_Min;
                 ; 0000 02D0 
                 ; 0000 02D1   SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем за собой столбец пикселей
                 ; 0000 02D2 //  Paint_ScanLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max, DGRAY, 25);
                 ; 0000 02D3   //SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Min, DGRAY);
                 ; 0000 02D4   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 25, Cardio_Y_Min + 25, DGRAY);
                 ; 0000 02D5   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 50, Cardio_Y_Min + 50, DGRAY);
                 ; 0000 02D6   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 75, Cardio_Y_Min + 75, DGRAY);
                 ; 0000 02D7   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 100, Cardio_Y_Min + 100, DGRAY);
                 ; 0000 02D8   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 125, Cardio_Y_Min + 125, DGRAY);
                 ; 0000 02D9   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 150, Cardio_Y_Min + 150, DGRAY);
                 ; 0000 02DA 
                 ; 0000 02DB   //if ((Cardio_X % Length) < 1)  SSD1963_DrawFastLine(Cardio_X, Cardio_X, Cardio_Y_Min, Cardio_Y_Max, DGRAY);
                 ; 0000 02DC   SSD1963_DrawLine(Cardio_X, Cardio_X + Length, temp2, temp2, YELLOW, 1); // пишем точку в столбце
                 ; 0000 02DD   SSD1963_DrawLine(Cardio_X, Cardio_X + Length, Cardio_Y_Last, temp, Color, 2); // пишем точку в столбце
                 ; 0000 02DE   Cardio_X += Length; // увеличеваем Х кардиограммы
                 ; 0000 02DF   Cardio_Y_Last = temp; // определяем предыдущую точку кардиограммы
                 ; 0000 02E0   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
                 ; 0000 02E1   {
                 ; 0000 02E2     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 02E3     Cardio_X = Cardio_X_Min; // уходим обратно
                 ; 0000 02E4     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 02E5   }
                 ; 0000 02E6 }
                 ;
                 ;void Calc_Pulse(unsigned int Value)
                 ; 0000 02E9 {
                 ; 0000 02EA   if (Value > WorkParameters[2])
                 ;	Value -> Y+0
                 ; 0000 02EB   {
                 ; 0000 02EC     if (Pulse_Flag < 1)
                 ; 0000 02ED     {
                 ; 0000 02EE       Pulse_Counter++;
                 ; 0000 02EF       Pulse_Flag = 1;
                 ; 0000 02F0     }
                 ; 0000 02F1   }
                 ; 0000 02F2   else if (Pulse_Flag > 0) Pulse_Flag = 0;
                 ; 0000 02F3 
                 ; 0000 02F4   if (Pulse_mSec > 59999)
                 ; 0000 02F5   {
                 ; 0000 02F6     Pulse_mSec = 0;
                 ; 0000 02F7     Pulse_Value = Pulse_Counter;
                 ; 0000 02F8     Pulse_Counter = 0;
                 ; 0000 02F9   }
                 ; 0000 02FA }
                 ;
                 ;/*void Paint_Battery(unsigned int Value)
                 ;{
                 ;  SSD1963_DrawFillRect(Battery_X + 4, Battery_Width - 4, Battery_Y + 4, Battery_Height - 4, BLACK);
                 ;  SSD1963_DrawFillRect(Battery_X + 4, Battery_Width - 4, Battery_Y + 4 + (45 - Value), Battery_Height - 4, GREEN);
                 ;*/
                 ;void PutParameterText(char Number, char X, char Y, unsigned int Color)
                 ; 0000 0302 {
                 _PutParameterText:
                 ; 0000 0303   SSD1963_PutString16("                ", X, Y, Color, BLACK);
                 ;	Number -> Y+4
                 ;	X -> Y+3
                 ;	Y -> Y+2
                 ;	Color -> Y+0
                +
000deb e2eb     +LDI R30 , LOW ( _0x1F6 + ( 0 ) )
000dec e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 0 ) )
                 	__POINTW1MN _0x1F6,0
000ded 940e 1351 	CALL SUBOPT_0x5F
000def 940e 135a 	CALL SUBOPT_0x60
000df1 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0304   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000df3 e3ec     +LDI R30 , LOW ( _0x1F6 + ( 17 ) )
000df4 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 17 ) )
                 	__POINTW1MN _0x1F6,17
000df5 940e 1351 	CALL SUBOPT_0x5F
000df7 9670      	ADIW R30,16
000df8 940e 135a 	CALL SUBOPT_0x60
000dfa 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0305   switch (Number)
000dfc 81ec      	LDD  R30,Y+4
000dfd 940e 135f 	CALL SUBOPT_0x61
                 ; 0000 0306   {
                 ; 0000 0307     case 0 :
000dff f459      	BRNE _0x1FA
                 ; 0000 0308       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000e00 e4ed     +LDI R30 , LOW ( _0x1F6 + ( 34 ) )
000e01 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 34 ) )
                 	__POINTW1MN _0x1F6,34
000e02 940e 1351 	CALL SUBOPT_0x5F
000e04 940e 135a 	CALL SUBOPT_0x60
000e06 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0309       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e08 e5e8     +LDI R30 , LOW ( _0x1F6 + ( 45 ) )
000e09 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 45 ) )
                 	__POINTW1MN _0x1F6,45
000e0a c01d      	RJMP _0x23D
                 ; 0000 030A     break;
                 ; 0000 030B     case 1 :
                 _0x1FA:
000e0b 30e1      	CPI  R30,LOW(0x1)
000e0c e0a0      	LDI  R26,HIGH(0x1)
000e0d 07fa      	CPC  R31,R26
000e0e f459      	BRNE _0x1FB
                 ; 0000 030C       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000e0f e5ec     +LDI R30 , LOW ( _0x1F6 + ( 49 ) )
000e10 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 49 ) )
                 	__POINTW1MN _0x1F6,49
000e11 940e 1351 	CALL SUBOPT_0x5F
000e13 940e 135a 	CALL SUBOPT_0x60
000e15 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 030D       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e17 e6e0     +LDI R30 , LOW ( _0x1F6 + ( 53 ) )
000e18 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 53 ) )
                 	__POINTW1MN _0x1F6,53
000e19 c00e      	RJMP _0x23D
                 ; 0000 030E     break;
                 ; 0000 030F     case 2 :
                 _0x1FB:
000e1a 30e2      	CPI  R30,LOW(0x2)
000e1b e0a0      	LDI  R26,HIGH(0x2)
000e1c 07fa      	CPC  R31,R26
000e1d f4b9      	BRNE _0x1F9
                 ; 0000 0310       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000e1e e6e4     +LDI R30 , LOW ( _0x1F6 + ( 57 ) )
000e1f e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 57 ) )
                 	__POINTW1MN _0x1F6,57
000e20 940e 1351 	CALL SUBOPT_0x5F
000e22 940e 135a 	CALL SUBOPT_0x60
000e24 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0311       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e26 e7e5     +LDI R30 , LOW ( _0x1F6 + ( 74 ) )
000e27 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 74 ) )
                 	__POINTW1MN _0x1F6,74
                 _0x23D:
000e28 93fa      	ST   -Y,R31
000e29 93ea      	ST   -Y,R30
000e2a 81ed      	LDD  R30,Y+5
000e2b e0f0      	LDI  R31,0
000e2c 93fa      	ST   -Y,R31
000e2d 93ea      	ST   -Y,R30
000e2e 81ee      	LDD  R30,Y+6
000e2f e0f0      	LDI  R31,0
000e30 9670      	ADIW R30,16
000e31 940e 135a 	CALL SUBOPT_0x60
000e33 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0312     break;
                 ; 0000 0313     /*
                 ; 0000 0314     case 3 :
                 ; 0000 0315       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 0316       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0317     break;
                 ; 0000 0318     case 4 :
                 ; 0000 0319       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 031A       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 031B     break;
                 ; 0000 031C     case 5 :
                 ; 0000 031D       SSD1963_PutString16("НЕ ИСПОЛЬЗУЕТСЯ", X, Y, Color, BLACK);
                 ; 0000 031E       SSD1963_PutString16("В ТЕКУЩЕЙ ВЕРСИИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 031F     break;
                 ; 0000 0320     case 6 :
                 ; 0000 0321       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 0322       SSD1963_PutString16("ДЕНЬ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0323     break;
                 ; 0000 0324     case 7 :
                 ; 0000 0325       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 0326       SSD1963_PutString16("МЕСЯЦ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0327     break;
                 ; 0000 0328     case 8 :
                 ; 0000 0329       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 032A       SSD1963_PutString16("ЧАС", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 032B     break;
                 ; 0000 032C     case 9 :
                 ; 0000 032D       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 032E       SSD1963_PutString16("МИНУТЫ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 032F     break;*/
                 ; 0000 0330   }
                 _0x1F9:
                 ; 0000 0331 }
000e35 9625      	ADIW R28,5
000e36 9508      	RET
                 
                 	.DSEG
                 _0x1F6:
00052b           	.BYTE 0x56
                 ;
                 ;void main(void)
                 ; 0000 0334 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0335 unsigned int ii = 0xffff;
                 ; 0000 0336 char yiii[3];
                 ; 0000 0337 
                 ; 0000 0338 {
000e37 9723      	SBIW R28,3
                 ;	ii -> R16,R17
                 ;	yiii -> Y+0
                +
000e38 ef0f     +LDI R16 , LOW ( - 1 )
000e39 ef1f     +LDI R17 , HIGH ( - 1 )
                 	__GETWRN 16,17,-1
                 ; 0000 0339 // Input/Output Ports initialization
                 ; 0000 033A // Port A initialization
                 ; 0000 033B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 033C // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 033D PORTA=0x00;
000e3a e0e0      	LDI  R30,LOW(0)
000e3b bbeb      	OUT  0x1B,R30
                 ; 0000 033E DDRA=0xFF;
000e3c efef      	LDI  R30,LOW(255)
000e3d bbea      	OUT  0x1A,R30
                 ; 0000 033F 
                 ; 0000 0340 // Port B initialization
                 ; 0000 0341 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 0342 // State7=0 State6=0 State5=0 State4=0 State3=T State2=0 State1=0 State0=0
                 ; 0000 0343 PORTB=0x00;
000e3e e0e0      	LDI  R30,LOW(0)
000e3f bbe8      	OUT  0x18,R30
                 ; 0000 0344 DDRB=0xF7;
000e40 efe7      	LDI  R30,LOW(247)
000e41 bbe7      	OUT  0x17,R30
                 ; 0000 0345 
                 ; 0000 0346 // Port C initialization
                 ; 0000 0347 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0348 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0349 PORTC=0x00;
000e42 e0e0      	LDI  R30,LOW(0)
000e43 bbe5      	OUT  0x15,R30
                 ; 0000 034A DDRC=0xFF;
000e44 efef      	LDI  R30,LOW(255)
000e45 bbe4      	OUT  0x14,R30
                 ; 0000 034B 
                 ; 0000 034C // Port D initialization
                 ; 0000 034D // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
                 ; 0000 034E // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=0 State0=0
                 ; 0000 034F PORTD=0x00;
000e46 e0e0      	LDI  R30,LOW(0)
000e47 bbe2      	OUT  0x12,R30
                 ; 0000 0350 DDRD=0xFB;
000e48 efeb      	LDI  R30,LOW(251)
000e49 bbe1      	OUT  0x11,R30
                 ; 0000 0351 
                 ; 0000 0352 // Port E initialization
                 ; 0000 0353 // Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=In
                 ; 0000 0354 // State7=0 State6=T State5=0 State4=0 State3=T State2=0 State1=0 State0=T
                 ; 0000 0355 PORTE=0x00;
000e4a e0e0      	LDI  R30,LOW(0)
000e4b b9e3      	OUT  0x3,R30
                 ; 0000 0356 DDRE=0xB6;
000e4c ebe6      	LDI  R30,LOW(182)
000e4d b9e2      	OUT  0x2,R30
                 ; 0000 0357 
                 ; 0000 0358 // Port F initialization
                 ; 0000 0359 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 035A // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
                 ; 0000 035B PORTF=0x00;
000e4e e0e0      	LDI  R30,LOW(0)
000e4f 93e0 0062 	STS  98,R30
                 ; 0000 035C DDRF=0xF8;
000e51 efe8      	LDI  R30,LOW(248)
000e52 93e0 0061 	STS  97,R30
                 ; 0000 035D 
                 ; 0000 035E // Port G initialization
                 ; 0000 035F // Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0360 // State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0361 PORTG=0x00;
000e54 e0e0      	LDI  R30,LOW(0)
000e55 93e0 0065 	STS  101,R30
                 ; 0000 0362 DDRG=0x1F;
000e57 e1ef      	LDI  R30,LOW(31)
000e58 93e0 0064 	STS  100,R30
                 ; 0000 0363 
                 ; 0000 0364 // Timer/Counter 0 initialization
                 ; 0000 0365 // Clock source: System Clock
                 ; 0000 0366 // Clock value: 250,000 kHz
                 ; 0000 0367 // Mode: Normal top=0xFF
                 ; 0000 0368 // OC0 output: Disconnected
                 ; 0000 0369 ASSR=0x00;
000e5a e0e0      	LDI  R30,LOW(0)
000e5b bfe0      	OUT  0x30,R30
                 ; 0000 036A TCCR0=0x04;
000e5c e0e4      	LDI  R30,LOW(4)
000e5d bfe3      	OUT  0x33,R30
                 ; 0000 036B TCNT0=0x06;
000e5e e0e6      	LDI  R30,LOW(6)
000e5f bfe2      	OUT  0x32,R30
                 ; 0000 036C OCR0=0x00;
000e60 e0e0      	LDI  R30,LOW(0)
000e61 bfe1      	OUT  0x31,R30
                 ; 0000 036D 
                 ; 0000 036E // Timer/Counter 1 initialization
                 ; 0000 036F // Clock source: System Clock
                 ; 0000 0370 // Clock value: Timer1 Stopped
                 ; 0000 0371 // Mode: Normal top=0xFFFF
                 ; 0000 0372 // OC1A output: Discon.
                 ; 0000 0373 // OC1B output: Discon.
                 ; 0000 0374 // OC1C output: Discon.
                 ; 0000 0375 // Noise Canceler: Off
                 ; 0000 0376 // Input Capture on Falling Edge
                 ; 0000 0377 // Timer1 Overflow Interrupt: Off
                 ; 0000 0378 // Input Capture Interrupt: Off
                 ; 0000 0379 // Compare A Match Interrupt: Off
                 ; 0000 037A // Compare B Match Interrupt: Off
                 ; 0000 037B // Compare C Match Interrupt: Off
                 ; 0000 037C TCCR1A=0x00;
000e62 bdef      	OUT  0x2F,R30
                 ; 0000 037D TCCR1B=0x00;
000e63 bdee      	OUT  0x2E,R30
                 ; 0000 037E TCNT1H=0x00;
000e64 bded      	OUT  0x2D,R30
                 ; 0000 037F TCNT1L=0x00;
000e65 bdec      	OUT  0x2C,R30
                 ; 0000 0380 ICR1H=0x00;
000e66 bde7      	OUT  0x27,R30
                 ; 0000 0381 ICR1L=0x00;
000e67 bde6      	OUT  0x26,R30
                 ; 0000 0382 OCR1AH=0x00;
000e68 bdeb      	OUT  0x2B,R30
                 ; 0000 0383 OCR1AL=0x00;
000e69 bdea      	OUT  0x2A,R30
                 ; 0000 0384 OCR1BH=0x00;
000e6a bde9      	OUT  0x29,R30
                 ; 0000 0385 OCR1BL=0x00;
000e6b bde8      	OUT  0x28,R30
                 ; 0000 0386 OCR1CH=0x00;
000e6c 93e0 0079 	STS  121,R30
                 ; 0000 0387 OCR1CL=0x00;
000e6e 93e0 0078 	STS  120,R30
                 ; 0000 0388 
                 ; 0000 0389 // Timer/Counter 2 initialization
                 ; 0000 038A // Clock source: System Clock
                 ; 0000 038B // Clock value: Timer2 Stopped
                 ; 0000 038C // Mode: Normal top=0xFF
                 ; 0000 038D // OC2 output: Disconnected
                 ; 0000 038E TCCR2=0x00;
000e70 bde5      	OUT  0x25,R30
                 ; 0000 038F TCNT2=0x00;
000e71 bde4      	OUT  0x24,R30
                 ; 0000 0390 OCR2=0x00;
000e72 bde3      	OUT  0x23,R30
                 ; 0000 0391 
                 ; 0000 0392 // Timer/Counter 3 initialization
                 ; 0000 0393 // Clock source: System Clock
                 ; 0000 0394 // Clock value: Timer3 Stopped
                 ; 0000 0395 // Mode: Normal top=0xFFFF
                 ; 0000 0396 // OC3A output: Discon.
                 ; 0000 0397 // OC3B output: Discon.
                 ; 0000 0398 // OC3C output: Discon.
                 ; 0000 0399 // Noise Canceler: Off
                 ; 0000 039A // Input Capture on Falling Edge
                 ; 0000 039B // Timer3 Overflow Interrupt: Off
                 ; 0000 039C // Input Capture Interrupt: Off
                 ; 0000 039D // Compare A Match Interrupt: Off
                 ; 0000 039E // Compare B Match Interrupt: Off
                 ; 0000 039F // Compare C Match Interrupt: Off
                 ; 0000 03A0 TCCR3A=0x00;
000e73 93e0 008b 	STS  139,R30
                 ; 0000 03A1 TCCR3B=0x00;
000e75 93e0 008a 	STS  138,R30
                 ; 0000 03A2 TCNT3H=0x00;
000e77 93e0 0089 	STS  137,R30
                 ; 0000 03A3 TCNT3L=0x00;
000e79 93e0 0088 	STS  136,R30
                 ; 0000 03A4 ICR3H=0x00;
000e7b 93e0 0081 	STS  129,R30
                 ; 0000 03A5 ICR3L=0x00;
000e7d 93e0 0080 	STS  128,R30
                 ; 0000 03A6 OCR3AH=0x00;
000e7f 93e0 0087 	STS  135,R30
                 ; 0000 03A7 OCR3AL=0x00;
000e81 93e0 0086 	STS  134,R30
                 ; 0000 03A8 OCR3BH=0x00;
000e83 93e0 0085 	STS  133,R30
                 ; 0000 03A9 OCR3BL=0x00;
000e85 93e0 0084 	STS  132,R30
                 ; 0000 03AA OCR3CH=0x00;
000e87 93e0 0083 	STS  131,R30
                 ; 0000 03AB OCR3CL=0x00;
000e89 93e0 0082 	STS  130,R30
                 ; 0000 03AC 
                 ; 0000 03AD // External Interrupt(s) initialization
                 ; 0000 03AE // INT0: Off
                 ; 0000 03AF // INT1: Off
                 ; 0000 03B0 // INT2: Off
                 ; 0000 03B1 // INT3: Off
                 ; 0000 03B2 // INT4: Off
                 ; 0000 03B3 // INT5: Off
                 ; 0000 03B4 // INT6: Off
                 ; 0000 03B5 // INT7: Off
                 ; 0000 03B6 EICRA=0x00;
000e8b 93e0 006a 	STS  106,R30
                 ; 0000 03B7 EICRB=0x00;
000e8d bfea      	OUT  0x3A,R30
                 ; 0000 03B8 EIMSK=0x00;
000e8e bfe9      	OUT  0x39,R30
                 ; 0000 03B9 
                 ; 0000 03BA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 03BB TIMSK=0x01;
000e8f e0e1      	LDI  R30,LOW(1)
000e90 bfe7      	OUT  0x37,R30
                 ; 0000 03BC 
                 ; 0000 03BD ETIMSK=0x00;
000e91 e0e0      	LDI  R30,LOW(0)
000e92 93e0 007d 	STS  125,R30
                 ; 0000 03BE 
                 ; 0000 03BF // USART0 initialization
                 ; 0000 03C0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 03C1 // USART0 Receiver: On
                 ; 0000 03C2 // USART0 Transmitter: On
                 ; 0000 03C3 // USART0 Mode: Asynchronous
                 ; 0000 03C4 // USART0 Baud Rate: 115200
                 ; 0000 03C5 UCSR0A=0x00;
000e94 b9eb      	OUT  0xB,R30
                 ; 0000 03C6 UCSR0B=0xD8;
000e95 ede8      	LDI  R30,LOW(216)
000e96 b9ea      	OUT  0xA,R30
                 ; 0000 03C7 UCSR0C=0x06;
000e97 e0e6      	LDI  R30,LOW(6)
000e98 93e0 0095 	STS  149,R30
                 ; 0000 03C8 UBRR0H=0x00;
000e9a e0e0      	LDI  R30,LOW(0)
000e9b 93e0 0090 	STS  144,R30
                 ; 0000 03C9 UBRR0L=0x08;
000e9d e0e8      	LDI  R30,LOW(8)
000e9e b9e9      	OUT  0x9,R30
                 ; 0000 03CA 
                 ; 0000 03CB // USART1 initialization
                 ; 0000 03CC // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 03CD // USART1 Receiver: On
                 ; 0000 03CE // USART1 Transmitter: On
                 ; 0000 03CF // USART1 Mode: Asynchronous
                 ; 0000 03D0 // USART1 Baud Rate: 9600
                 ; 0000 03D1 UCSR1A=0x00;
000e9f e0e0      	LDI  R30,LOW(0)
000ea0 93e0 009b 	STS  155,R30
                 ; 0000 03D2 UCSR1B=0xD8;
000ea2 ede8      	LDI  R30,LOW(216)
000ea3 93e0 009a 	STS  154,R30
                 ; 0000 03D3 UCSR1C=0x06;
000ea5 e0e6      	LDI  R30,LOW(6)
000ea6 93e0 009d 	STS  157,R30
                 ; 0000 03D4 UBRR1H=0x00;
000ea8 e0e0      	LDI  R30,LOW(0)
000ea9 93e0 0098 	STS  152,R30
                 ; 0000 03D5 UBRR1L=0x67;
000eab e6e7      	LDI  R30,LOW(103)
000eac 93e0 0099 	STS  153,R30
                 ; 0000 03D6 
                 ; 0000 03D7 // Analog Comparator initialization
                 ; 0000 03D8 // Analog Comparator: Off
                 ; 0000 03D9 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 03DA ACSR=0x80;
000eae e8e0      	LDI  R30,LOW(128)
000eaf b9e8      	OUT  0x8,R30
                 ; 0000 03DB SFIOR=0x00;
000eb0 e0e0      	LDI  R30,LOW(0)
000eb1 bde0      	OUT  0x20,R30
                 ; 0000 03DC 
                 ; 0000 03DD // ADC initialization
                 ; 0000 03DE // ADC Clock frequency: 1000,000 kHz
                 ; 0000 03DF // ADC Voltage Reference: AREF pin
                 ; 0000 03E0 ADMUX=ADC_VREF_TYPE & 0xff;
000eb2 b9e7      	OUT  0x7,R30
                 ; 0000 03E1 ADCSRA=0x84;
000eb3 e8e4      	LDI  R30,LOW(132)
000eb4 b9e6      	OUT  0x6,R30
                 ; 0000 03E2 
                 ; 0000 03E3 // SPI initialization
                 ; 0000 03E4 // SPI Type: Master
                 ; 0000 03E5 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 03E6 // SPI Clock Phase: Cycle Start
                 ; 0000 03E7 // SPI Clock Polarity: Low
                 ; 0000 03E8 // SPI Data Order: MSB First
                 ; 0000 03E9 SPCR=0x52;
000eb5 e5e2      	LDI  R30,LOW(82)
000eb6 b9ed      	OUT  0xD,R30
                 ; 0000 03EA SPSR=0x00;
000eb7 e0e0      	LDI  R30,LOW(0)
000eb8 b9ee      	OUT  0xE,R30
                 ; 0000 03EB 
                 ; 0000 03EC // TWI initialization
                 ; 0000 03ED // TWI disabled
                 ; 0000 03EE TWCR=0x00;
000eb9 93e0 0074 	STS  116,R30
                 ; 0000 03EF 
                 ; 0000 03F0 // I2C Bus initialization
                 ; 0000 03F1 i2c_init();
000ebb 940e 139d 	CALL _i2c_init
                 ; 0000 03F2 
                 ; 0000 03F3 // Global enable interrupts
                 ; 0000 03F4 #asm("sei")
000ebd 9478      	sei
                 ; 0000 03F5 }
                 ; 0000 03F6 
                 ; 0000 03F7   //PORTE.6 = 1;
                 ; 0000 03F8   SwitchPORTF(LEDGREEN, 1);
000ebe 940e 11db 	CALL SUBOPT_0x2C
                 ; 0000 03F9   SwitchPORTF(LEDRED, 1);
000ec0 940e 11cf 	CALL SUBOPT_0x2A
                 ; 0000 03FA   SwitchPORTF(LEDBLUE, 1);
000ec2 940e 11d5 	CALL SUBOPT_0x2B
                 ; 0000 03FB   delay_ms(1000);
000ec4 eee8      	LDI  R30,LOW(1000)
000ec5 e0f3      	LDI  R31,HIGH(1000)
000ec6 940e 105e 	CALL SUBOPT_0x4
                 ; 0000 03FC 
                 ; 0000 03FD   SSD1963_Init();
000ec8 940e 0553 	CALL _SSD1963_Init
                 ; 0000 03FE   SwitchPORTF(BACKLIGHT, 1);
000eca 940e 1362 	CALL SUBOPT_0x62
                 ; 0000 03FF   /*SSD1963_ClearScreen(BLACK);
                 ; 0000 0400   SSD1963_PutString16("ИНИЦИАЛИЗАЦИЯ...", 0, 0, WHITE, BLACK);
                 ; 0000 0401   SSD1963_PutString16("ВНУТРЕННЯЯ ПАМЯТЬ...", 0, FONT_HEIGHT * 1, WHITE, BLACK);
                 ; 0000 0402   */
                 ; 0000 0403   if (EEPROM_FLAG > 1)
000ecc e0a6      	LDI  R26,LOW(_EEPROM_FLAG)
000ecd e0b0      	LDI  R27,HIGH(_EEPROM_FLAG)
000ece 940e 15a4 	CALL __EEPROMRDB
000ed0 30e2      	CPI  R30,LOW(0x2)
000ed1 f0d8      	BRLO _0x1FD
                 ; 0000 0404   {
                 ; 0000 0405     for(i = 0; i < 3; i++)
000ed2 2444      	CLR  R4
                 _0x1FF:
000ed3 e0e3      	LDI  R30,LOW(3)
000ed4 164e      	CP   R4,R30
000ed5 f490      	BRSH _0x200
                 ; 0000 0406     WorkParameters[i] = Default_Parameters[i];
000ed6 2de4      	MOV  R30,R4
000ed7 e0a0      	LDI  R26,LOW(_WorkParameters)
000ed8 e0b0      	LDI  R27,HIGH(_WorkParameters)
000ed9 940e 1368 	CALL SUBOPT_0x63
000edb 01bf      	MOVW R22,R30
000edc 2de4      	MOV  R30,R4
000edd ecac      	LDI  R26,LOW(_Default_Parameters*2)
000ede e0b7      	LDI  R27,HIGH(_Default_Parameters*2)
000edf 940e 1368 	CALL SUBOPT_0x63
000ee1 940e 159c 	CALL __GETW1PF
000ee3 01db      	MOVW R26,R22
000ee4 940e 15b0 	CALL __EEPROMWRW
000ee6 9443      	INC  R4
000ee7 cfeb      	RJMP _0x1FF
                 _0x200:
                 ; 0000 0407 EEPROM_FLAG = 0;
000ee8 e0a6      	LDI  R26,LOW(_EEPROM_FLAG)
000ee9 e0b0      	LDI  R27,HIGH(_EEPROM_FLAG)
000eea e0e0      	LDI  R30,LOW(0)
000eeb 940e 15b8 	CALL __EEPROMWRB
                 ; 0000 0408   }
                 ; 0000 0409   /*
                 ; 0000 040A   SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ...", 0, FONT_HEIGHT * 2, WHITE, BLACK);
                 ; 0000 040B   rtc_init(0, 0);
                 ; 0000 040C   rtc_get_time(0, &Hour, &Minute, &Seconds, &mSeconds);
                 ; 0000 040D   rtc_get_date(0, &Day, &Month, &Year);*/
                 ; 0000 040E 
                 ; 0000 040F   SSD1963_ClearScreen(BLACK);
                 _0x1FD:
000eed 940e 1089 	CALL SUBOPT_0xC
000eef 940e 05f6 	CALL _SSD1963_ClearScreen
                 ; 0000 0410 
                 ; 0000 0411   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, RED, BLACK);
                +
000ef1 e8e1     +LDI R30 , LOW ( _0x201 + ( 0 ) )
000ef2 e0f5     +LDI R31 , HIGH ( _0x201 + ( 0 ) )
                 	__POINTW1MN _0x201,0
000ef3 940e 136e 	CALL SUBOPT_0x64
000ef5 e7e0      	LDI  R30,LOW(112)
000ef6 e0f0      	LDI  R31,HIGH(112)
000ef7 940e 1375 	CALL SUBOPT_0x65
000ef9 940e 137a 	CALL SUBOPT_0x66
                 ; 0000 0412   delay_ms(300);
                 ; 0000 0413   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), YELLOW, BLACK);
                +
000efb e8e8     +LDI R30 , LOW ( _0x201 + ( 7 ) )
000efc e0f5     +LDI R31 , HIGH ( _0x201 + ( 7 ) )
                 	__POINTW1MN _0x201,7
000efd 940e 136e 	CALL SUBOPT_0x64
000eff e8e0      	LDI  R30,LOW(128)
000f00 e0f0      	LDI  R31,HIGH(128)
000f01 93fa      	ST   -Y,R31
000f02 93ea      	ST   -Y,R30
000f03 e0e7      	LDI  R30,LOW(65287)
000f04 efff      	LDI  R31,HIGH(65287)
000f05 940e 108e 	CALL SUBOPT_0xD
000f07 940e 137a 	CALL SUBOPT_0x66
                 ; 0000 0414   delay_ms(300);
                 ; 0000 0415   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, RED, BLACK);
                +
000f09 e8ef     +LDI R30 , LOW ( _0x201 + ( 14 ) )
000f0a e0f5     +LDI R31 , HIGH ( _0x201 + ( 14 ) )
                 	__POINTW1MN _0x201,14
000f0b 940e 136e 	CALL SUBOPT_0x64
000f0d e9e0      	LDI  R30,LOW(144)
000f0e e0f0      	LDI  R31,HIGH(144)
000f0f 940e 1375 	CALL SUBOPT_0x65
000f11 940e 137a 	CALL SUBOPT_0x66
                 ; 0000 0416   delay_ms(300);
                 ; 0000 0417   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
000f13 e9e6     +LDI R30 , LOW ( _0x201 + ( 21 ) )
000f14 e0f5     +LDI R31 , HIGH ( _0x201 + ( 21 ) )
                 	__POINTW1MN _0x201,21
000f15 940e 136e 	CALL SUBOPT_0x64
000f17 e7e0      	LDI  R30,LOW(112)
000f18 e0f0      	LDI  R31,HIGH(112)
000f19 940e 108e 	CALL SUBOPT_0xD
000f1b 940e 1089 	CALL SUBOPT_0xC
000f1d 940e 137a 	CALL SUBOPT_0x66
                 ; 0000 0418   delay_ms(300);
                 ; 0000 0419   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
000f1f e9ed     +LDI R30 , LOW ( _0x201 + ( 28 ) )
000f20 e0f5     +LDI R31 , HIGH ( _0x201 + ( 28 ) )
                 	__POINTW1MN _0x201,28
000f21 940e 136e 	CALL SUBOPT_0x64
000f23 e8e0      	LDI  R30,LOW(128)
000f24 e0f0      	LDI  R31,HIGH(128)
000f25 940e 108e 	CALL SUBOPT_0xD
000f27 940e 1089 	CALL SUBOPT_0xC
000f29 940e 137a 	CALL SUBOPT_0x66
                 ; 0000 041A   delay_ms(300);
                 ; 0000 041B   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
000f2b eae4     +LDI R30 , LOW ( _0x201 + ( 35 ) )
000f2c e0f5     +LDI R31 , HIGH ( _0x201 + ( 35 ) )
                 	__POINTW1MN _0x201,35
000f2d 940e 136e 	CALL SUBOPT_0x64
000f2f e9e0      	LDI  R30,LOW(144)
000f30 e0f0      	LDI  R31,HIGH(144)
000f31 940e 108e 	CALL SUBOPT_0xD
000f33 940e 1089 	CALL SUBOPT_0xC
000f35 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 041C 
                 ; 0000 041D   Prepare_Screen();
000f37 dcdc      	RCALL _Prepare_Screen
                 ; 0000 041E   TSC2046_Init();
000f38 940e 09a4 	CALL _TSC2046_Init
                 ; 0000 041F 
                 ; 0000 0420   Cardio_Y_Last = Cardio_Y_Min;
000f3a e3e2      	LDI  R30,LOW(50)
000f3b e0f0      	LDI  R31,HIGH(50)
000f3c 93e0 09bc 	STS  _Cardio_Y_Last,R30
000f3e 93f0 09bd 	STS  _Cardio_Y_Last+1,R31
                 ; 0000 0421   Cardio_X = Cardio_X_Min;
000f40 e0e0      	LDI  R30,LOW(0)
000f41 93e0 09ba 	STS  _Cardio_X,R30
000f43 93e0 09bb 	STS  _Cardio_X+1,R30
                 ; 0000 0422   Cardio_Divider = WorkParameters[0] / (Cardio_Y_Max - Cardio_Y_Min);
000f45 e0a0      	LDI  R26,LOW(_WorkParameters)
000f46 e0b0      	LDI  R27,HIGH(_WorkParameters)
000f47 940e 15a0 	CALL __EEPROMRDW
000f49 01df      	MOVW R26,R30
000f4a ebe6      	LDI  R30,LOW(182)
000f4b e0f0      	LDI  R31,HIGH(182)
000f4c 940e 1535 	CALL __DIVW21U
000f4e ebae      	LDI  R26,LOW(_Cardio_Divider)
000f4f e0b9      	LDI  R27,HIGH(_Cardio_Divider)
000f50 2766      	CLR  R22
000f51 2777      	CLR  R23
000f52 940e 1461 	CALL __CDF1
000f54 940e 1597 	CALL __PUTDP1
                 ; 0000 0423   PutParameterText(Parameter_Counter, 30, 16, BLUE);
000f56 940e 137f 	CALL SUBOPT_0x67
                 ; 0000 0424   Pulse_X = Pulse_X_Min;
000f58 e0ee      	LDI  R30,LOW(270)
000f59 e0f1      	LDI  R31,HIGH(270)
000f5a 93e0 09ac 	STS  _Pulse_X,R30
000f5c 93f0 09ad 	STS  _Pulse_X+1,R31
                 ; 0000 0425 
                 ; 0000 0426   //Paint_ScanLine(Cardio_X_Min, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max, DGRAY, 50);
                 ; 0000 0427 
                 ; 0000 0428    RS485 = 1;
000f5e 9a94      	SBI  0x12,4
                 ; 0000 0429 
                 ; 0000 042A while (1)
                 _0x204:
                 ; 0000 042B {
                 ; 0000 042C 
                 ; 0000 042D 
                 ; 0000 042E         switch(State)
000f5f 91e0 09c5 	LDS  R30,_State
000f61 940e 135f 	CALL SUBOPT_0x61
                 ; 0000 042F         {
                 ; 0000 0430           case 0 : // основной рабочий режим
000f63 f011      	BREQ PC+3
000f64 940c 100a 	JMP _0x20A
                 ; 0000 0431           {
                 ; 0000 0432             /*if (ADC0 > WorkParameters[0]) ADC0 = WorkParameters[0];
                 ; 0000 0433             for (i = 0; i < 192; i++) longADC += read_adc(0);
                 ; 0000 0434             longADC = longADC / 192;
                 ; 0000 0435             ADC0 = longADC;
                 ; 0000 0436             longADC = 0;*/
                 ; 0000 0437             //ADC0 = read_adc(0);
                 ; 0000 0438             //if (ADC0 > WorkParameters[0]) ADC0 = WorkParameters[0];
                 ; 0000 0439            // putchar(Address_Slave);
                 ; 0000 043A            // if (rx_counter0 > 0)
                 ; 0000 043B            // {
                 ; 0000 043C               //  ADC0 = ((getchar() << 8) + getchar());
                 ; 0000 043D             //}
                 ; 0000 043E 
                 ; 0000 043F            // Cardio_Divider = WorkParameters[0] / (Cardio_Y_Max - Cardio_Y_Min);
                 ; 0000 0440             //Paint_Cardio(ADC0, RED, WorkParameters[1]);
                 ; 0000 0441 
                 ; 0000 0442 
                 ; 0000 0443 
                 ; 0000 0444              if(WaitADC_mSec>10)
000f66 91a0 09ce 	LDS  R26,_WaitADC_mSec
000f68 91b0 09cf 	LDS  R27,_WaitADC_mSec+1
000f6a 971b      	SBIW R26,11
000f6b f0d0      	BRLO _0x20B
                 ; 0000 0445             while(rx_counter0>2 || (rx_counter0>1 && Parameter_Counter==2))
                 _0x20C:
000f6c 91a0 08c8 	LDS  R26,_rx_counter0
000f6e 30a3      	CPI  R26,LOW(0x3)
000f6f f438      	BRSH _0x20F
000f70 30a2      	CPI  R26,LOW(0x2)
000f71 f020      	BRLO _0x210
000f72 91a0 09c2 	LDS  R26,_Parameter_Counter
000f74 30a2      	CPI  R26,LOW(0x2)
000f75 f009      	BREQ _0x20F
                 _0x210:
000f76 c00f      	RJMP _0x20E
                 _0x20F:
                 ; 0000 0446             {
                 ; 0000 0447 
                 ; 0000 0448             if(Parameter_Counter<2) Paint_3phase(getchar0(),getchar0(),getchar0());
000f77 91a0 09c2 	LDS  R26,_Parameter_Counter
000f79 30a2      	CPI  R26,LOW(0x2)
000f7a f438      	BRSH _0x213
000f7b 940e 138c 	CALL SUBOPT_0x68
000f7d 940e 09df 	CALL _getchar0
000f7f 93ea      	ST   -Y,R30
000f80 dd4a      	RCALL _Paint_3phase
                 ; 0000 0449                 else Paint_2phase(getchar0(),getchar0());
000f81 c003      	RJMP _0x214
                 _0x213:
000f82 940e 138c 	CALL SUBOPT_0x68
000f84 ddd2      	RCALL _Paint_2phase
                 ; 0000 044A 
                 ; 0000 044B 
                 ; 0000 044C             }
                 _0x214:
000f85 cfe6      	RJMP _0x20C
                 _0x20E:
                 ; 0000 044D             if(tx_counter0==0 && WaitADC_mSec > 400)
                 _0x20B:
000f86 91a0 08d3 	LDS  R26,_tx_counter0
000f88 30a0      	CPI  R26,LOW(0x0)
000f89 f441      	BRNE _0x216
000f8a 91a0 09ce 	LDS  R26,_WaitADC_mSec
000f8c 91b0 09cf 	LDS  R27,_WaitADC_mSec+1
000f8e 39a1      	CPI  R26,LOW(0x191)
000f8f e0e1      	LDI  R30,HIGH(0x191)
000f90 07be      	CPC  R27,R30
000f91 f408      	BRSH _0x217
                 _0x216:
000f92 c021      	RJMP _0x215
                 _0x217:
                 ; 0000 044E             {
                 ; 0000 044F             WaitADC_mSec = 0;
000f93 e0e0      	LDI  R30,LOW(0)
000f94 93e0 09ce 	STS  _WaitADC_mSec,R30
000f96 93e0 09cf 	STS  _WaitADC_mSec+1,R30
                 ; 0000 0450             getclear0();
000f98 940e 09fb 	CALL _getclear0
                 ; 0000 0451             Cardio_X = Cardio_X_Min;
000f9a e0e0      	LDI  R30,LOW(0)
000f9b 93e0 09ba 	STS  _Cardio_X,R30
000f9d 93e0 09bb 	STS  _Cardio_X+1,R30
                 ; 0000 0452             switch(Parameter_Counter)
000f9f 91e0 09c2 	LDS  R30,_Parameter_Counter
000fa1 940e 135f 	CALL SUBOPT_0x61
                 ; 0000 0453             {
                 ; 0000 0454                 case 0: putchar0('U'); break;
000fa3 f411      	BRNE _0x21B
000fa4 e5e5      	LDI  R30,LOW(85)
000fa5 c00b      	RJMP _0x23E
                 ; 0000 0455                 case 1: putchar0('I'); break;
                 _0x21B:
000fa6 30e1      	CPI  R30,LOW(0x1)
000fa7 e0a0      	LDI  R26,HIGH(0x1)
000fa8 07fa      	CPC  R31,R26
000fa9 f411      	BRNE _0x21C
000faa e4e9      	LDI  R30,LOW(73)
000fab c005      	RJMP _0x23E
                 ; 0000 0456                 case 2: putchar0('Z'); break;
                 _0x21C:
000fac 30e2      	CPI  R30,LOW(0x2)
000fad e0a0      	LDI  R26,HIGH(0x2)
000fae 07fa      	CPC  R31,R26
000faf f421      	BRNE _0x21A
000fb0 e5ea      	LDI  R30,LOW(90)
                 _0x23E:
000fb1 93ea      	ST   -Y,R30
000fb2 940e 0a2e 	CALL _putchar0
                 ; 0000 0457             }
                 _0x21A:
                 ; 0000 0458             }
                 ; 0000 0459 
                 ; 0000 045A 
                 ; 0000 045B 
                 ; 0000 045C             if (TSC2046_GetCoordinates() > 0)
                 _0x215:
000fb4 940e 098c 	CALL _TSC2046_GetCoordinates
000fb6 30e1      	CPI  R30,LOW(0x1)
000fb7 f410      	BRSH PC+3
000fb8 940c 1009 	JMP _0x21E
                 ; 0000 045D             {
                 ; 0000 045E               Sleep_mSec = 0;
000fba 940e 1393 	CALL SUBOPT_0x69
                 ; 0000 045F               Button_Pressed = GetButton();
                 ; 0000 0460               switch (Button_Pressed)
                 ; 0000 0461               {
                 ; 0000 0462                 case 1 :
000fbc f489      	BRNE _0x222
                 ; 0000 0463                   getclear0();
000fbd 940e 09fb 	CALL _getclear0
                 ; 0000 0464                   Parameter_Counter++;
000fbf 91e0 09c2 	LDS  R30,_Parameter_Counter
000fc1 5fef      	SUBI R30,-LOW(1)
000fc2 93e0 09c2 	STS  _Parameter_Counter,R30
                 ; 0000 0465                   if (Parameter_Counter > 2) Parameter_Counter = 0;
000fc4 91a0 09c2 	LDS  R26,_Parameter_Counter
000fc6 30a3      	CPI  R26,LOW(0x3)
000fc7 f018      	BRLO _0x223
000fc8 e0e0      	LDI  R30,LOW(0)
000fc9 93e0 09c2 	STS  _Parameter_Counter,R30
                 ; 0000 0466                   PutParameterText(Parameter_Counter, 30, 16, BLUE);
                 _0x223:
000fcb 940e 137f 	CALL SUBOPT_0x67
                 ; 0000 0467                 break;
000fcd c03b      	RJMP _0x221
                 ; 0000 0468                 case 2 :
                 _0x222:
000fce 30e2      	CPI  R30,LOW(0x2)
000fcf e0a0      	LDI  R26,HIGH(0x2)
000fd0 07fa      	CPC  R31,R26
000fd1 f491      	BRNE _0x224
                 ; 0000 0469                 if(multiplier<200)multiplier+=10;
000fd2 91a0 09d6 	LDS  R26,_multiplier
000fd4 91b0 09d7 	LDS  R27,_multiplier+1
000fd6 3ca8      	CPI  R26,LOW(0xC8)
000fd7 e0e0      	LDI  R30,HIGH(0xC8)
000fd8 07be      	CPC  R27,R30
000fd9 f44c      	BRGE _0x225
000fda 91e0 09d6 	LDS  R30,_multiplier
000fdc 91f0 09d7 	LDS  R31,_multiplier+1
000fde 963a      	ADIW R30,10
000fdf 93e0 09d6 	STS  _multiplier,R30
000fe1 93f0 09d7 	STS  _multiplier+1,R31
                 ; 0000 046A 
                 ; 0000 046B                   //if (Parameter_Counter == 0) {if (WorkParameters[Parameter_Counter] > 1) WorkParameters[Parameter_Counter] -= 10;}
                 ; 0000 046C                   //else {if (WorkParameters[Parameter_Counter] < 1000) WorkParameters[Parameter_Counter]++;}
                 ; 0000 046D                 break;
                 _0x225:
000fe3 c025      	RJMP _0x221
                 ; 0000 046E                 case 3 :
                 _0x224:
000fe4 30e3      	CPI  R30,LOW(0x3)
000fe5 e0a0      	LDI  R26,HIGH(0x3)
000fe6 07fa      	CPC  R31,R26
000fe7 f481      	BRNE _0x226
                 ; 0000 046F                 if(multiplier>20)multiplier-=10;
000fe8 91a0 09d6 	LDS  R26,_multiplier
000fea 91b0 09d7 	LDS  R27,_multiplier+1
000fec 9755      	SBIW R26,21
000fed f04c      	BRLT _0x227
000fee 91e0 09d6 	LDS  R30,_multiplier
000ff0 91f0 09d7 	LDS  R31,_multiplier+1
000ff2 973a      	SBIW R30,10
000ff3 93e0 09d6 	STS  _multiplier,R30
000ff5 93f0 09d7 	STS  _multiplier+1,R31
                 ; 0000 0470 
                 ; 0000 0471                   //if (Parameter_Counter == 0) {if (WorkParameters[Parameter_Counter] < 1000) WorkParameters[Parameter_Counter] += 10;}
                 ; 0000 0472                   //else {if (WorkParameters[Parameter_Counter] > 1) WorkParameters[Parameter_Counter]--;}
                 ; 0000 0473                 break;
                 _0x227:
000ff7 c011      	RJMP _0x221
                 ; 0000 0474                 case 4 :
                 _0x226:
000ff8 30e4      	CPI  R30,LOW(0x4)
000ff9 e0a0      	LDI  R26,HIGH(0x4)
000ffa 07fa      	CPC  R31,R26
000ffb f469      	BRNE _0x221
                 ; 0000 0475                   State = 200;
000ffc ece8      	LDI  R30,LOW(200)
000ffd 93e0 09c5 	STS  _State,R30
                 ; 0000 0476                   Repaint_Button("СТАРТ", 4, BLACK, WHITE);
                +
000fff eaeb     +LDI R30 , LOW ( _0x201 + ( 42 ) )
001000 e0f5     +LDI R31 , HIGH ( _0x201 + ( 42 ) )
                 	__POINTW1MN _0x201,42
001001 940e 127a 	CALL SUBOPT_0x49
001003 940e 126f 	CALL SUBOPT_0x47
                 ; 0000 0477                   delay_ms(250);
001005 efea      	LDI  R30,LOW(250)
001006 e0f0      	LDI  R31,HIGH(250)
001007 940e 105e 	CALL SUBOPT_0x4
                 ; 0000 0478                 break;
                 ; 0000 0479               }
                 _0x221:
                 ; 0000 047A             }
                 ; 0000 047B           }
                 _0x21E:
                 ; 0000 047C           break;
001009 c036      	RJMP _0x209
                 ; 0000 047D           case 1 : // настройки
                 _0x20A:
00100a 30e1      	CPI  R30,LOW(0x1)
00100b e0a0      	LDI  R26,HIGH(0x1)
00100c 07fa      	CPC  R31,R26
00100d f191      	BREQ _0x209
                 ; 0000 047E           {
                 ; 0000 047F           }
                 ; 0000 0480           break;
                 ; 0000 0481           case 200 : // пауза
00100e 3ce8      	CPI  R30,LOW(0xC8)
00100f e0a0      	LDI  R26,HIGH(0xC8)
001010 07fa      	CPC  R31,R26
001011 f509      	BRNE _0x22A
                 ; 0000 0482           if (TSC2046_GetCoordinates() > 0)
001012 940e 098c 	CALL _TSC2046_GetCoordinates
001014 30e1      	CPI  R30,LOW(0x1)
001015 f0e0      	BRLO _0x22B
                 ; 0000 0483           {
                 ; 0000 0484             Sleep_mSec = 0;
001016 940e 1393 	CALL SUBOPT_0x69
                 ; 0000 0485             Button_Pressed = GetButton();
                 ; 0000 0486             switch (Button_Pressed)
                 ; 0000 0487             {
                 ; 0000 0488               case 1 :
001018 f0c9      	BREQ _0x22E
                 ; 0000 0489               break;
                 ; 0000 048A               case 2 :
001019 30e2      	CPI  R30,LOW(0x2)
00101a e0a0      	LDI  R26,HIGH(0x2)
00101b 07fa      	CPC  R31,R26
00101c f0a9      	BREQ _0x22E
                 ; 0000 048B               break;
                 ; 0000 048C               case 3 :
00101d 30e3      	CPI  R30,LOW(0x3)
00101e e0a0      	LDI  R26,HIGH(0x3)
00101f 07fa      	CPC  R31,R26
001020 f089      	BREQ _0x22E
                 ; 0000 048D               break;
                 ; 0000 048E               case 4 :
001021 30e4      	CPI  R30,LOW(0x4)
001022 e0a0      	LDI  R26,HIGH(0x4)
001023 07fa      	CPC  R31,R26
001024 f469      	BRNE _0x22E
                 ; 0000 048F                 State = 0;
001025 e0e0      	LDI  R30,LOW(0)
001026 93e0 09c5 	STS  _State,R30
                 ; 0000 0490                 Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
001028 ebe1     +LDI R30 , LOW ( _0x201 + ( 48 ) )
001029 e0f5     +LDI R31 , HIGH ( _0x201 + ( 48 ) )
                 	__POINTW1MN _0x201,48
00102a 940e 127a 	CALL SUBOPT_0x49
00102c 940e 126f 	CALL SUBOPT_0x47
                 ; 0000 0491                 delay_ms(250);
00102e efea      	LDI  R30,LOW(250)
00102f e0f0      	LDI  R31,HIGH(250)
001030 940e 105e 	CALL SUBOPT_0x4
                 ; 0000 0492               break;
                 ; 0000 0493             }
                 _0x22E:
                 ; 0000 0494           }
                 ; 0000 0495           break;
                 _0x22B:
001032 c00d      	RJMP _0x209
                 ; 0000 0496           case 250 : // спящий режим
                 _0x22A:
001033 3fea      	CPI  R30,LOW(0xFA)
001034 e0a0      	LDI  R26,HIGH(0xFA)
001035 07fa      	CPC  R31,R26
001036 f449      	BRNE _0x209
                 ; 0000 0497           {
                 ; 0000 0498             if (TSC2046_GetCoordinates() > 0)
001037 940e 098c 	CALL _TSC2046_GetCoordinates
001039 30e1      	CPI  R30,LOW(0x1)
00103a f028      	BRLO _0x234
                 ; 0000 0499             {
                 ; 0000 049A               State = 0;
00103b e0e0      	LDI  R30,LOW(0)
00103c 93e0 09c5 	STS  _State,R30
                 ; 0000 049B               SwitchPORTF(BACKLIGHT, 1);
00103e 940e 1362 	CALL SUBOPT_0x62
                 ; 0000 049C             }
                 ; 0000 049D           }
                 _0x234:
                 ; 0000 049E           break;
                 ; 0000 049F         }
                 _0x209:
                 ; 0000 04A0 
                 ; 0000 04A1   }
001040 cf1e      	RJMP _0x204
                 ; 0000 04A2 }
                 _0x235:
001041 cfff      	RJMP _0x235
                 
                 	.DSEG
                 _0x201:
000581           	.BYTE 0x36
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
001042 81e8      	LD   R30,Y
001043 b9ef      	OUT  0xF,R30
                 _0x2020003:
001044 9b77      	SBIS 0xE,7
001045 cffe      	RJMP _0x2020003
001046 b1ef      	IN   R30,0xF
001047 9621      	ADIW R28,1
001048 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _tempX:
0005b7           	.BYTE 0x4
                 _tempY:
0005bb           	.BYTE 0x4
                 _buffer:
0005bf           	.BYTE 0x200
                 _firstDataSector:
0007bf           	.BYTE 0x4
                 _rootCluster:
0007c3           	.BYTE 0x4
                 _totalClusters:
0007c7           	.BYTE 0x4
                 _bytesPerSector:
0007cb           	.BYTE 0x2
                 _sectorPerCluster:
0007cd           	.BYTE 0x2
                 _reservedSectorCount:
0007cf           	.BYTE 0x2
                 _freeClusterCountUpdated:
0007d1           	.BYTE 0x1
                 _unusedSectors:
0007d2           	.BYTE 0x4
                 _rx_buffer0:
0007d6           	.BYTE 0xF0
                 _rx_wr_index0:
0008c6           	.BYTE 0x1
                 _rx_rd_index0:
0008c7           	.BYTE 0x1
                 _rx_counter0:
0008c8           	.BYTE 0x1
                 _tx_buffer0:
0008c9           	.BYTE 0x8
                 _tx_wr_index0:
0008d1           	.BYTE 0x1
                 _tx_rd_index0:
0008d2           	.BYTE 0x1
                 _tx_counter0:
0008d3           	.BYTE 0x1
                 _rx_buffer1:
0008d4           	.BYTE 0x20
                 _rx_wr_index1:
0008f4           	.BYTE 0x1
                 _rx_rd_index1:
0008f5           	.BYTE 0x1
                 _rx_counter1:
0008f6           	.BYTE 0x1
                 _tx_buffer1:
0008f7           	.BYTE 0x80
                 _tx_wr_index1:
000977           	.BYTE 0x1
                 _tx_rd_index1:
000978           	.BYTE 0x1
                 _tx_counter1:
000979           	.BYTE 0x1
                 _BTN1_Y_Begin:
00097a           	.BYTE 0x2
                 _BTN1_Y_End:
00097c           	.BYTE 0x2
                 _BTN1_X_Begin:
00097e           	.BYTE 0x2
                 _BTN1_X_End:
000980           	.BYTE 0x2
                 _BTN2_Y_Begin:
000982           	.BYTE 0x2
                 _BTN2_Y_End:
000984           	.BYTE 0x2
                 _BTN2_X_Begin:
000986           	.BYTE 0x2
                 _BTN2_X_End:
000988           	.BYTE 0x2
                 _BTN3_Y_Begin:
00098a           	.BYTE 0x2
                 _BTN3_Y_End:
00098c           	.BYTE 0x2
                 _BTN3_X_Begin:
00098e           	.BYTE 0x2
                 _BTN3_X_End:
000990           	.BYTE 0x2
                 _BTN4_Y_Begin:
000992           	.BYTE 0x2
                 _BTN4_Y_End:
000994           	.BYTE 0x2
                 _BTN4_X_Begin:
000996           	.BYTE 0x2
                 _BTN4_X_End:
000998           	.BYTE 0x2
                 _Button_Pressed:
00099a           	.BYTE 0x1
                 _mSec:
00099b           	.BYTE 0x2
                 _SD_Ready:
00099d           	.BYTE 0x1
                 _error:
00099e           	.BYTE 0x1
                 _FAT32_active:
00099f           	.BYTE 0x1
                 _LEDGREEN_mSec:
0009a0           	.BYTE 0x2
                 _LEDRED_mSec:
0009a2           	.BYTE 0x2
                 _LEDBLUE_mSec:
0009a4           	.BYTE 0x2
                 _LEDGREEN_max:
0009a6           	.BYTE 0x2
                 _LEDRED_max:
0009a8           	.BYTE 0x2
                 _LEDBLUE_max:
0009aa           	.BYTE 0x2
                 _Pulse_X:
0009ac           	.BYTE 0x2
                 _Pulse_Y_Last:
0009ae           	.BYTE 0x2
                 _Pulse_mSec:
0009b0           	.BYTE 0x2
                 _Pulse_Value:
0009b2           	.BYTE 0x2
                 _Pulse_Counter:
0009b4           	.BYTE 0x2
                 _Pulse_ScreenValue:
0009b6           	.BYTE 0x2
                 _Pulse_Flag:
0009b8           	.BYTE 0x1
                 _Pulse_ScreenFlag:
0009b9           	.BYTE 0x1
                 _Cardio_X:
0009ba           	.BYTE 0x2
                 _Cardio_Y_Last:
0009bc           	.BYTE 0x2
                 _Cardio_Divider:
0009be           	.BYTE 0x4
                 
                 	.ESEG
                 _WorkParameters:
000000 f4
000001 01
000002 0a
000003 00        	.DB  LOW(0xA01F4),HIGH(0xA01F4),BYTE3(0xA01F4),BYTE4(0xA01F4)
000004 2c 01     	.DW  0x12C
                 _EEPROM_FLAG:
000006           	.BYTE 0x1
                 
                 	.DSEG
                 _Parameter_Counter:
0009c2           	.BYTE 0x1
                 _Alarm:
0009c3           	.BYTE 0x1
                 _Battery_Discharged:
0009c4           	.BYTE 0x1
                 _State:
0009c5           	.BYTE 0x1
                 _ScanLine_X:
0009c6           	.BYTE 0x2
                 _Refresh_mSec:
0009c8           	.BYTE 0x2
                 _Sleep_mSec:
0009ca           	.BYTE 0x2
                 _Alarm_mSec:
0009cc           	.BYTE 0x2
                 _WaitADC_mSec:
0009ce           	.BYTE 0x2
                 _ValueLast:
0009d0           	.BYTE 0x6
                 _multiplier:
0009d6           	.BYTE 0x2
                 __seed_G104:
0009d8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
001049 81e8      	LD   R30,Y
00104a e0f0      	LDI  R31,0
00104b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00104c e6e4      	LDI  R30,LOW(100)
00104d e0f0      	LDI  R31,HIGH(100)
00104e 93fa      	ST   -Y,R31
00104f 93ea      	ST   -Y,R30
001050 940c 13ef 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
001052 81e8      	LD   R30,Y
001053 93ea      	ST   -Y,R30
001054 940e 04f8 	CALL _RotateByte
001056 bbeb      	OUT  0x1B,R30
001057 e0e0      	LDI  R30,LOW(0)
001058 bbe5      	OUT  0x15,R30
001059 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00105a e0e1      	LDI  R30,LOW(1)
00105b 93ea      	ST   -Y,R30
00105c 940c 0527 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x4:
00105e 93fa      	ST   -Y,R31
00105f 93ea      	ST   -Y,R30
001060 940c 13ef 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
001062 93ea      	ST   -Y,R30
001063 940e 0533 	CALL _SSD1963_WriteData_b8
001065 e0e4      	LDI  R30,LOW(4)
001066 93ea      	ST   -Y,R30
001067 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
001069 93ea      	ST   -Y,R30
00106a 940e 0527 	CALL _SSD1963_WriteCmd
00106c e0e1      	LDI  R30,LOW(1)
00106d 93ea      	ST   -Y,R30
00106e 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
001070 e0e1      	LDI  R30,LOW(1)
001071 e0f0      	LDI  R31,HIGH(1)
001072 cfeb      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
001073 93ea      	ST   -Y,R30
001074 940e 0527 	CALL _SSD1963_WriteCmd
001076 e0e3      	LDI  R30,LOW(3)
001077 93ea      	ST   -Y,R30
001078 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x9:
00107a 93ea      	ST   -Y,R30
00107b 940e 0533 	CALL _SSD1963_WriteData_b8
00107d e0e0      	LDI  R30,LOW(0)
00107e 93ea      	ST   -Y,R30
00107f 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
001081 e0e1      	LDI  R30,LOW(1)
001082 93ea      	ST   -Y,R30
001083 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
001085 93ea      	ST   -Y,R30
001086 940e 0533 	CALL _SSD1963_WriteData_b8
001088 cff8      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0xC:
001089 e0e0      	LDI  R30,LOW(0)
00108a e0f0      	LDI  R31,HIGH(0)
00108b 93fa      	ST   -Y,R31
00108c 93ea      	ST   -Y,R30
00108d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0xD:
00108e 93fa      	ST   -Y,R31
00108f 93ea      	ST   -Y,R30
001090 cff8      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xE:
001091 93fa      	ST   -Y,R31
001092 93ea      	ST   -Y,R30
001093 940e 05d6 	CALL _SSD1963_SetArea
001095 e2ec      	LDI  R30,LOW(44)
001096 93ea      	ST   -Y,R30
001097 940c 0527 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
001099 93fa      	ST   -Y,R31
00109a 93ea      	ST   -Y,R30
00109b 940c 0540 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x10:
00109d 85e8      	LDD  R30,Y+8
00109e 85f9      	LDD  R31,Y+8+1
00109f 93fa      	ST   -Y,R31
0010a0 93ea      	ST   -Y,R30
0010a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x11:
0010a2 85ea      	LDD  R30,Y+10
0010a3 85fb      	LDD  R31,Y+10+1
0010a4 93fa      	ST   -Y,R31
0010a5 93ea      	ST   -Y,R30
0010a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0010a7 81ef      	LDD  R30,Y+7
0010a8 85f8      	LDD  R31,Y+7+1
0010a9 93fa      	ST   -Y,R31
0010aa 93ea      	ST   -Y,R30
0010ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x13:
0010ac 9728      	SBIW R28,8
0010ad 931a      	ST   -Y,R17
0010ae 930a      	ST   -Y,R16
0010af 89ea      	LDD  R30,Y+18
0010b0 89fb      	LDD  R31,Y+18+1
0010b1 93fa      	ST   -Y,R31
0010b2 93ea      	ST   -Y,R30
0010b3 89ea      	LDD  R30,Y+18
0010b4 89fb      	LDD  R31,Y+18+1
0010b5 93fa      	ST   -Y,R31
0010b6 93ea      	ST   -Y,R30
0010b7 89ea      	LDD  R30,Y+18
0010b8 89fb      	LDD  R31,Y+18+1
0010b9 93fa      	ST   -Y,R31
0010ba 93ea      	ST   -Y,R30
0010bb 89ea      	LDD  R30,Y+18
0010bc 89fb      	LDD  R31,Y+18+1
0010bd cfd3      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
0010be 89aa      	LDD  R26,Y+18
0010bf 89bb      	LDD  R27,Y+18+1
0010c0 89e8      	LDD  R30,Y+16
0010c1 89f9      	LDD  R31,Y+16+1
0010c2 1bea      	SUB  R30,R26
0010c3 0bfb      	SBC  R31,R27
0010c4 9631      	ADIW R30,1
0010c5 018f      	MOVW R16,R30
0010c6 2311      	TST  R17
0010c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0010c8 01f8      	MOVW R30,R16
0010c9 efaf      	LDI  R26,LOW(65535)
0010ca efbf      	LDI  R27,HIGH(65535)
0010cb 940e 152b 	CALL __MULW12
0010cd 018f      	MOVW R16,R30
0010ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x16:
0010cf 85ae      	LDD  R26,Y+14
0010d0 85bf      	LDD  R27,Y+14+1
0010d1 85ec      	LDD  R30,Y+12
0010d2 85fd      	LDD  R31,Y+12+1
0010d3 1bea      	SUB  R30,R26
0010d4 0bfb      	SBC  R31,R27
0010d5 9631      	ADIW R30,1
0010d6 2766      	CLR  R22
0010d7 2777      	CLR  R23
                +
0010d8 83ea     +STD Y + 2 , R30
0010d9 83fb     +STD Y + 2 + 1 , R31
0010da 836c     +STD Y + 2 + 2 , R22
0010db 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010dc 81ad      	LDD  R26,Y+5
0010dd 23aa      	TST  R26
0010de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
                +
0010df 81ea     +LDD R30 , Y + 2
0010e0 81fb     +LDD R31 , Y + 2 + 1
0010e1 816c     +LDD R22 , Y + 2 + 2
0010e2 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0010e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
                +
0010e4 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
0010e5 efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
0010e6 ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
0010e7 ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
0010e8 940e 1530 	CALL __MULD12
                +
0010ea 83ea     +STD Y + 2 , R30
0010eb 83fb     +STD Y + 2 + 1 , R31
0010ec 836c     +STD Y + 2 + 2 , R22
0010ed 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
0010ef 01f8      	MOVW R30,R16
                +
0010f0 81aa     +LDD R26 , Y + 2
0010f1 81bb     +LDD R27 , Y + 2 + 1
0010f2 818c     +LDD R24 , Y + 2 + 2
0010f3 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0010f4 940e 14fe 	CALL __CWD1
0010f6 940e 1530 	CALL __MULD12
                +
0010f8 83ea     +STD Y + 2 , R30
0010f9 83fb     +STD Y + 2 + 1 , R31
0010fa 836c     +STD Y + 2 + 2 , R22
0010fb 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010fc e0e0      	LDI  R30,LOW(0)
                +
0010fd 83ee     +STD Y + 6 , R30
0010fe 83ef     +STD Y + 6 + 1 , R30
0010ff 87e8     +STD Y + 6 + 2 , R30
001100 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
001101 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
001102 dfdc      	RCALL SUBOPT_0x17
                +
001103 81ae     +LDD R26 , Y + 6
001104 81bf     +LDD R27 , Y + 6 + 1
001105 8588     +LDD R24 , Y + 6 + 2
001106 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
001107 940e 15c9 	CALL __CPD21
001109 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
                +
00110a 81ee     +LDD R30 , Y + 6
00110b 81ff     +LDD R31 , Y + 6 + 1
00110c 8568     +LDD R22 , Y + 6 + 2
00110d 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
00110e 5fef     +SUBI R30 , LOW ( - 1 )
00110f 4fff     +SBCI R31 , HIGH ( - 1 )
001110 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001111 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
001112 83ee     +STD Y + 6 , R30
001113 83ff     +STD Y + 6 + 1 , R31
001114 8768     +STD Y + 6 + 2 , R22
001115 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
001116 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
001117 e0f0      	LDI  R31,0
001118 8dab      	LDD  R26,Y+27
001119 8dbc      	LDD  R27,Y+27+1
00111a 0fea      	ADD  R30,R26
00111b 1ffb      	ADC  R31,R27
00111c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
00111d 85e8      	LDD  R30,Y+8
00111e 85f9      	LDD  R31,Y+8+1
00111f 1bea      	SUB  R30,R26
001120 0bfb      	SBC  R31,R27
001121 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
001122 85ac      	LDD  R26,Y+12
001123 85bd      	LDD  R27,Y+12+1
001124 0fea      	ADD  R30,R26
001125 1ffb      	ADC  R31,R27
001126 93fa      	ST   -Y,R31
001127 93ea      	ST   -Y,R30
001128 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1F:
001129 93ea      	ST   -Y,R30
00112a 940e 1042 	CALL _spi
                +
00112c e980     +LDI R24 , LOW ( 400 )
00112d e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00112e 9701     +SBIW R24 , 1
00112f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
001130 e0e0      	LDI  R30,LOW(0)
001131 93ea      	ST   -Y,R30
001132 940e 1042 	CALL _spi
001134 2f0e      	MOV  R16,R30
001135 2711      	CLR  R17
001136 2f10      	MOV  R17,R16
001137 2700      	CLR  R16
001138 e0e0      	LDI  R30,LOW(0)
001139 93ea      	ST   -Y,R30
00113a 940e 1042 	CALL _spi
00113c e0f0      	LDI  R31,0
                +
00113d 0f0e     +ADD R16 , R30
00113e 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
00113f 9a1a      	SBI  0x3,2
001140 01f8      	MOVW R30,R16
001141 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
001142 01f8      	MOVW R30,R16
001143 940e 14fe 	CALL __CWD1
001145 940e 1461 	CALL __CDF1
001147 01df      	MOVW R26,R30
001148 01cb      	MOVW R24,R22
001149 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
00114a 940e 148f 	CALL __DIVF21
00114c 940e 142a 	CALL __CFD1
00114e 018f      	MOVW R16,R30
00114f 01f8      	MOVW R30,R16
001150 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x22:
001151 e0e0      	LDI  R30,LOW(0)
001152 93e0 05b7 	STS  _tempX,R30
001154 93e0 05b8 	STS  _tempX+1,R30
001156 93e0 05b9 	STS  _tempX+2,R30
001158 93e0 05ba 	STS  _tempX+3,R30
00115a 93e0 05bb 	STS  _tempY,R30
00115c 93e0 05bc 	STS  _tempY+1,R30
00115e 93e0 05bd 	STS  _tempY+2,R30
001160 93e0 05be 	STS  _tempY+3,R30
001162 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x23:
001163 940e 0966 	CALL _TSC2046_getX
001165 91a0 05b7 	LDS  R26,_tempX
001167 91b0 05b8 	LDS  R27,_tempX+1
001169 9180 05b9 	LDS  R24,_tempX+2
00116b 9190 05ba 	LDS  R25,_tempX+3
00116d 2766      	CLR  R22
00116e 2777      	CLR  R23
00116f 940e 14d4 	CALL __ADDD12
001171 93e0 05b7 	STS  _tempX,R30
001173 93f0 05b8 	STS  _tempX+1,R31
001175 9360 05b9 	STS  _tempX+2,R22
001177 9370 05ba 	STS  _tempX+3,R23
001179 940e 0979 	CALL _TSC2046_getY
00117b 91a0 05bb 	LDS  R26,_tempY
00117d 91b0 05bc 	LDS  R27,_tempY+1
00117f 9180 05bd 	LDS  R24,_tempY+2
001181 9190 05be 	LDS  R25,_tempY+3
001183 2766      	CLR  R22
001184 2777      	CLR  R23
001185 940e 14d4 	CALL __ADDD12
001187 93e0 05bb 	STS  _tempY,R30
001189 93f0 05bc 	STS  _tempY+1,R31
00118b 9360 05bd 	STS  _tempY+2,R22
00118d 9370 05be 	STS  _tempY+3,R23
00118f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x24:
001190 91a0 05b7 	LDS  R26,_tempX
001192 91b0 05b8 	LDS  R27,_tempX+1
001194 9180 05b9 	LDS  R24,_tempX+2
001196 9190 05ba 	LDS  R25,_tempX+3
                +
001198 e1e0     +LDI R30 , LOW ( 0x10 )
001199 e0f0     +LDI R31 , HIGH ( 0x10 )
00119a e060     +LDI R22 , BYTE3 ( 0x10 )
00119b e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
00119c 940e 156d 	CALL __DIVD21
00119e 013f      	MOVW R6,R30
00119f 91a0 05bb 	LDS  R26,_tempY
0011a1 91b0 05bc 	LDS  R27,_tempY+1
0011a3 9180 05bd 	LDS  R24,_tempY+2
0011a5 9190 05be 	LDS  R25,_tempY+3
                +
0011a7 e1e0     +LDI R30 , LOW ( 0x10 )
0011a8 e0f0     +LDI R31 , HIGH ( 0x10 )
0011a9 e060     +LDI R22 , BYTE3 ( 0x10 )
0011aa e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0011ab 940e 156d 	CALL __DIVD21
0011ad 014f      	MOVW R8,R30
0011ae 940c 094f 	JMP  _TSC2046_Stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
0011b0 93aa      	ST   -Y,R26
0011b1 93ea      	ST   -Y,R30
0011b2 93fa      	ST   -Y,R31
0011b3 b7ef      	IN   R30,SREG
0011b4 93ea      	ST   -Y,R30
0011b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
0011b6 50e1      	SUBI R30,LOW(1)
0011b7 e0f0      	LDI  R31,0
0011b8 52ea      	SUBI R30,LOW(-_rx_buffer0)
0011b9 4ff8      	SBCI R31,HIGH(-_rx_buffer0)
0011ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
0011bb 50e1      	SUBI R30,LOW(1)
0011bc e0f0      	LDI  R31,0
0011bd 53e7      	SUBI R30,LOW(-_tx_buffer0)
0011be 4ff7      	SBCI R31,HIGH(-_tx_buffer0)
0011bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
0011c0 e6a2      	LDI  R26,LOW(98)
0011c1 e0b0      	LDI  R27,HIGH(98)
0011c2 2f6a      	MOV  R22,R26
0011c3 901c      	LD   R1,X
0011c4 81e9      	LDD  R30,Y+1
0011c5 e0a1      	LDI  R26,LOW(1)
0011c6 940e 14e5 	CALL __LSLB12
0011c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x29:
0011c9 91ed      	LD   R30,X+
0011ca 91fd      	LD   R31,X+
0011cb 9631      	ADIW R30,1
0011cc 93fe      	ST   -X,R31
0011cd 93ee      	ST   -X,R30
0011ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2A:
0011cf e0e4      	LDI  R30,LOW(4)
0011d0 93ea      	ST   -Y,R30
0011d1 e0e1      	LDI  R30,LOW(1)
0011d2 93ea      	ST   -Y,R30
0011d3 940c 0aa1 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
0011d5 e0e5      	LDI  R30,LOW(5)
0011d6 93ea      	ST   -Y,R30
0011d7 e0e1      	LDI  R30,LOW(1)
0011d8 93ea      	ST   -Y,R30
0011d9 940c 0aa1 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
0011db e0e3      	LDI  R30,LOW(3)
0011dc 93ea      	ST   -Y,R30
0011dd e0e1      	LDI  R30,LOW(1)
0011de 93ea      	ST   -Y,R30
0011df 940c 0aa1 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
0011e1 93ea      	ST   -Y,R30
0011e2 e0e0      	LDI  R30,LOW(0)
0011e3 93ea      	ST   -Y,R30
0011e4 940c 0aa1 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2E:
0011e6 91e0 097e 	LDS  R30,_BTN1_X_Begin
0011e8 91f0 097f 	LDS  R31,_BTN1_X_Begin+1
0011ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
0011eb 91e0 0980 	LDS  R30,_BTN1_X_End
0011ed 91f0 0981 	LDS  R31,_BTN1_X_End+1
0011ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x30:
0011f0 91e0 097a 	LDS  R30,_BTN1_Y_Begin
0011f2 91f0 097b 	LDS  R31,_BTN1_Y_Begin+1
0011f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
0011f5 91e0 097c 	LDS  R30,_BTN1_Y_End
0011f7 91f0 097d 	LDS  R31,_BTN1_Y_End+1
0011f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x32:
0011fa 91e0 0986 	LDS  R30,_BTN2_X_Begin
0011fc 91f0 0987 	LDS  R31,_BTN2_X_Begin+1
0011fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
0011ff 91e0 0988 	LDS  R30,_BTN2_X_End
001201 91f0 0989 	LDS  R31,_BTN2_X_End+1
001203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
001204 91e0 0982 	LDS  R30,_BTN2_Y_Begin
001206 91f0 0983 	LDS  R31,_BTN2_Y_Begin+1
001208 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
001209 91e0 0984 	LDS  R30,_BTN2_Y_End
00120b 91f0 0985 	LDS  R31,_BTN2_Y_End+1
00120d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
00120e 91e0 098e 	LDS  R30,_BTN3_X_Begin
001210 91f0 098f 	LDS  R31,_BTN3_X_Begin+1
001212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
001213 91e0 0990 	LDS  R30,_BTN3_X_End
001215 91f0 0991 	LDS  R31,_BTN3_X_End+1
001217 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
001218 91e0 098a 	LDS  R30,_BTN3_Y_Begin
00121a 91f0 098b 	LDS  R31,_BTN3_Y_Begin+1
00121c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
00121d 91e0 098c 	LDS  R30,_BTN3_Y_End
00121f 91f0 098d 	LDS  R31,_BTN3_Y_End+1
001221 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3A:
001222 91e0 0996 	LDS  R30,_BTN4_X_Begin
001224 91f0 0997 	LDS  R31,_BTN4_X_Begin+1
001226 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
001227 91e0 0998 	LDS  R30,_BTN4_X_End
001229 91f0 0999 	LDS  R31,_BTN4_X_End+1
00122b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3C:
00122c 91e0 0992 	LDS  R30,_BTN4_Y_Begin
00122e 91f0 0993 	LDS  R31,_BTN4_Y_Begin+1
001230 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
001231 91e0 0994 	LDS  R30,_BTN4_Y_End
001233 91f0 0995 	LDS  R31,_BTN4_Y_End+1
001235 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3E:
001236 e0f0      	LDI  R31,0
001237 30e1      	CPI  R30,LOW(0x1)
001238 e0a0      	LDI  R26,HIGH(0x1)
001239 07fa      	CPC  R31,R26
00123a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3F:
00123b 93fa      	ST   -Y,R31
00123c 93ea      	ST   -Y,R30
00123d dfa8      	RCALL SUBOPT_0x2E
00123e 963a      	ADIW R30,10
00123f 93fa      	ST   -Y,R31
001240 93ea      	ST   -Y,R30
001241 cfae      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x40:
001242 963f      	ADIW R30,15
001243 9738      	SBIW R30,8
001244 93fa      	ST   -Y,R31
001245 93ea      	ST   -Y,R30
001246 ce56      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
001247 940e 07ff 	CALL _SSD1963_PutString16
001249 81ed      	LDD  R30,Y+5
00124a 81fe      	LDD  R31,Y+5+1
00124b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x42:
00124c 93fa      	ST   -Y,R31
00124d 93ea      	ST   -Y,R30
00124e dfab      	RCALL SUBOPT_0x32
00124f 963a      	ADIW R30,10
001250 93fa      	ST   -Y,R31
001251 93ea      	ST   -Y,R30
001252 cfb1      	RJMP SUBOPT_0x34
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
001253 93fa      	ST   -Y,R31
001254 93ea      	ST   -Y,R30
001255 dfb8      	RCALL SUBOPT_0x36
001256 963a      	ADIW R30,10
001257 93fa      	ST   -Y,R31
001258 93ea      	ST   -Y,R30
001259 cfbe      	RJMP SUBOPT_0x38
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x44:
00125a 93fa      	ST   -Y,R31
00125b 93ea      	ST   -Y,R30
00125c dfc5      	RCALL SUBOPT_0x3A
00125d 963a      	ADIW R30,10
00125e 93fa      	ST   -Y,R31
00125f 93ea      	ST   -Y,R30
001260 cfcb      	RJMP SUBOPT_0x3C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x45:
001261 93fa      	ST   -Y,R31
001262 93ea      	ST   -Y,R30
001263 efef      	LDI  R30,LOW(65535)
001264 efff      	LDI  R31,HIGH(65535)
001265 93fa      	ST   -Y,R31
001266 93ea      	ST   -Y,R30
001267 940c 091f 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x46:
001269 9731      	SBIW R30,1
00126a 93fa      	ST   -Y,R31
00126b 93ea      	ST   -Y,R30
00126c e0e1      	LDI  R30,LOW(1)
00126d e0f0      	LDI  R31,HIGH(1)
00126e ce1f      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x47:
00126f efef      	LDI  R30,LOW(65535)
001270 efff      	LDI  R31,HIGH(65535)
001271 93fa      	ST   -Y,R31
001272 93ea      	ST   -Y,R30
001273 940c 0bc5 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
001275 93fa      	ST   -Y,R31
001276 93ea      	ST   -Y,R30
001277 e0e2      	LDI  R30,LOW(2)
001278 93ea      	ST   -Y,R30
001279 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x49:
00127a 93fa      	ST   -Y,R31
00127b 93ea      	ST   -Y,R30
00127c e0e4      	LDI  R30,LOW(4)
00127d 93ea      	ST   -Y,R30
00127e ce0a      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4A:
00127f 972d      	SBIW R28,13
001280 e0e7      	LDI  R30,LOW(7)
001281 83e9      	STD  Y+1,R30
001282 eee0      	LDI  R30,LOW(224)
001283 83ea      	STD  Y+2,R30
001284 e0e7      	LDI  R30,LOW(7)
001285 83eb      	STD  Y+3,R30
001286 efef      	LDI  R30,LOW(255)
001287 83ec      	STD  Y+4,R30
001288 e0e0      	LDI  R30,LOW(0)
001289 83ed      	STD  Y+5,R30
00128a e1ef      	LDI  R30,LOW(31)
00128b 83ee      	STD  Y+6,R30
00128c 940e 15ce 	CALL __SAVELOCR6
                +
00128e e0a2     +LDI R26 , LOW ( _WorkParameters + ( 2 ) )
00128f e0b0     +LDI R27 , HIGH ( _WorkParameters + ( 2 ) )
                 	__POINTW2MN _WorkParameters,2
001290 940e 15a0 	CALL __EEPROMRDW
001292 018f      	MOVW R16,R30
                +
001293 e82d     +LDI R18 , LOW ( 141 )
001294 e030     +LDI R19 , HIGH ( 141 )
                 	__GETWRN 18,19,141
001295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:127 WORDS
                 SUBOPT_0x4B:
001296 91e0 09ba 	LDS  R30,_Cardio_X
001298 91f0 09bb 	LDS  R31,_Cardio_X+1
00129a 93fa      	ST   -Y,R31
00129b 93ea      	ST   -Y,R30
00129c 01f8      	MOVW R30,R16
00129d 91a0 09ba 	LDS  R26,_Cardio_X
00129f 91b0 09bb 	LDS  R27,_Cardio_X+1
0012a1 0fea      	ADD  R30,R26
0012a2 1ffb      	ADC  R31,R27
0012a3 93fa      	ST   -Y,R31
0012a4 93ea      	ST   -Y,R30
0012a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x4C:
0012a6 e3e2      	LDI  R30,LOW(50)
0012a7 e0f0      	LDI  R31,HIGH(50)
0012a8 93fa      	ST   -Y,R31
0012a9 93ea      	ST   -Y,R30
0012aa eee9      	LDI  R30,LOW(233)
0012ab e0f0      	LDI  R31,HIGH(233)
0012ac cde1      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4D:
0012ad e0e8      	LDI  R30,LOW(8456)
0012ae e2f1      	LDI  R31,HIGH(8456)
0012af 93fa      	ST   -Y,R31
0012b0 93ea      	ST   -Y,R30
0012b1 940e 0819 	CALL _SSD1963_DrawFastLine
0012b3 cfe2      	RJMP SUBOPT_0x4B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4E:
0012b4 93fa      	ST   -Y,R31
0012b5 93ea      	ST   -Y,R30
0012b6 e0e8      	LDI  R30,LOW(8456)
0012b7 e2f1      	LDI  R31,HIGH(8456)
0012b8 93fa      	ST   -Y,R31
0012b9 93ea      	ST   -Y,R30
0012ba 940e 0819 	CALL _SSD1963_DrawFastLine
0012bc e0e0      	LDI  R30,LOW(0)
0012bd 83ee      	STD  Y+6,R30
0012be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:129 WORDS
                 SUBOPT_0x4F:
0012bf 81ee      	LDD  R30,Y+6
0012c0 e0f0      	LDI  R31,0
0012c1 01de      	MOVW R26,R28
0012c2 961d      	ADIW R26,13
0012c3 0fee      	LSL  R30
0012c4 1fff      	ROL  R31
0012c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x50:
0012c6 0fae      	ADD  R26,R30
0012c7 1fbf      	ADC  R27,R31
0012c8 91ed      	LD   R30,X+
0012c9 91fd      	LD   R31,X+
0012ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x51:
0012cb 58e0      	SUBI R30,LOW(128)
0012cc 40f0      	SBCI R31,HIGH(128)
0012cd 93fe      	ST   -X,R31
0012ce 93ee      	ST   -X,R30
0012cf cfef      	RJMP SUBOPT_0x4F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x52:
0012d0 0fea      	ADD  R30,R26
0012d1 1ffb      	ADC  R31,R27
0012d2 01bf      	MOVW R22,R30
0012d3 01df      	MOVW R26,R30
0012d4 940e 1593 	CALL __GETW1P
0012d6 91a0 09d6 	LDS  R26,_multiplier
0012d8 91b0 09d7 	LDS  R27,_multiplier+1
0012da 940e 152b 	CALL __MULW12
0012dc 01db      	MOVW R26,R22
0012dd 93ed      	ST   X+,R30
0012de 93fc      	ST   X,R31
0012df cfdf      	RJMP SUBOPT_0x4F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
0012e0 940e 14f7 	CALL __ASRW3
0012e2 940e 14f5 	CALL __ASRW4
0012e4 93fe      	ST   -X,R31
0012e5 93ee      	ST   -X,R30
0012e6 cfd8      	RJMP SUBOPT_0x4F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x54:
0012e7 0fae      	ADD  R26,R30
0012e8 1fbf      	ADC  R27,R31
0012e9 940e 1593 	CALL __GETW1P
0012eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x55:
0012ec 0fae      	ADD  R26,R30
0012ed 1fbf      	ADC  R27,R31
0012ee eee7      	LDI  R30,LOW(231)
0012ef e0f0      	LDI  R31,HIGH(231)
0012f0 93ed      	ST   X+,R30
0012f1 93fc      	ST   X,R31
0012f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x56:
0012f3 0fae      	ADD  R26,R30
0012f4 1fbf      	ADC  R27,R31
0012f5 e3e2      	LDI  R30,LOW(50)
0012f6 e0f0      	LDI  R31,HIGH(50)
0012f7 93ed      	ST   X+,R30
0012f8 93fc      	ST   X,R31
0012f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x57:
0012fa 85ea      	LDD  R30,Y+10
0012fb eda0      	LDI  R26,LOW(_ValueLast)
0012fc e0b9      	LDI  R27,HIGH(_ValueLast)
0012fd e0f0      	LDI  R31,0
0012fe 0fee      	LSL  R30
0012ff 1fff      	ROL  R31
001300 cfe6      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x58:
001301 93fa      	ST   -Y,R31
001302 93ea      	ST   -Y,R30
001303 85ec      	LDD  R30,Y+12
001304 e0f0      	LDI  R31,0
001305 01de      	MOVW R26,R28
001306 9653      	ADIW R26,19
001307 0fee      	LSL  R30
001308 1fff      	ROL  R31
001309 cfdd      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x59:
00130a 93fa      	ST   -Y,R31
00130b 93ea      	ST   -Y,R30
00130c 85ee      	LDD  R30,Y+14
00130d e0f0      	LDI  R31,0
00130e 01de      	MOVW R26,R28
00130f 961f      	ADIW R26,15
001310 0fee      	LSL  R30
001311 1fff      	ROL  R31
001312 cfd4      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5A:
001313 940e 0834 	CALL _SSD1963_DrawLine
001315 81ee      	LDD  R30,Y+6
001316 eda0      	LDI  R26,LOW(_ValueLast)
001317 e0b9      	LDI  R27,HIGH(_ValueLast)
001318 e0f0      	LDI  R31,0
001319 0fee      	LSL  R30
00131a 1fff      	ROL  R31
00131b 0fea      	ADD  R30,R26
00131c 1ffb      	ADC  R31,R27
00131d 010f      	MOVW R0,R30
00131e cfa0      	RJMP SUBOPT_0x4F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x5B:
00131f 01f8      	MOVW R30,R16
001320 91a0 09ba 	LDS  R26,_Cardio_X
001322 91b0 09bb 	LDS  R27,_Cardio_X+1
001324 0fea      	ADD  R30,R26
001325 1ffb      	ADC  R31,R27
001326 93e0 09ba 	STS  _Cardio_X,R30
001328 93f0 09bb 	STS  _Cardio_X+1,R31
00132a eee0      	LDI  R30,LOW(480)
00132b e0f1      	LDI  R31,HIGH(480)
00132c 1be0      	SUB  R30,R16
00132d 0bf1      	SBC  R31,R17
00132e 91a0 09ba 	LDS  R26,_Cardio_X
001330 91b0 09bb 	LDS  R27,_Cardio_X+1
001332 17ea      	CP   R30,R26
001333 07fb      	CPC  R31,R27
001334 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5C:
001335 91e0 09ba 	LDS  R30,_Cardio_X
001337 91f0 09bb 	LDS  R31,_Cardio_X+1
001339 93fa      	ST   -Y,R31
00133a 93ea      	ST   -Y,R30
00133b eee0      	LDI  R30,LOW(480)
00133c e0f1      	LDI  R31,HIGH(480)
00133d 93fa      	ST   -Y,R31
00133e 93ea      	ST   -Y,R30
00133f cf66      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5D:
001340 940e 091f 	CALL _SSD1963_DrawFillRect
001342 e0e0      	LDI  R30,LOW(0)
001343 93e0 09ba 	STS  _Cardio_X,R30
001345 93e0 09bb 	STS  _Cardio_X+1,R30
001347 cf4e      	RJMP SUBOPT_0x4B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5E:
001348 0fea      	ADD  R30,R26
001349 1ffb      	ADC  R31,R27
00134a 010f      	MOVW R0,R30
00134b 01df      	MOVW R26,R30
00134c 940e 1593 	CALL __GETW1P
00134e 01df      	MOVW R26,R30
00134f 01f9      	MOVW R30,R18
001350 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x5F:
001351 93fa      	ST   -Y,R31
001352 93ea      	ST   -Y,R30
001353 81ed      	LDD  R30,Y+5
001354 e0f0      	LDI  R31,0
001355 93fa      	ST   -Y,R31
001356 93ea      	ST   -Y,R30
001357 81ee      	LDD  R30,Y+6
001358 e0f0      	LDI  R31,0
001359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x60:
00135a 93fa      	ST   -Y,R31
00135b 93ea      	ST   -Y,R30
00135c 81ee      	LDD  R30,Y+6
00135d 81ff      	LDD  R31,Y+6+1
00135e cd2f      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
00135f e0f0      	LDI  R31,0
001360 9730      	SBIW R30,0
001361 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
001362 e0e6      	LDI  R30,LOW(6)
001363 93ea      	ST   -Y,R30
001364 e0e1      	LDI  R30,LOW(1)
001365 93ea      	ST   -Y,R30
001366 940c 0aa1 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x63:
001368 e0f0      	LDI  R31,0
001369 0fee      	LSL  R30
00136a 1fff      	ROL  R31
00136b 0fea      	ADD  R30,R26
00136c 1ffb      	ADC  R31,R27
00136d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x64:
00136e 93fa      	ST   -Y,R31
00136f 93ea      	ST   -Y,R30
001370 ece0      	LDI  R30,LOW(192)
001371 e0f0      	LDI  R31,HIGH(192)
001372 93fa      	ST   -Y,R31
001373 93ea      	ST   -Y,R30
001374 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x65:
001375 93fa      	ST   -Y,R31
001376 93ea      	ST   -Y,R30
001377 e0e0      	LDI  R30,LOW(7936)
001378 e1ff      	LDI  R31,HIGH(7936)
001379 cd14      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x66:
00137a 940e 07ff 	CALL _SSD1963_PutString16
00137c e2ec      	LDI  R30,LOW(300)
00137d e0f1      	LDI  R31,HIGH(300)
00137e ccdf      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x67:
00137f 91e0 09c2 	LDS  R30,_Parameter_Counter
001381 93ea      	ST   -Y,R30
001382 e1ee      	LDI  R30,LOW(30)
001383 93ea      	ST   -Y,R30
001384 e1e0      	LDI  R30,LOW(16)
001385 93ea      	ST   -Y,R30
001386 efe8      	LDI  R30,LOW(248)
001387 e0f0      	LDI  R31,HIGH(248)
001388 93fa      	ST   -Y,R31
001389 93ea      	ST   -Y,R30
00138a 940c 0deb 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x68:
00138c 940e 09df 	CALL _getchar0
00138e 93ea      	ST   -Y,R30
00138f 940e 09df 	CALL _getchar0
001391 93ea      	ST   -Y,R30
001392 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x69:
001393 e0e0      	LDI  R30,LOW(0)
001394 93e0 09ca 	STS  _Sleep_mSec,R30
001396 93e0 09cb 	STS  _Sleep_mSec+1,R30
001398 940e 0b5f 	CALL _GetButton
00139a 93e0 099a 	STS  _Button_Pressed,R30
00139c ce99      	RJMP SUBOPT_0x3E
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
00139d 9890      	cbi  __i2c_port,__scl_bit
00139e 9891      	cbi  __i2c_port,__sda_bit
00139f 9a88      	sbi  __i2c_dir,__scl_bit
0013a0 9889      	cbi  __i2c_dir,__sda_bit
0013a1 c015      	rjmp __i2c_delay2
                 _i2c_start:
0013a2 9889      	cbi  __i2c_dir,__sda_bit
0013a3 9888      	cbi  __i2c_dir,__scl_bit
0013a4 27ee      	clr  r30
0013a5 0000      	nop
0013a6 9b81      	sbis __i2c_pin,__sda_bit
0013a7 9508      	ret
0013a8 9b80      	sbis __i2c_pin,__scl_bit
0013a9 9508      	ret
0013aa d004      	rcall __i2c_delay1
0013ab 9a89      	sbi  __i2c_dir,__sda_bit
0013ac d002      	rcall __i2c_delay1
0013ad 9a88      	sbi  __i2c_dir,__scl_bit
0013ae e0e1      	ldi  r30,1
                 __i2c_delay1:
0013af e16b      	ldi  r22,27
0013b0 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0013b1 9a89      	sbi  __i2c_dir,__sda_bit
0013b2 9a88      	sbi  __i2c_dir,__scl_bit
0013b3 d003      	rcall __i2c_delay2
0013b4 9888      	cbi  __i2c_dir,__scl_bit
0013b5 dff9      	rcall __i2c_delay1
0013b6 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0013b7 e365      	ldi  r22,53
                 __i2c_delay2l:
0013b8 956a      	dec  r22
0013b9 f7f1      	brne __i2c_delay2l
0013ba 9508      	ret
                 _i2c_read:
0013bb e078      	ldi  r23,8
                 __i2c_read0:
0013bc 9888      	cbi  __i2c_dir,__scl_bit
0013bd dff1      	rcall __i2c_delay1
                 __i2c_read3:
0013be 9b80      	sbis __i2c_pin,__scl_bit
0013bf cffe      	rjmp __i2c_read3
0013c0 dfee      	rcall __i2c_delay1
0013c1 9488      	clc
0013c2 9981      	sbic __i2c_pin,__sda_bit
0013c3 9408      	sec
0013c4 9a88      	sbi  __i2c_dir,__scl_bit
0013c5 dff1      	rcall __i2c_delay2
0013c6 1fee      	rol  r30
0013c7 957a      	dec  r23
0013c8 f799      	brne __i2c_read0
0013c9 9179      	ld   r23,y+
0013ca 2377      	tst  r23
0013cb f411      	brne __i2c_read1
0013cc 9889      	cbi  __i2c_dir,__sda_bit
0013cd c001      	rjmp __i2c_read2
                 __i2c_read1:
0013ce 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0013cf dfdf      	rcall __i2c_delay1
0013d0 9888      	cbi  __i2c_dir,__scl_bit
0013d1 dfe5      	rcall __i2c_delay2
0013d2 9a88      	sbi  __i2c_dir,__scl_bit
0013d3 dfdb      	rcall __i2c_delay1
0013d4 9889      	cbi  __i2c_dir,__sda_bit
0013d5 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0013d6 91e9      	ld   r30,y+
0013d7 e078      	ldi  r23,8
                 __i2c_write0:
0013d8 0fee      	lsl  r30
0013d9 f410      	brcc __i2c_write1
0013da 9889      	cbi  __i2c_dir,__sda_bit
0013db c001      	rjmp __i2c_write2
                 __i2c_write1:
0013dc 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0013dd dfd9      	rcall __i2c_delay2
0013de 9888      	cbi  __i2c_dir,__scl_bit
0013df dfcf      	rcall __i2c_delay1
                 __i2c_write3:
0013e0 9b80      	sbis __i2c_pin,__scl_bit
0013e1 cffe      	rjmp __i2c_write3
0013e2 dfcc      	rcall __i2c_delay1
0013e3 9a88      	sbi  __i2c_dir,__scl_bit
0013e4 957a      	dec  r23
0013e5 f791      	brne __i2c_write0
0013e6 9889      	cbi  __i2c_dir,__sda_bit
0013e7 dfc7      	rcall __i2c_delay1
0013e8 9888      	cbi  __i2c_dir,__scl_bit
0013e9 dfcd      	rcall __i2c_delay2
0013ea e0e1      	ldi  r30,1
0013eb 9981      	sbic __i2c_pin,__sda_bit
0013ec 27ee      	clr  r30
0013ed 9a88      	sbi  __i2c_dir,__scl_bit
0013ee cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
0013ef 91e9      	ld   r30,y+
0013f0 91f9      	ld   r31,y+
0013f1 9630      	adiw r30,0
0013f2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0013f3 ea80     +LDI R24 , LOW ( 0xFA0 )
0013f4 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0013f5 9701     +SBIW R24 , 1
0013f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0013f7 95a8      	wdr
0013f8 9731      	sbiw r30,1
0013f9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0013fa 9508      	ret
                 
                 __ROUND_REPACK:
0013fb 2355      	TST  R21
0013fc f442      	BRPL __REPACK
0013fd 3850      	CPI  R21,0x80
0013fe f411      	BRNE __ROUND_REPACK0
0013ff ffe0      	SBRS R30,0
001400 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001401 9631      	ADIW R30,1
001402 1f69      	ADC  R22,R25
001403 1f79      	ADC  R23,R25
001404 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001405 e850      	LDI  R21,0x80
001406 2757      	EOR  R21,R23
001407 f411      	BRNE __REPACK0
001408 935f      	PUSH R21
001409 c073      	RJMP __ZERORES
                 __REPACK0:
00140a 3f5f      	CPI  R21,0xFF
00140b f031      	BREQ __REPACK1
00140c 0f66      	LSL  R22
00140d 0c00      	LSL  R0
00140e 9557      	ROR  R21
00140f 9567      	ROR  R22
001410 2f75      	MOV  R23,R21
001411 9508      	RET
                 __REPACK1:
001412 935f      	PUSH R21
001413 2000      	TST  R0
001414 f00a      	BRMI __REPACK2
001415 c073      	RJMP __MAXRES
                 __REPACK2:
001416 c06c      	RJMP __MINRES
                 
                 __UNPACK:
001417 e850      	LDI  R21,0x80
001418 2e19      	MOV  R1,R25
001419 2215      	AND  R1,R21
00141a 0f88      	LSL  R24
00141b 1f99      	ROL  R25
00141c 2795      	EOR  R25,R21
00141d 0f55      	LSL  R21
00141e 9587      	ROR  R24
                 
                 __UNPACK1:
00141f e850      	LDI  R21,0x80
001420 2e07      	MOV  R0,R23
001421 2205      	AND  R0,R21
001422 0f66      	LSL  R22
001423 1f77      	ROL  R23
001424 2775      	EOR  R23,R21
001425 0f55      	LSL  R21
001426 9567      	ROR  R22
001427 9508      	RET
                 
                 __CFD1U:
001428 9468      	SET
001429 c001      	RJMP __CFD1U0
                 __CFD1:
00142a 94e8      	CLT
                 __CFD1U0:
00142b 935f      	PUSH R21
00142c dff2      	RCALL __UNPACK1
00142d 3870      	CPI  R23,0x80
00142e f018      	BRLO __CFD10
00142f 3f7f      	CPI  R23,0xFF
001430 f408      	BRCC __CFD10
001431 c04b      	RJMP __ZERORES
                 __CFD10:
001432 e156      	LDI  R21,22
001433 1b57      	SUB  R21,R23
001434 f4aa      	BRPL __CFD11
001435 9551      	NEG  R21
001436 3058      	CPI  R21,8
001437 f40e      	BRTC __CFD19
001438 3059      	CPI  R21,9
                 __CFD19:
001439 f030      	BRLO __CFD17
00143a efef      	SER  R30
00143b efff      	SER  R31
00143c ef6f      	SER  R22
00143d e77f      	LDI  R23,0x7F
00143e f977      	BLD  R23,7
00143f c01a      	RJMP __CFD15
                 __CFD17:
001440 2777      	CLR  R23
001441 2355      	TST  R21
001442 f0b9      	BREQ __CFD15
                 __CFD18:
001443 0fee      	LSL  R30
001444 1fff      	ROL  R31
001445 1f66      	ROL  R22
001446 1f77      	ROL  R23
001447 955a      	DEC  R21
001448 f7d1      	BRNE __CFD18
001449 c010      	RJMP __CFD15
                 __CFD11:
00144a 2777      	CLR  R23
                 __CFD12:
00144b 3058      	CPI  R21,8
00144c f028      	BRLO __CFD13
00144d 2fef      	MOV  R30,R31
00144e 2ff6      	MOV  R31,R22
00144f 2f67      	MOV  R22,R23
001450 5058      	SUBI R21,8
001451 cff9      	RJMP __CFD12
                 __CFD13:
001452 2355      	TST  R21
001453 f031      	BREQ __CFD15
                 __CFD14:
001454 9576      	LSR  R23
001455 9567      	ROR  R22
001456 95f7      	ROR  R31
001457 95e7      	ROR  R30
001458 955a      	DEC  R21
001459 f7d1      	BRNE __CFD14
                 __CFD15:
00145a 2000      	TST  R0
00145b f40a      	BRPL __CFD16
00145c d080      	RCALL __ANEGD1
                 __CFD16:
00145d 915f      	POP  R21
00145e 9508      	RET
                 
                 __CDF1U:
00145f 9468      	SET
001460 c001      	RJMP __CDF1U0
                 __CDF1:
001461 94e8      	CLT
                 __CDF1U0:
001462 9730      	SBIW R30,0
001463 4060      	SBCI R22,0
001464 4070      	SBCI R23,0
001465 f0b1      	BREQ __CDF10
001466 2400      	CLR  R0
001467 f026      	BRTS __CDF11
001468 2377      	TST  R23
001469 f412      	BRPL __CDF11
00146a 9400      	COM  R0
00146b d071      	RCALL __ANEGD1
                 __CDF11:
00146c 2e17      	MOV  R1,R23
00146d e17e      	LDI  R23,30
00146e 2011      	TST  R1
                 __CDF12:
00146f f032      	BRMI __CDF13
001470 957a      	DEC  R23
001471 0fee      	LSL  R30
001472 1fff      	ROL  R31
001473 1f66      	ROL  R22
001474 1c11      	ROL  R1
001475 cff9      	RJMP __CDF12
                 __CDF13:
001476 2fef      	MOV  R30,R31
001477 2ff6      	MOV  R31,R22
001478 2d61      	MOV  R22,R1
001479 935f      	PUSH R21
00147a df8a      	RCALL __REPACK
00147b 915f      	POP  R21
                 __CDF10:
00147c 9508      	RET
                 
                 __ZERORES:
00147d 27ee      	CLR  R30
00147e 27ff      	CLR  R31
00147f 2766      	CLR  R22
001480 2777      	CLR  R23
001481 915f      	POP  R21
001482 9508      	RET
                 
                 __MINRES:
001483 efef      	SER  R30
001484 efff      	SER  R31
001485 e76f      	LDI  R22,0x7F
001486 ef7f      	SER  R23
001487 915f      	POP  R21
001488 9508      	RET
                 
                 __MAXRES:
001489 efef      	SER  R30
00148a efff      	SER  R31
00148b e76f      	LDI  R22,0x7F
00148c e77f      	LDI  R23,0x7F
00148d 915f      	POP  R21
00148e 9508      	RET
                 
                 __DIVF21:
00148f 935f      	PUSH R21
001490 df86      	RCALL __UNPACK
001491 3870      	CPI  R23,0x80
001492 f421      	BRNE __DIVF210
001493 2011      	TST  R1
                 __DIVF211:
001494 f40a      	BRPL __DIVF219
001495 cfed      	RJMP __MINRES
                 __DIVF219:
001496 cff2      	RJMP __MAXRES
                 __DIVF210:
001497 3890      	CPI  R25,0x80
001498 f409      	BRNE __DIVF218
                 __DIVF217:
001499 cfe3      	RJMP __ZERORES
                 __DIVF218:
00149a 2401      	EOR  R0,R1
00149b 9408      	SEC
00149c 0b97      	SBC  R25,R23
00149d f41b      	BRVC __DIVF216
00149e f3d4      	BRLT __DIVF217
00149f 2000      	TST  R0
0014a0 cff3      	RJMP __DIVF211
                 __DIVF216:
0014a1 2f79      	MOV  R23,R25
0014a2 931f      	PUSH R17
0014a3 932f      	PUSH R18
0014a4 933f      	PUSH R19
0014a5 934f      	PUSH R20
0014a6 2411      	CLR  R1
0014a7 2711      	CLR  R17
0014a8 2722      	CLR  R18
0014a9 2733      	CLR  R19
0014aa 2744      	CLR  R20
0014ab 2755      	CLR  R21
0014ac e290      	LDI  R25,32
                 __DIVF212:
0014ad 17ae      	CP   R26,R30
0014ae 07bf      	CPC  R27,R31
0014af 0786      	CPC  R24,R22
0014b0 0741      	CPC  R20,R17
0014b1 f030      	BRLO __DIVF213
0014b2 1bae      	SUB  R26,R30
0014b3 0bbf      	SBC  R27,R31
0014b4 0b86      	SBC  R24,R22
0014b5 0b41      	SBC  R20,R17
0014b6 9408      	SEC
0014b7 c001      	RJMP __DIVF214
                 __DIVF213:
0014b8 9488      	CLC
                 __DIVF214:
0014b9 1f55      	ROL  R21
0014ba 1f22      	ROL  R18
0014bb 1f33      	ROL  R19
0014bc 1c11      	ROL  R1
0014bd 1faa      	ROL  R26
0014be 1fbb      	ROL  R27
0014bf 1f88      	ROL  R24
0014c0 1f44      	ROL  R20
0014c1 959a      	DEC  R25
0014c2 f751      	BRNE __DIVF212
0014c3 01f9      	MOVW R30,R18
0014c4 2d61      	MOV  R22,R1
0014c5 914f      	POP  R20
0014c6 913f      	POP  R19
0014c7 912f      	POP  R18
0014c8 911f      	POP  R17
0014c9 2366      	TST  R22
0014ca f032      	BRMI __DIVF215
0014cb 0f55      	LSL  R21
0014cc 1fee      	ROL  R30
0014cd 1fff      	ROL  R31
0014ce 1f66      	ROL  R22
0014cf 957a      	DEC  R23
0014d0 f243      	BRVS __DIVF217
                 __DIVF215:
0014d1 df29      	RCALL __ROUND_REPACK
0014d2 915f      	POP  R21
0014d3 9508      	RET
                 
                 __ADDD12:
0014d4 0fea      	ADD  R30,R26
0014d5 1ffb      	ADC  R31,R27
0014d6 1f68      	ADC  R22,R24
0014d7 1f79      	ADC  R23,R25
0014d8 9508      	RET
                 
                 __ANEGW1:
0014d9 95f1      	NEG  R31
0014da 95e1      	NEG  R30
0014db 40f0      	SBCI R31,0
0014dc 9508      	RET
                 
                 __ANEGD1:
0014dd 95f0      	COM  R31
0014de 9560      	COM  R22
0014df 9570      	COM  R23
0014e0 95e1      	NEG  R30
0014e1 4fff      	SBCI R31,-1
0014e2 4f6f      	SBCI R22,-1
0014e3 4f7f      	SBCI R23,-1
0014e4 9508      	RET
                 
                 __LSLB12:
0014e5 23ee      	TST  R30
0014e6 2e0e      	MOV  R0,R30
0014e7 2fea      	MOV  R30,R26
0014e8 f019      	BREQ __LSLB12R
                 __LSLB12L:
0014e9 0fee      	LSL  R30
0014ea 940a      	DEC  R0
0014eb f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0014ec 9508      	RET
                 
                 __LSRB12:
0014ed 23ee      	TST  R30
0014ee 2e0e      	MOV  R0,R30
0014ef 2fea      	MOV  R30,R26
0014f0 f019      	BREQ __LSRB12R
                 __LSRB12L:
0014f1 95e6      	LSR  R30
0014f2 940a      	DEC  R0
0014f3 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
0014f4 9508      	RET
                 
                 __ASRW4:
0014f5 95f5      	ASR  R31
0014f6 95e7      	ROR  R30
                 __ASRW3:
0014f7 95f5      	ASR  R31
0014f8 95e7      	ROR  R30
                 __ASRW2:
0014f9 95f5      	ASR  R31
0014fa 95e7      	ROR  R30
0014fb 95f5      	ASR  R31
0014fc 95e7      	ROR  R30
0014fd 9508      	RET
                 
                 __CWD1:
0014fe 2f6f      	MOV  R22,R31
0014ff 0f66      	ADD  R22,R22
001500 0b66      	SBC  R22,R22
001501 2f76      	MOV  R23,R22
001502 9508      	RET
                 
                 __MULW12U:
001503 9ffa      	MUL  R31,R26
001504 2df0      	MOV  R31,R0
001505 9feb      	MUL  R30,R27
001506 0df0      	ADD  R31,R0
001507 9fea      	MUL  R30,R26
001508 2de0      	MOV  R30,R0
001509 0df1      	ADD  R31,R1
00150a 9508      	RET
                 
                 __MULD12U:
00150b 9f7a      	MUL  R23,R26
00150c 2d70      	MOV  R23,R0
00150d 9f6b      	MUL  R22,R27
00150e 0d70      	ADD  R23,R0
00150f 9ff8      	MUL  R31,R24
001510 0d70      	ADD  R23,R0
001511 9fe9      	MUL  R30,R25
001512 0d70      	ADD  R23,R0
001513 9f6a      	MUL  R22,R26
001514 2d60      	MOV  R22,R0
001515 0d71      	ADD  R23,R1
001516 9ffb      	MUL  R31,R27
001517 0d60      	ADD  R22,R0
001518 1d71      	ADC  R23,R1
001519 9fe8      	MUL  R30,R24
00151a 0d60      	ADD  R22,R0
00151b 1d71      	ADC  R23,R1
00151c 2788      	CLR  R24
00151d 9ffa      	MUL  R31,R26
00151e 2df0      	MOV  R31,R0
00151f 0d61      	ADD  R22,R1
001520 1f78      	ADC  R23,R24
001521 9feb      	MUL  R30,R27
001522 0df0      	ADD  R31,R0
001523 1d61      	ADC  R22,R1
001524 1f78      	ADC  R23,R24
001525 9fea      	MUL  R30,R26
001526 2de0      	MOV  R30,R0
001527 0df1      	ADD  R31,R1
001528 1f68      	ADC  R22,R24
001529 1f78      	ADC  R23,R24
00152a 9508      	RET
                 
                 __MULW12:
00152b d046      	RCALL __CHKSIGNW
00152c dfd6      	RCALL __MULW12U
00152d f40e      	BRTC __MULW121
00152e dfaa      	RCALL __ANEGW1
                 __MULW121:
00152f 9508      	RET
                 
                 __MULD12:
001530 d04f      	RCALL __CHKSIGND
001531 dfd9      	RCALL __MULD12U
001532 f40e      	BRTC __MULD121
001533 dfa9      	RCALL __ANEGD1
                 __MULD121:
001534 9508      	RET
                 
                 __DIVW21U:
001535 2400      	CLR  R0
001536 2411      	CLR  R1
001537 e190      	LDI  R25,16
                 __DIVW21U1:
001538 0faa      	LSL  R26
001539 1fbb      	ROL  R27
00153a 1c00      	ROL  R0
00153b 1c11      	ROL  R1
00153c 1a0e      	SUB  R0,R30
00153d 0a1f      	SBC  R1,R31
00153e f418      	BRCC __DIVW21U2
00153f 0e0e      	ADD  R0,R30
001540 1e1f      	ADC  R1,R31
001541 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001542 60a1      	SBR  R26,1
                 __DIVW21U3:
001543 959a      	DEC  R25
001544 f799      	BRNE __DIVW21U1
001545 01fd      	MOVW R30,R26
001546 01d0      	MOVW R26,R0
001547 9508      	RET
                 
                 __DIVD21U:
001548 933f      	PUSH R19
001549 934f      	PUSH R20
00154a 935f      	PUSH R21
00154b 2400      	CLR  R0
00154c 2411      	CLR  R1
00154d 2744      	CLR  R20
00154e 2755      	CLR  R21
00154f e230      	LDI  R19,32
                 __DIVD21U1:
001550 0faa      	LSL  R26
001551 1fbb      	ROL  R27
001552 1f88      	ROL  R24
001553 1f99      	ROL  R25
001554 1c00      	ROL  R0
001555 1c11      	ROL  R1
001556 1f44      	ROL  R20
001557 1f55      	ROL  R21
001558 1a0e      	SUB  R0,R30
001559 0a1f      	SBC  R1,R31
00155a 0b46      	SBC  R20,R22
00155b 0b57      	SBC  R21,R23
00155c f428      	BRCC __DIVD21U2
00155d 0e0e      	ADD  R0,R30
00155e 1e1f      	ADC  R1,R31
00155f 1f46      	ADC  R20,R22
001560 1f57      	ADC  R21,R23
001561 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001562 60a1      	SBR  R26,1
                 __DIVD21U3:
001563 953a      	DEC  R19
001564 f759      	BRNE __DIVD21U1
001565 01fd      	MOVW R30,R26
001566 01bc      	MOVW R22,R24
001567 01d0      	MOVW R26,R0
001568 01ca      	MOVW R24,R20
001569 915f      	POP  R21
00156a 914f      	POP  R20
00156b 913f      	POP  R19
00156c 9508      	RET
                 
                 __DIVD21:
00156d d012      	RCALL __CHKSIGND
00156e dfd9      	RCALL __DIVD21U
00156f f40e      	BRTC __DIVD211
001570 df6c      	RCALL __ANEGD1
                 __DIVD211:
001571 9508      	RET
                 
                 __CHKSIGNW:
001572 94e8      	CLT
001573 fff7      	SBRS R31,7
001574 c002      	RJMP __CHKSW1
001575 df63      	RCALL __ANEGW1
001576 9468      	SET
                 __CHKSW1:
001577 ffb7      	SBRS R27,7
001578 c006      	RJMP __CHKSW2
001579 95a0      	COM  R26
00157a 95b0      	COM  R27
00157b 9611      	ADIW R26,1
00157c f800      	BLD  R0,0
00157d 9403      	INC  R0
00157e fa00      	BST  R0,0
                 __CHKSW2:
00157f 9508      	RET
                 
                 __CHKSIGND:
001580 94e8      	CLT
001581 ff77      	SBRS R23,7
001582 c002      	RJMP __CHKSD1
001583 df59      	RCALL __ANEGD1
001584 9468      	SET
                 __CHKSD1:
001585 ff97      	SBRS R25,7
001586 c00b      	RJMP __CHKSD2
001587 2400      	CLR  R0
001588 95a0      	COM  R26
001589 95b0      	COM  R27
00158a 9580      	COM  R24
00158b 9590      	COM  R25
00158c 9611      	ADIW R26,1
00158d 1d80      	ADC  R24,R0
00158e 1d90      	ADC  R25,R0
00158f f800      	BLD  R0,0
001590 9403      	INC  R0
001591 fa00      	BST  R0,0
                 __CHKSD2:
001592 9508      	RET
                 
                 __GETW1P:
001593 91ed      	LD   R30,X+
001594 91fc      	LD   R31,X
001595 9711      	SBIW R26,1
001596 9508      	RET
                 
                 __PUTDP1:
001597 93ed      	ST   X+,R30
001598 93fd      	ST   X+,R31
001599 936d      	ST   X+,R22
00159a 937c      	ST   X,R23
00159b 9508      	RET
                 
                 __GETW1PF:
00159c 9005      	LPM  R0,Z+
00159d 91f4      	LPM  R31,Z
00159e 2de0      	MOV  R30,R0
00159f 9508      	RET
                 
                 __EEPROMRDW:
0015a0 9611      	ADIW R26,1
0015a1 d002      	RCALL __EEPROMRDB
0015a2 2ffe      	MOV  R31,R30
0015a3 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0015a4 99e1      	SBIC EECR,EEWE
0015a5 cffe      	RJMP __EEPROMRDB
0015a6 93ff      	PUSH R31
0015a7 b7ff      	IN   R31,SREG
0015a8 94f8      	CLI
0015a9 bbae      	OUT  EEARL,R26
0015aa bbbf      	OUT  EEARH,R27
0015ab 9ae0      	SBI  EECR,EERE
0015ac b3ed      	IN   R30,EEDR
0015ad bfff      	OUT  SREG,R31
0015ae 91ff      	POP  R31
0015af 9508      	RET
                 
                 __EEPROMWRW:
0015b0 d007      	RCALL __EEPROMWRB
0015b1 9611      	ADIW R26,1
0015b2 93ef      	PUSH R30
0015b3 2fef      	MOV  R30,R31
0015b4 d003      	RCALL __EEPROMWRB
0015b5 91ef      	POP  R30
0015b6 9711      	SBIW R26,1
0015b7 9508      	RET
                 
                 __EEPROMWRB:
0015b8 9be1      	SBIS EECR,EEWE
0015b9 c002      	RJMP __EEPROMWRB1
0015ba 95a8      	WDR
0015bb cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0015bc b79f      	IN   R25,SREG
0015bd 94f8      	CLI
0015be bbae      	OUT  EEARL,R26
0015bf bbbf      	OUT  EEARH,R27
0015c0 9ae0      	SBI  EECR,EERE
0015c1 b38d      	IN   R24,EEDR
0015c2 17e8      	CP   R30,R24
0015c3 f019      	BREQ __EEPROMWRB0
0015c4 bbed      	OUT  EEDR,R30
0015c5 9ae2      	SBI  EECR,EEMWE
0015c6 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0015c7 bf9f      	OUT  SREG,R25
0015c8 9508      	RET
                 
                 __CPD21:
0015c9 17ae      	CP   R26,R30
0015ca 07bf      	CPC  R27,R31
0015cb 0786      	CPC  R24,R22
0015cc 0797      	CPC  R25,R23
0015cd 9508      	RET
                 
                 __SAVELOCR6:
0015ce 935a      	ST   -Y,R21
                 __SAVELOCR5:
0015cf 934a      	ST   -Y,R20
                 __SAVELOCR4:
0015d0 933a      	ST   -Y,R19
                 __SAVELOCR3:
0015d1 932a      	ST   -Y,R18
                 __SAVELOCR2:
0015d2 931a      	ST   -Y,R17
0015d3 930a      	ST   -Y,R16
0015d4 9508      	RET
                 
                 __LOADLOCR6:
0015d5 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0015d6 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0015d7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0015d8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0015d9 8119      	LDD  R17,Y+1
0015da 8108      	LD   R16,Y
0015db 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  59 r1 :  34 r2 :   2 r3 :   0 r4 :   8 r5 :   0 r6 :   9 r7 :   8 
r8 :   9 r9 :   8 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  58 r17:  62 r18:  25 r19:  18 r20:  21 r21:  50 r22:  75 r23:  73 
r24:  47 r25:  35 r26: 393 r27: 127 r28:  24 r29:   1 r30:1127 r31: 551 
x  :  43 y  : 580 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  38 add   :  35 
adiw  :  53 and   :   4 andi  :  10 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  23 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  26 
brlt  :   5 brmi  :   3 brne  : 117 brpl  :  13 brsh  :  28 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 453 
cbi   :  29 cbr   :   0 clc   :   2 clh   :   0 cli   :   6 cln   :   0 
clr   :  38 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  11 
cp    :  32 cpc   : 115 cpi   : 129 cpse  :   0 dec   :  14 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   9 inc   :   4 jmp   :  61 ld    :  49 ldd   : 178 
ldi   : 630 lds   : 128 lpm   :  12 lsl   :  23 lsr   :   2 mov   :  42 
movw  :  59 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :  10 
or    :   4 ori   :   2 out   :  64 pop   :  15 push  :  14 rcall :  85 
ret   : 122 reti  :   2 rjmp  : 181 rol   :  37 ror   :  12 sbc   :  16 
sbci  :  19 sbi   :  34 sbic  :   5 sbis  :   6 sbiw  :  39 sbr   :   2 
sbrc  :   0 sbrs  :   5 sec   :   3 seh   :   0 sei   :   4 sen   :   0 
ser   :   8 ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 338 std   :  64 sts   : 101 sub   :  11 subi  :  36 
swap  :   1 tst   :  19 wdr   :   2 
Instructions used: 79 out of 117 (67.5%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002bb8   8890   2302  11192  131072   8.5%
[.dseg] 0x000100 0x0009dc      0   1244   1244    4351  28.6%
[.eseg] 0x000000 0x000007      0      7      7    4096   0.2%

Assembly complete, 0 errors, 20 warnings
