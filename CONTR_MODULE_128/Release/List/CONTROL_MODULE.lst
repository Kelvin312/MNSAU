
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm Wed Jul 29 13:01:45 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1061): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1065): warning: Register r12 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1066): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rtc_status=R5
                 	.DEF _TOUCH_X=R6
                 	.DEF _TOUCH_Y=R8
                 	.DEF _TOUCH_X_LAST=R10
                 	.DEF _TOUCH_Y_LAST=R12
                 	.DEF _i=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 04c5 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0adf 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 09b8 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0a14 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0a53 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0a7e 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _Default_Parameters:
0003e6 01f4
0003e7 000a
0003e8 012c      	.DB  0xF4,0x1,0xA,0x0,0x2C,0x1
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0003e9 0000      	.DW  0x0000
                 
                 _0x186:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1409): warning: .cseg .db misalignment - padding zero byte
0003ea 00f0      	.DB  0xF0
                 _0x187:
0003eb 010e      	.DB  0xE,0x1
                 _0x188:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1413): warning: .cseg .db misalignment - padding zero byte
0003ec 0064      	.DB  0x64
                 _0x189:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1415): warning: .cseg .db misalignment - padding zero byte
0003ed 00f0      	.DB  0xF0
                 _0x18A:
0003ee 010e      	.DB  0xE,0x1
                 _0x18B:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1419): warning: .cseg .db misalignment - padding zero byte
0003ef 0078      	.DB  0x78
                 _0x18C:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1421): warning: .cseg .db misalignment - padding zero byte
0003f0 00dc      	.DB  0xDC
                 _0x18D:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1423): warning: .cseg .db misalignment - padding zero byte
0003f1 00f0      	.DB  0xF0
                 _0x18E:
0003f2 010e      	.DB  0xE,0x1
                 _0x18F:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1427): warning: .cseg .db misalignment - padding zero byte
0003f3 00f0      	.DB  0xF0
                 _0x190:
0003f4 0154      	.DB  0x54,0x1
                 _0x191:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1431): warning: .cseg .db misalignment - padding zero byte
0003f5 00f0      	.DB  0xF0
                 _0x192:
0003f6 010e      	.DB  0xE,0x1
                 _0x193:
0003f7 0168      	.DB  0x68,0x1
                 _0x194:
0003f8 01cc      	.DB  0xCC,0x1
                 _0x195:
0003f9 0bb8      	.DB  0xB8,0xB
                 _0x196:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1441): warning: .cseg .db misalignment - padding zero byte
0003fa 00fa      	.DB  0xFA
                 _0x197:
0003fb 03e8      	.DB  0xE8,0x3
                 _0x1DB:
0003fc 0032
0003fd 0032
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1445): warning: .cseg .db misalignment - padding zero byte
0003fe 0032      	.DB  0x32,0x0,0x32,0x0,0x32
                 _0x1DC:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1447): warning: .cseg .db misalignment - padding zero byte
0003ff 003c      	.DB  0x3C
                 _0x0:
000400 2020
000401 2020
000402 0020
000403 c5cc      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xCC,0xC5
000404 decd
000405 2000
000406 2b20
000407 2000      	.DB  0xCD,0xDE,0x0,0x20,0x20,0x2B,0x0,0x20
000408 2d20
000409 cf00
00040a d3c0
00040b c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
00040c 2000
00040d 2020
00040e 2020
00040f 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000410 2020
000411 2020
000412 2020
000413 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000414 0020
000415 c0cd
000416 d0cf
000417 c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
000418 cdc5
000419 c5c8
00041a d400
00041b c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
00041c d200
00041d cace
00041e cd00
00041f cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
000420 dfd0
000421 c5c6
000422 c8cd
000423 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000424 20c8
000425 ced2
000426 00ca
000427 cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
000428 c1c7
000429 c6d3
00042a c5c4
00042b c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
00042c 00df
00042d c5c4
00042e cad1
00042f ccce      	.DB  0xDF,0x0,0xC4,0xC5,0xD1,0xCA,0xCE,0xCC
000430 d100
000431 c0d2
000432 d2d0
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1461): warning: .cseg .db misalignment - padding zero byte
000433 0000      	.DB  0x0,0xD1,0xD2,0xC0,0xD0,0xD2,0x0
                 _0x2080060:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1463): warning: .cseg .db misalignment - padding zero byte
000434 0001      	.DB  0x1
                 _0x2080000:
000435 4e2d
000436 4e41
000437 4900
000438 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1466): warning: .cseg .db misalignment - padding zero byte
000439 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00043a 0001      	.DW  0x01
00043b 0002      	.DW  0x02
00043c 07d2      	.DW  __REG_BIT_VARS*2
                 
00043d 0001      	.DW  0x01
00043e 090a      	.DW  _BTN1_Y_Begin
00043f 07d4      	.DW  _0x186*2
                 
000440 0002      	.DW  0x02
000441 090c      	.DW  _BTN1_Y_End
000442 07d6      	.DW  _0x187*2
                 
000443 0001      	.DW  0x01
000444 0910      	.DW  _BTN1_X_End
000445 07d8      	.DW  _0x188*2
                 
000446 0001      	.DW  0x01
000447 0912      	.DW  _BTN2_Y_Begin
000448 07da      	.DW  _0x189*2
                 
000449 0002      	.DW  0x02
00044a 0914      	.DW  _BTN2_Y_End
00044b 07dc      	.DW  _0x18A*2
                 
00044c 0001      	.DW  0x01
00044d 0916      	.DW  _BTN2_X_Begin
00044e 07de      	.DW  _0x18B*2
                 
00044f 0001      	.DW  0x01
000450 0918      	.DW  _BTN2_X_End
000451 07e0      	.DW  _0x18C*2
                 
000452 0001      	.DW  0x01
000453 091a      	.DW  _BTN3_Y_Begin
000454 07e2      	.DW  _0x18D*2
                 
000455 0002      	.DW  0x02
000456 091c      	.DW  _BTN3_Y_End
000457 07e4      	.DW  _0x18E*2
                 
000458 0001      	.DW  0x01
000459 091e      	.DW  _BTN3_X_Begin
00045a 07e6      	.DW  _0x18F*2
                 
00045b 0002      	.DW  0x02
00045c 0920      	.DW  _BTN3_X_End
00045d 07e8      	.DW  _0x190*2
                 
00045e 0001      	.DW  0x01
00045f 0922      	.DW  _BTN4_Y_Begin
000460 07ea      	.DW  _0x191*2
                 
000461 0002      	.DW  0x02
000462 0924      	.DW  _BTN4_Y_End
000463 07ec      	.DW  _0x192*2
                 
000464 0002      	.DW  0x02
000465 0926      	.DW  _BTN4_X_Begin
000466 07ee      	.DW  _0x193*2
                 
000467 0002      	.DW  0x02
000468 0928      	.DW  _BTN4_X_End
000469 07f0      	.DW  _0x194*2
                 
00046a 0002      	.DW  0x02
00046b 0936      	.DW  _LEDGREEN_max
00046c 07f2      	.DW  _0x195*2
                 
00046d 0001      	.DW  0x01
00046e 0938      	.DW  _LEDRED_max
00046f 07f4      	.DW  _0x196*2
                 
000470 0002      	.DW  0x02
000471 093a      	.DW  _LEDBLUE_max
000472 07f6      	.DW  _0x197*2
                 
000473 0006      	.DW  0x06
000474 0500      	.DW  _0x1CA
000475 0800      	.DW  _0x0*2
                 
000476 0006      	.DW  0x06
000477 0506      	.DW  _0x1CA+6
000478 0800      	.DW  _0x0*2
                 
000479 0006      	.DW  0x06
00047a 050c      	.DW  _0x1CA+12
00047b 0800      	.DW  _0x0*2
                 
00047c 0006      	.DW  0x06
00047d 0512      	.DW  _0x1CA+18
00047e 0800      	.DW  _0x0*2
                 
00047f 0005      	.DW  0x05
000480 0518      	.DW  _0x1CE
000481 0806      	.DW  _0x0*2+6
                 
000482 0004      	.DW  0x04
000483 051d      	.DW  _0x1CE+5
000484 080b      	.DW  _0x0*2+11
                 
000485 0004      	.DW  0x04
000486 0521      	.DW  _0x1CE+9
000487 080f      	.DW  _0x0*2+15
                 
000488 0006      	.DW  0x06
000489 0525      	.DW  _0x1CE+13
00048a 0813      	.DW  _0x0*2+19
                 
00048b 0005      	.DW  0x05
00048c 0960      	.DW  _ValueLast
00048d 07f8      	.DW  _0x1DB*2
                 
00048e 0001      	.DW  0x01
00048f 0966      	.DW  _multiplier
000490 07fe      	.DW  _0x1DC*2
                 
000491 0011      	.DW  0x11
000492 052b      	.DW  _0x1F6
000493 0819      	.DW  _0x0*2+25
                 
000494 0011      	.DW  0x11
000495 053c      	.DW  _0x1F6+17
000496 0819      	.DW  _0x0*2+25
                 
000497 000b      	.DW  0x0B
000498 054d      	.DW  _0x1F6+34
000499 082a      	.DW  _0x0*2+42
                 
00049a 0004      	.DW  0x04
00049b 0558      	.DW  _0x1F6+45
00049c 0835      	.DW  _0x0*2+53
                 
00049d 0004      	.DW  0x04
00049e 055c      	.DW  _0x1F6+49
00049f 0839      	.DW  _0x0*2+57
                 
0004a0 0004      	.DW  0x04
0004a1 0560      	.DW  _0x1F6+53
0004a2 0835      	.DW  _0x0*2+53
                 
0004a3 0011      	.DW  0x11
0004a4 0564      	.DW  _0x1F6+57
0004a5 083d      	.DW  _0x0*2+61
                 
0004a6 000c      	.DW  0x0C
0004a7 0575      	.DW  _0x1F6+74
0004a8 084e      	.DW  _0x0*2+78
                 
0004a9 0007      	.DW  0x07
0004aa 0581      	.DW  _0x201
0004ab 085a      	.DW  _0x0*2+90
                 
0004ac 0007      	.DW  0x07
0004ad 0588      	.DW  _0x201+7
0004ae 085a      	.DW  _0x0*2+90
                 
0004af 0007      	.DW  0x07
0004b0 058f      	.DW  _0x201+14
0004b1 085a      	.DW  _0x0*2+90
                 
0004b2 0007      	.DW  0x07
0004b3 0596      	.DW  _0x201+21
0004b4 0823      	.DW  _0x0*2+35
                 
0004b5 0007      	.DW  0x07
0004b6 059d      	.DW  _0x201+28
0004b7 0823      	.DW  _0x0*2+35
                 
0004b8 0007      	.DW  0x07
0004b9 05a4      	.DW  _0x201+35
0004ba 0823      	.DW  _0x0*2+35
                 
0004bb 0006      	.DW  0x06
0004bc 05ab      	.DW  _0x201+42
0004bd 0861      	.DW  _0x0*2+97
                 
0004be 0006      	.DW  0x06
0004bf 05b1      	.DW  _0x201+48
0004c0 0813      	.DW  _0x0*2+19
                 
0004c1 0001      	.DW  0x01
0004c2 0968      	.DW  __seed_G104
0004c3 0868      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
0004c4 0000      	.DW  0
                 
                 __RESET:
0004c5 94f8      	CLI
0004c6 27ee      	CLR  R30
0004c7 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0004c8 e0f1      	LDI  R31,1
0004c9 bff5      	OUT  MCUCR,R31
0004ca bfe5      	OUT  MCUCR,R30
0004cb 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0004cd e1f8      	LDI  R31,0x18
0004ce bdf1      	OUT  WDTCR,R31
0004cf bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0004d0 e08d      	LDI  R24,(14-2)+1
0004d1 e0a2      	LDI  R26,2
0004d2 27bb      	CLR  R27
                 __CLEAR_REG:
0004d3 93ed      	ST   X+,R30
0004d4 958a      	DEC  R24
0004d5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0004d6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0004d7 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0004d8 e0a0      	LDI  R26,LOW(__SRAM_START)
0004d9 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0004da 93ed      	ST   X+,R30
0004db 9701      	SBIW R24,1
0004dc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0004dd e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0004de e0f8      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0004df 9185      	LPM  R24,Z+
0004e0 9195      	LPM  R25,Z+
0004e1 9700      	SBIW R24,0
0004e2 f061      	BREQ __GLOBAL_INI_END
0004e3 91a5      	LPM  R26,Z+
0004e4 91b5      	LPM  R27,Z+
0004e5 9005      	LPM  R0,Z+
0004e6 9015      	LPM  R1,Z+
0004e7 01bf      	MOVW R22,R30
0004e8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0004e9 9005      	LPM  R0,Z+
0004ea 920d      	ST   X+,R0
0004eb 9701      	SBIW R24,1
0004ec f7e1      	BRNE __GLOBAL_INI_LOOP
0004ed 01fb      	MOVW R30,R22
0004ee cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0004ef bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0004f0 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0004f1 bfed      	OUT  SPL,R30
0004f2 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0004f3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0004f4 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0004f5 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0004f6 940c 0e61 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <spi.h>
                 ;#include <string.h>
                 ;#include "PCF8583.h"
                 ;unsigned char rtc_status;
                 ;bit rtc_alarm;
                 ;
                 ;unsigned char rtc_read(unsigned char chip,unsigned char address)
                 ; 0000 0006 {
                 
                 	.CSEG
                 ;unsigned char a;
                 ;a=(chip<<1)|0xa0;
                 ;	chip -> Y+2
                 ;	address -> Y+1
                 ;	a -> R17
                 ;i2c_start();
                 ;i2c_write(a);
                 ;i2c_write(address);
                 ;i2c_start();
                 ;i2c_write(a|1);
                 ;a=i2c_read(0);
                 ;i2c_stop();
                 ;return a;
                 ;}
                 ;
                 ;void rtc_write(unsigned char chip, unsigned char address,unsigned char data)
                 ;{
                 ;i2c_start();
                 ;	chip -> Y+2
                 ;	address -> Y+1
                 ;	data -> Y+0
                 ;i2c_write((chip<<1)|0xa0);
                 ;i2c_write(address);
                 ;i2c_write(data);
                 ;i2c_stop();
                 ;}
                 ;
                 ;unsigned char rtc_get_status(unsigned char chip)
                 ;{
                 ;rtc_status=rtc_read(chip,0);
                 ;	chip -> Y+0
                 ;rtc_alarm=(rtc_status&2);
                 ;return rtc_status;
                 ;}
                 ;
                 ;void rtc_init(unsigned char chip, unsigned char dated_alarm)
                 ;{
                 ;unsigned char d;
                 ;d=0x90;
                 ;	chip -> Y+2
                 ;	dated_alarm -> Y+1
                 ;	d -> R17
                 ;if (dated_alarm) d=0xb0;
                 ;rtc_status=0;
                 ;rtc_alarm=0;
                 ;rtc_write(chip,0,0);
                 ;rtc_write(chip,4,rtc_read(chip,4)&0x3f);
                 ;rtc_write(chip,8,d);
                 ;}
                 ;
                 ;void rtc_stop(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status|=0x80;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_start(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status&=0x7f;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_hold_off(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status&=0xbf;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_hold_on(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status|=0x40;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;unsigned char rtc_read_bcd(unsigned char chip,unsigned char addr)
                 ;{
                 ;return bcd2bin(rtc_read(chip,addr));
                 ;	chip -> Y+1
                 ;	addr -> Y+0
                 ;}
                 ;
                 ;void rtc_write_bcd(unsigned char chip,unsigned char addr,unsigned char data)
                 ;{
                 ;rtc_write(chip,addr,bin2bcd(data));
                 ;	chip -> Y+2
                 ;	addr -> Y+1
                 ;	data -> Y+0
                 ;}
                 ;
                 ;void rtc_write_word(unsigned char chip,unsigned char addr,unsigned data)
                 ;{
                 ;rtc_write(chip,addr,(unsigned char) data&0xff);
                 ;	chip -> Y+3
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 ;rtc_write(chip,++addr,(unsigned char)(data>>8));
                 ;}
                 ;
                 ;void rtc_write_date(unsigned char chip,unsigned char addr,unsigned char date,
                 ;unsigned year)
                 ;{
                 ;rtc_write(chip,addr,bin2bcd(date)|(((unsigned char) year&3)<<6));
                 ;	chip -> Y+4
                 ;	addr -> Y+3
                 ;	date -> Y+2
                 ;	year -> Y+0
                 ;}
                 ;
                 ;void rtc_get_time(unsigned char chip,unsigned char *hour,unsigned char *min,
                 ;unsigned char *sec,unsigned char *hsec)
                 ;{
                 ;rtc_hold_on(chip);
                 ;	chip -> Y+8
                 ;	*hour -> Y+6
                 ;	*min -> Y+4
                 ;	*sec -> Y+2
                 ;	*hsec -> Y+0
                 ;*hsec=rtc_read_bcd(chip,1);
                 ;*sec=rtc_read_bcd(chip,2);
                 ;*min=rtc_read_bcd(chip,3);
                 ;*hour=rtc_read_bcd(chip,4);
                 ;rtc_hold_off(chip);
                 ;}
                 ;
                 ;void rtc_set_time(unsigned char chip,unsigned char hour,unsigned char min,
                 ;unsigned char sec,unsigned char hsec)
                 ;{
                 ;rtc_stop(chip);
                 ;	chip -> Y+4
                 ;	hour -> Y+3
                 ;	min -> Y+2
                 ;	sec -> Y+1
                 ;	hsec -> Y+0
                 ;rtc_write_bcd(chip,1,hsec);
                 ;rtc_write_bcd(chip,2,sec);
                 ;rtc_write_bcd(chip,3,min);
                 ;rtc_write_bcd(chip,4,hour);
                 ;rtc_start(chip);
                 ;}
                 ;
                 ;void rtc_get_date(unsigned char chip,unsigned char *date,unsigned char *month,
                 ;unsigned *year)
                 ;{
                 ;unsigned char dy;
                 ;unsigned y1;
                 ;rtc_hold_on(chip);
                 ;	chip -> Y+10
                 ;	*date -> Y+8
                 ;	*month -> Y+6
                 ;	*year -> Y+4
                 ;	dy -> R17
                 ;	y1 -> R18,R19
                 ;dy=rtc_read(chip,5);
                 ;*month=bcd2bin(rtc_read(chip,6)&0x1f);
                 ;rtc_hold_off(chip);
                 ;*date=bcd2bin(dy&0x3f);
                 ;dy>>=6;
                 ;y1=rtc_read(chip,0x10)|((unsigned) rtc_read(chip,0x11)<<8);
                 ;if (((unsigned char) y1&3)!=dy) rtc_write_word(chip,0x10,++y1);
                 ;*year=y1;
                 ;}
                 ;
                 ;void rtc_set_date(unsigned char chip,unsigned char date,unsigned char month,
                 ;unsigned year)
                 ;{
                 ;rtc_write_word(chip,0x10,year);
                 ;	chip -> Y+4
                 ;	date -> Y+3
                 ;	month -> Y+2
                 ;	year -> Y+0
                 ;rtc_stop(chip);
                 ;rtc_write_date(chip,5,date,year);
                 ;rtc_write_bcd(chip,6,month);
                 ;rtc_start(chip);
                 ;}
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;/*flash char RotationByte[256] =
                 ;{
                 ;0b00000000, //0
                 ;0b10000000, //128
                 ;0b01000000, //64
                 ;0b11000000, //192
                 ;0b00100000, //32
                 ;0b10100000, //160
                 ;0b01100000, //96
                 ;0b11100000, //224
                 ;0b00010000, //16
                 ;0b10010000, //144
                 ;0b01010000, //80
                 ;0b11010000, //208
                 ;0b00110000, //48
                 ;0b10110000, //176
                 ;0b01110000, //112
                 ;0b11110000, //240
                 ;0b00001000, //8
                 ;0b10001000, //136
                 ;0b01001000, //72
                 ;0b11001000, //200
                 ;0b00101000, //40
                 ;0b10101000, //168
                 ;0b01101000, //104
                 ;0b11101000, //232
                 ;0b00011000, //24
                 ;0b10011000, //152
                 ;0b01011000, //88
                 ;0b11011000, //216
                 ;0b00111000, //56
                 ;0b10111000, //184
                 ;0b01111000, //120
                 ;0b11111000, //248
                 ;0b00000100, //4
                 ;0b10000100, //132
                 ;0b01000100, //68
                 ;0b11000100, //196
                 ;0b00100100, //36
                 ;0b10100100, //164
                 ;0b01100100, //100
                 ;0b11100100, //228
                 ;0b00010100, //20
                 ;0b10010100, //148
                 ;0b01010100, //84
                 ;0b11010100, //212
                 ;0b00110100, //52
                 ;0b10110100, //180
                 ;0b01110100, //116
                 ;0b11110100, //244
                 ;0b00001100, //12
                 ;0b10001100, //140
                 ;0b01001100, //76
                 ;0b11001100, //204
                 ;0b00101100, //44
                 ;0b10101100, //172
                 ;0b01101100, //108
                 ;0b11101100, //236
                 ;0b00011100, //28
                 ;0b10011100, //156
                 ;0b01011100, //92
                 ;0b11011100, //220
                 ;0b00111100, //60
                 ;0b10111100, //188
                 ;0b01111100, //124
                 ;0b11111100, //252
                 ;0b00000010, //2
                 ;0b10000010, //130
                 ;0b01000010, //66
                 ;0b11000010, //194
                 ;0b00100010, //34
                 ;0b10100010, //162
                 ;0b01100010, //98
                 ;0b11100010, //226
                 ;0b00010010, //18
                 ;0b10010010, //146
                 ;0b01010010, //82
                 ;0b11010010, //210
                 ;0b00110010, //50
                 ;0b10110010, //178
                 ;0b01110010, //114
                 ;0b11110010, //242
                 ;0b00001010, //10
                 ;0b10001010, //138
                 ;0b01001010, //74
                 ;0b11001010, //202
                 ;0b00101010, //42
                 ;0b10101010, //170
                 ;0b01101010, //106
                 ;0b11101010, //234
                 ;0b00011010, //26
                 ;0b10011010, //154
                 ;0b01011010, //90
                 ;0b11011010, //218
                 ;0b00111010, //58
                 ;0b10111010, //186
                 ;0b01111010, //122
                 ;0b11111010, //250
                 ;0b00000110, //6
                 ;0b10000110, //134
                 ;0b01000110, //70
                 ;0b11000110, //198
                 ;0b00100110, //38
                 ;0b10100110, //166
                 ;0b01100110, //102
                 ;0b11100110, //230
                 ;0b00010110, //22
                 ;0b10010110, //150
                 ;0b01010110, //86
                 ;0b11010110, //214
                 ;0b00110110, //54
                 ;0b10110110, //182
                 ;0b01110110, //118
                 ;0b11110110, //246
                 ;0b00001110, //14
                 ;0b10001110, //142
                 ;0b01001110, //78
                 ;0b11001110, //206
                 ;0b00101110, //46
                 ;0b10101110, //174
                 ;0b01101110, //110
                 ;0b11101110, //238
                 ;0b00011110, //30
                 ;0b10011110, //158
                 ;0b01011110, //94
                 ;0b11011110, //222
                 ;0b00111110, //62
                 ;0b10111110, //190
                 ;0b01111110, //126
                 ;0b11111110, //254
                 ;0b00000001, //1
                 ;0b10000001, //129
                 ;0b01000001, //65
                 ;0b11000001, //193
                 ;0b00100001, //33
                 ;0b10100001, //161
                 ;0b01100001, //97
                 ;0b11100001, //225
                 ;0b00010001, //17
                 ;0b10010001, //145
                 ;0b01010001, //81
                 ;0b11010001, //209
                 ;0b00110001, //49
                 ;0b10110001, //177
                 ;0b01110001, //113
                 ;0b11110001, //241
                 ;0b00001001, //9
                 ;0b10001001, //137
                 ;0b01001001, //73
                 ;0b11001001, //201
                 ;0b00101001, //41
                 ;0b10101001, //169
                 ;0b01101001, //105
                 ;0b11101001, //233
                 ;0b00011001, //25
                 ;0b10011001, //153
                 ;0b01011001, //89
                 ;0b11011001, //217
                 ;0b00111001, //57
                 ;0b10111001, //185
                 ;0b01111001, //121
                 ;0b11111001, //249
                 ;0b00000101, //5
                 ;0b10000101, //133
                 ;0b01000101, //69
                 ;0b11000101, //197
                 ;0b00100101, //37
                 ;0b10100101, //165
                 ;0b01100101, //101
                 ;0b11100101, //229
                 ;0b00010101, //21
                 ;0b10010101, //149
                 ;0b01010101, //85
                 ;0b11010101, //213
                 ;0b00110101, //53
                 ;0b10110101, //181
                 ;0b01110101, //117
                 ;0b11110101, //245
                 ;0b00001101, //13
                 ;0b10001101, //141
                 ;0b01001101, //77
                 ;0b11001101, //205
                 ;0b00101101, //45
                 ;0b10101101, //173
                 ;0b01101101, //109
                 ;0b11101101, //237
                 ;0b00011101, //29
                 ;0b10011101, //157
                 ;0b01011101, //93
                 ;0b11011101, //221
                 ;0b00111101, //61
                 ;0b10111101, //189
                 ;0b01111101, //125
                 ;0b11111101, //253
                 ;0b00000011, //3
                 ;0b10000011, //131
                 ;0b01000011, //67
                 ;0b11000011, //195
                 ;0b00100011, //35
                 ;0b10100011, //163
                 ;0b01100011, //99
                 ;0b11100011, //227
                 ;0b00010011, //19
                 ;0b10010011, //147
                 ;0b01010011, //83
                 ;0b11010011, //211
                 ;0b00110011, //51
                 ;0b10110011, //179
                 ;0b01110011, //115
                 ;0b11110011, //243
                 ;0b00001011, //11
                 ;0b10001011, //139
                 ;0b01001011, //75
                 ;0b11001011, //203
                 ;0b00101011, //43
                 ;0b10101011, //171
                 ;0b01101011, //107
                 ;0b11101011, //235
                 ;0b00011011, //27
                 ;0b10011011, //155
                 ;0b01011011, //91
                 ;0b11011011, //219
                 ;0b00111011, //59
                 ;0b10111011, //187
                 ;0b01111011, //123
                 ;0b11111011, //251
                 ;0b00000111, //7
                 ;0b10000111, //135
                 ;0b01000111, //71
                 ;0b11000111, //199
                 ;0b00100111, //39
                 ;0b10100111, //167
                 ;0b01100111, //103
                 ;0b11100111, //231
                 ;0b00010111, //23
                 ;0b10010111, //151
                 ;0b01010111, //87
                 ;0b11010111, //215
                 ;0b00110111, //55
                 ;0b10110111, //183
                 ;0b01110111, //119
                 ;0b11110111, //247
                 ;0b00001111, //15
                 ;0b10001111, //143
                 ;0b01001111, //79
                 ;0b11001111, //207
                 ;0b00101111, //47
                 ;0b10101111, //175
                 ;0b01101111, //111
                 ;0b11101111, //239
                 ;0b00011111, //31
                 ;0b10011111, //159
                 ;0b01011111, //95
                 ;0b11011111, //223
                 ;0b00111111, //63
                 ;0b10111111, //191
                 ;0b01111111, //127
                 ;0b11111111, //255
                 ;};
                 ;*/
                 ;unsigned char RotateByte(unsigned char Value)
                 ; 0000 0008 {
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
0004f8 940e 1078 	CALL SUBOPT_0x0
0004fa 95f5      	ASR  R31
0004fb 95e7      	ROR  R30
0004fc 75e5      	ANDI R30,LOW(0x55)
0004fd 2fae      	MOV  R26,R30
0004fe 81e8      	LD   R30,Y
0004ff 0fee      	LSL  R30
000500 7aea      	ANDI R30,LOW(0xAA)
000501 2bea      	OR   R30,R26
000502 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
000503 940e 1078 	CALL SUBOPT_0x0
000505 940e 1524 	CALL __ASRW2
000507 73e3      	ANDI R30,LOW(0x33)
000508 2fae      	MOV  R26,R30
000509 81e8      	LD   R30,Y
00050a 0fee      	LSL  R30
00050b 0fee      	LSL  R30
00050c 7cec      	ANDI R30,LOW(0xCC)
00050d 2bea      	OR   R30,R26
00050e 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
00050f 940e 1078 	CALL SUBOPT_0x0
000511 940e 1520 	CALL __ASRW4
000513 70ef      	ANDI R30,LOW(0xF)
000514 2fae      	MOV  R26,R30
000515 81e8      	LD   R30,Y
000516 95e2      	SWAP R30
000517 7fe0      	ANDI R30,LOW(0xF0)
000518 2bea      	OR   R30,R26
000519 83e8      	ST   Y,R30
                 ;  return Value;
00051a c023      	RJMP _0x20C0007
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
00051b 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
00051c 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
00051d 940e 107b 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
00051f 981d      	CBI  0x3,5
                 ;  delay_ms(100);
000520 940e 107b 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
000522 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
000523 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
000524 940e 107b 	CALL SUBOPT_0x1
                 ;}
000526 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
000527 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
000528 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
000529 940e 1081 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
00052b 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00052c 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00052d 9896      	CBI  0x12,6
                 ;  #asm("nop")
00052e 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00052f 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000530 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000531 0000      	nop
000532 c00b      	RJMP _0x20C0006
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
000533 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000534 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
000535 940e 1081 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
000537 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000538 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000539 9896      	CBI  0x12,6
                 ;  #asm("nop")
00053a 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00053b 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
00053c 9a96      	SBI  0x12,6
                 ;  #asm("nop")
00053d 0000      	nop
                 _0x20C0006:
                 ;} // SSD1963_Writedata
                 _0x20C0007:
00053e 9621      	ADIW R28,1
00053f 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000540 931a      	ST   -Y,R17
000541 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
000542 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
000543 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
000544 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000545 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
000546 bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
000547 bb05      	OUT  0x15,R16
                 ;  #asm("nop")
000548 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000549 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00054a 9896      	CBI  0x12,6
                 ;  #asm("nop")
00054b 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00054c 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
00054d 9a96      	SBI  0x12,6
                 ;  #asm("nop")
00054e 0000      	nop
                 ;} // SSD1963_Writedata
00054f 8119      	LDD  R17,Y+1
000550 8108      	LDD  R16,Y+0
000551 9624      	ADIW R28,4
000552 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_Reset();
000553 dfc7      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
000554 940e 1089 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000556 940e 1089 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000558 940e 1089 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
00055a ece8      	LDI  R30,LOW(200)
00055b e0f0      	LDI  R31,HIGH(200)
00055c 940e 108d 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
00055e eee2      	LDI  R30,LOW(226)
00055f 93ea      	ST   -Y,R30
000560 dfc6      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
000561 e2e3      	LDI  R30,LOW(35)
000562 93ea      	ST   -Y,R30
000563 dfcf      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
000564 e0e2      	LDI  R30,LOW(2)
000565 940e 1091 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
000567 eee0      	LDI  R30,LOW(224)
000568 940e 1098 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
00056a 940e 109f 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
00056c eee0      	LDI  R30,LOW(224)
00056d 940e 10a2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
00056f 940e 1089 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
000571 e7e8      	LDI  R30,LOW(120)
000572 e0f0      	LDI  R31,HIGH(120)
000573 940e 108d 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
000575 eee6      	LDI  R30,LOW(230)
000576 940e 1098 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
000578 edea      	LDI  R30,LOW(218)
000579 93ea      	ST   -Y,R30
00057a dfb8      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
00057b e7e3      	LDI  R30,LOW(115)
00057c 93ea      	ST   -Y,R30
00057d dfb5      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
00057e ebe0      	LDI  R30,LOW(176)
00057f 93ea      	ST   -Y,R30
000580 dfa6      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
000581 e2e4      	LDI  R30,LOW(36)
000582 940e 10a9 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
000584 940e 10b0 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
000586 edef      	LDI  R30,LOW(223)
000587 940e 10b4 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
000589 e0ef      	LDI  R30,LOW(15)
00058a 940e 10a9 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
00058c ebe4      	LDI  R30,LOW(180)
00058d 940e 10a2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
00058f e8e4      	LDI  R30,LOW(132)
000590 940e 10a9 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
000592 e5ea      	LDI  R30,LOW(90)
000593 93ea      	ST   -Y,R30
000594 df9e      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
000595 e0ea      	LDI  R30,LOW(10)
000596 940e 10a9 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
000598 e0e8      	LDI  R30,LOW(8)
000599 940e 10a9 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
00059b ebe6      	LDI  R30,LOW(182)
00059c 940e 1098 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
00059e e2ec      	LDI  R30,LOW(44)
00059f 940e 10a9 	CALL SUBOPT_0x9
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
0005a1 e0ec      	LDI  R30,LOW(12)
0005a2 93ea      	ST   -Y,R30
0005a3 df8f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
0005a4 e0ea      	LDI  R30,LOW(10)
0005a5 93ea      	ST   -Y,R30
0005a6 df8c      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
0005a7 e0e0      	LDI  R30,LOW(0)
0005a8 940e 1091 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
0005aa ebea      	LDI  R30,LOW(186)
0005ab 93ea      	ST   -Y,R30
0005ac df7a      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
0005ad e0ef      	LDI  R30,LOW(15)
0005ae 93ea      	ST   -Y,R30
0005af df83      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
0005b0 ebe8      	LDI  R30,LOW(184)
0005b1 93ea      	ST   -Y,R30
0005b2 df74      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
0005b3 e0e7      	LDI  R30,LOW(7)
0005b4 940e 10b4 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
0005b6 e3e6      	LDI  R30,LOW(54)
0005b7 940e 10a2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
0005b9 ebec      	LDI  R30,LOW(188)
0005ba 93ea      	ST   -Y,R30
0005bb df6b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
0005bc e5e0      	LDI  R30,LOW(80)
0005bd 93ea      	ST   -Y,R30
0005be df74      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
0005bf e9e0      	LDI  R30,LOW(144)
0005c0 93ea      	ST   -Y,R30
0005c1 df71      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
0005c2 e5e0      	LDI  R30,LOW(80)
0005c3 940e 10b4 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
0005c5 efe0      	LDI  R30,LOW(240)
0005c6 940e 10a2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
0005c8 e0e5      	LDI  R30,LOW(5)
0005c9 e0f0      	LDI  R31,HIGH(5)
0005ca 940e 108d 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
0005cc e2e9      	LDI  R30,LOW(41)
0005cd 93ea      	ST   -Y,R30
0005ce df58      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
0005cf ede0      	LDI  R30,LOW(208)
0005d0 93ea      	ST   -Y,R30
0005d1 df55      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
0005d2 e0ed      	LDI  R30,LOW(13)
0005d3 93ea      	ST   -Y,R30
0005d4 df5e      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
0005d5 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
0005d6 e2ea      	LDI  R30,LOW(42)
0005d7 93ea      	ST   -Y,R30
0005d8 df4e      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
0005d9 81ef      	LDD  R30,Y+7
0005da 93ea      	ST   -Y,R30
0005db df57      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
0005dc 81ee      	LDD  R30,Y+6
0005dd 93ea      	ST   -Y,R30
0005de df54      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
0005df 81ed      	LDD  R30,Y+5
0005e0 93ea      	ST   -Y,R30
0005e1 df51      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
0005e2 81ec      	LDD  R30,Y+4
0005e3 93ea      	ST   -Y,R30
0005e4 df4e      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
0005e5 e2eb      	LDI  R30,LOW(43)
0005e6 93ea      	ST   -Y,R30
0005e7 df3f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
0005e8 81eb      	LDD  R30,Y+3
0005e9 93ea      	ST   -Y,R30
0005ea df48      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
0005eb 81ea      	LDD  R30,Y+2
0005ec 93ea      	ST   -Y,R30
0005ed df45      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
0005ee 81e9      	LDD  R30,Y+1
0005ef 93ea      	ST   -Y,R30
0005f0 df42      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
0005f1 81e8      	LD   R30,Y
0005f2 93ea      	ST   -Y,R30
0005f3 df3f      	RCALL _SSD1963_WriteData_b8
                 ;}
0005f4 9628      	ADIW R28,8
0005f5 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
0005f6 940e 15fb 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
0005f8 e2e8      	LDI  R30,LOW(40)
0005f9 93ea      	ST   -Y,R30
0005fa df2c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
0005fb 940e 10b8 	CALL SUBOPT_0xC
0005fd edef      	LDI  R30,LOW(479)
0005fe e0f1      	LDI  R31,HIGH(479)
0005ff 940e 10bd 	CALL SUBOPT_0xD
000601 e0ef      	LDI  R30,LOW(271)
000602 e0f1      	LDI  R31,HIGH(271)
000603 940e 10c0 	CALL SUBOPT_0xE
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
000605 e000     +LDI R16 , LOW ( 0 )
000606 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x33:
                +
000607 3100     +CPI R16 , LOW ( 272 )
000608 e0e1     +LDI R30 , HIGH ( 272 )
000609 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
00060a f480      	BRSH _0x35
                 ;  {
                 ;    y=0;
                +
00060b e020     +LDI R18 , LOW ( 0 )
00060c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x36:
                +
00060d 3e20     +CPI R18 , LOW ( 480 )
00060e e0e1     +LDI R30 , HIGH ( 480 )
00060f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
000610 f438      	BRSH _0x38
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
000611 81ec      	LDD  R30,Y+4
000612 81fd      	LDD  R31,Y+4+1
000613 940e 10c8 	CALL SUBOPT_0xF
                 ;      y++;
                +
000615 5f2f     +SUBI R18 , LOW ( - 1 )
000616 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
000617 cff5      	RJMP _0x36
                 _0x38:
                 ;  x++;
                +
000618 5f0f     +SUBI R16 , LOW ( - 1 )
000619 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
00061a cfec      	RJMP _0x33
                 _0x35:
                 ;  SSD1963_WriteCmd(0x29);
00061b e2e9      	LDI  R30,LOW(41)
00061c 93ea      	ST   -Y,R30
00061d df09      	RCALL _SSD1963_WriteCmd
                 ;}
00061e 940e 1602 	CALL __LOADLOCR4
000620 9626      	ADIW R28,6
000621 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
000622 931a      	ST   -Y,R17
000623 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
000624 940e 10cc 	CALL SUBOPT_0x10
000626 85aa      	LDD  R26,Y+10
000627 85bb      	LDD  R27,Y+10+1
000628 9650      	ADIW R26,16
000629 9711      	SBIW R26,1
00062a 93ba      	ST   -Y,R27
00062b 93aa      	ST   -Y,R26
00062c 940e 10d1 	CALL SUBOPT_0x11
00062e 85ac      	LDD  R26,Y+12
00062f 85bd      	LDD  R27,Y+12+1
000630 9650      	ADIW R26,16
000631 9711      	SBIW R26,1
000632 93ba      	ST   -Y,R27
000633 93aa      	ST   -Y,R26
000634 dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
000635 e2ec      	LDI  R30,LOW(44)
000636 93ea      	ST   -Y,R30
000637 deef      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
000638 e010      	LDI  R17,LOW(0)
                 _0x3A:
000639 3210      	CPI  R17,32
00063a f4e8      	BRSH _0x3B
                 ;  {
                 ;    for (j = 0; j < 8; j++)
00063b e000      	LDI  R16,LOW(0)
                 _0x3D:
00063c 3008      	CPI  R16,8
00063d f4c0      	BRSH _0x3E
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
00063e 2fe1      	MOV  R30,R17
00063f 85aa      	LDD  R26,Y+10
000640 85bb      	LDD  R27,Y+10+1
000641 e0f0      	LDI  R31,0
000642 0fea      	ADD  R30,R26
000643 1ffb      	ADC  R31,R27
000644 9014      	LPM  R1,Z
000645 2fe0      	MOV  R30,R16
000646 e8a0      	LDI  R26,LOW(128)
000647 940e 1518 	CALL __LSRB12
000649 21e1      	AND  R30,R1
00064a 30e1      	CPI  R30,LOW(0x1)
00064b f018      	BRLO _0x3F
00064c 81ec      	LDD  R30,Y+4
00064d 81fd      	LDD  R31,Y+4+1
00064e c002      	RJMP _0x235
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3F:
00064f 81ea      	LDD  R30,Y+2
000650 81fb      	LDD  R31,Y+2+1
                 _0x235:
000651 93fa      	ST   -Y,R31
000652 93ea      	ST   -Y,R30
000653 deec      	RCALL _SSD1963_WriteData_b16
                 ;    }
000654 5f0f      	SUBI R16,-1
000655 cfe6      	RJMP _0x3D
                 _0x3E:
                 ;  }
000656 5f1f      	SUBI R17,-1
000657 cfe1      	RJMP _0x3A
                 _0x3B:
                 ;}
000658 8119      	LDD  R17,Y+1
000659 8108      	LDD  R16,Y+0
00065a c2c2      	RJMP _0x20C0005
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
00065b 85e8      	LDD  R30,Y+8
00065c e0f0      	LDI  R31,0
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
00065d 33e0      	CPI  R30,LOW(0x30)
00065e e0a0      	LDI  R26,HIGH(0x30)
00065f 07fa      	CPC  R31,R26
000660 f419      	BRNE _0x44
000661 e0ec      	LDI  R30,LOW(_S_48*2)
000662 e0f1      	LDI  R31,HIGH(_S_48*2)
000663 c18e      	RJMP _0x236
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x44:
000664 33e1      	CPI  R30,LOW(0x31)
000665 e0a0      	LDI  R26,HIGH(0x31)
000666 07fa      	CPC  R31,R26
000667 f419      	BRNE _0x45
000668 e2ec      	LDI  R30,LOW(_S_49*2)
000669 e0f1      	LDI  R31,HIGH(_S_49*2)
00066a c187      	RJMP _0x236
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x45:
00066b 33e2      	CPI  R30,LOW(0x32)
00066c e0a0      	LDI  R26,HIGH(0x32)
00066d 07fa      	CPC  R31,R26
00066e f419      	BRNE _0x46
00066f e4ec      	LDI  R30,LOW(_S_50*2)
000670 e0f1      	LDI  R31,HIGH(_S_50*2)
000671 c180      	RJMP _0x236
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x46:
000672 33e3      	CPI  R30,LOW(0x33)
000673 e0a0      	LDI  R26,HIGH(0x33)
000674 07fa      	CPC  R31,R26
000675 f419      	BRNE _0x47
000676 e6ec      	LDI  R30,LOW(_S_51*2)
000677 e0f1      	LDI  R31,HIGH(_S_51*2)
000678 c179      	RJMP _0x236
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x47:
000679 33e4      	CPI  R30,LOW(0x34)
00067a e0a0      	LDI  R26,HIGH(0x34)
00067b 07fa      	CPC  R31,R26
00067c f419      	BRNE _0x48
00067d e8ec      	LDI  R30,LOW(_S_52*2)
00067e e0f1      	LDI  R31,HIGH(_S_52*2)
00067f c172      	RJMP _0x236
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x48:
000680 33e5      	CPI  R30,LOW(0x35)
000681 e0a0      	LDI  R26,HIGH(0x35)
000682 07fa      	CPC  R31,R26
000683 f419      	BRNE _0x49
000684 eaec      	LDI  R30,LOW(_S_53*2)
000685 e0f1      	LDI  R31,HIGH(_S_53*2)
000686 c16b      	RJMP _0x236
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x49:
000687 33e6      	CPI  R30,LOW(0x36)
000688 e0a0      	LDI  R26,HIGH(0x36)
000689 07fa      	CPC  R31,R26
00068a f419      	BRNE _0x4A
00068b ecec      	LDI  R30,LOW(_S_54*2)
00068c e0f1      	LDI  R31,HIGH(_S_54*2)
00068d c164      	RJMP _0x236
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x4A:
00068e 33e7      	CPI  R30,LOW(0x37)
00068f e0a0      	LDI  R26,HIGH(0x37)
000690 07fa      	CPC  R31,R26
000691 f419      	BRNE _0x4B
000692 eeec      	LDI  R30,LOW(_S_55*2)
000693 e0f1      	LDI  R31,HIGH(_S_55*2)
000694 c15d      	RJMP _0x236
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x4B:
000695 33e8      	CPI  R30,LOW(0x38)
000696 e0a0      	LDI  R26,HIGH(0x38)
000697 07fa      	CPC  R31,R26
000698 f419      	BRNE _0x4C
000699 e0ec      	LDI  R30,LOW(_S_56*2)
00069a e0f2      	LDI  R31,HIGH(_S_56*2)
00069b c156      	RJMP _0x236
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4C:
00069c 33e9      	CPI  R30,LOW(0x39)
00069d e0a0      	LDI  R26,HIGH(0x39)
00069e 07fa      	CPC  R31,R26
00069f f419      	BRNE _0x4D
0006a0 e2ec      	LDI  R30,LOW(_S_57*2)
0006a1 e0f2      	LDI  R31,HIGH(_S_57*2)
0006a2 c14f      	RJMP _0x236
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4D:
0006a3 32e1      	CPI  R30,LOW(0x21)
0006a4 e0a0      	LDI  R26,HIGH(0x21)
0006a5 07fa      	CPC  R31,R26
0006a6 f419      	BRNE _0x4E
0006a7 e6ec      	LDI  R30,LOW(_S_33*2)
0006a8 e0f2      	LDI  R31,HIGH(_S_33*2)
0006a9 c148      	RJMP _0x236
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4E:
0006aa 32e8      	CPI  R30,LOW(0x28)
0006ab e0a0      	LDI  R26,HIGH(0x28)
0006ac 07fa      	CPC  R31,R26
0006ad f419      	BRNE _0x4F
0006ae e8ec      	LDI  R30,LOW(_S_40*2)
0006af e0f2      	LDI  R31,HIGH(_S_40*2)
0006b0 c141      	RJMP _0x236
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4F:
0006b1 32e9      	CPI  R30,LOW(0x29)
0006b2 e0a0      	LDI  R26,HIGH(0x29)
0006b3 07fa      	CPC  R31,R26
0006b4 f419      	BRNE _0x50
0006b5 eaec      	LDI  R30,LOW(_S_41*2)
0006b6 e0f2      	LDI  R31,HIGH(_S_41*2)
0006b7 c13a      	RJMP _0x236
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x50:
0006b8 32ef      	CPI  R30,LOW(0x2F)
0006b9 e0a0      	LDI  R26,HIGH(0x2F)
0006ba 07fa      	CPC  R31,R26
0006bb f419      	BRNE _0x51
0006bc ecec      	LDI  R30,LOW(_S_47*2)
0006bd e0f2      	LDI  R31,HIGH(_S_47*2)
0006be c133      	RJMP _0x236
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x51:
0006bf 33ea      	CPI  R30,LOW(0x3A)
0006c0 e0a0      	LDI  R26,HIGH(0x3A)
0006c1 07fa      	CPC  R31,R26
0006c2 f419      	BRNE _0x52
0006c3 e2ec      	LDI  R30,LOW(_S_58*2)
0006c4 e0f3      	LDI  R31,HIGH(_S_58*2)
0006c5 c12c      	RJMP _0x236
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x52:
0006c6 33ec      	CPI  R30,LOW(0x3C)
0006c7 e0a0      	LDI  R26,HIGH(0x3C)
0006c8 07fa      	CPC  R31,R26
0006c9 f419      	BRNE _0x53
0006ca e4ec      	LDI  R30,LOW(_S_60*2)
0006cb e0f3      	LDI  R31,HIGH(_S_60*2)
0006cc c125      	RJMP _0x236
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x53:
0006cd 33ed      	CPI  R30,LOW(0x3D)
0006ce e0a0      	LDI  R26,HIGH(0x3D)
0006cf 07fa      	CPC  R31,R26
0006d0 f419      	BRNE _0x54
0006d1 e6ec      	LDI  R30,LOW(_S_61*2)
0006d2 e0f3      	LDI  R31,HIGH(_S_61*2)
0006d3 c11e      	RJMP _0x236
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x54:
0006d4 33ee      	CPI  R30,LOW(0x3E)
0006d5 e0a0      	LDI  R26,HIGH(0x3E)
0006d6 07fa      	CPC  R31,R26
0006d7 f419      	BRNE _0x55
0006d8 e8ec      	LDI  R30,LOW(_S_62*2)
0006d9 e0f3      	LDI  R31,HIGH(_S_62*2)
0006da c117      	RJMP _0x236
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x55:
0006db 33ef      	CPI  R30,LOW(0x3F)
0006dc e0a0      	LDI  R26,HIGH(0x3F)
0006dd 07fa      	CPC  R31,R26
0006de f419      	BRNE _0x56
0006df eaec      	LDI  R30,LOW(_S_63*2)
0006e0 e0f3      	LDI  R31,HIGH(_S_63*2)
0006e1 c110      	RJMP _0x236
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x56:
0006e2 32eb      	CPI  R30,LOW(0x2B)
0006e3 e0a0      	LDI  R26,HIGH(0x2B)
0006e4 07fa      	CPC  R31,R26
0006e5 f419      	BRNE _0x57
0006e6 eeec      	LDI  R30,LOW(_S_43*2)
0006e7 e0f2      	LDI  R31,HIGH(_S_43*2)
0006e8 c109      	RJMP _0x236
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x57:
0006e9 32ed      	CPI  R30,LOW(0x2D)
0006ea e0a0      	LDI  R26,HIGH(0x2D)
0006eb 07fa      	CPC  R31,R26
0006ec f419      	BRNE _0x58
0006ed e0ec      	LDI  R30,LOW(_S_45*2)
0006ee e0f3      	LDI  R31,HIGH(_S_45*2)
0006ef c102      	RJMP _0x236
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x58:
0006f0 3ce0      	CPI  R30,LOW(0xC0)
0006f1 e0a0      	LDI  R26,HIGH(0xC0)
0006f2 07fa      	CPC  R31,R26
0006f3 f419      	BRNE _0x59
0006f4 ecec      	LDI  R30,LOW(_S_192*2)
0006f5 e0f3      	LDI  R31,HIGH(_S_192*2)
0006f6 c0fb      	RJMP _0x236
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x59:
0006f7 3ce1      	CPI  R30,LOW(0xC1)
0006f8 e0a0      	LDI  R26,HIGH(0xC1)
0006f9 07fa      	CPC  R31,R26
0006fa f419      	BRNE _0x5A
0006fb eeec      	LDI  R30,LOW(_S_193*2)
0006fc e0f3      	LDI  R31,HIGH(_S_193*2)
0006fd c0f4      	RJMP _0x236
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x5A:
0006fe 3ce2      	CPI  R30,LOW(0xC2)
0006ff e0a0      	LDI  R26,HIGH(0xC2)
000700 07fa      	CPC  R31,R26
000701 f419      	BRNE _0x5B
000702 e0ec      	LDI  R30,LOW(_S_194*2)
000703 e0f4      	LDI  R31,HIGH(_S_194*2)
000704 c0ed      	RJMP _0x236
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x5B:
000705 3ce3      	CPI  R30,LOW(0xC3)
000706 e0a0      	LDI  R26,HIGH(0xC3)
000707 07fa      	CPC  R31,R26
000708 f419      	BRNE _0x5C
000709 e2ec      	LDI  R30,LOW(_S_195*2)
00070a e0f4      	LDI  R31,HIGH(_S_195*2)
00070b c0e6      	RJMP _0x236
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5C:
00070c 3ce4      	CPI  R30,LOW(0xC4)
00070d e0a0      	LDI  R26,HIGH(0xC4)
00070e 07fa      	CPC  R31,R26
00070f f419      	BRNE _0x5D
000710 e4ec      	LDI  R30,LOW(_S_196*2)
000711 e0f4      	LDI  R31,HIGH(_S_196*2)
000712 c0df      	RJMP _0x236
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5D:
000713 3ce5      	CPI  R30,LOW(0xC5)
000714 e0a0      	LDI  R26,HIGH(0xC5)
000715 07fa      	CPC  R31,R26
000716 f419      	BRNE _0x5E
000717 e6ec      	LDI  R30,LOW(_S_197*2)
000718 e0f4      	LDI  R31,HIGH(_S_197*2)
000719 c0d8      	RJMP _0x236
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5E:
00071a 3ce6      	CPI  R30,LOW(0xC6)
00071b e0a0      	LDI  R26,HIGH(0xC6)
00071c 07fa      	CPC  R31,R26
00071d f419      	BRNE _0x5F
00071e e8ec      	LDI  R30,LOW(_S_198*2)
00071f e0f4      	LDI  R31,HIGH(_S_198*2)
000720 c0d1      	RJMP _0x236
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5F:
000721 3ce7      	CPI  R30,LOW(0xC7)
000722 e0a0      	LDI  R26,HIGH(0xC7)
000723 07fa      	CPC  R31,R26
000724 f419      	BRNE _0x60
000725 eaec      	LDI  R30,LOW(_S_199*2)
000726 e0f4      	LDI  R31,HIGH(_S_199*2)
000727 c0ca      	RJMP _0x236
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x60:
000728 3ce8      	CPI  R30,LOW(0xC8)
000729 e0a0      	LDI  R26,HIGH(0xC8)
00072a 07fa      	CPC  R31,R26
00072b f419      	BRNE _0x61
00072c ecec      	LDI  R30,LOW(_S_200*2)
00072d e0f4      	LDI  R31,HIGH(_S_200*2)
00072e c0c3      	RJMP _0x236
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x61:
00072f 3ce9      	CPI  R30,LOW(0xC9)
000730 e0a0      	LDI  R26,HIGH(0xC9)
000731 07fa      	CPC  R31,R26
000732 f419      	BRNE _0x62
000733 eeec      	LDI  R30,LOW(_S_201*2)
000734 e0f4      	LDI  R31,HIGH(_S_201*2)
000735 c0bc      	RJMP _0x236
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x62:
000736 3cea      	CPI  R30,LOW(0xCA)
000737 e0a0      	LDI  R26,HIGH(0xCA)
000738 07fa      	CPC  R31,R26
000739 f419      	BRNE _0x63
00073a e0ec      	LDI  R30,LOW(_S_202*2)
00073b e0f5      	LDI  R31,HIGH(_S_202*2)
00073c c0b5      	RJMP _0x236
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x63:
00073d 3ceb      	CPI  R30,LOW(0xCB)
00073e e0a0      	LDI  R26,HIGH(0xCB)
00073f 07fa      	CPC  R31,R26
000740 f419      	BRNE _0x64
000741 e2ec      	LDI  R30,LOW(_S_203*2)
000742 e0f5      	LDI  R31,HIGH(_S_203*2)
000743 c0ae      	RJMP _0x236
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x64:
000744 3cec      	CPI  R30,LOW(0xCC)
000745 e0a0      	LDI  R26,HIGH(0xCC)
000746 07fa      	CPC  R31,R26
000747 f419      	BRNE _0x65
000748 e4ec      	LDI  R30,LOW(_S_204*2)
000749 e0f5      	LDI  R31,HIGH(_S_204*2)
00074a c0a7      	RJMP _0x236
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x65:
00074b 3ced      	CPI  R30,LOW(0xCD)
00074c e0a0      	LDI  R26,HIGH(0xCD)
00074d 07fa      	CPC  R31,R26
00074e f419      	BRNE _0x66
00074f e6ec      	LDI  R30,LOW(_S_205*2)
000750 e0f5      	LDI  R31,HIGH(_S_205*2)
000751 c0a0      	RJMP _0x236
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x66:
000752 3cee      	CPI  R30,LOW(0xCE)
000753 e0a0      	LDI  R26,HIGH(0xCE)
000754 07fa      	CPC  R31,R26
000755 f419      	BRNE _0x67
000756 e8ec      	LDI  R30,LOW(_S_206*2)
000757 e0f5      	LDI  R31,HIGH(_S_206*2)
000758 c099      	RJMP _0x236
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x67:
000759 3cef      	CPI  R30,LOW(0xCF)
00075a e0a0      	LDI  R26,HIGH(0xCF)
00075b 07fa      	CPC  R31,R26
00075c f419      	BRNE _0x68
00075d eaec      	LDI  R30,LOW(_S_207*2)
00075e e0f5      	LDI  R31,HIGH(_S_207*2)
00075f c092      	RJMP _0x236
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x68:
000760 3de0      	CPI  R30,LOW(0xD0)
000761 e0a0      	LDI  R26,HIGH(0xD0)
000762 07fa      	CPC  R31,R26
000763 f419      	BRNE _0x69
000764 ecec      	LDI  R30,LOW(_S_208*2)
000765 e0f5      	LDI  R31,HIGH(_S_208*2)
000766 c08b      	RJMP _0x236
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x69:
000767 3de1      	CPI  R30,LOW(0xD1)
000768 e0a0      	LDI  R26,HIGH(0xD1)
000769 07fa      	CPC  R31,R26
00076a f419      	BRNE _0x6A
00076b eeec      	LDI  R30,LOW(_S_209*2)
00076c e0f5      	LDI  R31,HIGH(_S_209*2)
00076d c084      	RJMP _0x236
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x6A:
00076e 3de2      	CPI  R30,LOW(0xD2)
00076f e0a0      	LDI  R26,HIGH(0xD2)
000770 07fa      	CPC  R31,R26
000771 f419      	BRNE _0x6B
000772 e0ec      	LDI  R30,LOW(_S_210*2)
000773 e0f6      	LDI  R31,HIGH(_S_210*2)
000774 c07d      	RJMP _0x236
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x6B:
000775 3de3      	CPI  R30,LOW(0xD3)
000776 e0a0      	LDI  R26,HIGH(0xD3)
000777 07fa      	CPC  R31,R26
000778 f419      	BRNE _0x6C
000779 e2ec      	LDI  R30,LOW(_S_211*2)
00077a e0f6      	LDI  R31,HIGH(_S_211*2)
00077b c076      	RJMP _0x236
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6C:
00077c 3de4      	CPI  R30,LOW(0xD4)
00077d e0a0      	LDI  R26,HIGH(0xD4)
00077e 07fa      	CPC  R31,R26
00077f f419      	BRNE _0x6D
000780 e4ec      	LDI  R30,LOW(_S_212*2)
000781 e0f6      	LDI  R31,HIGH(_S_212*2)
000782 c06f      	RJMP _0x236
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6D:
000783 3de5      	CPI  R30,LOW(0xD5)
000784 e0a0      	LDI  R26,HIGH(0xD5)
000785 07fa      	CPC  R31,R26
000786 f419      	BRNE _0x6E
000787 e6ec      	LDI  R30,LOW(_S_213*2)
000788 e0f6      	LDI  R31,HIGH(_S_213*2)
000789 c068      	RJMP _0x236
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6E:
00078a 3de6      	CPI  R30,LOW(0xD6)
00078b e0a0      	LDI  R26,HIGH(0xD6)
00078c 07fa      	CPC  R31,R26
00078d f419      	BRNE _0x6F
00078e e8ec      	LDI  R30,LOW(_S_214*2)
00078f e0f6      	LDI  R31,HIGH(_S_214*2)
000790 c061      	RJMP _0x236
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6F:
000791 3de7      	CPI  R30,LOW(0xD7)
000792 e0a0      	LDI  R26,HIGH(0xD7)
000793 07fa      	CPC  R31,R26
000794 f419      	BRNE _0x70
000795 eaec      	LDI  R30,LOW(_S_215*2)
000796 e0f6      	LDI  R31,HIGH(_S_215*2)
000797 c05a      	RJMP _0x236
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x70:
000798 3de8      	CPI  R30,LOW(0xD8)
000799 e0a0      	LDI  R26,HIGH(0xD8)
00079a 07fa      	CPC  R31,R26
00079b f419      	BRNE _0x71
00079c ecec      	LDI  R30,LOW(_S_216*2)
00079d e0f6      	LDI  R31,HIGH(_S_216*2)
00079e c053      	RJMP _0x236
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x71:
00079f 3de9      	CPI  R30,LOW(0xD9)
0007a0 e0a0      	LDI  R26,HIGH(0xD9)
0007a1 07fa      	CPC  R31,R26
0007a2 f419      	BRNE _0x72
0007a3 eeec      	LDI  R30,LOW(_S_217*2)
0007a4 e0f6      	LDI  R31,HIGH(_S_217*2)
0007a5 c04c      	RJMP _0x236
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x72:
0007a6 3dea      	CPI  R30,LOW(0xDA)
0007a7 e0a0      	LDI  R26,HIGH(0xDA)
0007a8 07fa      	CPC  R31,R26
0007a9 f419      	BRNE _0x73
0007aa e0ec      	LDI  R30,LOW(_S_218*2)
0007ab e0f7      	LDI  R31,HIGH(_S_218*2)
0007ac c045      	RJMP _0x236
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x73:
0007ad 3deb      	CPI  R30,LOW(0xDB)
0007ae e0a0      	LDI  R26,HIGH(0xDB)
0007af 07fa      	CPC  R31,R26
0007b0 f419      	BRNE _0x74
0007b1 e2ec      	LDI  R30,LOW(_S_219*2)
0007b2 e0f7      	LDI  R31,HIGH(_S_219*2)
0007b3 c03e      	RJMP _0x236
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x74:
0007b4 3dec      	CPI  R30,LOW(0xDC)
0007b5 e0a0      	LDI  R26,HIGH(0xDC)
0007b6 07fa      	CPC  R31,R26
0007b7 f419      	BRNE _0x75
0007b8 e4ec      	LDI  R30,LOW(_S_220*2)
0007b9 e0f7      	LDI  R31,HIGH(_S_220*2)
0007ba c037      	RJMP _0x236
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x75:
0007bb 3ded      	CPI  R30,LOW(0xDD)
0007bc e0a0      	LDI  R26,HIGH(0xDD)
0007bd 07fa      	CPC  R31,R26
0007be f419      	BRNE _0x76
0007bf e6ec      	LDI  R30,LOW(_S_221*2)
0007c0 e0f7      	LDI  R31,HIGH(_S_221*2)
0007c1 c030      	RJMP _0x236
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x76:
0007c2 3dee      	CPI  R30,LOW(0xDE)
0007c3 e0a0      	LDI  R26,HIGH(0xDE)
0007c4 07fa      	CPC  R31,R26
0007c5 f419      	BRNE _0x77
0007c6 e8ec      	LDI  R30,LOW(_S_222*2)
0007c7 e0f7      	LDI  R31,HIGH(_S_222*2)
0007c8 c029      	RJMP _0x236
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x77:
0007c9 3def      	CPI  R30,LOW(0xDF)
0007ca e0a0      	LDI  R26,HIGH(0xDF)
0007cb 07fa      	CPC  R31,R26
0007cc f419      	BRNE _0x78
0007cd eaec      	LDI  R30,LOW(_S_223*2)
0007ce e0f7      	LDI  R31,HIGH(_S_223*2)
0007cf c022      	RJMP _0x236
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x78:
0007d0 32ee      	CPI  R30,LOW(0x2E)
0007d1 e0a0      	LDI  R26,HIGH(0x2E)
0007d2 07fa      	CPC  R31,R26
0007d3 f419      	BRNE _0x79
0007d4 eaec      	LDI  R30,LOW(_S_46*2)
0007d5 e0f0      	LDI  R31,HIGH(_S_46*2)
0007d6 c01b      	RJMP _0x236
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x79:
0007d7 32e0      	CPI  R30,LOW(0x20)
0007d8 e0a0      	LDI  R26,HIGH(0x20)
0007d9 07fa      	CPC  R31,R26
0007da f419      	BRNE _0x7A
0007db e4ec      	LDI  R30,LOW(_S_32*2)
0007dc e0f2      	LDI  R31,HIGH(_S_32*2)
0007dd c014      	RJMP _0x236
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x7A:
0007de 30e1      	CPI  R30,LOW(0x1)
0007df e0a0      	LDI  R26,HIGH(0x1)
0007e0 07fa      	CPC  R31,R26
0007e1 f419      	BRNE _0x7B
0007e2 ecec      	LDI  R30,LOW(_S_UP*2)
0007e3 e0f0      	LDI  R31,HIGH(_S_UP*2)
0007e4 c00d      	RJMP _0x236
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x7B:
0007e5 30e2      	CPI  R30,LOW(0x2)
0007e6 e0a0      	LDI  R26,HIGH(0x2)
0007e7 07fa      	CPC  R31,R26
0007e8 f419      	BRNE _0x7C
0007e9 eeec      	LDI  R30,LOW(_S_DOWN*2)
0007ea e0f0      	LDI  R31,HIGH(_S_DOWN*2)
0007eb c006      	RJMP _0x236
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7C:
0007ec 30e3      	CPI  R30,LOW(0x3)
0007ed e0a0      	LDI  R26,HIGH(0x3)
0007ee 07fa      	CPC  R31,R26
0007ef f469      	BRNE _0x43
0007f0 e8ec      	LDI  R30,LOW(_blank_symb*2)
0007f1 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x236:
0007f2 93fa      	ST   -Y,R31
0007f3 93ea      	ST   -Y,R30
0007f4 940e 10cc 	CALL SUBOPT_0x10
0007f6 940e 10cc 	CALL SUBOPT_0x10
0007f8 940e 10cc 	CALL SUBOPT_0x10
0007fa 940e 10cc 	CALL SUBOPT_0x10
0007fc de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x43:
                 ;}
0007fd 9629      	ADIW R28,9
0007fe 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7E:
0007ff 85a8      	LDD  R26,Y+8
000800 85b9      	LDD  R27,Y+8+1
000801 91ec      	LD   R30,X
000802 30e0      	CPI  R30,0
000803 f099      	BREQ _0x80
000804 91ed      	LD   R30,X+
000805 87a8      	STD  Y+8,R26
000806 87b9      	STD  Y+8+1,R27
000807 93ea      	ST   -Y,R30
000808 940e 10d6 	CALL SUBOPT_0x12
00080a 940e 10d6 	CALL SUBOPT_0x12
00080c 940e 10d6 	CALL SUBOPT_0x12
00080e 940e 10d6 	CALL SUBOPT_0x12
000810 de4a      	RCALL _SSD1963_PutChar16
000811 81ee      	LDD  R30,Y+6
000812 81ff      	LDD  R31,Y+6+1
000813 9670      	ADIW R30,16
000814 83ee      	STD  Y+6,R30
000815 83ff      	STD  Y+6+1,R31
000816 cfe8      	RJMP _0x7E
                 _0x80:
                 ;}
000817 962a      	ADIW R28,10
000818 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  {
                 ;    case 5 :
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10000;
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 1000;
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;      Value %= 100;
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10;
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;    break;
                 ;  }
                 ;}
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000819 940e 10db 	CALL SUBOPT_0x13
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
00081b 940e 10ed 	CALL SUBOPT_0x14
                 ;  if (j < 0) j *= -1;
00081d f412      	BRPL _0x8D
00081e 940e 10f7 	CALL SUBOPT_0x15
                 ;  k = StopY - StartY + 1;
                 _0x8D:
000820 940e 10fe 	CALL SUBOPT_0x16
                 ;  if (k < 0) k *= -1;
000822 f422      	BRPL _0x8E
000823 940e 110e 	CALL SUBOPT_0x17
000825 940e 1113 	CALL SUBOPT_0x18
                 ;  k = k * j;
                 _0x8E:
000827 940e 111e 	CALL SUBOPT_0x19
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x90:
000829 940e 1131 	CALL SUBOPT_0x1A
00082b f43c      	BRGE _0x91
00082c 85ea      	LDD  R30,Y+10
00082d 85fb      	LDD  R31,Y+10+1
00082e 940e 10c8 	CALL SUBOPT_0xF
000830 940e 1139 	CALL SUBOPT_0x1B
000832 cff6      	RJMP _0x90
                 _0x91:
000833 c105      	RJMP _0x20C0004
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
000834 972a      	SBIW R28,10
000835 940e 15f9 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
000837 8da9      	LDD  R26,Y+25
000838 8dba      	LDD  R27,Y+25+1
000839 89ef      	LDD  R30,Y+23
00083a 8df8      	LDD  R31,Y+23+1
00083b 1bea      	SUB  R30,R26
00083c 0bfb      	SBC  R31,R27
00083d 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
00083e 2355      	TST  R21
00083f f432      	BRPL _0x92
000840 01fa      	MOVW R30,R20
000841 efaf      	LDI  R26,LOW(65535)
000842 efbf      	LDI  R27,HIGH(65535)
000843 940e 1556 	CALL __MULW12
000845 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x92:
000846 89ad      	LDD  R26,Y+21
000847 89be      	LDD  R27,Y+21+1
000848 89eb      	LDD  R30,Y+19
000849 89fc      	LDD  R31,Y+19+1
00084a 1bea      	SUB  R30,R26
00084b 0bfb      	SBC  R31,R27
00084c 87ee      	STD  Y+14,R30
00084d 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
00084e 85af      	LDD  R26,Y+15
00084f 23aa      	TST  R26
000850 f432      	BRPL _0x93
000851 efaf      	LDI  R26,LOW(65535)
000852 efbf      	LDI  R27,HIGH(65535)
000853 940e 1556 	CALL __MULW12
000855 87ee      	STD  Y+14,R30
000856 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x93:
000857 89ef      	LDD  R30,Y+23
000858 8df8      	LDD  R31,Y+23+1
000859 8da9      	LDD  R26,Y+25
00085a 8dba      	LDD  R27,Y+25+1
00085b 17ae      	CP   R26,R30
00085c 07bf      	CPC  R27,R31
00085d f418      	BRSH _0x94
00085e e0e1      	LDI  R30,LOW(1)
00085f e0f0      	LDI  R31,HIGH(1)
000860 c002      	RJMP _0x95
                 _0x94:
000861 efef      	LDI  R30,LOW(65535)
000862 efff      	LDI  R31,HIGH(65535)
                 _0x95:
000863 87ec      	STD  Y+12,R30
000864 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
000865 89eb      	LDD  R30,Y+19
000866 89fc      	LDD  R31,Y+19+1
000867 89ad      	LDD  R26,Y+21
000868 89be      	LDD  R27,Y+21+1
000869 17ae      	CP   R26,R30
00086a 07bf      	CPC  R27,R31
00086b f418      	BRSH _0x97
00086c e0e1      	LDI  R30,LOW(1)
00086d e0f0      	LDI  R31,HIGH(1)
00086e c002      	RJMP _0x98
                 _0x97:
00086f efef      	LDI  R30,LOW(65535)
000870 efff      	LDI  R31,HIGH(65535)
                 _0x98:
000871 87ea      	STD  Y+10,R30
000872 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
000873 85ae      	LDD  R26,Y+14
000874 85bf      	LDD  R27,Y+14+1
000875 01fa      	MOVW R30,R20
000876 1bea      	SUB  R30,R26
000877 0bfb      	SBC  R31,R27
000878 87e8      	STD  Y+8,R30
000879 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x9A:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
00087a 8de9      	LDD  R30,Y+25
00087b 8dfa      	LDD  R31,Y+25+1
00087c 93fa      	ST   -Y,R31
00087d 93ea      	ST   -Y,R30
00087e 89ea      	LDD  R30,Y+18
00087f 940e 1146 	CALL SUBOPT_0x1C
000881 93fa      	ST   -Y,R31
000882 93ea      	ST   -Y,R30
000883 8de9      	LDD  R30,Y+25
000884 8dfa      	LDD  R31,Y+25+1
000885 93fa      	ST   -Y,R31
000886 93ea      	ST   -Y,R30
000887 89ee      	LDD  R30,Y+22
000888 940e 1146 	CALL SUBOPT_0x1C
00088a 940e 10c0 	CALL SUBOPT_0xE
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
00088c 89a8      	LDD  R26,Y+16
00088d 27bb      	CLR  R27
00088e 89e8      	LDD  R30,Y+16
00088f e0f0      	LDI  R31,0
000890 940e 1556 	CALL __MULW12
000892 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
000893 e000     +LDI R16 , LOW ( 0 )
000894 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9E:
                +
000895 1720     +CP R18 , R16
000896 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000897 f03c      	BRLT _0x9F
000898 89e9      	LDD  R30,Y+17
000899 89fa      	LDD  R31,Y+17+1
00089a 940e 10c8 	CALL SUBOPT_0xF
                +
00089c 5f0f     +SUBI R16 , LOW ( - 1 )
00089d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00089e cff6      	RJMP _0x9E
                 _0x9F:
00089f 89ef      	LDD  R30,Y+23
0008a0 8df8      	LDD  R31,Y+23+1
0008a1 8da9      	LDD  R26,Y+25
0008a2 8dba      	LDD  R27,Y+25+1
0008a3 17ea      	CP   R30,R26
0008a4 07fb      	CPC  R31,R27
0008a5 f439      	BRNE _0xA1
0008a6 89eb      	LDD  R30,Y+19
0008a7 89fc      	LDD  R31,Y+19+1
0008a8 89ad      	LDD  R26,Y+21
0008a9 89be      	LDD  R27,Y+21+1
0008aa 17ea      	CP   R30,R26
0008ab 07fb      	CPC  R31,R27
0008ac f009      	BREQ _0xA2
                 _0xA1:
0008ad c001      	RJMP _0xA0
                 _0xA2:
                 ;		break;
0008ae c032      	RJMP _0x9C
                 ;
                 ;		error2 = error * 2;
                 _0xA0:
0008af 85e8      	LDD  R30,Y+8
0008b0 85f9      	LDD  R31,Y+8+1
0008b1 0fee      	LSL  R30
0008b2 1fff      	ROL  R31
0008b3 83ee      	STD  Y+6,R30
0008b4 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
0008b5 85ee      	LDD  R30,Y+14
0008b6 85ff      	LDD  R31,Y+14+1
0008b7 940e 1504 	CALL __ANEGW1
0008b9 81ae      	LDD  R26,Y+6
0008ba 81bf      	LDD  R27,Y+6+1
0008bb 17ea      	CP   R30,R26
0008bc 07fb      	CPC  R31,R27
0008bd f474      	BRGE _0xA3
                 ;		{
                 ;			error -= deltaY;
0008be 85ae      	LDD  R26,Y+14
0008bf 85bf      	LDD  R27,Y+14+1
0008c0 940e 114c 	CALL SUBOPT_0x1D
0008c2 87e8      	STD  Y+8,R30
0008c3 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
0008c4 85ec      	LDD  R30,Y+12
0008c5 85fd      	LDD  R31,Y+12+1
0008c6 8da9      	LDD  R26,Y+25
0008c7 8dba      	LDD  R27,Y+25+1
0008c8 0fea      	ADD  R30,R26
0008c9 1ffb      	ADC  R31,R27
0008ca 8fe9      	STD  Y+25,R30
0008cb 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA3:
0008cc 81ae      	LDD  R26,Y+6
0008cd 81bf      	LDD  R27,Y+6+1
0008ce 17a4      	CP   R26,R20
0008cf 07b5      	CPC  R27,R21
0008d0 f47c      	BRGE _0xA4
                 ;		{
                 ;			error += deltaX;
0008d1 01fa      	MOVW R30,R20
0008d2 85a8      	LDD  R26,Y+8
0008d3 85b9      	LDD  R27,Y+8+1
0008d4 0fea      	ADD  R30,R26
0008d5 1ffb      	ADC  R31,R27
0008d6 87e8      	STD  Y+8,R30
0008d7 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
0008d8 85ea      	LDD  R30,Y+10
0008d9 85fb      	LDD  R31,Y+10+1
0008da 89ad      	LDD  R26,Y+21
0008db 89be      	LDD  R27,Y+21+1
0008dc 0fea      	ADD  R30,R26
0008dd 1ffb      	ADC  R31,R27
0008de 8bed      	STD  Y+21,R30
0008df 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA4:
0008e0 cf99      	RJMP _0x9A
                 _0x9C:
                 ;}
0008e1 940e 1600 	CALL __LOADLOCR6
0008e3 966b      	ADIW R28,27
0008e4 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
0008e5 940e 10d1 	CALL SUBOPT_0x11
0008e7 940e 10d1 	CALL SUBOPT_0x11
0008e9 940e 10d1 	CALL SUBOPT_0x11
0008eb 85e8      	LDD  R30,Y+8
0008ec 85f9      	LDD  R31,Y+8+1
0008ed 940e 1151 	CALL SUBOPT_0x1E
0008ef 940e 10cc 	CALL SUBOPT_0x10
0008f1 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
0008f2 940e 10d1 	CALL SUBOPT_0x11
0008f4 81ec      	LDD  R30,Y+4
0008f5 81fd      	LDD  R31,Y+4+1
0008f6 940e 1151 	CALL SUBOPT_0x1E
0008f8 940e 10d1 	CALL SUBOPT_0x11
0008fa 940e 10d1 	CALL SUBOPT_0x11
0008fc 940e 10cc 	CALL SUBOPT_0x10
0008fe df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
0008ff 940e 10d1 	CALL SUBOPT_0x11
000901 940e 10d1 	CALL SUBOPT_0x11
000903 81ae      	LDD  R26,Y+6
000904 81bf      	LDD  R27,Y+6+1
000905 940e 114c 	CALL SUBOPT_0x1D
000907 93fa      	ST   -Y,R31
000908 93ea      	ST   -Y,R30
000909 940e 10d1 	CALL SUBOPT_0x11
00090b 940e 10cc 	CALL SUBOPT_0x10
00090d df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
00090e 81aa      	LDD  R26,Y+2
00090f 81bb      	LDD  R27,Y+2+1
000910 940e 114c 	CALL SUBOPT_0x1D
000912 93fa      	ST   -Y,R31
000913 93ea      	ST   -Y,R30
000914 940e 10d1 	CALL SUBOPT_0x11
000916 940e 10d1 	CALL SUBOPT_0x11
000918 940e 10d1 	CALL SUBOPT_0x11
00091a 940e 10cc 	CALL SUBOPT_0x10
00091c defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x20C0005:
00091d 962c      	ADIW R28,12
00091e 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
00091f 940e 10db 	CALL SUBOPT_0x13
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
000921 940e 10ed 	CALL SUBOPT_0x14
                 ;  if (j < 0) j *= -1;
000923 f412      	BRPL _0xA5
000924 940e 10f7 	CALL SUBOPT_0x15
                 ;  k = StopY - StartY + 1;
                 _0xA5:
000926 940e 10fe 	CALL SUBOPT_0x16
                 ;  if (k < 0) k *= -1;
000928 f422      	BRPL _0xA6
000929 940e 110e 	CALL SUBOPT_0x17
00092b 940e 1113 	CALL SUBOPT_0x18
                 ;  k = k * j;
                 _0xA6:
00092d 940e 111e 	CALL SUBOPT_0x19
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA8:
00092f 940e 1131 	CALL SUBOPT_0x1A
000931 f43c      	BRGE _0xA9
000932 85ea      	LDD  R30,Y+10
000933 85fb      	LDD  R31,Y+10+1
000934 940e 10c8 	CALL SUBOPT_0xF
000936 940e 1139 	CALL SUBOPT_0x1B
000938 cff6      	RJMP _0xA8
                 _0xA9:
                 _0x20C0004:
000939 8119      	LDD  R17,Y+1
00093a 8108      	LDD  R16,Y+0
00093b 9664      	ADIW R28,20
00093c 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;char i;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ; 0000 0009 {
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
00093d 931a      	ST   -Y,R17
00093e 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00093f 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000940 940e 109f 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
000942 ede3      	LDI  R30,LOW(211)
000943 940e 1158 	CALL SUBOPT_0x1F
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000945 c05b      	RJMP _0x20C0003
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000946 931a      	ST   -Y,R17
000947 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000948 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000949 940e 109f 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
00094b e9e3      	LDI  R30,LOW(147)
00094c 940e 1158 	CALL SUBOPT_0x1F
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
00094e c052      	RJMP _0x20C0003
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
00094f 981a      	CBI  0x3,2
                 ;  delay_ms(5);
000950 e0e5      	LDI  R30,LOW(5)
000951 e0f0      	LDI  R31,HIGH(5)
000952 940e 108d 	CALL SUBOPT_0x4
                 ;  spi(0b10010000);
000954 e9e0      	LDI  R30,LOW(144)
000955 93ea      	ST   -Y,R30
000956 940e 1071 	CALL _spi
                 ;  delay_us(100);
                +
000958 e980     +LDI R24 , LOW ( 400 )
000959 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00095a 9701     +SBIW R24 , 1
00095b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
00095c e0e0      	LDI  R30,LOW(0)
00095d 93ea      	ST   -Y,R30
00095e 940e 1071 	CALL _spi
                 ;  spi(0x00);
000960 e0e0      	LDI  R30,LOW(0)
000961 93ea      	ST   -Y,R30
000962 940e 1071 	CALL _spi
                 ;  TOUCH_CS = 1;
000964 9a1a      	SBI  0x3,2
                 ;}
000965 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
000966 931a      	ST   -Y,R17
000967 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000968 dfd4      	RCALL _TSC2046_getADC_X
000969 51e4      	SUBI R30,LOW(1300)
00096a 40f5      	SBCI R31,HIGH(1300)
00096b 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
00096c 2311      	TST  R17
00096d f412      	BRPL _0xBA
                +
00096e e000     +LDI R16 , LOW ( 0 )
00096f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xBA:
000970 940e 1171 	CALL SUBOPT_0x20
                +
000972 e5e5     +LDI R30 , LOW ( 0x4275D555 )
000973 edf5     +LDI R31 , HIGH ( 0x4275D555 )
000974 e765     +LDI R22 , BYTE3 ( 0x4275D555 )
000975 e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
000976 940e 1179 	CALL SUBOPT_0x21
                 ;  return res;
000978 c028      	RJMP _0x20C0003
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
000979 931a      	ST   -Y,R17
00097a 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00097b dfca      	RCALL _TSC2046_getADC_Y
00097c 53e4      	SUBI R30,LOW(2100)
00097d 40f8      	SBCI R31,HIGH(2100)
00097e 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
00097f 2311      	TST  R17
000980 f412      	BRPL _0xBB
                +
000981 e000     +LDI R16 , LOW ( 0 )
000982 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xBB:
000983 940e 1171 	CALL SUBOPT_0x20
                +
000985 e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
000986 e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
000987 ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
000988 e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
000989 940e 1179 	CALL SUBOPT_0x21
                 ;  return res;
00098b c015      	RJMP _0x20C0003
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;  //TOUCH_CS = 0;
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  //delay_us(10);
                 ;  //TOUCH_IRQ_PORT = 1;
                 ;  //TOUCH_CS = 1;
                 ;  if (TOUCH_IRQ < 1)
00098c 931a      	ST   -Y,R17
00098d 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
00098e e010      	LDI  R17,0
00098f e0a0      	LDI  R26,0
000990 990b      	SBIC 0x1,3
000991 e0a1      	LDI  R26,1
000992 30a1      	CPI  R26,LOW(0x1)
000993 f460      	BRSH _0xBC
                 ;  {
                 ;    tempX = 0;
000994 940e 1180 	CALL SUBOPT_0x22
                 ;    tempY = 0;
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000996 e000      	LDI  R16,LOW(0)
                 _0xBE:
000997 3100      	CPI  R16,16
000998 f420      	BRSH _0xBF
                 ;    {
                 ;      tempX += TSC2046_getX();
000999 940e 1192 	CALL SUBOPT_0x23
                 ;      tempY += TSC2046_getY();
                 ;    }
00099b 5f0f      	SUBI R16,-1
00099c cffa      	RJMP _0xBE
                 _0xBF:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
00099d 940e 11bf 	CALL SUBOPT_0x24
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
                 ;    TSC2046_Stop();
                 ;    res = 1;
00099f e011      	LDI  R17,LOW(1)
                 ;  }
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  return res;
                 _0xBC:
0009a0 2fe1      	MOV  R30,R17
                 _0x20C0003:
0009a1 9109      	LD   R16,Y+
0009a2 9119      	LD   R17,Y+
0009a3 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  TOUCH_CS = 0;
0009a4 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
0009a5 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
0009a6 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0009a7 958a     +DEC R24
0009a8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
0009a9 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
0009aa 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
0009ab 940e 1180 	CALL SUBOPT_0x22
                 ;    tempY = 0;
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
0009ad 2444      	CLR  R4
                 _0xC9:
0009ae e1e0      	LDI  R30,LOW(16)
0009af 164e      	CP   R4,R30
0009b0 f420      	BRSH _0xCA
                 ;    {
                 ;      tempX += TSC2046_getX();
0009b1 940e 1192 	CALL SUBOPT_0x23
                 ;      tempY += TSC2046_getY();
                 ;    }
0009b3 9443      	INC  R4
0009b4 cff9      	RJMP _0xC9
                 _0xCA:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
0009b5 940e 11bf 	CALL SUBOPT_0x24
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
                 ;    TSC2046_Stop();
                 ;}
0009b7 9508      	RET
                 ;#include "SPI_routines.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : SPI_routines.c ******
                 ;//**************************************************
                 ;#include "SPI_routines.h"
                 ;
                 ;unsigned char SPI_transmit(unsigned char data)
                 ; 0000 000A {
                 ;// Start transmission
                 ;SPDR = data;
                 ;	data -> Y+0
                 ;
                 ;// Wait for transmission complete
                 ;while(!(SPSR & (1<<SPIF)));
                 ;  data = SPDR;
                 ;
                 ;return(data);
                 ;}
                 ;
                 ;unsigned char SPI_receive(void)
                 ;{
                 ;unsigned char data;
                 ;// Wait for reception complete
                 ;
                 ;SPDR = 0xff;
                 ;	data -> R17
                 ;while(!(SPSR & (1<<SPIF)));
                 ;  data = SPDR;
                 ;
                 ;// Return data register
                 ;return data;
                 ;}
                 ;#include "SD_routines.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : SD_routines.c ******
                 ;//**************************************************
                 ;#include "SPI_routines.h"
                 ;#include "SD_routines.h"
                 ;
                 ;//******************************************************************
                 ;//Function: to initialize the SD card in SPI mode
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_init(void)
                 ; 0000 000B {
                 ;  unsigned char i, response, retry = 0;
                 ;
                 ;  SD_CS_ASSERT;
                 ;	i -> R17
                 ;	response -> R16
                 ;	retry -> R19
                 ;  do
                 ;  {
                 ;    for(i=0;i<10;i++) SPI_transmit(0xff);
                 ;    retry++;
                 ;    if(retry>0xfe) return 1; //time out
                 ;  }
                 ;  while(response != 0x01);
                 ;
                 ;  SD_CS_DEASSERT;
                 ;
                 ;  SPI_transmit (0xff);
                 ;  SPI_transmit (0xff);
                 ;
                 ;  retry = 0;
                 ;
                 ;  do
                 ;  {
                 ;    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
                 ;    response = SD_sendCommand(SEND_OP_COND, 0); //resend command (for compatibility with some cards)
                 ;    retry++;
                 ;    if(retry>0xfe) return 1; //time out
                 ;  }
                 ;  while(response);
                 ;
                 ;
                 ;  SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
                 ;  SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512
                 ;
                 ;  return 0; //normal return
                 ;}
                 ;
                 ;//******************************************************************
                 ;//Function: to send a command to SD card
                 ;//Arguments: unsigned char (8-bit command value)
                 ;// & unsigned long (32-bit command argument)
                 ;//return: unsigned char; response byte
                 ;//******************************************************************
                 ;unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
                 ;{
                 ;unsigned char response, retry=0;
                 ;
                 ;
                 ;SD_CS_ASSERT;
                 ;	cmd -> Y+6
                 ;	arg -> Y+2
                 ;	response -> R17
                 ;	retry -> R16
                 ;
                 ;
                 ;SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
                 ;SPI_transmit(arg>>24);
                 ;SPI_transmit(arg>>16);
                 ;SPI_transmit(arg>>8);
                 ;SPI_transmit(arg);
                 ;SPI_transmit(0x95);
                 ;
                 ;
                 ;while((response = SPI_receive()) == 0xff) //wait response
                 ;   if(retry++ > 0xfe) break; //time out error
                 ;
                 ;
                 ;SPI_receive(); //extra 8 CLK
                 ;SD_CS_DEASSERT;
                 ;
                 ;
                 ;return response; //return state
                 ;}
                 ;
                 ;
                 ;//******************************************************************
                 ;//Function: to read a single block from SD card
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_readSingleBlock(unsigned long startBlock)
                 ;{
                 ;unsigned char response;
                 ;unsigned int i, retry=0;
                 ;
                 ;response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock<<9); //read a Block command
                 ;	startBlock -> Y+6
                 ;	response -> R17
                 ;	i -> R18,R19
                 ;	retry -> R20,R21
                 ;//block address converted to starting address of 512 byte Block
                 ;if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
                 ;  return response;
                 ;
                 ;SD_CS_ASSERT;
                 ;
                 ;while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
                 ;  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
                 ;
                 ;  for(i=0; i<512; i++) //read 512 bytes
                 ;  buffer[i] = SPI_receive();
                 ;SPI_receive();
                 ;
                 ;
                 ;SPI_receive(); //extra 8 clock pulses
                 ;SD_CS_DEASSERT;
                 ;return 0;
                 ;}
                 ;
                 ;//******************************************************************
                 ;//Function: to write to a single block of SD card
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_writeSingleBlock(unsigned long startBlock)
                 ;{
                 ;unsigned char response;
                 ;unsigned int i, retry=0;
                 ;
                 ;
                 ;response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock<<9); //write a Block command
                 ;	startBlock -> Y+6
                 ;	response -> R17
                 ;	i -> R18,R19
                 ;	retry -> R20,R21
                 ;if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
                 ;return response;
                 ;
                 ;
                 ;SD_CS_ASSERT;
                 ;
                 ;
                 ;SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
                 ;
                 ;
                 ;for(i=0; i<512; i++)    //send 512 bytes data
                 ;  SPI_transmit(buffer[i]);
                 ;SPI_transmit(0xff);
                 ;
                 ;
                 ;response = SPI_receive();
                 ;
                 ;
                 ;if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
                 ;{                              //AAA='101'-data rejected due to CRC error
                 ;  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
                 ;  return response;
                 ;}
                 ;
                 ;
                 ;while(!SPI_receive()) //wait for SD card to complete writing and get idle
                 ;if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
                 ;
                 ;
                 ;SD_CS_DEASSERT;
                 ;SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
                 ;SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
                 ;
                 ;
                 ;while(!SPI_receive()) //wait for SD card to complete writing and get idle
                 ;   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
                 ;SD_CS_DEASSERT;
                 ;
                 ;
                 ;return 0;
                 ;}
                 ;#include "FAT32.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : FAT32.c ******
                 ;//**************************************************
                 ;#include "FAT32.h"
                 ;#include "SD_routines.h"
                 ;
                 ;//***************************************************************************
                 ;//Function: to read data from boot sector of SD card, to determine important
                 ;//parameters like bytesPerSector, sectorsPerCluster etc.
                 ;//Arguments: none
                 ;//return: none
                 ;//***************************************************************************
                 ;unsigned char getBootSectorData (void)
                 ; 0000 000C {
                 ;  struct BS_Structure *bpb; //mapping the buffer onto the structure
                 ;  struct MBRinfo_Structure *mbr;
                 ;  struct partitionInfo_Structure *partition;
                 ;  unsigned long dataSectors;
                 ;
                 ;  unusedSectors = 0;
                 ;	*bpb -> R16,R17
                 ;	*mbr -> R18,R19
                 ;	*partition -> R20,R21
                 ;	dataSectors -> Y+6
                 ;
                 ;  SD_readSingleBlock(0);
                 ;  bpb = (struct BS_Structure *)buffer;
                 ;
                 ;  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) //check if it is boot sector
                 ;  {
                 ;    mbr = (struct MBRinfo_Structure *) buffer;         //if it is not boot sector, it must be MBR
                 ;    if(mbr->signature != 0xaa55) return 1;            //if it is not even MBR then it's not FAT32
                 ;    partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
                 ;    unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
                 ;    SD_readSingleBlock(partition->firstSector);//read the bpb sector
                 ;    bpb = (struct BS_Structure *)buffer;
                 ;    if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)  return 1;
                 ;  }
                 ;
                 ;  bytesPerSector      = bpb->bytesPerSector;
                 ;  sectorPerCluster    = bpb->sectorPerCluster;
                 ;  reservedSectorCount = bpb->reservedSectorCount;
                 ;  rootCluster         = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
                 ;  firstDataSector     = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
                 ;  dataSectors         = bpb->totalSectors_F32 - bpb->reservedSectorCount - ( bpb->numberofFATs * bpb->FATsize_F32);
                 ;  totalClusters       = dataSectors / sectorPerCluster;
                 ;
                 ;  if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
                 ;    freeClusterCountUpdated = 0;
                 ;  else freeClusterCountUpdated = 1;
                 ;
                 ;  return 0;
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to calculate first sector address of any given cluster
                 ;//Arguments: cluster number for which first sector is to be found
                 ;//return: first sector address
                 ;//***************************************************************************
                 ;unsigned long getFirstSector(unsigned long clusterNumber)
                 ;{
                 ;  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
                 ;	clusterNumber -> Y+0
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: get cluster entry value from FAT to find out the next cluster in the chain
                 ;//or set new cluster entry in FAT
                 ;//Arguments: 1. current cluster number, 2. get_set (=GET, if next cluster is to be found or = SET,
                 ;//if next cluster is to be set 3. next cluster number, if argument#2 = SET, else 0
                 ;//return: next cluster number, if if argument#2 = GET, else 0
                 ;//****************************************************************************
                 ;unsigned long getSetNextCluster (unsigned long clusterNumber,
                 ;                                 unsigned char get_set,
                 ;                                 unsigned long clusterEntry)
                 ;{
                 ;  unsigned int  FATEntryOffset;
                 ;  unsigned long *FATEntryValue;
                 ;  unsigned long FATEntrySector;
                 ;  unsigned char retry = 0;
                 ;
                 ;  //get sector number of the cluster entry in the FAT
                 ;  FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
                 ;	clusterNumber -> Y+15
                 ;	get_set -> Y+14
                 ;	clusterEntry -> Y+10
                 ;	FATEntryOffset -> R16,R17
                 ;	*FATEntryValue -> R18,R19
                 ;	FATEntrySector -> Y+6
                 ;	retry -> R21
                 ;  //get the offset address in that sector number
                 ;  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
                 ;  //read the sector into a buffer
                 ;  while(retry <10)
                 ;  {
                 ;    if(!SD_readSingleBlock(FATEntrySector)) break;
                 ;    retry++;
                 ;  }
                 ;
                 ;  //get the cluster address from the buffer
                 ;  FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
                 ;
                 ;  if(get_set == GET) return ((*FATEntryValue) & 0x0fffffff);
                 ;
                 ;  *FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
                 ;
                 ;  SD_writeSingleBlock(FATEntrySector);
                 ;
                 ;  return 0;
                 ;}
                 ;
                 ;//********************************************************************************************
                 ;//Function: to get or set next free cluster or total free clusters in FSinfo sector of SD card
                 ;//Arguments: 1.flag:TOTAL_FREE or NEXT_FREE,
                 ;//           2.flag: GET or SET
                 ;//           3.new FS entry, when argument2 is SET; or 0, when argument2 is GET
                 ;//return: -next free cluster, if arg1 is NEXT_FREE & arg2 is GET
                 ;//        -total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
                 ;//        -0xffffffff, if any error or if arg2 is SET
                 ;//********************************************************************************************
                 ;unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
                 ;{
                 ;  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
                 ;  unsigned char error;
                 ;
                 ;  SD_readSingleBlock(unusedSectors + 1);
                 ;	totOrNext -> Y+9
                 ;	get_set -> Y+8
                 ;	FSEntry -> Y+4
                 ;	*FS -> R16,R17
                 ;	error -> R19
                 ;
                 ;  if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
                 ;    return 0xffffffff;
                 ;
                 ;
                 ;  if(get_set == GET)
                 ;  {
                 ;    if(totOrNext == TOTAL_FREE) return(FS->freeClusterCount);
                 ;    else // when totOrNext = NEXT_FREE
                 ;    return(FS->nextFreeCluster);
                 ;  }
                 ;  else
                 ;  {
                 ;    if(totOrNext == TOTAL_FREE) FS->freeClusterCount = FSEntry;
                 ;    else // when totOrNext = NEXT_FREE
                 ;      FS->nextFreeCluster = FSEntry;
                 ;    error = SD_writeSingleBlock(unusedSectors + 1); return error;   //update FSinfo
                 ;  }
                 ;  return 0xffffffff;
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to convert normal short file name into FAT format
                 ;//Arguments: pointer to the file name
                 ;//return: 0-if no error, 1-if error
                 ;//****************************************************************************
                 ;unsigned char convertFileName (unsigned char *fileName)
                 ;{
                 ;  unsigned char fileNameFAT[11];
                 ;  unsigned char j, k, dot;
                 ;
                 ;  for(j = 0; j < 11; j++)
                 ;	*fileName -> Y+15
                 ;	fileNameFAT -> Y+4
                 ;	j -> R17
                 ;	k -> R16
                 ;	dot -> R19
                 ;    if (fileName[j] == '.') dot = j;
                 ;
                 ;  if(dot>8) return dot;
                 ;
                 ;  for(k=0; k<dot; k++) //setting file name
                 ;    fileNameFAT[k] = fileName[k];
                 ;    fileNameFAT[k] = ' ';
                 ;  for(k=8; k<11; k++) //setting file extention
                 ;  {
                 ;    if (fileName[dot] != 0)
                 ;      fileNameFAT[k] = fileName[dot++];
                 ;    else //filling extension trail with blanks
                 ;      while( k < 11)
                 ;        fileNameFAT[k++] = ' ';
                 ;
                 ;  for(j = 0; j < 11; j++) //converting small letters to caps
                 ;    if ((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
                 ;      fileNameFAT[j] -= 0x20;
                 ;
                 ;  for(j = 0; j < 11; j++)
                 ;    fileName[j] = fileNameFAT[j];
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to get DIR/FILE list or a single file address (cluster number) or to delete a specified file
                 ;//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
                 ;//return: first cluster of the file, if flag = GET_FILE
                 ;//        print file/dir list of the root directory, if flag = GET_LIST
                 ;//        Delete the file mentioned in arg#2, if flag = DELETE
                 ;//****************************************************************************
                 ;struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
                 ;{
                 ;unsigned long cluster, sector, firstSector;
                 ;struct dir_Structure *dir;
                 ;unsigned int i;
                 ;unsigned char j;
                 ;
                 ;cluster = rootCluster; //root cluster
                 ;	flag -> Y+20
                 ;	*fileName -> Y+18
                 ;	cluster -> Y+14
                 ;	sector -> Y+10
                 ;	firstSector -> Y+6
                 ;	*dir -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R21
                 ;
                 ;while(1)
                 ;{
                 ;   firstSector = getFirstSector (cluster);
                 ;
                 ;   for(sector = 0; sector < sectorPerCluster; sector++)
                 ;   {
                 ;     SD_readSingleBlock (firstSector + sector);
                 ;
                 ;     for(i=0; i<bytesPerSector; i+=32)
                 ;     {
                 ;            dir = (struct dir_Structure *) &buffer[i];
                 ;
                 ;        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
                 ;        {
                 ;          if((flag == GET_FILE) || (flag == DELETE))
                 ;          //transmitString("File does not exist!");
                 ;          return 0;
                 ;        }
                 ;
                 ;        else if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
                 ;        {
                 ;          if((flag == GET_FILE) || (flag == DELETE))
                 ;          {
                 ;            for(j=0; j<11; j++)
                 ;              if(dir->name[j] != fileName[j]) break;
                 ;            if(j == 11)
                 ;            {
                 ;              if(flag == GET_FILE)
                 ;              return (dir);
                 ;            }
                 ;          }
                 ;       }
                 ;     }
                 ;   }
                 ;   cluster = (getSetNextCluster (cluster, GET, 0));
                 ;   if(cluster > 0x0ffffff6) return 0;
                 ;   if(cluster == 0)
                 ;   {
                 ;   //transmitString("Error in getting cluster");
                 ;   return 0;}
                 ; }
                 ;return 0;
                 ;}
                 ;
                 ;#define M_PI 3.14159265
                 ;
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 0015 #endasm
                 ;#include <i2c.h>
                 ;
                 ;
                 ;#define sinf sin
                 ;unsigned int k;
                 ;unsigned C_H, C_L;
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 128
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 004F {
                 _usart0_rx_isr:
0009b8 940e 11df 	CALL SUBOPT_0x25
                 ; 0000 0050 char status,data;
                 ; 0000 0051 status=UCSR0A;
0009ba 931a      	ST   -Y,R17
0009bb 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0009bc b11b      	IN   R17,11
                 ; 0000 0052 data=UDR0;
0009bd b10c      	IN   R16,12
                 ; 0000 0053 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0009be 2fe1      	MOV  R30,R17
0009bf 71ec      	ANDI R30,LOW(0x1C)
0009c0 f4d9      	BRNE _0x160
                 ; 0000 0054    {
                 ; 0000 0055    rx_buffer0[rx_wr_index0++]=data;
0009c1 91e0 0856 	LDS  R30,_rx_wr_index0
0009c3 5fef      	SUBI R30,-LOW(1)
0009c4 93e0 0856 	STS  _rx_wr_index0,R30
0009c6 940e 11e5 	CALL SUBOPT_0x26
0009c8 8300      	ST   Z,R16
                 ; 0000 0056 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0057    // special case for receiver buffer size=256
                 ; 0000 0058    if (++rx_counter0 == 0)
                 ; 0000 0059       {
                 ; 0000 005A #else
                 ; 0000 005B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0009c9 91a0 0856 	LDS  R26,_rx_wr_index0
0009cb 38a0      	CPI  R26,LOW(0x80)
0009cc f419      	BRNE _0x161
0009cd e0e0      	LDI  R30,LOW(0)
0009ce 93e0 0856 	STS  _rx_wr_index0,R30
                 ; 0000 005C    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x161:
0009d0 91a0 0858 	LDS  R26,_rx_counter0
0009d2 5faf      	SUBI R26,-LOW(1)
0009d3 93a0 0858 	STS  _rx_counter0,R26
0009d5 38a0      	CPI  R26,LOW(0x80)
0009d6 f429      	BRNE _0x162
                 ; 0000 005D       {
                 ; 0000 005E       rx_counter0=0;
0009d7 e0e0      	LDI  R30,LOW(0)
0009d8 93e0 0858 	STS  _rx_counter0,R30
                 ; 0000 005F #endif
                 ; 0000 0060       rx_buffer_overflow0=1;
0009da 9468      	SET
0009db f821      	BLD  R2,1
                 ; 0000 0061       }
                 ; 0000 0062    }
                 _0x162:
                 ; 0000 0063 }
                 _0x160:
0009dc 9109      	LD   R16,Y+
0009dd 9119      	LD   R17,Y+
0009de c0bb      	RJMP _0x23E
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 006A {
                 _getchar0:
                 ; 0000 006B char data;
                 ; 0000 006C while (rx_counter0==0);
0009df 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x163:
0009e0 91e0 0858 	LDS  R30,_rx_counter0
0009e2 30e0      	CPI  R30,0
0009e3 f3e1      	BREQ _0x163
                 ; 0000 006D data=rx_buffer0[rx_rd_index0++];
0009e4 91e0 0857 	LDS  R30,_rx_rd_index0
0009e6 5fef      	SUBI R30,-LOW(1)
0009e7 93e0 0857 	STS  _rx_rd_index0,R30
0009e9 940e 11e5 	CALL SUBOPT_0x26
0009eb 8110      	LD   R17,Z
                 ; 0000 006E #if RX_BUFFER_SIZE0 != 256
                 ; 0000 006F if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0009ec 91a0 0857 	LDS  R26,_rx_rd_index0
0009ee 38a0      	CPI  R26,LOW(0x80)
0009ef f419      	BRNE _0x166
0009f0 e0e0      	LDI  R30,LOW(0)
0009f1 93e0 0857 	STS  _rx_rd_index0,R30
                 ; 0000 0070 #endif
                 ; 0000 0071 #asm("cli")
                 _0x166:
0009f3 94f8      	cli
                 ; 0000 0072 --rx_counter0;
0009f4 91e0 0858 	LDS  R30,_rx_counter0
0009f6 50e1      	SUBI R30,LOW(1)
0009f7 93e0 0858 	STS  _rx_counter0,R30
                 ; 0000 0073 #asm("sei")
0009f9 9478      	sei
                 ; 0000 0074 return data;
0009fa c1f1      	RJMP _0x20C0001
                 ; 0000 0075 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void getclear0(void)
                 ; 0000 007A {
                 _getclear0:
                 ; 0000 007B while (rx_counter0 > 0)
                 _0x167:
0009fb 91a0 0858 	LDS  R26,_rx_counter0
0009fd 30a1      	CPI  R26,LOW(0x1)
0009fe f0a0      	BRLO _0x169
                 ; 0000 007C {
                 ; 0000 007D    rx_rd_index0++;
0009ff 91e0 0857 	LDS  R30,_rx_rd_index0
000a01 5fef      	SUBI R30,-LOW(1)
000a02 93e0 0857 	STS  _rx_rd_index0,R30
                 ; 0000 007E    #if RX_BUFFER_SIZE0 != 256
                 ; 0000 007F    if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
000a04 91a0 0857 	LDS  R26,_rx_rd_index0
000a06 38a0      	CPI  R26,LOW(0x80)
000a07 f419      	BRNE _0x16A
000a08 e0e0      	LDI  R30,LOW(0)
000a09 93e0 0857 	STS  _rx_rd_index0,R30
                 ; 0000 0080    #endif
                 ; 0000 0081    #asm("cli")
                 _0x16A:
000a0b 94f8      	cli
                 ; 0000 0082    --rx_counter0;
000a0c 91e0 0858 	LDS  R30,_rx_counter0
000a0e 50e1      	SUBI R30,LOW(1)
000a0f 93e0 0858 	STS  _rx_counter0,R30
                 ; 0000 0083    #asm("sei")
000a11 9478      	sei
                 ; 0000 0084 }
000a12 cfe8      	RJMP _0x167
                 _0x169:
                 ; 0000 0085 }
000a13 9508      	RET
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0093 {
                 _usart0_tx_isr:
000a14 940e 11df 	CALL SUBOPT_0x25
                 ; 0000 0094 if (tx_counter0)
000a16 91e0 0863 	LDS  R30,_tx_counter0
000a18 30e0      	CPI  R30,0
000a19 f099      	BREQ _0x16B
                 ; 0000 0095    {
                 ; 0000 0096    --tx_counter0;
000a1a 50e1      	SUBI R30,LOW(1)
000a1b 93e0 0863 	STS  _tx_counter0,R30
                 ; 0000 0097    UDR0=tx_buffer0[tx_rd_index0++];
000a1d 91e0 0862 	LDS  R30,_tx_rd_index0
000a1f 5fef      	SUBI R30,-LOW(1)
000a20 93e0 0862 	STS  _tx_rd_index0,R30
000a22 940e 11ea 	CALL SUBOPT_0x27
000a24 81e0      	LD   R30,Z
000a25 b9ec      	OUT  0xC,R30
                 ; 0000 0098 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0099    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000a26 91a0 0862 	LDS  R26,_tx_rd_index0
000a28 30a8      	CPI  R26,LOW(0x8)
000a29 f419      	BRNE _0x16C
000a2a e0e0      	LDI  R30,LOW(0)
000a2b 93e0 0862 	STS  _tx_rd_index0,R30
                 ; 0000 009A #endif
                 ; 0000 009B    }
                 _0x16C:
                 ; 0000 009C }
                 _0x16B:
000a2d c06c      	RJMP _0x23E
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar0(char c)
                 ; 0000 00A3 {
                 _putchar0:
                 ; 0000 00A4 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x16D:
000a2e 91a0 0863 	LDS  R26,_tx_counter0
000a30 30a8      	CPI  R26,LOW(0x8)
000a31 f3e1      	BREQ _0x16D
                 ; 0000 00A5 #asm("cli")
000a32 94f8      	cli
                 ; 0000 00A6 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000a33 91e0 0863 	LDS  R30,_tx_counter0
000a35 30e0      	CPI  R30,0
000a36 f411      	BRNE _0x171
000a37 995d      	SBIC 0xB,5
000a38 c016      	RJMP _0x170
                 _0x171:
                 ; 0000 00A7    {
                 ; 0000 00A8    tx_buffer0[tx_wr_index0++]=c;
000a39 91e0 0861 	LDS  R30,_tx_wr_index0
000a3b 5fef      	SUBI R30,-LOW(1)
000a3c 93e0 0861 	STS  _tx_wr_index0,R30
000a3e 940e 11ea 	CALL SUBOPT_0x27
000a40 81a8      	LD   R26,Y
000a41 83a0      	STD  Z+0,R26
                 ; 0000 00A9 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00AA    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000a42 91a0 0861 	LDS  R26,_tx_wr_index0
000a44 30a8      	CPI  R26,LOW(0x8)
000a45 f419      	BRNE _0x173
000a46 e0e0      	LDI  R30,LOW(0)
000a47 93e0 0861 	STS  _tx_wr_index0,R30
                 ; 0000 00AB #endif
                 ; 0000 00AC    ++tx_counter0;
                 _0x173:
000a49 91e0 0863 	LDS  R30,_tx_counter0
000a4b 5fef      	SUBI R30,-LOW(1)
000a4c 93e0 0863 	STS  _tx_counter0,R30
                 ; 0000 00AD    }
                 ; 0000 00AE else
000a4e c002      	RJMP _0x174
                 _0x170:
                 ; 0000 00AF    UDR0=c;
000a4f 81e8      	LD   R30,Y
000a50 b9ec      	OUT  0xC,R30
                 ; 0000 00B0 #asm("sei")
                 _0x174:
000a51 9478      	sei
000a52 c076      	RJMP _0x20C0002
                 ; 0000 00B1 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00C4 {
                 _usart1_rx_isr:
000a53 940e 11df 	CALL SUBOPT_0x25
                 ; 0000 00C5 char status,data;
                 ; 0000 00C6 status=UCSR1A;
000a55 931a      	ST   -Y,R17
000a56 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000a57 9110 009b 	LDS  R17,155
                 ; 0000 00C7 data=UDR1;
000a59 9100 009c 	LDS  R16,156
                 ; 0000 00C8 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000a5b 2fe1      	MOV  R30,R17
000a5c 71ec      	ANDI R30,LOW(0x1C)
000a5d f4e9      	BRNE _0x175
                 ; 0000 00C9    {
                 ; 0000 00CA    rx_buffer1[rx_wr_index1++]=data;
000a5e 91e0 0884 	LDS  R30,_rx_wr_index1
000a60 5fef      	SUBI R30,-LOW(1)
000a61 93e0 0884 	STS  _rx_wr_index1,R30
000a63 940e 11ef 	CALL SUBOPT_0x28
000a65 59ec      	SUBI R30,LOW(-_rx_buffer1)
000a66 4ff7      	SBCI R31,HIGH(-_rx_buffer1)
000a67 8300      	ST   Z,R16
                 ; 0000 00CB #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00CC    // special case for receiver buffer size=256
                 ; 0000 00CD    if (++rx_counter1 == 0)
                 ; 0000 00CE       {
                 ; 0000 00CF #else
                 ; 0000 00D0    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000a68 91a0 0884 	LDS  R26,_rx_wr_index1
000a6a 32a0      	CPI  R26,LOW(0x20)
000a6b f419      	BRNE _0x176
000a6c e0e0      	LDI  R30,LOW(0)
000a6d 93e0 0884 	STS  _rx_wr_index1,R30
                 ; 0000 00D1    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0x176:
000a6f 91a0 0886 	LDS  R26,_rx_counter1
000a71 5faf      	SUBI R26,-LOW(1)
000a72 93a0 0886 	STS  _rx_counter1,R26
000a74 32a0      	CPI  R26,LOW(0x20)
000a75 f429      	BRNE _0x177
                 ; 0000 00D2       {
                 ; 0000 00D3       rx_counter1=0;
000a76 e0e0      	LDI  R30,LOW(0)
000a77 93e0 0886 	STS  _rx_counter1,R30
                 ; 0000 00D4 #endif
                 ; 0000 00D5       rx_buffer_overflow1=1;
000a79 9468      	SET
000a7a f822      	BLD  R2,2
                 ; 0000 00D6       }
                 ; 0000 00D7    }
                 _0x177:
                 ; 0000 00D8 }
                 _0x175:
000a7b 9109      	LD   R16,Y+
000a7c 9119      	LD   R17,Y+
000a7d c01c      	RJMP _0x23E
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 00DD {
                 ; 0000 00DE char data;
                 ; 0000 00DF while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 00E0 data=rx_buffer1[rx_rd_index1++];
                 ; 0000 00E1 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00E2 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 00E3 #endif
                 ; 0000 00E4 #asm("cli")
                 ; 0000 00E5 --rx_counter1;
                 ; 0000 00E6 #asm("sei")
                 ; 0000 00E7 return data;
                 ; 0000 00E8 }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 128
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 00F6 {
                 _usart1_tx_isr:
000a7e 940e 11df 	CALL SUBOPT_0x25
                 ; 0000 00F7 if (tx_counter1)
000a80 91e0 0909 	LDS  R30,_tx_counter1
000a82 30e0      	CPI  R30,0
000a83 f0b1      	BREQ _0x17C
                 ; 0000 00F8    {
                 ; 0000 00F9    --tx_counter1;
000a84 50e1      	SUBI R30,LOW(1)
000a85 93e0 0909 	STS  _tx_counter1,R30
                 ; 0000 00FA    UDR1=tx_buffer1[tx_rd_index1++];
000a87 91e0 0908 	LDS  R30,_tx_rd_index1
000a89 5fef      	SUBI R30,-LOW(1)
000a8a 93e0 0908 	STS  _tx_rd_index1,R30
000a8c 940e 11ef 	CALL SUBOPT_0x28
000a8e 57e9      	SUBI R30,LOW(-_tx_buffer1)
000a8f 4ff7      	SBCI R31,HIGH(-_tx_buffer1)
000a90 81e0      	LD   R30,Z
000a91 93e0 009c 	STS  156,R30
                 ; 0000 00FB #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00FC    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000a93 91a0 0908 	LDS  R26,_tx_rd_index1
000a95 38a0      	CPI  R26,LOW(0x80)
000a96 f419      	BRNE _0x17D
000a97 e0e0      	LDI  R30,LOW(0)
000a98 93e0 0908 	STS  _tx_rd_index1,R30
                 ; 0000 00FD #endif
                 ; 0000 00FE    }
                 _0x17D:
                 ; 0000 00FF }
                 _0x17C:
                 _0x23E:
000a9a 91e9      	LD   R30,Y+
000a9b bfef      	OUT  SREG,R30
000a9c 91f9      	LD   R31,Y+
000a9d 91e9      	LD   R30,Y+
000a9e 91a9      	LD   R26,Y+
000a9f 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar1(char c)
                 ; 0000 0104 {
                 _putchar1:
                 ; 0000 0105 while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 _0x17E:
000aa0 91a0 0909 	LDS  R26,_tx_counter1
000aa2 38a0      	CPI  R26,LOW(0x80)
000aa3 f3e1      	BREQ _0x17E
                 ; 0000 0106 #asm("cli")
000aa4 94f8      	cli
                 ; 0000 0107 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
000aa5 91e0 0909 	LDS  R30,_tx_counter1
000aa7 30e0      	CPI  R30,0
000aa8 f421      	BRNE _0x182
000aa9 91e0 009b 	LDS  R30,155
000aab 72e0      	ANDI R30,LOW(0x20)
000aac f4c1      	BRNE _0x181
                 _0x182:
                 ; 0000 0108    {
                 ; 0000 0109    tx_buffer1[tx_wr_index1++]=c;
000aad 91e0 0907 	LDS  R30,_tx_wr_index1
000aaf 5fef      	SUBI R30,-LOW(1)
000ab0 93e0 0907 	STS  _tx_wr_index1,R30
000ab2 940e 11ef 	CALL SUBOPT_0x28
000ab4 57e9      	SUBI R30,LOW(-_tx_buffer1)
000ab5 4ff7      	SBCI R31,HIGH(-_tx_buffer1)
000ab6 81a8      	LD   R26,Y
000ab7 83a0      	STD  Z+0,R26
                 ; 0000 010A #if TX_BUFFER_SIZE1 != 256
                 ; 0000 010B    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
000ab8 91a0 0907 	LDS  R26,_tx_wr_index1
000aba 38a0      	CPI  R26,LOW(0x80)
000abb f419      	BRNE _0x184
000abc e0e0      	LDI  R30,LOW(0)
000abd 93e0 0907 	STS  _tx_wr_index1,R30
                 ; 0000 010C #endif
                 ; 0000 010D    ++tx_counter1;
                 _0x184:
000abf 91e0 0909 	LDS  R30,_tx_counter1
000ac1 5fef      	SUBI R30,-LOW(1)
000ac2 93e0 0909 	STS  _tx_counter1,R30
                 ; 0000 010E    }
                 ; 0000 010F else
000ac4 c003      	RJMP _0x185
                 _0x181:
                 ; 0000 0110    UDR1=c;
000ac5 81e8      	LD   R30,Y
000ac6 93e0 009c 	STS  156,R30
                 ; 0000 0111 #asm("sei")
                 _0x185:
000ac8 9478      	sei
                 _0x20C0002:
                 ; 0000 0112 }
000ac9 9621      	ADIW R28,1
000aca 9508      	RET
                 ;#pragma used-
                 ;
                 ;
                 ;
                 ;#define BTN_StartX 0
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;unsigned int BTN1_Y_Begin = BTN_StartY;
                 
                 	.DSEG
                 ;unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN1_X_Begin = BTN_StartX;
                 ;unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;volatile char Button_Pressed;
                 ;
                 ;#define BACKLIGHT 6
                 ;#define LEDGREEN 3
                 ;#define LEDRED 4
                 ;#define LEDBLUE 5
                 ;
                 ;volatile char Hour, Minute, Seconds, mSeconds, Day, Month;
                 ;volatile unsigned int Year;
                 ;
                 ;#define DateTime_X 300
                 ;#define DateTime_Y 256
                 ;
                 ;volatile unsigned int mSec;
                 ;
                 ;char SD_Ready;
                 ;unsigned char error, FAT32_active;
                 ;volatile long cluster, firstSector, nextSector;
                 ;volatile unsigned char buffer[512];
                 ;volatile long firstDataSector, rootCluster, totalClusters, byteCounter, fileSize;
                 ;volatile unsigned int bytesPerSector, sectorPerCluster, reservedSectorCount;
                 ;
                 ;volatile unsigned int LEDGREEN_mSec, LEDRED_mSec, LEDBLUE_mSec, LEDGREEN_max = 3000, LEDRED_max = 250, LEDBLUE_max = 1000;
                 ;
                 ;#define Pulse_X_Min 270
                 ;#define Pulse_X_Max 430
                 ;#define Pulse_Y_Min 0
                 ;#define Pulse_Y_Max 48
                 ;volatile unsigned int Pulse_X, Pulse_Y_Last, Pulse_mSec, Pulse_Value, Pulse_Counter, Pulse_ScreenValue;
                 ;volatile char Pulse_Flag, Pulse_ScreenFlag;
                 ;
                 ;#define Pulse_Value_X 430
                 ;#define Pulse_Value_Y 0
                 ;
                 ;#define Pulse_Enable PORTB.0
                 ;
                 ;#define Cardio_X_Min 0
                 ;#define Cardio_X_Max 480
                 ;#define Cardio_Y_Min 50
                 ;#define Cardio_Y_Max 232
                 ;volatile unsigned int Cardio_X, Cardio_Y_Last, Cardio_mSec, Cardio_Value, Cardio_Counter;
                 ;volatile float Cardio_Divider;
                 ;volatile int CardioMassive[128], CardioMassive_Counter;
                 ;
                 ;// 0 - высота осциллограммы
                 ;// 1 - длина шага осциллограммы
                 ;// 2 - высота отпределителя пульса
                 ;eeprom unsigned int WorkParameters[3] = {500, 10, 300};
                 ;flash unsigned int Default_Parameters[3] = {500, 10, 300};
                 ;eeprom char EEPROM_FLAG;
                 ;char Parameter_Counter;
                 ;
                 ;// Красный светодиод - был пульс и пропал
                 ;// Синий светодиод - низкий заряд батареи
                 ;// Зеленый светодиод - нормальная работа
                 ;
                 ;volatile char Alarm, Battery_Discharged, State;
                 ;
                 ;#define Battery_Width 24
                 ;#define Battery_Height 50
                 ;#define Battery_X 0
                 ;#define Battery_Y 0
                 ;
                 ;#define RS485 PORTD.4
                 ;
                 ;#define ScanLine_Length 25
                 ;unsigned int ScanLine_X;
                 ;
                 ;volatile unsigned int Refresh_mSec, Battery_Value, ADC0, ADC1, ADC2, Sleep_mSec;
                 ;volatile long longADC;
                 ;unsigned int Alarm_mSec;
                 ;
                 ;#define Address_Slave 'G'
                 ;
                 ;void SwitchPORTF(char Number, char Value)
                 ; 0000 017C {
                 
                 	.CSEG
                 _SwitchPORTF:
                 ; 0000 017D   switch(Value)
                 ;	Number -> Y+1
                 ;	Value -> Y+0
000acb 940e 1078 	CALL SUBOPT_0x0
                 ; 0000 017E   {
                 ; 0000 017F     case 0 :
000acd 9730      	SBIW R30,0
000ace f429      	BRNE _0x19B
                 ; 0000 0180       PORTF &= ~(0b00000001 << Number);
000acf 940e 11f2 	CALL SUBOPT_0x29
000ad1 95e0      	COM  R30
000ad2 21e1      	AND  R30,R1
000ad3 c007      	RJMP _0x238
                 ; 0000 0181     break;
                 ; 0000 0182     case 1 :
                 _0x19B:
000ad4 30e1      	CPI  R30,LOW(0x1)
000ad5 e0a0      	LDI  R26,HIGH(0x1)
000ad6 07fa      	CPC  R31,R26
000ad7 f429      	BRNE _0x19A
                 ; 0000 0183       PORTF |= 0b00000001 << Number;
000ad8 940e 11f2 	CALL SUBOPT_0x29
000ada 29e1      	OR   R30,R1
                 _0x238:
000adb 2fa6      	MOV  R26,R22
000adc 93ec      	ST   X,R30
                 ; 0000 0184     break;
                 ; 0000 0185   }
                 _0x19A:
                 ; 0000 0186 }
000add 9622      	ADIW R28,2
000ade 9508      	RET
                 ;
                 ;unsigned int WaitADC_mSec;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 018C {
                 _timer0_ovf_isr:
000adf 920a      	ST   -Y,R0
000ae0 921a      	ST   -Y,R1
000ae1 92fa      	ST   -Y,R15
000ae2 936a      	ST   -Y,R22
000ae3 937a      	ST   -Y,R23
000ae4 938a      	ST   -Y,R24
000ae5 939a      	ST   -Y,R25
000ae6 93aa      	ST   -Y,R26
000ae7 93ba      	ST   -Y,R27
000ae8 93ea      	ST   -Y,R30
000ae9 93fa      	ST   -Y,R31
000aea b7ef      	IN   R30,SREG
000aeb 93ea      	ST   -Y,R30
                 ; 0000 018D   TCNT0=0x06;
000aec e0e6      	LDI  R30,LOW(6)
000aed bfe2      	OUT  0x32,R30
                 ; 0000 018E   mSec++;
000aee e2ab      	LDI  R26,LOW(_mSec)
000aef e0b9      	LDI  R27,HIGH(_mSec)
000af0 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 018F   WaitADC_mSec++;
000af2 e5ae      	LDI  R26,LOW(_WaitADC_mSec)
000af3 e0b9      	LDI  R27,HIGH(_WaitADC_mSec)
000af4 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 0190   Pulse_mSec++;
000af6 e4a0      	LDI  R26,LOW(_Pulse_mSec)
000af7 e0b9      	LDI  R27,HIGH(_Pulse_mSec)
000af8 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 0191   Refresh_mSec++;
000afa e5a8      	LDI  R26,LOW(_Refresh_mSec)
000afb e0b9      	LDI  R27,HIGH(_Refresh_mSec)
000afc 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 0192   Sleep_mSec++;
000afe e5aa      	LDI  R26,LOW(_Sleep_mSec)
000aff e0b9      	LDI  R27,HIGH(_Sleep_mSec)
000b00 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 0193   Alarm_mSec++;
000b02 e5ac      	LDI  R26,LOW(_Alarm_mSec)
000b03 e0b9      	LDI  R27,HIGH(_Alarm_mSec)
000b04 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 0194   if (Alarm < 1)
000b06 91a0 0953 	LDS  R26,_Alarm
000b08 30a1      	CPI  R26,LOW(0x1)
000b09 f010      	BRLO PC+3
000b0a 940c 0b58 	JMP _0x19D
                 ; 0000 0195   {
                 ; 0000 0196     if (Battery_Discharged < 1)
000b0c 91a0 0954 	LDS  R26,_Battery_Discharged
000b0e 30a1      	CPI  R26,LOW(0x1)
000b0f f520      	BRSH _0x19E
                 ; 0000 0197     {
                 ; 0000 0198       SwitchPORTF(LEDRED, 1);
000b10 940e 1201 	CALL SUBOPT_0x2B
                 ; 0000 0199       SwitchPORTF(LEDBLUE, 1);
000b12 940e 1207 	CALL SUBOPT_0x2C
                 ; 0000 019A       LEDGREEN_mSec++;
000b14 e3a0      	LDI  R26,LOW(_LEDGREEN_mSec)
000b15 e0b9      	LDI  R27,HIGH(_LEDGREEN_mSec)
000b16 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 019B       if (LEDGREEN_mSec > 30) SwitchPORTF(LEDGREEN, 1);
000b18 91a0 0930 	LDS  R26,_LEDGREEN_mSec
000b1a 91b0 0931 	LDS  R27,_LEDGREEN_mSec+1
000b1c 975f      	SBIW R26,31
000b1d f010      	BRLO _0x19F
000b1e 940e 120d 	CALL SUBOPT_0x2D
                 ; 0000 019C       if (LEDGREEN_mSec > LEDGREEN_max) {LEDGREEN_mSec = 0; SwitchPORTF(LEDGREEN, 0);}
                 _0x19F:
000b20 91e0 0936 	LDS  R30,_LEDGREEN_max
000b22 91f0 0937 	LDS  R31,_LEDGREEN_max+1
000b24 91a0 0930 	LDS  R26,_LEDGREEN_mSec
000b26 91b0 0931 	LDS  R27,_LEDGREEN_mSec+1
000b28 17ea      	CP   R30,R26
000b29 07fb      	CPC  R31,R27
000b2a f440      	BRSH _0x1A0
000b2b e0e0      	LDI  R30,LOW(0)
000b2c 93e0 0930 	STS  _LEDGREEN_mSec,R30
000b2e 93e0 0931 	STS  _LEDGREEN_mSec+1,R30
000b30 e0e3      	LDI  R30,LOW(3)
000b31 940e 1213 	CALL SUBOPT_0x2E
                 ; 0000 019D     }
                 _0x1A0:
                 ; 0000 019E     else
000b33 c023      	RJMP _0x1A1
                 _0x19E:
                 ; 0000 019F     {
                 ; 0000 01A0       SwitchPORTF(LEDGREEN, 1);
000b34 940e 120d 	CALL SUBOPT_0x2D
                 ; 0000 01A1       SwitchPORTF(LEDRED, 1);
000b36 940e 1201 	CALL SUBOPT_0x2B
                 ; 0000 01A2       LEDBLUE_mSec++;
000b38 e3a4      	LDI  R26,LOW(_LEDBLUE_mSec)
000b39 e0b9      	LDI  R27,HIGH(_LEDBLUE_mSec)
000b3a 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 01A3       if (LEDBLUE_mSec > 30) SwitchPORTF(LEDBLUE, 1);
000b3c 91a0 0934 	LDS  R26,_LEDBLUE_mSec
000b3e 91b0 0935 	LDS  R27,_LEDBLUE_mSec+1
000b40 975f      	SBIW R26,31
000b41 f010      	BRLO _0x1A2
000b42 940e 1207 	CALL SUBOPT_0x2C
                 ; 0000 01A4       if (LEDBLUE_mSec > LEDBLUE_max) {LEDBLUE_mSec = 0; SwitchPORTF(LEDBLUE, 0);}
                 _0x1A2:
000b44 91e0 093a 	LDS  R30,_LEDBLUE_max
000b46 91f0 093b 	LDS  R31,_LEDBLUE_max+1
000b48 91a0 0934 	LDS  R26,_LEDBLUE_mSec
000b4a 91b0 0935 	LDS  R27,_LEDBLUE_mSec+1
000b4c 17ea      	CP   R30,R26
000b4d 07fb      	CPC  R31,R27
000b4e f440      	BRSH _0x1A3
000b4f e0e0      	LDI  R30,LOW(0)
000b50 93e0 0934 	STS  _LEDBLUE_mSec,R30
000b52 93e0 0935 	STS  _LEDBLUE_mSec+1,R30
000b54 e0e5      	LDI  R30,LOW(5)
000b55 940e 1213 	CALL SUBOPT_0x2E
                 ; 0000 01A5     }
                 _0x1A3:
                 _0x1A1:
                 ; 0000 01A6   }
                 ; 0000 01A7   else
000b57 c023      	RJMP _0x1A4
                 _0x19D:
                 ; 0000 01A8   {
                 ; 0000 01A9     SwitchPORTF(LEDGREEN, 1);
000b58 940e 120d 	CALL SUBOPT_0x2D
                 ; 0000 01AA     SwitchPORTF(LEDBLUE, 1);
000b5a 940e 1207 	CALL SUBOPT_0x2C
                 ; 0000 01AB     LEDRED_mSec++;
000b5c e3a2      	LDI  R26,LOW(_LEDRED_mSec)
000b5d e0b9      	LDI  R27,HIGH(_LEDRED_mSec)
000b5e 940e 11fb 	CALL SUBOPT_0x2A
                 ; 0000 01AC     if (LEDRED_mSec > 30) SwitchPORTF(LEDRED, 1);
000b60 91a0 0932 	LDS  R26,_LEDRED_mSec
000b62 91b0 0933 	LDS  R27,_LEDRED_mSec+1
000b64 975f      	SBIW R26,31
000b65 f010      	BRLO _0x1A5
000b66 940e 1201 	CALL SUBOPT_0x2B
                 ; 0000 01AD     if (LEDRED_mSec > LEDRED_max) {LEDRED_mSec = 0; SwitchPORTF(LEDRED, 0);}
                 _0x1A5:
000b68 91e0 0938 	LDS  R30,_LEDRED_max
000b6a 91f0 0939 	LDS  R31,_LEDRED_max+1
000b6c 91a0 0932 	LDS  R26,_LEDRED_mSec
000b6e 91b0 0933 	LDS  R27,_LEDRED_mSec+1
000b70 17ea      	CP   R30,R26
000b71 07fb      	CPC  R31,R27
000b72 f440      	BRSH _0x1A6
000b73 e0e0      	LDI  R30,LOW(0)
000b74 93e0 0932 	STS  _LEDRED_mSec,R30
000b76 93e0 0933 	STS  _LEDRED_mSec+1,R30
000b78 e0e4      	LDI  R30,LOW(4)
000b79 940e 1213 	CALL SUBOPT_0x2E
                 ; 0000 01AE   }
                 _0x1A6:
                 _0x1A4:
                 ; 0000 01AF }
000b7b 91e9      	LD   R30,Y+
000b7c bfef      	OUT  SREG,R30
000b7d 91f9      	LD   R31,Y+
000b7e 91e9      	LD   R30,Y+
000b7f 91b9      	LD   R27,Y+
000b80 91a9      	LD   R26,Y+
000b81 9199      	LD   R25,Y+
000b82 9189      	LD   R24,Y+
000b83 9179      	LD   R23,Y+
000b84 9169      	LD   R22,Y+
000b85 90f9      	LD   R15,Y+
000b86 9019      	LD   R1,Y+
000b87 9009      	LD   R0,Y+
000b88 9518      	RETI
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 01B5 {
                 ; 0000 01B6 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
                 ; 0000 01B7 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 01B8 delay_us(10);
                 ; 0000 01B9 // Start the AD conversion
                 ; 0000 01BA ADCSRA|=0x40;
                 ; 0000 01BB // Wait for the AD conversion to complete
                 ; 0000 01BC while ((ADCSRA & 0x10)==0);
                 ; 0000 01BD ADCSRA|=0x10;
                 ; 0000 01BE return ADCW;
                 ; 0000 01BF }
                 ;
                 ;char SDCardInit(void)
                 ; 0000 01C2 {
                 ; 0000 01C3   delay_ms(50);
                 ; 0000 01C4   if (SD_init() == 1)
                 ; 0000 01C5   {
                 ; 0000 01C6     SD_Ready = 0;
                 ; 0000 01C7     //PutString(SDAbsent, 199);
                 ; 0000 01C8   }
                 ; 0000 01C9   else
                 ; 0000 01CA   {
                 ; 0000 01CB     SD_Ready = 1;
                 ; 0000 01CC     //PutString(SDReady, 99);
                 ; 0000 01CD     //Minute_mSec = 0;
                 ; 0000 01CE     //while (Minute_mSec < 999)
                 ; 0000 01CF     //{
                 ; 0000 01D0 //      PutAntAnimation(49); // выводить анимацию
                 ; 0000 01D1 //      RefreshLEDDisplay();
                 ; 0000 01D2     //}
                 ; 0000 01D3   }
                 ; 0000 01D4   delay_ms(1);
                 ; 0000 01D5 
                 ; 0000 01D6   FAT32_active = 1;
                 ; 0000 01D7   error = getBootSectorData (); //read boot sector and keep necessary data in global variables
                 ; 0000 01D8   if(error)
                 ; 0000 01D9   {
                 ; 0000 01DA //    PutString(SDnoFAT32, 199); // FAT32 incompatible drive
                 ; 0000 01DB     FAT32_active = 0;
                 ; 0000 01DC     SD_Ready = 0;
                 ; 0000 01DD   }
                 ; 0000 01DE   return SD_Ready;
                 ; 0000 01DF }
                 ;
                 ;char GetButton(void)
                 ; 0000 01E2 {
                 _GetButton:
                 ; 0000 01E3   char res = 0;
                 ; 0000 01E4   if (TSC2046_GetCoordinates())
000b89 931a      	ST   -Y,R17
                 ;	res -> R17
000b8a e010      	LDI  R17,0
000b8b de00      	RCALL _TSC2046_GetCoordinates
000b8c 30e0      	CPI  R30,0
000b8d f411      	BRNE PC+3
000b8e 940c 0bec 	JMP _0x1AD
                 ; 0000 01E5   {
                 ; 0000 01E6     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000b90 940e 1218 	CALL SUBOPT_0x2F
000b92 15e6      	CP   R30,R6
000b93 05f7      	CPC  R31,R7
000b94 f428      	BRSH _0x1AF
000b95 940e 121d 	CALL SUBOPT_0x30
000b97 166e      	CP   R6,R30
000b98 067f      	CPC  R7,R31
000b99 f008      	BRLO _0x1B0
                 _0x1AF:
000b9a c00c      	RJMP _0x1AE
                 _0x1B0:
                 ; 0000 01E7     {
                 ; 0000 01E8       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
000b9b 940e 1222 	CALL SUBOPT_0x31
000b9d 15e8      	CP   R30,R8
000b9e 05f9      	CPC  R31,R9
000b9f f428      	BRSH _0x1B2
000ba0 940e 1227 	CALL SUBOPT_0x32
000ba2 168e      	CP   R8,R30
000ba3 069f      	CPC  R9,R31
000ba4 f008      	BRLO _0x1B3
                 _0x1B2:
000ba5 c001      	RJMP _0x1B1
                 _0x1B3:
000ba6 e011      	LDI  R17,LOW(1)
                 ; 0000 01E9     }
                 _0x1B1:
                 ; 0000 01EA     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0x1AE:
000ba7 940e 122c 	CALL SUBOPT_0x33
000ba9 15e6      	CP   R30,R6
000baa 05f7      	CPC  R31,R7
000bab f428      	BRSH _0x1B5
000bac 940e 1231 	CALL SUBOPT_0x34
000bae 166e      	CP   R6,R30
000baf 067f      	CPC  R7,R31
000bb0 f008      	BRLO _0x1B6
                 _0x1B5:
000bb1 c00c      	RJMP _0x1B4
                 _0x1B6:
                 ; 0000 01EB     {
                 ; 0000 01EC       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000bb2 940e 1236 	CALL SUBOPT_0x35
000bb4 15e8      	CP   R30,R8
000bb5 05f9      	CPC  R31,R9
000bb6 f428      	BRSH _0x1B8
000bb7 940e 123b 	CALL SUBOPT_0x36
000bb9 168e      	CP   R8,R30
000bba 069f      	CPC  R9,R31
000bbb f008      	BRLO _0x1B9
                 _0x1B8:
000bbc c001      	RJMP _0x1B7
                 _0x1B9:
000bbd e012      	LDI  R17,LOW(2)
                 ; 0000 01ED     }
                 _0x1B7:
                 ; 0000 01EE     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0x1B4:
000bbe 940e 1240 	CALL SUBOPT_0x37
000bc0 15e6      	CP   R30,R6
000bc1 05f7      	CPC  R31,R7
000bc2 f428      	BRSH _0x1BB
000bc3 940e 1245 	CALL SUBOPT_0x38
000bc5 166e      	CP   R6,R30
000bc6 067f      	CPC  R7,R31
000bc7 f008      	BRLO _0x1BC
                 _0x1BB:
000bc8 c00c      	RJMP _0x1BA
                 _0x1BC:
                 ; 0000 01EF     {
                 ; 0000 01F0       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000bc9 940e 124a 	CALL SUBOPT_0x39
000bcb 15e8      	CP   R30,R8
000bcc 05f9      	CPC  R31,R9
000bcd f428      	BRSH _0x1BE
000bce 940e 124f 	CALL SUBOPT_0x3A
000bd0 168e      	CP   R8,R30
000bd1 069f      	CPC  R9,R31
000bd2 f008      	BRLO _0x1BF
                 _0x1BE:
000bd3 c001      	RJMP _0x1BD
                 _0x1BF:
000bd4 e013      	LDI  R17,LOW(3)
                 ; 0000 01F1     }
                 _0x1BD:
                 ; 0000 01F2     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x1BA:
000bd5 940e 1254 	CALL SUBOPT_0x3B
000bd7 15e6      	CP   R30,R6
000bd8 05f7      	CPC  R31,R7
000bd9 f428      	BRSH _0x1C1
000bda 940e 1259 	CALL SUBOPT_0x3C
000bdc 166e      	CP   R6,R30
000bdd 067f      	CPC  R7,R31
000bde f008      	BRLO _0x1C2
                 _0x1C1:
000bdf c00c      	RJMP _0x1C0
                 _0x1C2:
                 ; 0000 01F3     {
                 ; 0000 01F4       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
000be0 940e 125e 	CALL SUBOPT_0x3D
000be2 15e8      	CP   R30,R8
000be3 05f9      	CPC  R31,R9
000be4 f428      	BRSH _0x1C4
000be5 940e 1263 	CALL SUBOPT_0x3E
000be7 168e      	CP   R8,R30
000be8 069f      	CPC  R9,R31
000be9 f008      	BRLO _0x1C5
                 _0x1C4:
000bea c001      	RJMP _0x1C3
                 _0x1C5:
000beb e014      	LDI  R17,LOW(4)
                 ; 0000 01F5     }
                 _0x1C3:
                 ; 0000 01F6 
                 ; 0000 01F7   }
                 _0x1C0:
                 ; 0000 01F8   return res;
                 _0x1AD:
                 _0x20C0001:
000bec 2fe1      	MOV  R30,R17
000bed 9119      	LD   R17,Y+
000bee 9508      	RET
                 ; 0000 01F9 }
                 ;
                 ;long CalcLongValue(long Value1, unsigned int Value2)
                 ; 0000 01FC {
                 ; 0000 01FD   return (Value1 * Value2) / 1000;
                 ;	Value1 -> Y+2
                 ;	Value2 -> Y+0
                 ; 0000 01FE }
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 0201 {
                 _Repaint_Button:
                 ; 0000 0202   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000bef 81ec      	LDD  R30,Y+4
000bf0 940e 1268 	CALL SUBOPT_0x3F
                 ; 0000 0203   {
                 ; 0000 0204     case 1 :
000bf2 f469      	BRNE _0x1C9
                 ; 0000 0205       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bf3 e0e0     +LDI R30 , LOW ( _0x1CA + ( 0 ) )
000bf4 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 0 ) )
                 	__POINTW1MN _0x1CA,0
000bf5 940e 126d 	CALL SUBOPT_0x40
000bf7 940e 1274 	CALL SUBOPT_0x41
000bf9 940e 10cc 	CALL SUBOPT_0x10
000bfb 940e 1279 	CALL SUBOPT_0x42
                 ; 0000 0206       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bfd 940e 126d 	CALL SUBOPT_0x40
000bff c032      	RJMP _0x23A
                 ; 0000 0207     break;
                 ; 0000 0208     case 2 :
                 _0x1C9:
000c00 30e2      	CPI  R30,LOW(0x2)
000c01 e0a0      	LDI  R26,HIGH(0x2)
000c02 07fa      	CPC  R31,R26
000c03 f469      	BRNE _0x1CB
                 ; 0000 0209       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c04 e0e6     +LDI R30 , LOW ( _0x1CA + ( 6 ) )
000c05 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 6 ) )
                 	__POINTW1MN _0x1CA,6
000c06 940e 127e 	CALL SUBOPT_0x43
000c08 940e 1274 	CALL SUBOPT_0x41
000c0a 940e 10cc 	CALL SUBOPT_0x10
000c0c 940e 1279 	CALL SUBOPT_0x42
                 ; 0000 020A       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c0e 940e 127e 	CALL SUBOPT_0x43
000c10 c021      	RJMP _0x23A
                 ; 0000 020B     break;
                 ; 0000 020C     case 3 :
                 _0x1CB:
000c11 30e3      	CPI  R30,LOW(0x3)
000c12 e0a0      	LDI  R26,HIGH(0x3)
000c13 07fa      	CPC  R31,R26
000c14 f469      	BRNE _0x1CC
                 ; 0000 020D       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c15 e0ec     +LDI R30 , LOW ( _0x1CA + ( 12 ) )
000c16 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 12 ) )
                 	__POINTW1MN _0x1CA,12
000c17 940e 1285 	CALL SUBOPT_0x44
000c19 940e 1274 	CALL SUBOPT_0x41
000c1b 940e 10cc 	CALL SUBOPT_0x10
000c1d 940e 1279 	CALL SUBOPT_0x42
                 ; 0000 020E       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c1f 940e 1285 	CALL SUBOPT_0x44
000c21 c010      	RJMP _0x23A
                 ; 0000 020F     break;
                 ; 0000 0210     case 4 :
                 _0x1CC:
000c22 30e4      	CPI  R30,LOW(0x4)
000c23 e0a0      	LDI  R26,HIGH(0x4)
000c24 07fa      	CPC  R31,R26
000c25 f4b1      	BRNE _0x1C8
                 ; 0000 0211       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c26 e1e2     +LDI R30 , LOW ( _0x1CA + ( 18 ) )
000c27 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 18 ) )
                 	__POINTW1MN _0x1CA,18
000c28 940e 128c 	CALL SUBOPT_0x45
000c2a 940e 1274 	CALL SUBOPT_0x41
000c2c 940e 10cc 	CALL SUBOPT_0x10
000c2e 940e 1279 	CALL SUBOPT_0x42
                 ; 0000 0212       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c30 940e 128c 	CALL SUBOPT_0x45
                 _0x23A:
000c32 963f      	ADIW R30,15
000c33 9738      	SBIW R30,8
000c34 93fa      	ST   -Y,R31
000c35 93ea      	ST   -Y,R30
000c36 940e 10cc 	CALL SUBOPT_0x10
000c38 940e 10cc 	CALL SUBOPT_0x10
000c3a 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0213     break;
                 ; 0000 0214   }
                 _0x1C8:
                 ; 0000 0215 }
000c3c 9627      	ADIW R28,7
000c3d 9508      	RET
                 
                 	.DSEG
                 _0x1CA:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0218 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0219   // рисуем окошко под батарею
                 ; 0000 021A // SSD1963_DrawFillRect(Battery_X + 3, Battery_Width - 3, Battery_Y, Battery_Y + 2, GREEN);
                 ; 0000 021B // SSD1963_DrawRect(Battery_X, Battery_Width, Battery_Y + 2, Battery_Height, 1, GREEN);
                 ; 0000 021C   // рисуем кнопки
                 ; 0000 021D   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000c3e 940e 1218 	CALL SUBOPT_0x2F
000c40 93fa      	ST   -Y,R31
000c41 93ea      	ST   -Y,R30
000c42 940e 121d 	CALL SUBOPT_0x30
000c44 93fa      	ST   -Y,R31
000c45 93ea      	ST   -Y,R30
000c46 940e 1222 	CALL SUBOPT_0x31
000c48 93fa      	ST   -Y,R31
000c49 93ea      	ST   -Y,R30
000c4a 940e 1227 	CALL SUBOPT_0x32
000c4c 940e 1293 	CALL SUBOPT_0x46
                 ; 0000 021E   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000c4e 940e 122c 	CALL SUBOPT_0x33
000c50 93fa      	ST   -Y,R31
000c51 93ea      	ST   -Y,R30
000c52 940e 1231 	CALL SUBOPT_0x34
000c54 93fa      	ST   -Y,R31
000c55 93ea      	ST   -Y,R30
000c56 940e 1236 	CALL SUBOPT_0x35
000c58 93fa      	ST   -Y,R31
000c59 93ea      	ST   -Y,R30
000c5a 940e 123b 	CALL SUBOPT_0x36
000c5c 940e 1293 	CALL SUBOPT_0x46
                 ; 0000 021F   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000c5e 940e 1240 	CALL SUBOPT_0x37
000c60 93fa      	ST   -Y,R31
000c61 93ea      	ST   -Y,R30
000c62 940e 1245 	CALL SUBOPT_0x38
000c64 93fa      	ST   -Y,R31
000c65 93ea      	ST   -Y,R30
000c66 940e 124a 	CALL SUBOPT_0x39
000c68 93fa      	ST   -Y,R31
000c69 93ea      	ST   -Y,R30
000c6a 940e 124f 	CALL SUBOPT_0x3A
000c6c 940e 1293 	CALL SUBOPT_0x46
                 ; 0000 0220   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000c6e 940e 1254 	CALL SUBOPT_0x3B
000c70 93fa      	ST   -Y,R31
000c71 93ea      	ST   -Y,R30
000c72 940e 1259 	CALL SUBOPT_0x3C
000c74 93fa      	ST   -Y,R31
000c75 93ea      	ST   -Y,R30
000c76 940e 125e 	CALL SUBOPT_0x3D
000c78 93fa      	ST   -Y,R31
000c79 93ea      	ST   -Y,R30
000c7a 940e 1263 	CALL SUBOPT_0x3E
000c7c 940e 1293 	CALL SUBOPT_0x46
                 ; 0000 0221   // рисуем окантовку
                 ; 0000 0222   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000c7e 940e 1218 	CALL SUBOPT_0x2F
000c80 9631      	ADIW R30,1
000c81 93fa      	ST   -Y,R31
000c82 93ea      	ST   -Y,R30
000c83 940e 121d 	CALL SUBOPT_0x30
000c85 9731      	SBIW R30,1
000c86 93fa      	ST   -Y,R31
000c87 93ea      	ST   -Y,R30
000c88 940e 1222 	CALL SUBOPT_0x31
000c8a 9631      	ADIW R30,1
000c8b 93fa      	ST   -Y,R31
000c8c 93ea      	ST   -Y,R30
000c8d 940e 1227 	CALL SUBOPT_0x32
000c8f 940e 129b 	CALL SUBOPT_0x47
000c91 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0223   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000c93 940e 122c 	CALL SUBOPT_0x33
000c95 9631      	ADIW R30,1
000c96 93fa      	ST   -Y,R31
000c97 93ea      	ST   -Y,R30
000c98 940e 1231 	CALL SUBOPT_0x34
000c9a 9731      	SBIW R30,1
000c9b 93fa      	ST   -Y,R31
000c9c 93ea      	ST   -Y,R30
000c9d 940e 1236 	CALL SUBOPT_0x35
000c9f 9631      	ADIW R30,1
000ca0 93fa      	ST   -Y,R31
000ca1 93ea      	ST   -Y,R30
000ca2 940e 123b 	CALL SUBOPT_0x36
000ca4 940e 129b 	CALL SUBOPT_0x47
000ca6 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0224   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000ca8 940e 1240 	CALL SUBOPT_0x37
000caa 9631      	ADIW R30,1
000cab 93fa      	ST   -Y,R31
000cac 93ea      	ST   -Y,R30
000cad 940e 1245 	CALL SUBOPT_0x38
000caf 9731      	SBIW R30,1
000cb0 93fa      	ST   -Y,R31
000cb1 93ea      	ST   -Y,R30
000cb2 940e 124a 	CALL SUBOPT_0x39
000cb4 9631      	ADIW R30,1
000cb5 93fa      	ST   -Y,R31
000cb6 93ea      	ST   -Y,R30
000cb7 940e 124f 	CALL SUBOPT_0x3A
000cb9 940e 129b 	CALL SUBOPT_0x47
000cbb 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0225   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000cbd 940e 1254 	CALL SUBOPT_0x3B
000cbf 9631      	ADIW R30,1
000cc0 93fa      	ST   -Y,R31
000cc1 93ea      	ST   -Y,R30
000cc2 940e 1259 	CALL SUBOPT_0x3C
000cc4 9731      	SBIW R30,1
000cc5 93fa      	ST   -Y,R31
000cc6 93ea      	ST   -Y,R30
000cc7 940e 125e 	CALL SUBOPT_0x3D
000cc9 9631      	ADIW R30,1
000cca 93fa      	ST   -Y,R31
000ccb 93ea      	ST   -Y,R30
000ccc 940e 1263 	CALL SUBOPT_0x3E
000cce 940e 129b 	CALL SUBOPT_0x47
000cd0 940e 08e5 	CALL _SSD1963_DrawRect
                 ; 0000 0226 
                 ; 0000 0227   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
                +
000cd2 e1e8     +LDI R30 , LOW ( _0x1CE + ( 0 ) )
000cd3 e0f5     +LDI R31 , HIGH ( _0x1CE + ( 0 ) )
                 	__POINTW1MN _0x1CE,0
000cd4 93fa      	ST   -Y,R31
000cd5 93ea      	ST   -Y,R30
000cd6 e0e1      	LDI  R30,LOW(1)
000cd7 93ea      	ST   -Y,R30
000cd8 940e 10b8 	CALL SUBOPT_0xC
000cda 940e 12a1 	CALL SUBOPT_0x48
                 ; 0000 0228   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000cdc e1ed     +LDI R30 , LOW ( _0x1CE + ( 5 ) )
000cdd e0f5     +LDI R31 , HIGH ( _0x1CE + ( 5 ) )
                 	__POINTW1MN _0x1CE,5
000cde 940e 12a7 	CALL SUBOPT_0x49
000ce0 940e 10b8 	CALL SUBOPT_0xC
000ce2 940e 12a1 	CALL SUBOPT_0x48
                 ; 0000 0229   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000ce4 e2e1     +LDI R30 , LOW ( _0x1CE + ( 9 ) )
000ce5 e0f5     +LDI R31 , HIGH ( _0x1CE + ( 9 ) )
                 	__POINTW1MN _0x1CE,9
000ce6 93fa      	ST   -Y,R31
000ce7 93ea      	ST   -Y,R30
000ce8 e0e3      	LDI  R30,LOW(3)
000ce9 93ea      	ST   -Y,R30
000cea 940e 10b8 	CALL SUBOPT_0xC
000cec 940e 12a1 	CALL SUBOPT_0x48
                 ; 0000 022A   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000cee e2e5     +LDI R30 , LOW ( _0x1CE + ( 13 ) )
000cef e0f5     +LDI R31 , HIGH ( _0x1CE + ( 13 ) )
                 	__POINTW1MN _0x1CE,13
000cf0 940e 12ac 	CALL SUBOPT_0x4A
000cf2 940e 12a1 	CALL SUBOPT_0x48
                 ; 0000 022B   /*SSD1963_PutChar16('К', 0, 136, WHITE, BLACK);
                 ; 0000 022C   SSD1963_PutChar16('А', 0, 152, WHITE, BLACK);
                 ; 0000 022D   SSD1963_PutChar16('Р', 0, 168, WHITE, BLACK);
                 ; 0000 022E   SSD1963_PutChar16('Д', 0, 184, WHITE, BLACK);
                 ; 0000 022F   SSD1963_PutChar16('И', 0, 200, WHITE, BLACK);
                 ; 0000 0230   SSD1963_PutChar16('О', 0, 216, WHITE, BLACK);      */
                 ; 0000 0231 }
000cf4 9508      	RET
                 
                 	.DSEG
                 _0x1CE:
000518           	.BYTE 0x13
                 ;
                 ;void Paint_ScanLine(unsigned int X_Min, unsigned int X_Max, unsigned int Y_Min, unsigned int Y_Max, unsigned int Color, unsigned int Length)
                 ; 0000 0234 {
                 
                 	.CSEG
                 ; 0000 0235   signed int ScanLine_NetHeight, ScanLine_NetWidth;
                 ; 0000 0236   if (ScanLine_X == 0) ScanLine_X = X_Min;
                 ;	X_Min -> Y+14
                 ;	X_Max -> Y+12
                 ;	Y_Min -> Y+10
                 ;	Y_Max -> Y+8
                 ;	Color -> Y+6
                 ;	Length -> Y+4
                 ;	ScanLine_NetHeight -> R16,R17
                 ;	ScanLine_NetWidth -> R18,R19
                 ; 0000 0237   ScanLine_NetHeight = (Y_Max - Y_Min) - Length;
                 ; 0000 0238   ScanLine_NetWidth = (X_Max - X_Min) - Length;
                 ; 0000 0239   while (ScanLine_NetHeight > 0)
                 ; 0000 023A   {
                 ; 0000 023B     SSD1963_DrawFastLine(X_Min, X_Max, Y_Min + ScanLine_NetHeight, Y_Min + ScanLine_NetHeight, Color);
                 ; 0000 023C     ScanLine_NetHeight -= Length;
                 ; 0000 023D   }
                 ; 0000 023E   while (ScanLine_NetWidth > 0)
                 ; 0000 023F   {
                 ; 0000 0240     SSD1963_DrawFastLine(X_Min + ScanLine_NetWidth, X_Min + ScanLine_NetWidth, Y_Min, Y_Max, Color);
                 ; 0000 0241     ScanLine_NetWidth -= Length;
                 ; 0000 0242   }
                 ; 0000 0243 
                 ; 0000 0244 //  if ((ScanLine_X % Length) < 1)  SSD1963_DrawFastLine(ScanLine_X, ScanLine_X, Y_Min, Y_Max, Color);
                 ; 0000 0245   //if ((Counter % Length) < 1)  SSD1963_DrawFastLine(Counter, Counter, Y_Min, Y_Max, Color);
                 ; 0000 0246 //  ScanLine_X += Counter; // увеличеваем Х сетки
                 ; 0000 0247 //  if (ScanLine_X > X_Max - Length - 1) // если добежали до конца отведённого пространства
                 ; 0000 0248 //  {
                 ; 0000 0249 //    ScanLine_X = X_Min; // уходим обратно
                 ; 0000 024A //  }
                 ; 0000 024B }
                 ;
                 ;void Paint_Pulse(unsigned int Value, unsigned int Color)
                 ; 0000 024E {
                 ; 0000 024F   if (Pulse_ScreenFlag != Pulse_Flag)
                 ;	Value -> Y+2
                 ;	Color -> Y+0
                 ; 0000 0250   {
                 ; 0000 0251     if (Pulse_Flag == 1) Pulse_ScreenValue = Pulse_Y_Min + 5;
                 ; 0000 0252     else if (Pulse_Flag == 0) Pulse_ScreenValue = Pulse_Y_Max - 5;
                 ; 0000 0253     Pulse_ScreenFlag = Pulse_Flag;
                 ; 0000 0254     Alarm_mSec = 0;
                 ; 0000 0255     Alarm = 0;
                 ; 0000 0256   }
                 ; 0000 0257 
                 ; 0000 0258   SSD1963_DrawFastLine(Pulse_X, Pulse_X + Value, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем за собой столбец пикселей
                 ; 0000 0259   SSD1963_DrawLine(Pulse_X, Pulse_X + Value, Pulse_Y_Last, Pulse_ScreenValue, Color, 1); // пишем точку в столбце
                 ; 0000 025A   Pulse_X += Value; // увеличиваем Х пульса
                 ; 0000 025B   Pulse_Y_Last = Pulse_ScreenValue; // определяем предыдущую точку пульса
                 ; 0000 025C   Pulse_ScreenValue = Pulse_Y_Max / 2;
                 ; 0000 025D   if (Pulse_X > Pulse_X_Max - (2 * Value)) // если добежали до конца отведённого пространства
                 ; 0000 025E   {
                 ; 0000 025F     SSD1963_DrawFastLine(Pulse_X, Pulse_X_Max, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 0260     Pulse_X = Pulse_X_Min; // уходим обратно
                 ; 0000 0261     SSD1963_DrawFastLine(Pulse_X - Value, Pulse_X, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 0262   }
                 ; 0000 0263 }
                 ;
                 ;signed int ValueLast[3]={Cardio_Y_Min,Cardio_Y_Min,Cardio_Y_Min};
                 
                 	.DSEG
                 ;signed int multiplier = 60;
                 ;
                 ;void Paint_3phase(char a, char b, char c)
                 ; 0000 0269 {
                 
                 	.CSEG
                 _Paint_3phase:
                 ; 0000 026A     signed int Value[3];
                 ; 0000 026B     unsigned int Color[] = {GREEN, YELLOW, RED};
                 ; 0000 026C     unsigned int Length = WorkParameters[1];
                 ; 0000 026D     signed int mid = ((Cardio_Y_Max - Cardio_Y_Min)>>1) + Cardio_Y_Min;
                 ; 0000 026E     unsigned int temp;
                 ; 0000 026F     char i;
                 ; 0000 0270 
                 ; 0000 0271     Value[0] = a;
000cf5 940e 12b1 	CALL SUBOPT_0x4B
                 ;	a -> Y+21
                 ;	b -> Y+20
                 ;	c -> Y+19
                 ;	Value -> Y+13
                 ;	Color -> Y+7
                 ;	Length -> R16,R17
                 ;	mid -> R18,R19
                 ;	temp -> R20,R21
                 ;	i -> Y+6
000cf7 89ed      	LDD  R30,Y+21
000cf8 e0f0      	LDI  R31,0
000cf9 87ed      	STD  Y+13,R30
000cfa 87fe      	STD  Y+13+1,R31
                 ; 0000 0272     Value[1] = b;
000cfb 89ec      	LDD  R30,Y+20
000cfc e0f0      	LDI  R31,0
000cfd 87ef      	STD  Y+15,R30
000cfe 8bf8      	STD  Y+15+1,R31
                 ; 0000 0273     Value[2] = c;
000cff 89eb      	LDD  R30,Y+19
000d00 e0f0      	LDI  R31,0
000d01 8be9      	STD  Y+17,R30
000d02 8bfa      	STD  Y+17+1,R31
                 ; 0000 0274 
                 ; 0000 0275     // очищаем за собой столбец пикселей
                 ; 0000 0276     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK);
000d03 940e 12c8 	CALL SUBOPT_0x4C
000d05 940e 12d8 	CALL SUBOPT_0x4D
000d07 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 0277 
                 ; 0000 0278     //Линия нуля
                 ; 0000 0279     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid, mid, DGRAY);
000d09 940e 12c8 	CALL SUBOPT_0x4C
000d0b 933a      	ST   -Y,R19
000d0c 932a      	ST   -Y,R18
000d0d 933a      	ST   -Y,R19
000d0e 932a      	ST   -Y,R18
000d0f 940e 12df 	CALL SUBOPT_0x4E
                 ; 0000 027A     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid+50, mid+50, DGRAY);
000d11 01f9      	MOVW R30,R18
000d12 96f2      	ADIW R30,50
000d13 93fa      	ST   -Y,R31
000d14 93ea      	ST   -Y,R30
000d15 01f9      	MOVW R30,R18
000d16 96f2      	ADIW R30,50
000d17 93fa      	ST   -Y,R31
000d18 93ea      	ST   -Y,R30
000d19 940e 12df 	CALL SUBOPT_0x4E
                 ; 0000 027B     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid-50, mid-50, DGRAY);
000d1b 01f9      	MOVW R30,R18
000d1c 97f2      	SBIW R30,50
000d1d 93fa      	ST   -Y,R31
000d1e 93ea      	ST   -Y,R30
000d1f 01f9      	MOVW R30,R18
000d20 97f2      	SBIW R30,50
000d21 940e 12e6 	CALL SUBOPT_0x4F
                 ; 0000 027C 
                 ; 0000 027D     for(i=0; i<3; i++)
                 _0x1DE:
000d23 81ae      	LDD  R26,Y+6
000d24 30a3      	CPI  R26,LOW(0x3)
000d25 f010      	BRLO PC+3
000d26 940c 0d72 	JMP _0x1DF
                 ; 0000 027E     {
                 ; 0000 027F         Value[i] -= 128;
000d28 940e 12f1 	CALL SUBOPT_0x50
000d2a 940e 12f8 	CALL SUBOPT_0x51
000d2c 940e 12fd 	CALL SUBOPT_0x52
                 ; 0000 0280         Value[i] *= multiplier;
000d2e 940e 1302 	CALL SUBOPT_0x53
                 ; 0000 0281         Value[i] >>= 7;
000d30 940e 12f8 	CALL SUBOPT_0x51
000d32 940e 1312 	CALL SUBOPT_0x54
                 ; 0000 0282         if(Value[i]&0x0100) Value[i] |= 0xFF00;
000d34 940e 1319 	CALL SUBOPT_0x55
000d36 70f1      	ANDI R31,HIGH(0x100)
000d37 f039      	BREQ _0x1E0
000d38 940e 12f1 	CALL SUBOPT_0x50
000d3a 940e 12f8 	CALL SUBOPT_0x51
000d3c 6fff      	ORI  R31,HIGH(0xFF00)
000d3d 93fe      	ST   -X,R31
000d3e 93ee      	ST   -X,R30
                 ; 0000 0283 
                 ; 0000 0284         Value[i] += mid;
                 _0x1E0:
000d3f 940e 12f1 	CALL SUBOPT_0x50
000d41 940e 12f8 	CALL SUBOPT_0x51
000d43 0fe2      	ADD  R30,R18
000d44 1ff3      	ADC  R31,R19
000d45 93fe      	ST   -X,R31
000d46 93ee      	ST   -X,R30
                 ; 0000 0285         if(Value[i] >= Cardio_Y_Max) Value[i] = Cardio_Y_Max - 1;
000d47 940e 12f1 	CALL SUBOPT_0x50
000d49 940e 1319 	CALL SUBOPT_0x55
000d4b 3ee8      	CPI  R30,LOW(0xE8)
000d4c e0a0      	LDI  R26,HIGH(0xE8)
000d4d 07fa      	CPC  R31,R26
000d4e f024      	BRLT _0x1E1
000d4f 940e 12f1 	CALL SUBOPT_0x50
000d51 940e 131e 	CALL SUBOPT_0x56
                 ; 0000 0286         if(Value[i] < Cardio_Y_Min) Value[i] = Cardio_Y_Min;
                 _0x1E1:
000d53 940e 12f1 	CALL SUBOPT_0x50
000d55 940e 1319 	CALL SUBOPT_0x55
000d57 97f2      	SBIW R30,50
000d58 f424      	BRGE _0x1E2
000d59 940e 12f1 	CALL SUBOPT_0x50
000d5b 940e 1325 	CALL SUBOPT_0x57
                 ; 0000 0287 
                 ; 0000 0288         // пишем точку в столбце
                 ; 0000 0289         SSD1963_DrawLine(Cardio_X, Cardio_X + Length, ValueLast[i], Value[i], Color[i], 2);
                 _0x1E2:
000d5d 940e 12c8 	CALL SUBOPT_0x4C
000d5f 940e 132c 	CALL SUBOPT_0x58
000d61 940e 1333 	CALL SUBOPT_0x59
000d63 940e 133c 	CALL SUBOPT_0x5A
000d65 940e 12a7 	CALL SUBOPT_0x49
000d67 940e 1345 	CALL SUBOPT_0x5B
                 ; 0000 028A         ValueLast[i] = Value[i]; // определяем предыдущую точку кардиограммы
000d69 940e 1319 	CALL SUBOPT_0x55
000d6b 01d0      	MOVW R26,R0
000d6c 93ed      	ST   X+,R30
000d6d 93fc      	ST   X,R31
                 ; 0000 028B     }
000d6e 81ee      	LDD  R30,Y+6
000d6f 5fef      	SUBI R30,-LOW(1)
000d70 83ee      	STD  Y+6,R30
000d71 cfb1      	RJMP _0x1DE
                 _0x1DF:
                 ; 0000 028C 
                 ; 0000 028D     Cardio_X += Length; // увеличеваем Х кардиограммы
000d72 940e 1351 	CALL SUBOPT_0x5C
                 ; 0000 028E 
                 ; 0000 028F   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
000d74 f440      	BRSH _0x1E3
                 ; 0000 0290   {
                 ; 0000 0291     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000d75 940e 1367 	CALL SUBOPT_0x5D
000d77 940e 1372 	CALL SUBOPT_0x5E
                 ; 0000 0292     Cardio_X = Cardio_X_Min; // уходим обратно
                 ; 0000 0293     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000d79 940e 12d8 	CALL SUBOPT_0x4D
000d7b 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 0294   }
                 ; 0000 0295 }
                 _0x1E3:
000d7d 940e 1600 	CALL __LOADLOCR6
000d7f 9666      	ADIW R28,22
000d80 9508      	RET
                 ;
                 ;void Paint_2phase(char a, char b)
                 ; 0000 0298 {
                 _Paint_2phase:
                 ; 0000 0299     signed int Value[3];
                 ; 0000 029A     unsigned int Color[] = {GREEN, YELLOW, RED};
                 ; 0000 029B     unsigned int Length = WorkParameters[1];
                 ; 0000 029C     signed int mid = ((Cardio_Y_Max - Cardio_Y_Min)>>1) + Cardio_Y_Min;
                 ; 0000 029D     unsigned int temp;
                 ; 0000 029E     char i;
                 ; 0000 029F 
                 ; 0000 02A0     Value[0] = a;
000d81 940e 12b1 	CALL SUBOPT_0x4B
                 ;	a -> Y+20
                 ;	b -> Y+19
                 ;	Value -> Y+13
                 ;	Color -> Y+7
                 ;	Length -> R16,R17
                 ;	mid -> R18,R19
                 ;	temp -> R20,R21
                 ;	i -> Y+6
000d83 89ec      	LDD  R30,Y+20
000d84 e0f0      	LDI  R31,0
000d85 87ed      	STD  Y+13,R30
000d86 87fe      	STD  Y+13+1,R31
                 ; 0000 02A1     Value[1] = b;
000d87 89eb      	LDD  R30,Y+19
000d88 e0f0      	LDI  R31,0
000d89 87ef      	STD  Y+15,R30
000d8a 8bf8      	STD  Y+15+1,R31
                 ; 0000 02A2     //Value[2] = c;
                 ; 0000 02A3 
                 ; 0000 02A4     // очищаем за собой столбец пикселей
                 ; 0000 02A5     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK);
000d8b 940e 12c8 	CALL SUBOPT_0x4C
000d8d 940e 12d8 	CALL SUBOPT_0x4D
000d8f 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 02A6 
                 ; 0000 02A7     //Линия нуля
                 ; 0000 02A8     //SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid, mid, DGRAY);
                 ; 0000 02A9     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid+40, mid+40, DGRAY);
000d91 940e 12c8 	CALL SUBOPT_0x4C
000d93 01f9      	MOVW R30,R18
000d94 96b8      	ADIW R30,40
000d95 93fa      	ST   -Y,R31
000d96 93ea      	ST   -Y,R30
000d97 01f9      	MOVW R30,R18
000d98 96b8      	ADIW R30,40
000d99 93fa      	ST   -Y,R31
000d9a 93ea      	ST   -Y,R30
000d9b 940e 12df 	CALL SUBOPT_0x4E
                 ; 0000 02AA     SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, mid-40, mid-40, DGRAY);
000d9d 01f9      	MOVW R30,R18
000d9e 97b8      	SBIW R30,40
000d9f 93fa      	ST   -Y,R31
000da0 93ea      	ST   -Y,R30
000da1 01f9      	MOVW R30,R18
000da2 97b8      	SBIW R30,40
000da3 940e 12e6 	CALL SUBOPT_0x4F
                 ; 0000 02AB 
                 ; 0000 02AC     for(i=0; i<2; i++)
                 _0x1E5:
000da5 81ae      	LDD  R26,Y+6
000da6 30a2      	CPI  R26,LOW(0x2)
000da7 f010      	BRLO PC+3
000da8 940c 0e06 	JMP _0x1E6
                 ; 0000 02AD     {
                 ; 0000 02AE         Value[i] -= 128;
000daa 940e 12f1 	CALL SUBOPT_0x50
000dac 940e 12f8 	CALL SUBOPT_0x51
000dae 940e 12fd 	CALL SUBOPT_0x52
                 ; 0000 02AF         Value[i] *= multiplier;
000db0 940e 1302 	CALL SUBOPT_0x53
                 ; 0000 02B0         Value[i] >>= 7;
000db2 940e 12f8 	CALL SUBOPT_0x51
000db4 940e 1312 	CALL SUBOPT_0x54
                 ; 0000 02B1         if(Value[i]&0x0100) Value[i] |= 0xFF00;
000db6 940e 1319 	CALL SUBOPT_0x55
000db8 70f1      	ANDI R31,HIGH(0x100)
000db9 f039      	BREQ _0x1E7
000dba 940e 12f1 	CALL SUBOPT_0x50
000dbc 940e 12f8 	CALL SUBOPT_0x51
000dbe 6fff      	ORI  R31,HIGH(0xFF00)
000dbf 93fe      	ST   -X,R31
000dc0 93ee      	ST   -X,R30
                 ; 0000 02B2 
                 ; 0000 02B3         if(i==0) Value[i] += mid+40;
                 _0x1E7:
000dc1 81ee      	LDD  R30,Y+6
000dc2 30e0      	CPI  R30,0
000dc3 f451      	BRNE _0x1E8
000dc4 940e 12f1 	CALL SUBOPT_0x50
000dc6 940e 137a 	CALL SUBOPT_0x5F
000dc8 96b8      	ADIW R30,40
000dc9 0fea      	ADD  R30,R26
000dca 1ffb      	ADC  R31,R27
000dcb 01d0      	MOVW R26,R0
000dcc 93ed      	ST   X+,R30
000dcd 93fc      	ST   X,R31
                 ; 0000 02B4         if(i==1) Value[i] += mid-40;
                 _0x1E8:
000dce 81ae      	LDD  R26,Y+6
000dcf 30a1      	CPI  R26,LOW(0x1)
000dd0 f451      	BRNE _0x1E9
000dd1 940e 12f1 	CALL SUBOPT_0x50
000dd3 940e 137a 	CALL SUBOPT_0x5F
000dd5 97b8      	SBIW R30,40
000dd6 0fea      	ADD  R30,R26
000dd7 1ffb      	ADC  R31,R27
000dd8 01d0      	MOVW R26,R0
000dd9 93ed      	ST   X+,R30
000dda 93fc      	ST   X,R31
                 ; 0000 02B5         if(Value[i] >= Cardio_Y_Max) Value[i] = Cardio_Y_Max - 1;
                 _0x1E9:
000ddb 940e 12f1 	CALL SUBOPT_0x50
000ddd 940e 1319 	CALL SUBOPT_0x55
000ddf 3ee8      	CPI  R30,LOW(0xE8)
000de0 e0a0      	LDI  R26,HIGH(0xE8)
000de1 07fa      	CPC  R31,R26
000de2 f024      	BRLT _0x1EA
000de3 940e 12f1 	CALL SUBOPT_0x50
000de5 940e 131e 	CALL SUBOPT_0x56
                 ; 0000 02B6         if(Value[i] < Cardio_Y_Min) Value[i] = Cardio_Y_Min;
                 _0x1EA:
000de7 940e 12f1 	CALL SUBOPT_0x50
000de9 940e 1319 	CALL SUBOPT_0x55
000deb 97f2      	SBIW R30,50
000dec f424      	BRGE _0x1EB
000ded 940e 12f1 	CALL SUBOPT_0x50
000def 940e 1325 	CALL SUBOPT_0x57
                 ; 0000 02B7 
                 ; 0000 02B8         // пишем точку в столбце
                 ; 0000 02B9         SSD1963_DrawLine(Cardio_X, Cardio_X + Length, ValueLast[i], Value[i], Color[i], 2);
                 _0x1EB:
000df1 940e 12c8 	CALL SUBOPT_0x4C
000df3 940e 132c 	CALL SUBOPT_0x58
000df5 940e 1333 	CALL SUBOPT_0x59
000df7 940e 133c 	CALL SUBOPT_0x5A
000df9 940e 12a7 	CALL SUBOPT_0x49
000dfb 940e 1345 	CALL SUBOPT_0x5B
                 ; 0000 02BA         ValueLast[i] = Value[i]; // определяем предыдущую точку кардиограммы
000dfd 940e 1319 	CALL SUBOPT_0x55
000dff 01d0      	MOVW R26,R0
000e00 93ed      	ST   X+,R30
000e01 93fc      	ST   X,R31
                 ; 0000 02BB     }
000e02 81ee      	LDD  R30,Y+6
000e03 5fef      	SUBI R30,-LOW(1)
000e04 83ee      	STD  Y+6,R30
000e05 cf9f      	RJMP _0x1E5
                 _0x1E6:
                 ; 0000 02BC 
                 ; 0000 02BD     Cardio_X += Length; // увеличеваем Х кардиограммы
000e06 940e 1351 	CALL SUBOPT_0x5C
                 ; 0000 02BE 
                 ; 0000 02BF   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
000e08 f440      	BRSH _0x1EC
                 ; 0000 02C0   {
                 ; 0000 02C1     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000e09 940e 1367 	CALL SUBOPT_0x5D
000e0b 940e 1372 	CALL SUBOPT_0x5E
                 ; 0000 02C2     Cardio_X = Cardio_X_Min; // уходим обратно
                 ; 0000 02C3     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000e0d 940e 12d8 	CALL SUBOPT_0x4D
000e0f 940e 091f 	CALL _SSD1963_DrawFillRect
                 ; 0000 02C4   }
                 ; 0000 02C5 }
                 _0x1EC:
000e11 940e 1600 	CALL __LOADLOCR6
000e13 9665      	ADIW R28,21
000e14 9508      	RET
                 ;
                 ;
                 ;void Paint_Cardio(unsigned int Value, unsigned int Color, unsigned int Length)
                 ; 0000 02C9 {
                 ; 0000 02CA   signed int temp, temp2;
                 ; 0000 02CB   temp = Cardio_Y_Max - (Value / Cardio_Divider);
                 ;	Value -> Y+8
                 ;	Color -> Y+6
                 ;	Length -> Y+4
                 ;	temp -> R16,R17
                 ;	temp2 -> R18,R19
                 ; 0000 02CC   if (temp < Cardio_Y_Min) temp = Cardio_Y_Min;
                 ; 0000 02CD   if (temp > Cardio_Y_Max) temp = Cardio_Y_Max - 1;
                 ; 0000 02CE   temp2 = Cardio_Y_Max - (WorkParameters[2] / Cardio_Divider);
                 ; 0000 02CF   if (temp2 < Cardio_Y_Min) temp2 = Cardio_Y_Min;
                 ; 0000 02D0 
                 ; 0000 02D1   SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем за собой столбец пикселей
                 ; 0000 02D2 //  Paint_ScanLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max, DGRAY, 25);
                 ; 0000 02D3   //SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Min, DGRAY);
                 ; 0000 02D4   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 25, Cardio_Y_Min + 25, DGRAY);
                 ; 0000 02D5   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 50, Cardio_Y_Min + 50, DGRAY);
                 ; 0000 02D6   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 75, Cardio_Y_Min + 75, DGRAY);
                 ; 0000 02D7   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 100, Cardio_Y_Min + 100, DGRAY);
                 ; 0000 02D8   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 125, Cardio_Y_Min + 125, DGRAY);
                 ; 0000 02D9   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 150, Cardio_Y_Min + 150, DGRAY);
                 ; 0000 02DA 
                 ; 0000 02DB   //if ((Cardio_X % Length) < 1)  SSD1963_DrawFastLine(Cardio_X, Cardio_X, Cardio_Y_Min, Cardio_Y_Max, DGRAY);
                 ; 0000 02DC   SSD1963_DrawLine(Cardio_X, Cardio_X + Length, temp2, temp2, YELLOW, 1); // пишем точку в столбце
                 ; 0000 02DD   SSD1963_DrawLine(Cardio_X, Cardio_X + Length, Cardio_Y_Last, temp, Color, 2); // пишем точку в столбце
                 ; 0000 02DE   Cardio_X += Length; // увеличеваем Х кардиограммы
                 ; 0000 02DF   Cardio_Y_Last = temp; // определяем предыдущую точку кардиограммы
                 ; 0000 02E0   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
                 ; 0000 02E1   {
                 ; 0000 02E2     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 02E3     Cardio_X = Cardio_X_Min; // уходим обратно
                 ; 0000 02E4     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 02E5   }
                 ; 0000 02E6 }
                 ;
                 ;void Calc_Pulse(unsigned int Value)
                 ; 0000 02E9 {
                 ; 0000 02EA   if (Value > WorkParameters[2])
                 ;	Value -> Y+0
                 ; 0000 02EB   {
                 ; 0000 02EC     if (Pulse_Flag < 1)
                 ; 0000 02ED     {
                 ; 0000 02EE       Pulse_Counter++;
                 ; 0000 02EF       Pulse_Flag = 1;
                 ; 0000 02F0     }
                 ; 0000 02F1   }
                 ; 0000 02F2   else if (Pulse_Flag > 0) Pulse_Flag = 0;
                 ; 0000 02F3 
                 ; 0000 02F4   if (Pulse_mSec > 59999)
                 ; 0000 02F5   {
                 ; 0000 02F6     Pulse_mSec = 0;
                 ; 0000 02F7     Pulse_Value = Pulse_Counter;
                 ; 0000 02F8     Pulse_Counter = 0;
                 ; 0000 02F9   }
                 ; 0000 02FA }
                 ;
                 ;/*void Paint_Battery(unsigned int Value)
                 ;{
                 ;  SSD1963_DrawFillRect(Battery_X + 4, Battery_Width - 4, Battery_Y + 4, Battery_Height - 4, BLACK);
                 ;  SSD1963_DrawFillRect(Battery_X + 4, Battery_Width - 4, Battery_Y + 4 + (45 - Value), Battery_Height - 4, GREEN);
                 ;*/
                 ;void PutParameterText(char Number, char X, char Y, unsigned int Color)
                 ; 0000 0302 {
                 _PutParameterText:
                 ; 0000 0303   SSD1963_PutString16("                ", X, Y, Color, BLACK);
                 ;	Number -> Y+4
                 ;	X -> Y+3
                 ;	Y -> Y+2
                 ;	Color -> Y+0
                +
000e15 e2eb     +LDI R30 , LOW ( _0x1F6 + ( 0 ) )
000e16 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 0 ) )
                 	__POINTW1MN _0x1F6,0
000e17 940e 1383 	CALL SUBOPT_0x60
000e19 940e 138c 	CALL SUBOPT_0x61
000e1b 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0304   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e1d e3ec     +LDI R30 , LOW ( _0x1F6 + ( 17 ) )
000e1e e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 17 ) )
                 	__POINTW1MN _0x1F6,17
000e1f 940e 1383 	CALL SUBOPT_0x60
000e21 9670      	ADIW R30,16
000e22 940e 138c 	CALL SUBOPT_0x61
000e24 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0305   switch (Number)
000e26 81ec      	LDD  R30,Y+4
000e27 940e 1391 	CALL SUBOPT_0x62
                 ; 0000 0306   {
                 ; 0000 0307     case 0 :
000e29 f459      	BRNE _0x1FA
                 ; 0000 0308       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000e2a e4ed     +LDI R30 , LOW ( _0x1F6 + ( 34 ) )
000e2b e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 34 ) )
                 	__POINTW1MN _0x1F6,34
000e2c 940e 1383 	CALL SUBOPT_0x60
000e2e 940e 138c 	CALL SUBOPT_0x61
000e30 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0309       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e32 e5e8     +LDI R30 , LOW ( _0x1F6 + ( 45 ) )
000e33 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 45 ) )
                 	__POINTW1MN _0x1F6,45
000e34 c01d      	RJMP _0x23C
                 ; 0000 030A     break;
                 ; 0000 030B     case 1 :
                 _0x1FA:
000e35 30e1      	CPI  R30,LOW(0x1)
000e36 e0a0      	LDI  R26,HIGH(0x1)
000e37 07fa      	CPC  R31,R26
000e38 f459      	BRNE _0x1FB
                 ; 0000 030C       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000e39 e5ec     +LDI R30 , LOW ( _0x1F6 + ( 49 ) )
000e3a e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 49 ) )
                 	__POINTW1MN _0x1F6,49
000e3b 940e 1383 	CALL SUBOPT_0x60
000e3d 940e 138c 	CALL SUBOPT_0x61
000e3f 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 030D       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e41 e6e0     +LDI R30 , LOW ( _0x1F6 + ( 53 ) )
000e42 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 53 ) )
                 	__POINTW1MN _0x1F6,53
000e43 c00e      	RJMP _0x23C
                 ; 0000 030E     break;
                 ; 0000 030F     case 2 :
                 _0x1FB:
000e44 30e2      	CPI  R30,LOW(0x2)
000e45 e0a0      	LDI  R26,HIGH(0x2)
000e46 07fa      	CPC  R31,R26
000e47 f4b9      	BRNE _0x1F9
                 ; 0000 0310       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000e48 e6e4     +LDI R30 , LOW ( _0x1F6 + ( 57 ) )
000e49 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 57 ) )
                 	__POINTW1MN _0x1F6,57
000e4a 940e 1383 	CALL SUBOPT_0x60
000e4c 940e 138c 	CALL SUBOPT_0x61
000e4e 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0311       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e50 e7e5     +LDI R30 , LOW ( _0x1F6 + ( 74 ) )
000e51 e0f5     +LDI R31 , HIGH ( _0x1F6 + ( 74 ) )
                 	__POINTW1MN _0x1F6,74
                 _0x23C:
000e52 93fa      	ST   -Y,R31
000e53 93ea      	ST   -Y,R30
000e54 81ed      	LDD  R30,Y+5
000e55 e0f0      	LDI  R31,0
000e56 93fa      	ST   -Y,R31
000e57 93ea      	ST   -Y,R30
000e58 81ee      	LDD  R30,Y+6
000e59 e0f0      	LDI  R31,0
000e5a 9670      	ADIW R30,16
000e5b 940e 138c 	CALL SUBOPT_0x61
000e5d 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 0312     break;
                 ; 0000 0313     /*
                 ; 0000 0314     case 3 :
                 ; 0000 0315       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 0316       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0317     break;
                 ; 0000 0318     case 4 :
                 ; 0000 0319       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 031A       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 031B     break;
                 ; 0000 031C     case 5 :
                 ; 0000 031D       SSD1963_PutString16("НЕ ИСПОЛЬЗУЕТСЯ", X, Y, Color, BLACK);
                 ; 0000 031E       SSD1963_PutString16("В ТЕКУЩЕЙ ВЕРСИИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 031F     break;
                 ; 0000 0320     case 6 :
                 ; 0000 0321       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 0322       SSD1963_PutString16("ДЕНЬ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0323     break;
                 ; 0000 0324     case 7 :
                 ; 0000 0325       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 0326       SSD1963_PutString16("МЕСЯЦ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0327     break;
                 ; 0000 0328     case 8 :
                 ; 0000 0329       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 032A       SSD1963_PutString16("ЧАС", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 032B     break;
                 ; 0000 032C     case 9 :
                 ; 0000 032D       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 032E       SSD1963_PutString16("МИНУТЫ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 032F     break;*/
                 ; 0000 0330   }
                 _0x1F9:
                 ; 0000 0331 }
000e5f 9625      	ADIW R28,5
000e60 9508      	RET
                 
                 	.DSEG
                 _0x1F6:
00052b           	.BYTE 0x56
                 ;
                 ;void main(void)
                 ; 0000 0334 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0335 unsigned int ii = 0xffff;
                 ; 0000 0336 char yiii[3];
                 ; 0000 0337 
                 ; 0000 0338 {
000e61 9723      	SBIW R28,3
                 ;	ii -> R16,R17
                 ;	yiii -> Y+0
                +
000e62 ef0f     +LDI R16 , LOW ( - 1 )
000e63 ef1f     +LDI R17 , HIGH ( - 1 )
                 	__GETWRN 16,17,-1
                 ; 0000 0339 // Input/Output Ports initialization
                 ; 0000 033A // Port A initialization
                 ; 0000 033B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 033C // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 033D PORTA=0x00;
000e64 e0e0      	LDI  R30,LOW(0)
000e65 bbeb      	OUT  0x1B,R30
                 ; 0000 033E DDRA=0xFF;
000e66 efef      	LDI  R30,LOW(255)
000e67 bbea      	OUT  0x1A,R30
                 ; 0000 033F 
                 ; 0000 0340 // Port B initialization
                 ; 0000 0341 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 0342 // State7=0 State6=0 State5=0 State4=0 State3=T State2=0 State1=0 State0=0
                 ; 0000 0343 PORTB=0x00;
000e68 e0e0      	LDI  R30,LOW(0)
000e69 bbe8      	OUT  0x18,R30
                 ; 0000 0344 DDRB=0xF7;
000e6a efe7      	LDI  R30,LOW(247)
000e6b bbe7      	OUT  0x17,R30
                 ; 0000 0345 
                 ; 0000 0346 // Port C initialization
                 ; 0000 0347 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0348 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0349 PORTC=0x00;
000e6c e0e0      	LDI  R30,LOW(0)
000e6d bbe5      	OUT  0x15,R30
                 ; 0000 034A DDRC=0xFF;
000e6e efef      	LDI  R30,LOW(255)
000e6f bbe4      	OUT  0x14,R30
                 ; 0000 034B 
                 ; 0000 034C // Port D initialization
                 ; 0000 034D // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
                 ; 0000 034E // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=0 State0=0
                 ; 0000 034F PORTD=0x00;
000e70 e0e0      	LDI  R30,LOW(0)
000e71 bbe2      	OUT  0x12,R30
                 ; 0000 0350 DDRD=0xFB;
000e72 efeb      	LDI  R30,LOW(251)
000e73 bbe1      	OUT  0x11,R30
                 ; 0000 0351 
                 ; 0000 0352 // Port E initialization
                 ; 0000 0353 // Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=In
                 ; 0000 0354 // State7=0 State6=T State5=0 State4=0 State3=T State2=0 State1=0 State0=T
                 ; 0000 0355 PORTE=0x00;
000e74 e0e0      	LDI  R30,LOW(0)
000e75 b9e3      	OUT  0x3,R30
                 ; 0000 0356 DDRE=0xB6;
000e76 ebe6      	LDI  R30,LOW(182)
000e77 b9e2      	OUT  0x2,R30
                 ; 0000 0357 
                 ; 0000 0358 // Port F initialization
                 ; 0000 0359 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 035A // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
                 ; 0000 035B PORTF=0x00;
000e78 e0e0      	LDI  R30,LOW(0)
000e79 93e0 0062 	STS  98,R30
                 ; 0000 035C DDRF=0xF8;
000e7b efe8      	LDI  R30,LOW(248)
000e7c 93e0 0061 	STS  97,R30
                 ; 0000 035D 
                 ; 0000 035E // Port G initialization
                 ; 0000 035F // Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0360 // State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0361 PORTG=0x00;
000e7e e0e0      	LDI  R30,LOW(0)
000e7f 93e0 0065 	STS  101,R30
                 ; 0000 0362 DDRG=0x1F;
000e81 e1ef      	LDI  R30,LOW(31)
000e82 93e0 0064 	STS  100,R30
                 ; 0000 0363 
                 ; 0000 0364 // Timer/Counter 0 initialization
                 ; 0000 0365 // Clock source: System Clock
                 ; 0000 0366 // Clock value: 250,000 kHz
                 ; 0000 0367 // Mode: Normal top=0xFF
                 ; 0000 0368 // OC0 output: Disconnected
                 ; 0000 0369 ASSR=0x00;
000e84 e0e0      	LDI  R30,LOW(0)
000e85 bfe0      	OUT  0x30,R30
                 ; 0000 036A TCCR0=0x04;
000e86 e0e4      	LDI  R30,LOW(4)
000e87 bfe3      	OUT  0x33,R30
                 ; 0000 036B TCNT0=0x06;
000e88 e0e6      	LDI  R30,LOW(6)
000e89 bfe2      	OUT  0x32,R30
                 ; 0000 036C OCR0=0x00;
000e8a e0e0      	LDI  R30,LOW(0)
000e8b bfe1      	OUT  0x31,R30
                 ; 0000 036D 
                 ; 0000 036E // Timer/Counter 1 initialization
                 ; 0000 036F // Clock source: System Clock
                 ; 0000 0370 // Clock value: Timer1 Stopped
                 ; 0000 0371 // Mode: Normal top=0xFFFF
                 ; 0000 0372 // OC1A output: Discon.
                 ; 0000 0373 // OC1B output: Discon.
                 ; 0000 0374 // OC1C output: Discon.
                 ; 0000 0375 // Noise Canceler: Off
                 ; 0000 0376 // Input Capture on Falling Edge
                 ; 0000 0377 // Timer1 Overflow Interrupt: Off
                 ; 0000 0378 // Input Capture Interrupt: Off
                 ; 0000 0379 // Compare A Match Interrupt: Off
                 ; 0000 037A // Compare B Match Interrupt: Off
                 ; 0000 037B // Compare C Match Interrupt: Off
                 ; 0000 037C TCCR1A=0x00;
000e8c bdef      	OUT  0x2F,R30
                 ; 0000 037D TCCR1B=0x00;
000e8d bdee      	OUT  0x2E,R30
                 ; 0000 037E TCNT1H=0x00;
000e8e bded      	OUT  0x2D,R30
                 ; 0000 037F TCNT1L=0x00;
000e8f bdec      	OUT  0x2C,R30
                 ; 0000 0380 ICR1H=0x00;
000e90 bde7      	OUT  0x27,R30
                 ; 0000 0381 ICR1L=0x00;
000e91 bde6      	OUT  0x26,R30
                 ; 0000 0382 OCR1AH=0x00;
000e92 bdeb      	OUT  0x2B,R30
                 ; 0000 0383 OCR1AL=0x00;
000e93 bdea      	OUT  0x2A,R30
                 ; 0000 0384 OCR1BH=0x00;
000e94 bde9      	OUT  0x29,R30
                 ; 0000 0385 OCR1BL=0x00;
000e95 bde8      	OUT  0x28,R30
                 ; 0000 0386 OCR1CH=0x00;
000e96 93e0 0079 	STS  121,R30
                 ; 0000 0387 OCR1CL=0x00;
000e98 93e0 0078 	STS  120,R30
                 ; 0000 0388 
                 ; 0000 0389 // Timer/Counter 2 initialization
                 ; 0000 038A // Clock source: System Clock
                 ; 0000 038B // Clock value: Timer2 Stopped
                 ; 0000 038C // Mode: Normal top=0xFF
                 ; 0000 038D // OC2 output: Disconnected
                 ; 0000 038E TCCR2=0x00;
000e9a bde5      	OUT  0x25,R30
                 ; 0000 038F TCNT2=0x00;
000e9b bde4      	OUT  0x24,R30
                 ; 0000 0390 OCR2=0x00;
000e9c bde3      	OUT  0x23,R30
                 ; 0000 0391 
                 ; 0000 0392 // Timer/Counter 3 initialization
                 ; 0000 0393 // Clock source: System Clock
                 ; 0000 0394 // Clock value: Timer3 Stopped
                 ; 0000 0395 // Mode: Normal top=0xFFFF
                 ; 0000 0396 // OC3A output: Discon.
                 ; 0000 0397 // OC3B output: Discon.
                 ; 0000 0398 // OC3C output: Discon.
                 ; 0000 0399 // Noise Canceler: Off
                 ; 0000 039A // Input Capture on Falling Edge
                 ; 0000 039B // Timer3 Overflow Interrupt: Off
                 ; 0000 039C // Input Capture Interrupt: Off
                 ; 0000 039D // Compare A Match Interrupt: Off
                 ; 0000 039E // Compare B Match Interrupt: Off
                 ; 0000 039F // Compare C Match Interrupt: Off
                 ; 0000 03A0 TCCR3A=0x00;
000e9d 93e0 008b 	STS  139,R30
                 ; 0000 03A1 TCCR3B=0x00;
000e9f 93e0 008a 	STS  138,R30
                 ; 0000 03A2 TCNT3H=0x00;
000ea1 93e0 0089 	STS  137,R30
                 ; 0000 03A3 TCNT3L=0x00;
000ea3 93e0 0088 	STS  136,R30
                 ; 0000 03A4 ICR3H=0x00;
000ea5 93e0 0081 	STS  129,R30
                 ; 0000 03A5 ICR3L=0x00;
000ea7 93e0 0080 	STS  128,R30
                 ; 0000 03A6 OCR3AH=0x00;
000ea9 93e0 0087 	STS  135,R30
                 ; 0000 03A7 OCR3AL=0x00;
000eab 93e0 0086 	STS  134,R30
                 ; 0000 03A8 OCR3BH=0x00;
000ead 93e0 0085 	STS  133,R30
                 ; 0000 03A9 OCR3BL=0x00;
000eaf 93e0 0084 	STS  132,R30
                 ; 0000 03AA OCR3CH=0x00;
000eb1 93e0 0083 	STS  131,R30
                 ; 0000 03AB OCR3CL=0x00;
000eb3 93e0 0082 	STS  130,R30
                 ; 0000 03AC 
                 ; 0000 03AD // External Interrupt(s) initialization
                 ; 0000 03AE // INT0: Off
                 ; 0000 03AF // INT1: Off
                 ; 0000 03B0 // INT2: Off
                 ; 0000 03B1 // INT3: Off
                 ; 0000 03B2 // INT4: Off
                 ; 0000 03B3 // INT5: Off
                 ; 0000 03B4 // INT6: Off
                 ; 0000 03B5 // INT7: Off
                 ; 0000 03B6 EICRA=0x00;
000eb5 93e0 006a 	STS  106,R30
                 ; 0000 03B7 EICRB=0x00;
000eb7 bfea      	OUT  0x3A,R30
                 ; 0000 03B8 EIMSK=0x00;
000eb8 bfe9      	OUT  0x39,R30
                 ; 0000 03B9 
                 ; 0000 03BA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 03BB TIMSK=0x01;
000eb9 e0e1      	LDI  R30,LOW(1)
000eba bfe7      	OUT  0x37,R30
                 ; 0000 03BC 
                 ; 0000 03BD ETIMSK=0x00;
000ebb e0e0      	LDI  R30,LOW(0)
000ebc 93e0 007d 	STS  125,R30
                 ; 0000 03BE 
                 ; 0000 03BF // USART0 initialization
                 ; 0000 03C0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 03C1 // USART0 Receiver: On
                 ; 0000 03C2 // USART0 Transmitter: On
                 ; 0000 03C3 // USART0 Mode: Asynchronous
                 ; 0000 03C4 // USART0 Baud Rate: 115200
                 ; 0000 03C5 UCSR0A=0x00;
000ebe b9eb      	OUT  0xB,R30
                 ; 0000 03C6 UCSR0B=0xD8;
000ebf ede8      	LDI  R30,LOW(216)
000ec0 b9ea      	OUT  0xA,R30
                 ; 0000 03C7 UCSR0C=0x06;
000ec1 e0e6      	LDI  R30,LOW(6)
000ec2 93e0 0095 	STS  149,R30
                 ; 0000 03C8 UBRR0H=0x00;
000ec4 e0e0      	LDI  R30,LOW(0)
000ec5 93e0 0090 	STS  144,R30
                 ; 0000 03C9 UBRR0L=0x08;
000ec7 e0e8      	LDI  R30,LOW(8)
000ec8 b9e9      	OUT  0x9,R30
                 ; 0000 03CA 
                 ; 0000 03CB // USART1 initialization
                 ; 0000 03CC // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 03CD // USART1 Receiver: On
                 ; 0000 03CE // USART1 Transmitter: On
                 ; 0000 03CF // USART1 Mode: Asynchronous
                 ; 0000 03D0 // USART1 Baud Rate: 9600
                 ; 0000 03D1 UCSR1A=0x00;
000ec9 e0e0      	LDI  R30,LOW(0)
000eca 93e0 009b 	STS  155,R30
                 ; 0000 03D2 UCSR1B=0xD8;
000ecc ede8      	LDI  R30,LOW(216)
000ecd 93e0 009a 	STS  154,R30
                 ; 0000 03D3 UCSR1C=0x06;
000ecf e0e6      	LDI  R30,LOW(6)
000ed0 93e0 009d 	STS  157,R30
                 ; 0000 03D4 UBRR1H=0x00;
000ed2 e0e0      	LDI  R30,LOW(0)
000ed3 93e0 0098 	STS  152,R30
                 ; 0000 03D5 UBRR1L=0x67;
000ed5 e6e7      	LDI  R30,LOW(103)
000ed6 93e0 0099 	STS  153,R30
                 ; 0000 03D6 
                 ; 0000 03D7 // Analog Comparator initialization
                 ; 0000 03D8 // Analog Comparator: Off
                 ; 0000 03D9 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 03DA ACSR=0x80;
000ed8 e8e0      	LDI  R30,LOW(128)
000ed9 b9e8      	OUT  0x8,R30
                 ; 0000 03DB SFIOR=0x00;
000eda e0e0      	LDI  R30,LOW(0)
000edb bde0      	OUT  0x20,R30
                 ; 0000 03DC 
                 ; 0000 03DD // ADC initialization
                 ; 0000 03DE // ADC Clock frequency: 1000,000 kHz
                 ; 0000 03DF // ADC Voltage Reference: AREF pin
                 ; 0000 03E0 ADMUX=ADC_VREF_TYPE & 0xff;
000edc b9e7      	OUT  0x7,R30
                 ; 0000 03E1 ADCSRA=0x84;
000edd e8e4      	LDI  R30,LOW(132)
000ede b9e6      	OUT  0x6,R30
                 ; 0000 03E2 
                 ; 0000 03E3 // SPI initialization
                 ; 0000 03E4 // SPI Type: Master
                 ; 0000 03E5 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 03E6 // SPI Clock Phase: Cycle Start
                 ; 0000 03E7 // SPI Clock Polarity: Low
                 ; 0000 03E8 // SPI Data Order: MSB First
                 ; 0000 03E9 SPCR=0x52;
000edf e5e2      	LDI  R30,LOW(82)
000ee0 b9ed      	OUT  0xD,R30
                 ; 0000 03EA SPSR=0x00;
000ee1 e0e0      	LDI  R30,LOW(0)
000ee2 b9ee      	OUT  0xE,R30
                 ; 0000 03EB 
                 ; 0000 03EC // TWI initialization
                 ; 0000 03ED // TWI disabled
                 ; 0000 03EE TWCR=0x00;
000ee3 93e0 0074 	STS  116,R30
                 ; 0000 03EF 
                 ; 0000 03F0 // I2C Bus initialization
                 ; 0000 03F1 i2c_init();
000ee5 940e 13c8 	CALL _i2c_init
                 ; 0000 03F2 
                 ; 0000 03F3 // Global enable interrupts
                 ; 0000 03F4 #asm("sei")
000ee7 9478      	sei
                 ; 0000 03F5 }
                 ; 0000 03F6 
                 ; 0000 03F7   //PORTE.6 = 1;
                 ; 0000 03F8   SwitchPORTF(LEDGREEN, 1);
000ee8 940e 120d 	CALL SUBOPT_0x2D
                 ; 0000 03F9   SwitchPORTF(LEDRED, 1);
000eea 940e 1201 	CALL SUBOPT_0x2B
                 ; 0000 03FA   SwitchPORTF(LEDBLUE, 1);
000eec 940e 1207 	CALL SUBOPT_0x2C
                 ; 0000 03FB   delay_ms(1000);
000eee eee8      	LDI  R30,LOW(1000)
000eef e0f3      	LDI  R31,HIGH(1000)
000ef0 940e 108d 	CALL SUBOPT_0x4
                 ; 0000 03FC 
                 ; 0000 03FD   SSD1963_Init();
000ef2 940e 0553 	CALL _SSD1963_Init
                 ; 0000 03FE   SwitchPORTF(BACKLIGHT, 1);
000ef4 940e 1394 	CALL SUBOPT_0x63
                 ; 0000 03FF   /*SSD1963_ClearScreen(BLACK);
                 ; 0000 0400   SSD1963_PutString16("ИНИЦИАЛИЗАЦИЯ...", 0, 0, WHITE, BLACK);
                 ; 0000 0401   SSD1963_PutString16("ВНУТРЕННЯЯ ПАМЯТЬ...", 0, FONT_HEIGHT * 1, WHITE, BLACK);
                 ; 0000 0402   */
                 ; 0000 0403   if (EEPROM_FLAG > 1)
000ef6 e0a6      	LDI  R26,LOW(_EEPROM_FLAG)
000ef7 e0b0      	LDI  R27,HIGH(_EEPROM_FLAG)
000ef8 940e 15cf 	CALL __EEPROMRDB
000efa 30e2      	CPI  R30,LOW(0x2)
000efb f0d8      	BRLO _0x1FD
                 ; 0000 0404   {
                 ; 0000 0405     for(i = 0; i < 3; i++)
000efc 2444      	CLR  R4
                 _0x1FF:
000efd e0e3      	LDI  R30,LOW(3)
000efe 164e      	CP   R4,R30
000eff f490      	BRSH _0x200
                 ; 0000 0406     WorkParameters[i] = Default_Parameters[i];
000f00 2de4      	MOV  R30,R4
000f01 e0a0      	LDI  R26,LOW(_WorkParameters)
000f02 e0b0      	LDI  R27,HIGH(_WorkParameters)
000f03 940e 139a 	CALL SUBOPT_0x64
000f05 01bf      	MOVW R22,R30
000f06 2de4      	MOV  R30,R4
000f07 ecac      	LDI  R26,LOW(_Default_Parameters*2)
000f08 e0b7      	LDI  R27,HIGH(_Default_Parameters*2)
000f09 940e 139a 	CALL SUBOPT_0x64
000f0b 940e 15c7 	CALL __GETW1PF
000f0d 01db      	MOVW R26,R22
000f0e 940e 15db 	CALL __EEPROMWRW
000f10 9443      	INC  R4
000f11 cfeb      	RJMP _0x1FF
                 _0x200:
                 ; 0000 0407 EEPROM_FLAG = 0;
000f12 e0a6      	LDI  R26,LOW(_EEPROM_FLAG)
000f13 e0b0      	LDI  R27,HIGH(_EEPROM_FLAG)
000f14 e0e0      	LDI  R30,LOW(0)
000f15 940e 15e3 	CALL __EEPROMWRB
                 ; 0000 0408   }
                 ; 0000 0409   /*
                 ; 0000 040A   SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ...", 0, FONT_HEIGHT * 2, WHITE, BLACK);
                 ; 0000 040B   rtc_init(0, 0);
                 ; 0000 040C   rtc_get_time(0, &Hour, &Minute, &Seconds, &mSeconds);
                 ; 0000 040D   rtc_get_date(0, &Day, &Month, &Year);*/
                 ; 0000 040E 
                 ; 0000 040F   SSD1963_ClearScreen(BLACK);
                 _0x1FD:
000f17 940e 10b8 	CALL SUBOPT_0xC
000f19 940e 05f6 	CALL _SSD1963_ClearScreen
                 ; 0000 0410 
                 ; 0000 0411   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, RED, BLACK);
                +
000f1b e8e1     +LDI R30 , LOW ( _0x201 + ( 0 ) )
000f1c e0f5     +LDI R31 , HIGH ( _0x201 + ( 0 ) )
                 	__POINTW1MN _0x201,0
000f1d 940e 13a0 	CALL SUBOPT_0x65
000f1f e7e0      	LDI  R30,LOW(112)
000f20 e0f0      	LDI  R31,HIGH(112)
000f21 940e 13a7 	CALL SUBOPT_0x66
000f23 940e 13ac 	CALL SUBOPT_0x67
                 ; 0000 0412   delay_ms(300);
                 ; 0000 0413   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), YELLOW, BLACK);
                +
000f25 e8e8     +LDI R30 , LOW ( _0x201 + ( 7 ) )
000f26 e0f5     +LDI R31 , HIGH ( _0x201 + ( 7 ) )
                 	__POINTW1MN _0x201,7
000f27 940e 13a0 	CALL SUBOPT_0x65
000f29 e8e0      	LDI  R30,LOW(128)
000f2a e0f0      	LDI  R31,HIGH(128)
000f2b 93fa      	ST   -Y,R31
000f2c 93ea      	ST   -Y,R30
000f2d e0e7      	LDI  R30,LOW(65287)
000f2e efff      	LDI  R31,HIGH(65287)
000f2f 940e 10bd 	CALL SUBOPT_0xD
000f31 940e 13ac 	CALL SUBOPT_0x67
                 ; 0000 0414   delay_ms(300);
                 ; 0000 0415   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, RED, BLACK);
                +
000f33 e8ef     +LDI R30 , LOW ( _0x201 + ( 14 ) )
000f34 e0f5     +LDI R31 , HIGH ( _0x201 + ( 14 ) )
                 	__POINTW1MN _0x201,14
000f35 940e 13a0 	CALL SUBOPT_0x65
000f37 e9e0      	LDI  R30,LOW(144)
000f38 e0f0      	LDI  R31,HIGH(144)
000f39 940e 13a7 	CALL SUBOPT_0x66
000f3b 940e 13ac 	CALL SUBOPT_0x67
                 ; 0000 0416   delay_ms(300);
                 ; 0000 0417   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
000f3d e9e6     +LDI R30 , LOW ( _0x201 + ( 21 ) )
000f3e e0f5     +LDI R31 , HIGH ( _0x201 + ( 21 ) )
                 	__POINTW1MN _0x201,21
000f3f 940e 13a0 	CALL SUBOPT_0x65
000f41 e7e0      	LDI  R30,LOW(112)
000f42 e0f0      	LDI  R31,HIGH(112)
000f43 940e 10bd 	CALL SUBOPT_0xD
000f45 940e 10b8 	CALL SUBOPT_0xC
000f47 940e 13ac 	CALL SUBOPT_0x67
                 ; 0000 0418   delay_ms(300);
                 ; 0000 0419   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
000f49 e9ed     +LDI R30 , LOW ( _0x201 + ( 28 ) )
000f4a e0f5     +LDI R31 , HIGH ( _0x201 + ( 28 ) )
                 	__POINTW1MN _0x201,28
000f4b 940e 13a0 	CALL SUBOPT_0x65
000f4d e8e0      	LDI  R30,LOW(128)
000f4e e0f0      	LDI  R31,HIGH(128)
000f4f 940e 10bd 	CALL SUBOPT_0xD
000f51 940e 10b8 	CALL SUBOPT_0xC
000f53 940e 13ac 	CALL SUBOPT_0x67
                 ; 0000 041A   delay_ms(300);
                 ; 0000 041B   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
000f55 eae4     +LDI R30 , LOW ( _0x201 + ( 35 ) )
000f56 e0f5     +LDI R31 , HIGH ( _0x201 + ( 35 ) )
                 	__POINTW1MN _0x201,35
000f57 940e 13a0 	CALL SUBOPT_0x65
000f59 e9e0      	LDI  R30,LOW(144)
000f5a e0f0      	LDI  R31,HIGH(144)
000f5b 940e 10bd 	CALL SUBOPT_0xD
000f5d 940e 10b8 	CALL SUBOPT_0xC
000f5f 940e 07ff 	CALL _SSD1963_PutString16
                 ; 0000 041C 
                 ; 0000 041D   Prepare_Screen();
000f61 dcdc      	RCALL _Prepare_Screen
                 ; 0000 041E   TSC2046_Init();
000f62 940e 09a4 	CALL _TSC2046_Init
                 ; 0000 041F 
                 ; 0000 0420   Cardio_Y_Last = Cardio_Y_Min;
000f64 e3e2      	LDI  R30,LOW(50)
000f65 e0f0      	LDI  R31,HIGH(50)
000f66 93e0 094c 	STS  _Cardio_Y_Last,R30
000f68 93f0 094d 	STS  _Cardio_Y_Last+1,R31
                 ; 0000 0421   Cardio_X = Cardio_X_Min;
000f6a e0e0      	LDI  R30,LOW(0)
000f6b 93e0 094a 	STS  _Cardio_X,R30
000f6d 93e0 094b 	STS  _Cardio_X+1,R30
                 ; 0000 0422   Cardio_Divider = WorkParameters[0] / (Cardio_Y_Max - Cardio_Y_Min);
000f6f e0a0      	LDI  R26,LOW(_WorkParameters)
000f70 e0b0      	LDI  R27,HIGH(_WorkParameters)
000f71 940e 15cb 	CALL __EEPROMRDW
000f73 01df      	MOVW R26,R30
000f74 ebe6      	LDI  R30,LOW(182)
000f75 e0f0      	LDI  R31,HIGH(182)
000f76 940e 1560 	CALL __DIVW21U
000f78 e4ae      	LDI  R26,LOW(_Cardio_Divider)
000f79 e0b9      	LDI  R27,HIGH(_Cardio_Divider)
000f7a 2766      	CLR  R22
000f7b 2777      	CLR  R23
000f7c 940e 148c 	CALL __CDF1
000f7e 940e 15c2 	CALL __PUTDP1
                 ; 0000 0423   PutParameterText(Parameter_Counter, 30, 16, BLUE);
000f80 940e 13b1 	CALL SUBOPT_0x68
                 ; 0000 0424   Pulse_X = Pulse_X_Min;
000f82 e0ee      	LDI  R30,LOW(270)
000f83 e0f1      	LDI  R31,HIGH(270)
000f84 93e0 093c 	STS  _Pulse_X,R30
000f86 93f0 093d 	STS  _Pulse_X+1,R31
                 ; 0000 0425 
                 ; 0000 0426   //Paint_ScanLine(Cardio_X_Min, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max, DGRAY, 50);
                 ; 0000 0427 
                 ; 0000 0428    RS485 = 1;
000f88 9a94      	SBI  0x12,4
                 ; 0000 0429 
                 ; 0000 042A while (1)
                 _0x204:
                 ; 0000 042B {
                 ; 0000 042C 
                 ; 0000 042D 
                 ; 0000 042E         switch(State)
000f89 91e0 0955 	LDS  R30,_State
000f8b 940e 1391 	CALL SUBOPT_0x62
                 ; 0000 042F         {
                 ; 0000 0430           case 0 : // основной рабочий режим
000f8d f011      	BREQ PC+3
000f8e 940c 1039 	JMP _0x20A
                 ; 0000 0431           {
                 ; 0000 0432             /*if (ADC0 > WorkParameters[0]) ADC0 = WorkParameters[0];
                 ; 0000 0433             for (i = 0; i < 192; i++) longADC += read_adc(0);
                 ; 0000 0434             longADC = longADC / 192;
                 ; 0000 0435             ADC0 = longADC;
                 ; 0000 0436             longADC = 0;*/
                 ; 0000 0437             //ADC0 = read_adc(0);
                 ; 0000 0438             //if (ADC0 > WorkParameters[0]) ADC0 = WorkParameters[0];
                 ; 0000 0439            // putchar(Address_Slave);
                 ; 0000 043A            // if (rx_counter0 > 0)
                 ; 0000 043B            // {
                 ; 0000 043C               //  ADC0 = ((getchar() << 8) + getchar());
                 ; 0000 043D             //}
                 ; 0000 043E 
                 ; 0000 043F            // Cardio_Divider = WorkParameters[0] / (Cardio_Y_Max - Cardio_Y_Min);
                 ; 0000 0440             //Paint_Cardio(ADC0, RED, WorkParameters[1]);
                 ; 0000 0441 
                 ; 0000 0442 
                 ; 0000 0443 
                 ; 0000 0444 
                 ; 0000 0445             while(rx_counter0>2 || (rx_counter0>1 && Parameter_Counter==2))
                 _0x20B:
000f90 91a0 0858 	LDS  R26,_rx_counter0
000f92 30a3      	CPI  R26,LOW(0x3)
000f93 f438      	BRSH _0x20E
000f94 30a2      	CPI  R26,LOW(0x2)
000f95 f020      	BRLO _0x20F
000f96 91a0 0952 	LDS  R26,_Parameter_Counter
000f98 30a2      	CPI  R26,LOW(0x2)
000f99 f009      	BREQ _0x20E
                 _0x20F:
000f9a c01f      	RJMP _0x20D
                 _0x20E:
                 ; 0000 0446             {
                 ; 0000 0447             yiii[0] = getchar0();
000f9b 940e 09df 	CALL _getchar0
000f9d 83e8      	ST   Y,R30
                 ; 0000 0448             yiii[1] = getchar0();
000f9e 940e 09df 	CALL _getchar0
000fa0 83e9      	STD  Y+1,R30
                 ; 0000 0449             putchar1(yiii[0]);
000fa1 81e8      	LD   R30,Y
000fa2 93ea      	ST   -Y,R30
000fa3 dafc      	RCALL _putchar1
                 ; 0000 044A             putchar1(yiii[1]);
000fa4 81e9      	LDD  R30,Y+1
000fa5 93ea      	ST   -Y,R30
000fa6 daf9      	RCALL _putchar1
                 ; 0000 044B 
                 ; 0000 044C             if(Parameter_Counter<2) Paint_3phase(yiii[0],yiii[1],getchar0());
000fa7 91a0 0952 	LDS  R26,_Parameter_Counter
000fa9 30a2      	CPI  R26,LOW(0x2)
000faa f448      	BRSH _0x212
000fab 81e8      	LD   R30,Y
000fac 93ea      	ST   -Y,R30
000fad 81ea      	LDD  R30,Y+2
000fae 93ea      	ST   -Y,R30
000faf 940e 09df 	CALL _getchar0
000fb1 93ea      	ST   -Y,R30
000fb2 dd42      	RCALL _Paint_3phase
                 ; 0000 044D                 else Paint_2phase(yiii[0],yiii[1]);
000fb3 c005      	RJMP _0x213
                 _0x212:
000fb4 81e8      	LD   R30,Y
000fb5 93ea      	ST   -Y,R30
000fb6 81ea      	LDD  R30,Y+2
000fb7 93ea      	ST   -Y,R30
000fb8 ddc8      	RCALL _Paint_2phase
                 ; 0000 044E 
                 ; 0000 044F 
                 ; 0000 0450             }
                 _0x213:
000fb9 cfd6      	RJMP _0x20B
                 _0x20D:
                 ; 0000 0451             if(tx_counter0==0 && WaitADC_mSec > 800)
000fba 91a0 0863 	LDS  R26,_tx_counter0
000fbc 30a0      	CPI  R26,LOW(0x0)
000fbd f441      	BRNE _0x215
000fbe 91a0 095e 	LDS  R26,_WaitADC_mSec
000fc0 91b0 095f 	LDS  R27,_WaitADC_mSec+1
000fc2 32a1      	CPI  R26,LOW(0x321)
000fc3 e0e3      	LDI  R30,HIGH(0x321)
000fc4 07be      	CPC  R27,R30
000fc5 f408      	BRSH _0x216
                 _0x215:
000fc6 c01c      	RJMP _0x214
                 _0x216:
                 ; 0000 0452             {
                 ; 0000 0453             WaitADC_mSec = 0;
000fc7 e0e0      	LDI  R30,LOW(0)
000fc8 93e0 095e 	STS  _WaitADC_mSec,R30
000fca 93e0 095f 	STS  _WaitADC_mSec+1,R30
                 ; 0000 0454             getclear0();
000fcc 940e 09fb 	CALL _getclear0
                 ; 0000 0455             switch(Parameter_Counter)
000fce 91e0 0952 	LDS  R30,_Parameter_Counter
000fd0 940e 1391 	CALL SUBOPT_0x62
                 ; 0000 0456             {
                 ; 0000 0457                 case 0: putchar0('U'); break;
000fd2 f411      	BRNE _0x21A
000fd3 e5e5      	LDI  R30,LOW(85)
000fd4 c00b      	RJMP _0x23D
                 ; 0000 0458                 case 1: putchar0('I'); break;
                 _0x21A:
000fd5 30e1      	CPI  R30,LOW(0x1)
000fd6 e0a0      	LDI  R26,HIGH(0x1)
000fd7 07fa      	CPC  R31,R26
000fd8 f411      	BRNE _0x21B
000fd9 e4e9      	LDI  R30,LOW(73)
000fda c005      	RJMP _0x23D
                 ; 0000 0459                 case 2: putchar0('Z'); break;
                 _0x21B:
000fdb 30e2      	CPI  R30,LOW(0x2)
000fdc e0a0      	LDI  R26,HIGH(0x2)
000fdd 07fa      	CPC  R31,R26
000fde f421      	BRNE _0x219
000fdf e5ea      	LDI  R30,LOW(90)
                 _0x23D:
000fe0 93ea      	ST   -Y,R30
000fe1 940e 0a2e 	CALL _putchar0
                 ; 0000 045A             }
                 _0x219:
                 ; 0000 045B             }
                 ; 0000 045C 
                 ; 0000 045D 
                 ; 0000 045E 
                 ; 0000 045F             if (TSC2046_GetCoordinates() > 0)
                 _0x214:
000fe3 940e 098c 	CALL _TSC2046_GetCoordinates
000fe5 30e1      	CPI  R30,LOW(0x1)
000fe6 f410      	BRSH PC+3
000fe7 940c 1038 	JMP _0x21D
                 ; 0000 0460             {
                 ; 0000 0461               Sleep_mSec = 0;
000fe9 940e 13be 	CALL SUBOPT_0x69
                 ; 0000 0462               Button_Pressed = GetButton();
                 ; 0000 0463               switch (Button_Pressed)
                 ; 0000 0464               {
                 ; 0000 0465                 case 1 :
000feb f489      	BRNE _0x221
                 ; 0000 0466                   getclear0();
000fec 940e 09fb 	CALL _getclear0
                 ; 0000 0467                   Parameter_Counter++;
000fee 91e0 0952 	LDS  R30,_Parameter_Counter
000ff0 5fef      	SUBI R30,-LOW(1)
000ff1 93e0 0952 	STS  _Parameter_Counter,R30
                 ; 0000 0468                   if (Parameter_Counter > 2) Parameter_Counter = 0;
000ff3 91a0 0952 	LDS  R26,_Parameter_Counter
000ff5 30a3      	CPI  R26,LOW(0x3)
000ff6 f018      	BRLO _0x222
000ff7 e0e0      	LDI  R30,LOW(0)
000ff8 93e0 0952 	STS  _Parameter_Counter,R30
                 ; 0000 0469                   PutParameterText(Parameter_Counter, 30, 16, BLUE);
                 _0x222:
000ffa 940e 13b1 	CALL SUBOPT_0x68
                 ; 0000 046A                 break;
000ffc c03b      	RJMP _0x220
                 ; 0000 046B                 case 2 :
                 _0x221:
000ffd 30e2      	CPI  R30,LOW(0x2)
000ffe e0a0      	LDI  R26,HIGH(0x2)
000fff 07fa      	CPC  R31,R26
001000 f491      	BRNE _0x223
                 ; 0000 046C                 if(multiplier<200)multiplier+=10;
001001 91a0 0966 	LDS  R26,_multiplier
001003 91b0 0967 	LDS  R27,_multiplier+1
001005 3ca8      	CPI  R26,LOW(0xC8)
001006 e0e0      	LDI  R30,HIGH(0xC8)
001007 07be      	CPC  R27,R30
001008 f44c      	BRGE _0x224
001009 91e0 0966 	LDS  R30,_multiplier
00100b 91f0 0967 	LDS  R31,_multiplier+1
00100d 963a      	ADIW R30,10
00100e 93e0 0966 	STS  _multiplier,R30
001010 93f0 0967 	STS  _multiplier+1,R31
                 ; 0000 046D 
                 ; 0000 046E                   //if (Parameter_Counter == 0) {if (WorkParameters[Parameter_Counter] > 1) WorkParameters[Parameter_Counter] -= 10;}
                 ; 0000 046F                   //else {if (WorkParameters[Parameter_Counter] < 1000) WorkParameters[Parameter_Counter]++;}
                 ; 0000 0470                 break;
                 _0x224:
001012 c025      	RJMP _0x220
                 ; 0000 0471                 case 3 :
                 _0x223:
001013 30e3      	CPI  R30,LOW(0x3)
001014 e0a0      	LDI  R26,HIGH(0x3)
001015 07fa      	CPC  R31,R26
001016 f481      	BRNE _0x225
                 ; 0000 0472                 if(multiplier>20)multiplier-=10;
001017 91a0 0966 	LDS  R26,_multiplier
001019 91b0 0967 	LDS  R27,_multiplier+1
00101b 9755      	SBIW R26,21
00101c f04c      	BRLT _0x226
00101d 91e0 0966 	LDS  R30,_multiplier
00101f 91f0 0967 	LDS  R31,_multiplier+1
001021 973a      	SBIW R30,10
001022 93e0 0966 	STS  _multiplier,R30
001024 93f0 0967 	STS  _multiplier+1,R31
                 ; 0000 0473 
                 ; 0000 0474                   //if (Parameter_Counter == 0) {if (WorkParameters[Parameter_Counter] < 1000) WorkParameters[Parameter_Counter] += 10;}
                 ; 0000 0475                   //else {if (WorkParameters[Parameter_Counter] > 1) WorkParameters[Parameter_Counter]--;}
                 ; 0000 0476                 break;
                 _0x226:
001026 c011      	RJMP _0x220
                 ; 0000 0477                 case 4 :
                 _0x225:
001027 30e4      	CPI  R30,LOW(0x4)
001028 e0a0      	LDI  R26,HIGH(0x4)
001029 07fa      	CPC  R31,R26
00102a f469      	BRNE _0x220
                 ; 0000 0478                   State = 200;
00102b ece8      	LDI  R30,LOW(200)
00102c 93e0 0955 	STS  _State,R30
                 ; 0000 0479                   Repaint_Button("СТАРТ", 4, BLACK, WHITE);
                +
00102e eaeb     +LDI R30 , LOW ( _0x201 + ( 42 ) )
00102f e0f5     +LDI R31 , HIGH ( _0x201 + ( 42 ) )
                 	__POINTW1MN _0x201,42
001030 940e 12ac 	CALL SUBOPT_0x4A
001032 940e 12a1 	CALL SUBOPT_0x48
                 ; 0000 047A                   delay_ms(250);
001034 efea      	LDI  R30,LOW(250)
001035 e0f0      	LDI  R31,HIGH(250)
001036 940e 108d 	CALL SUBOPT_0x4
                 ; 0000 047B                 break;
                 ; 0000 047C               }
                 _0x220:
                 ; 0000 047D             }
                 ; 0000 047E           }
                 _0x21D:
                 ; 0000 047F           break;
001038 c036      	RJMP _0x209
                 ; 0000 0480           case 1 : // настройки
                 _0x20A:
001039 30e1      	CPI  R30,LOW(0x1)
00103a e0a0      	LDI  R26,HIGH(0x1)
00103b 07fa      	CPC  R31,R26
00103c f191      	BREQ _0x209
                 ; 0000 0481           {
                 ; 0000 0482           }
                 ; 0000 0483           break;
                 ; 0000 0484           case 200 : // пауза
00103d 3ce8      	CPI  R30,LOW(0xC8)
00103e e0a0      	LDI  R26,HIGH(0xC8)
00103f 07fa      	CPC  R31,R26
001040 f509      	BRNE _0x229
                 ; 0000 0485           if (TSC2046_GetCoordinates() > 0)
001041 940e 098c 	CALL _TSC2046_GetCoordinates
001043 30e1      	CPI  R30,LOW(0x1)
001044 f0e0      	BRLO _0x22A
                 ; 0000 0486           {
                 ; 0000 0487             Sleep_mSec = 0;
001045 940e 13be 	CALL SUBOPT_0x69
                 ; 0000 0488             Button_Pressed = GetButton();
                 ; 0000 0489             switch (Button_Pressed)
                 ; 0000 048A             {
                 ; 0000 048B               case 1 :
001047 f0c9      	BREQ _0x22D
                 ; 0000 048C               break;
                 ; 0000 048D               case 2 :
001048 30e2      	CPI  R30,LOW(0x2)
001049 e0a0      	LDI  R26,HIGH(0x2)
00104a 07fa      	CPC  R31,R26
00104b f0a9      	BREQ _0x22D
                 ; 0000 048E               break;
                 ; 0000 048F               case 3 :
00104c 30e3      	CPI  R30,LOW(0x3)
00104d e0a0      	LDI  R26,HIGH(0x3)
00104e 07fa      	CPC  R31,R26
00104f f089      	BREQ _0x22D
                 ; 0000 0490               break;
                 ; 0000 0491               case 4 :
001050 30e4      	CPI  R30,LOW(0x4)
001051 e0a0      	LDI  R26,HIGH(0x4)
001052 07fa      	CPC  R31,R26
001053 f469      	BRNE _0x22D
                 ; 0000 0492                 State = 0;
001054 e0e0      	LDI  R30,LOW(0)
001055 93e0 0955 	STS  _State,R30
                 ; 0000 0493                 Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
001057 ebe1     +LDI R30 , LOW ( _0x201 + ( 48 ) )
001058 e0f5     +LDI R31 , HIGH ( _0x201 + ( 48 ) )
                 	__POINTW1MN _0x201,48
001059 940e 12ac 	CALL SUBOPT_0x4A
00105b 940e 12a1 	CALL SUBOPT_0x48
                 ; 0000 0494                 delay_ms(250);
00105d efea      	LDI  R30,LOW(250)
00105e e0f0      	LDI  R31,HIGH(250)
00105f 940e 108d 	CALL SUBOPT_0x4
                 ; 0000 0495               break;
                 ; 0000 0496             }
                 _0x22D:
                 ; 0000 0497           }
                 ; 0000 0498           break;
                 _0x22A:
001061 c00d      	RJMP _0x209
                 ; 0000 0499           case 250 : // спящий режим
                 _0x229:
001062 3fea      	CPI  R30,LOW(0xFA)
001063 e0a0      	LDI  R26,HIGH(0xFA)
001064 07fa      	CPC  R31,R26
001065 f449      	BRNE _0x209
                 ; 0000 049A           {
                 ; 0000 049B             if (TSC2046_GetCoordinates() > 0)
001066 940e 098c 	CALL _TSC2046_GetCoordinates
001068 30e1      	CPI  R30,LOW(0x1)
001069 f028      	BRLO _0x233
                 ; 0000 049C             {
                 ; 0000 049D               State = 0;
00106a e0e0      	LDI  R30,LOW(0)
00106b 93e0 0955 	STS  _State,R30
                 ; 0000 049E               SwitchPORTF(BACKLIGHT, 1);
00106d 940e 1394 	CALL SUBOPT_0x63
                 ; 0000 049F             }
                 ; 0000 04A0           }
                 _0x233:
                 ; 0000 04A1           break;
                 ; 0000 04A2         }
                 _0x209:
                 ; 0000 04A3 
                 ; 0000 04A4   }
00106f cf19      	RJMP _0x204
                 ; 0000 04A5 }
                 _0x234:
001070 cfff      	RJMP _0x234
                 
                 	.DSEG
                 _0x201:
000581           	.BYTE 0x36
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
001071 81e8      	LD   R30,Y
001072 b9ef      	OUT  0xF,R30
                 _0x2020003:
001073 9b77      	SBIS 0xE,7
001074 cffe      	RJMP _0x2020003
001075 b1ef      	IN   R30,0xF
001076 9621      	ADIW R28,1
001077 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _tempX:
0005b7           	.BYTE 0x4
                 _tempY:
0005bb           	.BYTE 0x4
                 _buffer:
0005bf           	.BYTE 0x200
                 _firstDataSector:
0007bf           	.BYTE 0x4
                 _rootCluster:
0007c3           	.BYTE 0x4
                 _totalClusters:
0007c7           	.BYTE 0x4
                 _bytesPerSector:
0007cb           	.BYTE 0x2
                 _sectorPerCluster:
0007cd           	.BYTE 0x2
                 _reservedSectorCount:
0007cf           	.BYTE 0x2
                 _freeClusterCountUpdated:
0007d1           	.BYTE 0x1
                 _unusedSectors:
0007d2           	.BYTE 0x4
                 _rx_buffer0:
0007d6           	.BYTE 0x80
                 _rx_wr_index0:
000856           	.BYTE 0x1
                 _rx_rd_index0:
000857           	.BYTE 0x1
                 _rx_counter0:
000858           	.BYTE 0x1
                 _tx_buffer0:
000859           	.BYTE 0x8
                 _tx_wr_index0:
000861           	.BYTE 0x1
                 _tx_rd_index0:
000862           	.BYTE 0x1
                 _tx_counter0:
000863           	.BYTE 0x1
                 _rx_buffer1:
000864           	.BYTE 0x20
                 _rx_wr_index1:
000884           	.BYTE 0x1
                 _rx_rd_index1:
000885           	.BYTE 0x1
                 _rx_counter1:
000886           	.BYTE 0x1
                 _tx_buffer1:
000887           	.BYTE 0x80
                 _tx_wr_index1:
000907           	.BYTE 0x1
                 _tx_rd_index1:
000908           	.BYTE 0x1
                 _tx_counter1:
000909           	.BYTE 0x1
                 _BTN1_Y_Begin:
00090a           	.BYTE 0x2
                 _BTN1_Y_End:
00090c           	.BYTE 0x2
                 _BTN1_X_Begin:
00090e           	.BYTE 0x2
                 _BTN1_X_End:
000910           	.BYTE 0x2
                 _BTN2_Y_Begin:
000912           	.BYTE 0x2
                 _BTN2_Y_End:
000914           	.BYTE 0x2
                 _BTN2_X_Begin:
000916           	.BYTE 0x2
                 _BTN2_X_End:
000918           	.BYTE 0x2
                 _BTN3_Y_Begin:
00091a           	.BYTE 0x2
                 _BTN3_Y_End:
00091c           	.BYTE 0x2
                 _BTN3_X_Begin:
00091e           	.BYTE 0x2
                 _BTN3_X_End:
000920           	.BYTE 0x2
                 _BTN4_Y_Begin:
000922           	.BYTE 0x2
                 _BTN4_Y_End:
000924           	.BYTE 0x2
                 _BTN4_X_Begin:
000926           	.BYTE 0x2
                 _BTN4_X_End:
000928           	.BYTE 0x2
                 _Button_Pressed:
00092a           	.BYTE 0x1
                 _mSec:
00092b           	.BYTE 0x2
                 _SD_Ready:
00092d           	.BYTE 0x1
                 _error:
00092e           	.BYTE 0x1
                 _FAT32_active:
00092f           	.BYTE 0x1
                 _LEDGREEN_mSec:
000930           	.BYTE 0x2
                 _LEDRED_mSec:
000932           	.BYTE 0x2
                 _LEDBLUE_mSec:
000934           	.BYTE 0x2
                 _LEDGREEN_max:
000936           	.BYTE 0x2
                 _LEDRED_max:
000938           	.BYTE 0x2
                 _LEDBLUE_max:
00093a           	.BYTE 0x2
                 _Pulse_X:
00093c           	.BYTE 0x2
                 _Pulse_Y_Last:
00093e           	.BYTE 0x2
                 _Pulse_mSec:
000940           	.BYTE 0x2
                 _Pulse_Value:
000942           	.BYTE 0x2
                 _Pulse_Counter:
000944           	.BYTE 0x2
                 _Pulse_ScreenValue:
000946           	.BYTE 0x2
                 _Pulse_Flag:
000948           	.BYTE 0x1
                 _Pulse_ScreenFlag:
000949           	.BYTE 0x1
                 _Cardio_X:
00094a           	.BYTE 0x2
                 _Cardio_Y_Last:
00094c           	.BYTE 0x2
                 _Cardio_Divider:
00094e           	.BYTE 0x4
                 
                 	.ESEG
                 _WorkParameters:
000000 f4
000001 01
000002 0a
000003 00        	.DB  LOW(0xA01F4),HIGH(0xA01F4),BYTE3(0xA01F4),BYTE4(0xA01F4)
000004 2c 01     	.DW  0x12C
                 _EEPROM_FLAG:
000006           	.BYTE 0x1
                 
                 	.DSEG
                 _Parameter_Counter:
000952           	.BYTE 0x1
                 _Alarm:
000953           	.BYTE 0x1
                 _Battery_Discharged:
000954           	.BYTE 0x1
                 _State:
000955           	.BYTE 0x1
                 _ScanLine_X:
000956           	.BYTE 0x2
                 _Refresh_mSec:
000958           	.BYTE 0x2
                 _Sleep_mSec:
00095a           	.BYTE 0x2
                 _Alarm_mSec:
00095c           	.BYTE 0x2
                 _WaitADC_mSec:
00095e           	.BYTE 0x2
                 _ValueLast:
000960           	.BYTE 0x6
                 _multiplier:
000966           	.BYTE 0x2
                 __seed_G104:
000968           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
001078 81e8      	LD   R30,Y
001079 e0f0      	LDI  R31,0
00107a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00107b e6e4      	LDI  R30,LOW(100)
00107c e0f0      	LDI  R31,HIGH(100)
00107d 93fa      	ST   -Y,R31
00107e 93ea      	ST   -Y,R30
00107f 940c 141a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
001081 81e8      	LD   R30,Y
001082 93ea      	ST   -Y,R30
001083 940e 04f8 	CALL _RotateByte
001085 bbeb      	OUT  0x1B,R30
001086 e0e0      	LDI  R30,LOW(0)
001087 bbe5      	OUT  0x15,R30
001088 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
001089 e0e1      	LDI  R30,LOW(1)
00108a 93ea      	ST   -Y,R30
00108b 940c 0527 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x4:
00108d 93fa      	ST   -Y,R31
00108e 93ea      	ST   -Y,R30
00108f 940c 141a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
001091 93ea      	ST   -Y,R30
001092 940e 0533 	CALL _SSD1963_WriteData_b8
001094 e0e4      	LDI  R30,LOW(4)
001095 93ea      	ST   -Y,R30
001096 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
001098 93ea      	ST   -Y,R30
001099 940e 0527 	CALL _SSD1963_WriteCmd
00109b e0e1      	LDI  R30,LOW(1)
00109c 93ea      	ST   -Y,R30
00109d 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00109f e0e1      	LDI  R30,LOW(1)
0010a0 e0f0      	LDI  R31,HIGH(1)
0010a1 cfeb      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
0010a2 93ea      	ST   -Y,R30
0010a3 940e 0527 	CALL _SSD1963_WriteCmd
0010a5 e0e3      	LDI  R30,LOW(3)
0010a6 93ea      	ST   -Y,R30
0010a7 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x9:
0010a9 93ea      	ST   -Y,R30
0010aa 940e 0533 	CALL _SSD1963_WriteData_b8
0010ac e0e0      	LDI  R30,LOW(0)
0010ad 93ea      	ST   -Y,R30
0010ae 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0010b0 e0e1      	LDI  R30,LOW(1)
0010b1 93ea      	ST   -Y,R30
0010b2 940c 0533 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0010b4 93ea      	ST   -Y,R30
0010b5 940e 0533 	CALL _SSD1963_WriteData_b8
0010b7 cff8      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0xC:
0010b8 e0e0      	LDI  R30,LOW(0)
0010b9 e0f0      	LDI  R31,HIGH(0)
0010ba 93fa      	ST   -Y,R31
0010bb 93ea      	ST   -Y,R30
0010bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0xD:
0010bd 93fa      	ST   -Y,R31
0010be 93ea      	ST   -Y,R30
0010bf cff8      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xE:
0010c0 93fa      	ST   -Y,R31
0010c1 93ea      	ST   -Y,R30
0010c2 940e 05d6 	CALL _SSD1963_SetArea
0010c4 e2ec      	LDI  R30,LOW(44)
0010c5 93ea      	ST   -Y,R30
0010c6 940c 0527 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
0010c8 93fa      	ST   -Y,R31
0010c9 93ea      	ST   -Y,R30
0010ca 940c 0540 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x10:
0010cc 85e8      	LDD  R30,Y+8
0010cd 85f9      	LDD  R31,Y+8+1
0010ce 93fa      	ST   -Y,R31
0010cf 93ea      	ST   -Y,R30
0010d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x11:
0010d1 85ea      	LDD  R30,Y+10
0010d2 85fb      	LDD  R31,Y+10+1
0010d3 93fa      	ST   -Y,R31
0010d4 93ea      	ST   -Y,R30
0010d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0010d6 81ef      	LDD  R30,Y+7
0010d7 85f8      	LDD  R31,Y+7+1
0010d8 93fa      	ST   -Y,R31
0010d9 93ea      	ST   -Y,R30
0010da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x13:
0010db 9728      	SBIW R28,8
0010dc 931a      	ST   -Y,R17
0010dd 930a      	ST   -Y,R16
0010de 89ea      	LDD  R30,Y+18
0010df 89fb      	LDD  R31,Y+18+1
0010e0 93fa      	ST   -Y,R31
0010e1 93ea      	ST   -Y,R30
0010e2 89ea      	LDD  R30,Y+18
0010e3 89fb      	LDD  R31,Y+18+1
0010e4 93fa      	ST   -Y,R31
0010e5 93ea      	ST   -Y,R30
0010e6 89ea      	LDD  R30,Y+18
0010e7 89fb      	LDD  R31,Y+18+1
0010e8 93fa      	ST   -Y,R31
0010e9 93ea      	ST   -Y,R30
0010ea 89ea      	LDD  R30,Y+18
0010eb 89fb      	LDD  R31,Y+18+1
0010ec cfd3      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
0010ed 89aa      	LDD  R26,Y+18
0010ee 89bb      	LDD  R27,Y+18+1
0010ef 89e8      	LDD  R30,Y+16
0010f0 89f9      	LDD  R31,Y+16+1
0010f1 1bea      	SUB  R30,R26
0010f2 0bfb      	SBC  R31,R27
0010f3 9631      	ADIW R30,1
0010f4 018f      	MOVW R16,R30
0010f5 2311      	TST  R17
0010f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0010f7 01f8      	MOVW R30,R16
0010f8 efaf      	LDI  R26,LOW(65535)
0010f9 efbf      	LDI  R27,HIGH(65535)
0010fa 940e 1556 	CALL __MULW12
0010fc 018f      	MOVW R16,R30
0010fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x16:
0010fe 85ae      	LDD  R26,Y+14
0010ff 85bf      	LDD  R27,Y+14+1
001100 85ec      	LDD  R30,Y+12
001101 85fd      	LDD  R31,Y+12+1
001102 1bea      	SUB  R30,R26
001103 0bfb      	SBC  R31,R27
001104 9631      	ADIW R30,1
001105 2766      	CLR  R22
001106 2777      	CLR  R23
                +
001107 83ea     +STD Y + 2 , R30
001108 83fb     +STD Y + 2 + 1 , R31
001109 836c     +STD Y + 2 + 2 , R22
00110a 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00110b 81ad      	LDD  R26,Y+5
00110c 23aa      	TST  R26
00110d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
                +
00110e 81ea     +LDD R30 , Y + 2
00110f 81fb     +LDD R31 , Y + 2 + 1
001110 816c     +LDD R22 , Y + 2 + 2
001111 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
001112 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
                +
001113 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
001114 efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
001115 ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
001116 ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
001117 940e 155b 	CALL __MULD12
                +
001119 83ea     +STD Y + 2 , R30
00111a 83fb     +STD Y + 2 + 1 , R31
00111b 836c     +STD Y + 2 + 2 , R22
00111c 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00111d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x19:
00111e 01f8      	MOVW R30,R16
                +
00111f 81aa     +LDD R26 , Y + 2
001120 81bb     +LDD R27 , Y + 2 + 1
001121 818c     +LDD R24 , Y + 2 + 2
001122 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001123 940e 1529 	CALL __CWD1
001125 940e 155b 	CALL __MULD12
                +
001127 83ea     +STD Y + 2 , R30
001128 83fb     +STD Y + 2 + 1 , R31
001129 836c     +STD Y + 2 + 2 , R22
00112a 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00112b e0e0      	LDI  R30,LOW(0)
                +
00112c 83ee     +STD Y + 6 , R30
00112d 83ef     +STD Y + 6 + 1 , R30
00112e 87e8     +STD Y + 6 + 2 , R30
00112f 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
001130 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
001131 dfdc      	RCALL SUBOPT_0x17
                +
001132 81ae     +LDD R26 , Y + 6
001133 81bf     +LDD R27 , Y + 6 + 1
001134 8588     +LDD R24 , Y + 6 + 2
001135 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
001136 940e 15f4 	CALL __CPD21
001138 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
                +
001139 81ee     +LDD R30 , Y + 6
00113a 81ff     +LDD R31 , Y + 6 + 1
00113b 8568     +LDD R22 , Y + 6 + 2
00113c 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
00113d 5fef     +SUBI R30 , LOW ( - 1 )
00113e 4fff     +SBCI R31 , HIGH ( - 1 )
00113f 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001140 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
001141 83ee     +STD Y + 6 , R30
001142 83ff     +STD Y + 6 + 1 , R31
001143 8768     +STD Y + 6 + 2 , R22
001144 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
001145 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
001146 e0f0      	LDI  R31,0
001147 8dab      	LDD  R26,Y+27
001148 8dbc      	LDD  R27,Y+27+1
001149 0fea      	ADD  R30,R26
00114a 1ffb      	ADC  R31,R27
00114b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
00114c 85e8      	LDD  R30,Y+8
00114d 85f9      	LDD  R31,Y+8+1
00114e 1bea      	SUB  R30,R26
00114f 0bfb      	SBC  R31,R27
001150 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
001151 85ac      	LDD  R26,Y+12
001152 85bd      	LDD  R27,Y+12+1
001153 0fea      	ADD  R30,R26
001154 1ffb      	ADC  R31,R27
001155 93fa      	ST   -Y,R31
001156 93ea      	ST   -Y,R30
001157 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1F:
001158 93ea      	ST   -Y,R30
001159 940e 1071 	CALL _spi
                +
00115b e980     +LDI R24 , LOW ( 400 )
00115c e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00115d 9701     +SBIW R24 , 1
00115e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00115f e0e0      	LDI  R30,LOW(0)
001160 93ea      	ST   -Y,R30
001161 940e 1071 	CALL _spi
001163 2f0e      	MOV  R16,R30
001164 2711      	CLR  R17
001165 2f10      	MOV  R17,R16
001166 2700      	CLR  R16
001167 e0e0      	LDI  R30,LOW(0)
001168 93ea      	ST   -Y,R30
001169 940e 1071 	CALL _spi
00116b e0f0      	LDI  R31,0
                +
00116c 0f0e     +ADD R16 , R30
00116d 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
00116e 9a1a      	SBI  0x3,2
00116f 01f8      	MOVW R30,R16
001170 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
001171 01f8      	MOVW R30,R16
001172 940e 1529 	CALL __CWD1
001174 940e 148c 	CALL __CDF1
001176 01df      	MOVW R26,R30
001177 01cb      	MOVW R24,R22
001178 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
001179 940e 14ba 	CALL __DIVF21
00117b 940e 1455 	CALL __CFD1
00117d 018f      	MOVW R16,R30
00117e 01f8      	MOVW R30,R16
00117f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x22:
001180 e0e0      	LDI  R30,LOW(0)
001181 93e0 05b7 	STS  _tempX,R30
001183 93e0 05b8 	STS  _tempX+1,R30
001185 93e0 05b9 	STS  _tempX+2,R30
001187 93e0 05ba 	STS  _tempX+3,R30
001189 93e0 05bb 	STS  _tempY,R30
00118b 93e0 05bc 	STS  _tempY+1,R30
00118d 93e0 05bd 	STS  _tempY+2,R30
00118f 93e0 05be 	STS  _tempY+3,R30
001191 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x23:
001192 940e 0966 	CALL _TSC2046_getX
001194 91a0 05b7 	LDS  R26,_tempX
001196 91b0 05b8 	LDS  R27,_tempX+1
001198 9180 05b9 	LDS  R24,_tempX+2
00119a 9190 05ba 	LDS  R25,_tempX+3
00119c 2766      	CLR  R22
00119d 2777      	CLR  R23
00119e 940e 14ff 	CALL __ADDD12
0011a0 93e0 05b7 	STS  _tempX,R30
0011a2 93f0 05b8 	STS  _tempX+1,R31
0011a4 9360 05b9 	STS  _tempX+2,R22
0011a6 9370 05ba 	STS  _tempX+3,R23
0011a8 940e 0979 	CALL _TSC2046_getY
0011aa 91a0 05bb 	LDS  R26,_tempY
0011ac 91b0 05bc 	LDS  R27,_tempY+1
0011ae 9180 05bd 	LDS  R24,_tempY+2
0011b0 9190 05be 	LDS  R25,_tempY+3
0011b2 2766      	CLR  R22
0011b3 2777      	CLR  R23
0011b4 940e 14ff 	CALL __ADDD12
0011b6 93e0 05bb 	STS  _tempY,R30
0011b8 93f0 05bc 	STS  _tempY+1,R31
0011ba 9360 05bd 	STS  _tempY+2,R22
0011bc 9370 05be 	STS  _tempY+3,R23
0011be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x24:
0011bf 91a0 05b7 	LDS  R26,_tempX
0011c1 91b0 05b8 	LDS  R27,_tempX+1
0011c3 9180 05b9 	LDS  R24,_tempX+2
0011c5 9190 05ba 	LDS  R25,_tempX+3
                +
0011c7 e1e0     +LDI R30 , LOW ( 0x10 )
0011c8 e0f0     +LDI R31 , HIGH ( 0x10 )
0011c9 e060     +LDI R22 , BYTE3 ( 0x10 )
0011ca e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0011cb 940e 1598 	CALL __DIVD21
0011cd 013f      	MOVW R6,R30
0011ce 91a0 05bb 	LDS  R26,_tempY
0011d0 91b0 05bc 	LDS  R27,_tempY+1
0011d2 9180 05bd 	LDS  R24,_tempY+2
0011d4 9190 05be 	LDS  R25,_tempY+3
                +
0011d6 e1e0     +LDI R30 , LOW ( 0x10 )
0011d7 e0f0     +LDI R31 , HIGH ( 0x10 )
0011d8 e060     +LDI R22 , BYTE3 ( 0x10 )
0011d9 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0011da 940e 1598 	CALL __DIVD21
0011dc 014f      	MOVW R8,R30
0011dd 940c 094f 	JMP  _TSC2046_Stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
0011df 93aa      	ST   -Y,R26
0011e0 93ea      	ST   -Y,R30
0011e1 93fa      	ST   -Y,R31
0011e2 b7ef      	IN   R30,SREG
0011e3 93ea      	ST   -Y,R30
0011e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
0011e5 50e1      	SUBI R30,LOW(1)
0011e6 e0f0      	LDI  R31,0
0011e7 52ea      	SUBI R30,LOW(-_rx_buffer0)
0011e8 4ff8      	SBCI R31,HIGH(-_rx_buffer0)
0011e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
0011ea 50e1      	SUBI R30,LOW(1)
0011eb e0f0      	LDI  R31,0
0011ec 5ae7      	SUBI R30,LOW(-_tx_buffer0)
0011ed 4ff7      	SBCI R31,HIGH(-_tx_buffer0)
0011ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
0011ef 50e1      	SUBI R30,LOW(1)
0011f0 e0f0      	LDI  R31,0
0011f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
0011f2 e6a2      	LDI  R26,LOW(98)
0011f3 e0b0      	LDI  R27,HIGH(98)
0011f4 2f6a      	MOV  R22,R26
0011f5 901c      	LD   R1,X
0011f6 81e9      	LDD  R30,Y+1
0011f7 e0a1      	LDI  R26,LOW(1)
0011f8 940e 1510 	CALL __LSLB12
0011fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2A:
0011fb 91ed      	LD   R30,X+
0011fc 91fd      	LD   R31,X+
0011fd 9631      	ADIW R30,1
0011fe 93fe      	ST   -X,R31
0011ff 93ee      	ST   -X,R30
001200 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
001201 e0e4      	LDI  R30,LOW(4)
001202 93ea      	ST   -Y,R30
001203 e0e1      	LDI  R30,LOW(1)
001204 93ea      	ST   -Y,R30
001205 940c 0acb 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
001207 e0e5      	LDI  R30,LOW(5)
001208 93ea      	ST   -Y,R30
001209 e0e1      	LDI  R30,LOW(1)
00120a 93ea      	ST   -Y,R30
00120b 940c 0acb 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2D:
00120d e0e3      	LDI  R30,LOW(3)
00120e 93ea      	ST   -Y,R30
00120f e0e1      	LDI  R30,LOW(1)
001210 93ea      	ST   -Y,R30
001211 940c 0acb 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
001213 93ea      	ST   -Y,R30
001214 e0e0      	LDI  R30,LOW(0)
001215 93ea      	ST   -Y,R30
001216 940c 0acb 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2F:
001218 91e0 090e 	LDS  R30,_BTN1_X_Begin
00121a 91f0 090f 	LDS  R31,_BTN1_X_Begin+1
00121c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
00121d 91e0 0910 	LDS  R30,_BTN1_X_End
00121f 91f0 0911 	LDS  R31,_BTN1_X_End+1
001221 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x31:
001222 91e0 090a 	LDS  R30,_BTN1_Y_Begin
001224 91f0 090b 	LDS  R31,_BTN1_Y_Begin+1
001226 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
001227 91e0 090c 	LDS  R30,_BTN1_Y_End
001229 91f0 090d 	LDS  R31,_BTN1_Y_End+1
00122b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
00122c 91e0 0916 	LDS  R30,_BTN2_X_Begin
00122e 91f0 0917 	LDS  R31,_BTN2_X_Begin+1
001230 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
001231 91e0 0918 	LDS  R30,_BTN2_X_End
001233 91f0 0919 	LDS  R31,_BTN2_X_End+1
001235 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
001236 91e0 0912 	LDS  R30,_BTN2_Y_Begin
001238 91f0 0913 	LDS  R31,_BTN2_Y_Begin+1
00123a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
00123b 91e0 0914 	LDS  R30,_BTN2_Y_End
00123d 91f0 0915 	LDS  R31,_BTN2_Y_End+1
00123f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
001240 91e0 091e 	LDS  R30,_BTN3_X_Begin
001242 91f0 091f 	LDS  R31,_BTN3_X_Begin+1
001244 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
001245 91e0 0920 	LDS  R30,_BTN3_X_End
001247 91f0 0921 	LDS  R31,_BTN3_X_End+1
001249 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
00124a 91e0 091a 	LDS  R30,_BTN3_Y_Begin
00124c 91f0 091b 	LDS  R31,_BTN3_Y_Begin+1
00124e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
00124f 91e0 091c 	LDS  R30,_BTN3_Y_End
001251 91f0 091d 	LDS  R31,_BTN3_Y_End+1
001253 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3B:
001254 91e0 0926 	LDS  R30,_BTN4_X_Begin
001256 91f0 0927 	LDS  R31,_BTN4_X_Begin+1
001258 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
001259 91e0 0928 	LDS  R30,_BTN4_X_End
00125b 91f0 0929 	LDS  R31,_BTN4_X_End+1
00125d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3D:
00125e 91e0 0922 	LDS  R30,_BTN4_Y_Begin
001260 91f0 0923 	LDS  R31,_BTN4_Y_Begin+1
001262 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
001263 91e0 0924 	LDS  R30,_BTN4_Y_End
001265 91f0 0925 	LDS  R31,_BTN4_Y_End+1
001267 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3F:
001268 e0f0      	LDI  R31,0
001269 30e1      	CPI  R30,LOW(0x1)
00126a e0a0      	LDI  R26,HIGH(0x1)
00126b 07fa      	CPC  R31,R26
00126c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x40:
00126d 93fa      	ST   -Y,R31
00126e 93ea      	ST   -Y,R30
00126f dfa8      	RCALL SUBOPT_0x2F
001270 963a      	ADIW R30,10
001271 93fa      	ST   -Y,R31
001272 93ea      	ST   -Y,R30
001273 cfae      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
001274 963f      	ADIW R30,15
001275 9738      	SBIW R30,8
001276 93fa      	ST   -Y,R31
001277 93ea      	ST   -Y,R30
001278 ce53      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
001279 940e 07ff 	CALL _SSD1963_PutString16
00127b 81ed      	LDD  R30,Y+5
00127c 81fe      	LDD  R31,Y+5+1
00127d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
00127e 93fa      	ST   -Y,R31
00127f 93ea      	ST   -Y,R30
001280 dfab      	RCALL SUBOPT_0x33
001281 963a      	ADIW R30,10
001282 93fa      	ST   -Y,R31
001283 93ea      	ST   -Y,R30
001284 cfb1      	RJMP SUBOPT_0x35
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x44:
001285 93fa      	ST   -Y,R31
001286 93ea      	ST   -Y,R30
001287 dfb8      	RCALL SUBOPT_0x37
001288 963a      	ADIW R30,10
001289 93fa      	ST   -Y,R31
00128a 93ea      	ST   -Y,R30
00128b cfbe      	RJMP SUBOPT_0x39
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x45:
00128c 93fa      	ST   -Y,R31
00128d 93ea      	ST   -Y,R30
00128e dfc5      	RCALL SUBOPT_0x3B
00128f 963a      	ADIW R30,10
001290 93fa      	ST   -Y,R31
001291 93ea      	ST   -Y,R30
001292 cfcb      	RJMP SUBOPT_0x3D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x46:
001293 93fa      	ST   -Y,R31
001294 93ea      	ST   -Y,R30
001295 efef      	LDI  R30,LOW(65535)
001296 efff      	LDI  R31,HIGH(65535)
001297 93fa      	ST   -Y,R31
001298 93ea      	ST   -Y,R30
001299 940c 091f 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x47:
00129b 9731      	SBIW R30,1
00129c 93fa      	ST   -Y,R31
00129d 93ea      	ST   -Y,R30
00129e e0e1      	LDI  R30,LOW(1)
00129f e0f0      	LDI  R31,HIGH(1)
0012a0 ce1c      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x48:
0012a1 efef      	LDI  R30,LOW(65535)
0012a2 efff      	LDI  R31,HIGH(65535)
0012a3 93fa      	ST   -Y,R31
0012a4 93ea      	ST   -Y,R30
0012a5 940c 0bef 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x49:
0012a7 93fa      	ST   -Y,R31
0012a8 93ea      	ST   -Y,R30
0012a9 e0e2      	LDI  R30,LOW(2)
0012aa 93ea      	ST   -Y,R30
0012ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4A:
0012ac 93fa      	ST   -Y,R31
0012ad 93ea      	ST   -Y,R30
0012ae e0e4      	LDI  R30,LOW(4)
0012af 93ea      	ST   -Y,R30
0012b0 ce07      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4B:
0012b1 972d      	SBIW R28,13
0012b2 e0e7      	LDI  R30,LOW(7)
0012b3 83e9      	STD  Y+1,R30
0012b4 eee0      	LDI  R30,LOW(224)
0012b5 83ea      	STD  Y+2,R30
0012b6 e0e7      	LDI  R30,LOW(7)
0012b7 83eb      	STD  Y+3,R30
0012b8 efef      	LDI  R30,LOW(255)
0012b9 83ec      	STD  Y+4,R30
0012ba e0e0      	LDI  R30,LOW(0)
0012bb 83ed      	STD  Y+5,R30
0012bc e1ef      	LDI  R30,LOW(31)
0012bd 83ee      	STD  Y+6,R30
0012be 940e 15f9 	CALL __SAVELOCR6
                +
0012c0 e0a2     +LDI R26 , LOW ( _WorkParameters + ( 2 ) )
0012c1 e0b0     +LDI R27 , HIGH ( _WorkParameters + ( 2 ) )
                 	__POINTW2MN _WorkParameters,2
0012c2 940e 15cb 	CALL __EEPROMRDW
0012c4 018f      	MOVW R16,R30
                +
0012c5 e82d     +LDI R18 , LOW ( 141 )
0012c6 e030     +LDI R19 , HIGH ( 141 )
                 	__GETWRN 18,19,141
0012c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:127 WORDS
                 SUBOPT_0x4C:
0012c8 91e0 094a 	LDS  R30,_Cardio_X
0012ca 91f0 094b 	LDS  R31,_Cardio_X+1
0012cc 93fa      	ST   -Y,R31
0012cd 93ea      	ST   -Y,R30
0012ce 01f8      	MOVW R30,R16
0012cf 91a0 094a 	LDS  R26,_Cardio_X
0012d1 91b0 094b 	LDS  R27,_Cardio_X+1
0012d3 0fea      	ADD  R30,R26
0012d4 1ffb      	ADC  R31,R27
0012d5 93fa      	ST   -Y,R31
0012d6 93ea      	ST   -Y,R30
0012d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x4D:
0012d8 e3e2      	LDI  R30,LOW(50)
0012d9 e0f0      	LDI  R31,HIGH(50)
0012da 93fa      	ST   -Y,R31
0012db 93ea      	ST   -Y,R30
0012dc eee9      	LDI  R30,LOW(233)
0012dd e0f0      	LDI  R31,HIGH(233)
0012de cdde      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4E:
0012df e0e8      	LDI  R30,LOW(8456)
0012e0 e2f1      	LDI  R31,HIGH(8456)
0012e1 93fa      	ST   -Y,R31
0012e2 93ea      	ST   -Y,R30
0012e3 940e 0819 	CALL _SSD1963_DrawFastLine
0012e5 cfe2      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4F:
0012e6 93fa      	ST   -Y,R31
0012e7 93ea      	ST   -Y,R30
0012e8 e0e8      	LDI  R30,LOW(8456)
0012e9 e2f1      	LDI  R31,HIGH(8456)
0012ea 93fa      	ST   -Y,R31
0012eb 93ea      	ST   -Y,R30
0012ec 940e 0819 	CALL _SSD1963_DrawFastLine
0012ee e0e0      	LDI  R30,LOW(0)
0012ef 83ee      	STD  Y+6,R30
0012f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:129 WORDS
                 SUBOPT_0x50:
0012f1 81ee      	LDD  R30,Y+6
0012f2 e0f0      	LDI  R31,0
0012f3 01de      	MOVW R26,R28
0012f4 961d      	ADIW R26,13
0012f5 0fee      	LSL  R30
0012f6 1fff      	ROL  R31
0012f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
0012f8 0fae      	ADD  R26,R30
0012f9 1fbf      	ADC  R27,R31
0012fa 91ed      	LD   R30,X+
0012fb 91fd      	LD   R31,X+
0012fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
0012fd 58e0      	SUBI R30,LOW(128)
0012fe 40f0      	SBCI R31,HIGH(128)
0012ff 93fe      	ST   -X,R31
001300 93ee      	ST   -X,R30
001301 cfef      	RJMP SUBOPT_0x50
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x53:
001302 0fea      	ADD  R30,R26
001303 1ffb      	ADC  R31,R27
001304 01bf      	MOVW R22,R30
001305 01df      	MOVW R26,R30
001306 940e 15be 	CALL __GETW1P
001308 91a0 0966 	LDS  R26,_multiplier
00130a 91b0 0967 	LDS  R27,_multiplier+1
00130c 940e 1556 	CALL __MULW12
00130e 01db      	MOVW R26,R22
00130f 93ed      	ST   X+,R30
001310 93fc      	ST   X,R31
001311 cfdf      	RJMP SUBOPT_0x50
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
001312 940e 1522 	CALL __ASRW3
001314 940e 1520 	CALL __ASRW4
001316 93fe      	ST   -X,R31
001317 93ee      	ST   -X,R30
001318 cfd8      	RJMP SUBOPT_0x50
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x55:
001319 0fae      	ADD  R26,R30
00131a 1fbf      	ADC  R27,R31
00131b 940e 15be 	CALL __GETW1P
00131d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x56:
00131e 0fae      	ADD  R26,R30
00131f 1fbf      	ADC  R27,R31
001320 eee7      	LDI  R30,LOW(231)
001321 e0f0      	LDI  R31,HIGH(231)
001322 93ed      	ST   X+,R30
001323 93fc      	ST   X,R31
001324 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x57:
001325 0fae      	ADD  R26,R30
001326 1fbf      	ADC  R27,R31
001327 e3e2      	LDI  R30,LOW(50)
001328 e0f0      	LDI  R31,HIGH(50)
001329 93ed      	ST   X+,R30
00132a 93fc      	ST   X,R31
00132b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x58:
00132c 85ea      	LDD  R30,Y+10
00132d e6a0      	LDI  R26,LOW(_ValueLast)
00132e e0b9      	LDI  R27,HIGH(_ValueLast)
00132f e0f0      	LDI  R31,0
001330 0fee      	LSL  R30
001331 1fff      	ROL  R31
001332 cfe6      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x59:
001333 93fa      	ST   -Y,R31
001334 93ea      	ST   -Y,R30
001335 85ec      	LDD  R30,Y+12
001336 e0f0      	LDI  R31,0
001337 01de      	MOVW R26,R28
001338 9653      	ADIW R26,19
001339 0fee      	LSL  R30
00133a 1fff      	ROL  R31
00133b cfdd      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5A:
00133c 93fa      	ST   -Y,R31
00133d 93ea      	ST   -Y,R30
00133e 85ee      	LDD  R30,Y+14
00133f e0f0      	LDI  R31,0
001340 01de      	MOVW R26,R28
001341 961f      	ADIW R26,15
001342 0fee      	LSL  R30
001343 1fff      	ROL  R31
001344 cfd4      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5B:
001345 940e 0834 	CALL _SSD1963_DrawLine
001347 81ee      	LDD  R30,Y+6
001348 e6a0      	LDI  R26,LOW(_ValueLast)
001349 e0b9      	LDI  R27,HIGH(_ValueLast)
00134a e0f0      	LDI  R31,0
00134b 0fee      	LSL  R30
00134c 1fff      	ROL  R31
00134d 0fea      	ADD  R30,R26
00134e 1ffb      	ADC  R31,R27
00134f 010f      	MOVW R0,R30
001350 cfa0      	RJMP SUBOPT_0x50
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x5C:
001351 01f8      	MOVW R30,R16
001352 91a0 094a 	LDS  R26,_Cardio_X
001354 91b0 094b 	LDS  R27,_Cardio_X+1
001356 0fea      	ADD  R30,R26
001357 1ffb      	ADC  R31,R27
001358 93e0 094a 	STS  _Cardio_X,R30
00135a 93f0 094b 	STS  _Cardio_X+1,R31
00135c eee0      	LDI  R30,LOW(480)
00135d e0f1      	LDI  R31,HIGH(480)
00135e 1be0      	SUB  R30,R16
00135f 0bf1      	SBC  R31,R17
001360 91a0 094a 	LDS  R26,_Cardio_X
001362 91b0 094b 	LDS  R27,_Cardio_X+1
001364 17ea      	CP   R30,R26
001365 07fb      	CPC  R31,R27
001366 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5D:
001367 91e0 094a 	LDS  R30,_Cardio_X
001369 91f0 094b 	LDS  R31,_Cardio_X+1
00136b 93fa      	ST   -Y,R31
00136c 93ea      	ST   -Y,R30
00136d eee0      	LDI  R30,LOW(480)
00136e e0f1      	LDI  R31,HIGH(480)
00136f 93fa      	ST   -Y,R31
001370 93ea      	ST   -Y,R30
001371 cf66      	RJMP SUBOPT_0x4D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5E:
001372 940e 091f 	CALL _SSD1963_DrawFillRect
001374 e0e0      	LDI  R30,LOW(0)
001375 93e0 094a 	STS  _Cardio_X,R30
001377 93e0 094b 	STS  _Cardio_X+1,R30
001379 cf4e      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5F:
00137a 0fea      	ADD  R30,R26
00137b 1ffb      	ADC  R31,R27
00137c 010f      	MOVW R0,R30
00137d 01df      	MOVW R26,R30
00137e 940e 15be 	CALL __GETW1P
001380 01df      	MOVW R26,R30
001381 01f9      	MOVW R30,R18
001382 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x60:
001383 93fa      	ST   -Y,R31
001384 93ea      	ST   -Y,R30
001385 81ed      	LDD  R30,Y+5
001386 e0f0      	LDI  R31,0
001387 93fa      	ST   -Y,R31
001388 93ea      	ST   -Y,R30
001389 81ee      	LDD  R30,Y+6
00138a e0f0      	LDI  R31,0
00138b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x61:
00138c 93fa      	ST   -Y,R31
00138d 93ea      	ST   -Y,R30
00138e 81ee      	LDD  R30,Y+6
00138f 81ff      	LDD  R31,Y+6+1
001390 cd2c      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
001391 e0f0      	LDI  R31,0
001392 9730      	SBIW R30,0
001393 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x63:
001394 e0e6      	LDI  R30,LOW(6)
001395 93ea      	ST   -Y,R30
001396 e0e1      	LDI  R30,LOW(1)
001397 93ea      	ST   -Y,R30
001398 940c 0acb 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x64:
00139a e0f0      	LDI  R31,0
00139b 0fee      	LSL  R30
00139c 1fff      	ROL  R31
00139d 0fea      	ADD  R30,R26
00139e 1ffb      	ADC  R31,R27
00139f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x65:
0013a0 93fa      	ST   -Y,R31
0013a1 93ea      	ST   -Y,R30
0013a2 ece0      	LDI  R30,LOW(192)
0013a3 e0f0      	LDI  R31,HIGH(192)
0013a4 93fa      	ST   -Y,R31
0013a5 93ea      	ST   -Y,R30
0013a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x66:
0013a7 93fa      	ST   -Y,R31
0013a8 93ea      	ST   -Y,R30
0013a9 e0e0      	LDI  R30,LOW(7936)
0013aa e1ff      	LDI  R31,HIGH(7936)
0013ab cd11      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x67:
0013ac 940e 07ff 	CALL _SSD1963_PutString16
0013ae e2ec      	LDI  R30,LOW(300)
0013af e0f1      	LDI  R31,HIGH(300)
0013b0 ccdc      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x68:
0013b1 91e0 0952 	LDS  R30,_Parameter_Counter
0013b3 93ea      	ST   -Y,R30
0013b4 e1ee      	LDI  R30,LOW(30)
0013b5 93ea      	ST   -Y,R30
0013b6 e1e0      	LDI  R30,LOW(16)
0013b7 93ea      	ST   -Y,R30
0013b8 efe8      	LDI  R30,LOW(248)
0013b9 e0f0      	LDI  R31,HIGH(248)
0013ba 93fa      	ST   -Y,R31
0013bb 93ea      	ST   -Y,R30
0013bc 940c 0e15 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x69:
0013be e0e0      	LDI  R30,LOW(0)
0013bf 93e0 095a 	STS  _Sleep_mSec,R30
0013c1 93e0 095b 	STS  _Sleep_mSec+1,R30
0013c3 940e 0b89 	CALL _GetButton
0013c5 93e0 092a 	STS  _Button_Pressed,R30
0013c7 cea0      	RJMP SUBOPT_0x3F
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
0013c8 9890      	cbi  __i2c_port,__scl_bit
0013c9 9891      	cbi  __i2c_port,__sda_bit
0013ca 9a88      	sbi  __i2c_dir,__scl_bit
0013cb 9889      	cbi  __i2c_dir,__sda_bit
0013cc c015      	rjmp __i2c_delay2
                 _i2c_start:
0013cd 9889      	cbi  __i2c_dir,__sda_bit
0013ce 9888      	cbi  __i2c_dir,__scl_bit
0013cf 27ee      	clr  r30
0013d0 0000      	nop
0013d1 9b81      	sbis __i2c_pin,__sda_bit
0013d2 9508      	ret
0013d3 9b80      	sbis __i2c_pin,__scl_bit
0013d4 9508      	ret
0013d5 d004      	rcall __i2c_delay1
0013d6 9a89      	sbi  __i2c_dir,__sda_bit
0013d7 d002      	rcall __i2c_delay1
0013d8 9a88      	sbi  __i2c_dir,__scl_bit
0013d9 e0e1      	ldi  r30,1
                 __i2c_delay1:
0013da e16b      	ldi  r22,27
0013db c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0013dc 9a89      	sbi  __i2c_dir,__sda_bit
0013dd 9a88      	sbi  __i2c_dir,__scl_bit
0013de d003      	rcall __i2c_delay2
0013df 9888      	cbi  __i2c_dir,__scl_bit
0013e0 dff9      	rcall __i2c_delay1
0013e1 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0013e2 e365      	ldi  r22,53
                 __i2c_delay2l:
0013e3 956a      	dec  r22
0013e4 f7f1      	brne __i2c_delay2l
0013e5 9508      	ret
                 _i2c_read:
0013e6 e078      	ldi  r23,8
                 __i2c_read0:
0013e7 9888      	cbi  __i2c_dir,__scl_bit
0013e8 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0013e9 9b80      	sbis __i2c_pin,__scl_bit
0013ea cffe      	rjmp __i2c_read3
0013eb dfee      	rcall __i2c_delay1
0013ec 9488      	clc
0013ed 9981      	sbic __i2c_pin,__sda_bit
0013ee 9408      	sec
0013ef 9a88      	sbi  __i2c_dir,__scl_bit
0013f0 dff1      	rcall __i2c_delay2
0013f1 1fee      	rol  r30
0013f2 957a      	dec  r23
0013f3 f799      	brne __i2c_read0
0013f4 9179      	ld   r23,y+
0013f5 2377      	tst  r23
0013f6 f411      	brne __i2c_read1
0013f7 9889      	cbi  __i2c_dir,__sda_bit
0013f8 c001      	rjmp __i2c_read2
                 __i2c_read1:
0013f9 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0013fa dfdf      	rcall __i2c_delay1
0013fb 9888      	cbi  __i2c_dir,__scl_bit
0013fc dfe5      	rcall __i2c_delay2
0013fd 9a88      	sbi  __i2c_dir,__scl_bit
0013fe dfdb      	rcall __i2c_delay1
0013ff 9889      	cbi  __i2c_dir,__sda_bit
001400 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
001401 91e9      	ld   r30,y+
001402 e078      	ldi  r23,8
                 __i2c_write0:
001403 0fee      	lsl  r30
001404 f410      	brcc __i2c_write1
001405 9889      	cbi  __i2c_dir,__sda_bit
001406 c001      	rjmp __i2c_write2
                 __i2c_write1:
001407 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
001408 dfd9      	rcall __i2c_delay2
001409 9888      	cbi  __i2c_dir,__scl_bit
00140a dfcf      	rcall __i2c_delay1
                 __i2c_write3:
00140b 9b80      	sbis __i2c_pin,__scl_bit
00140c cffe      	rjmp __i2c_write3
00140d dfcc      	rcall __i2c_delay1
00140e 9a88      	sbi  __i2c_dir,__scl_bit
00140f 957a      	dec  r23
001410 f791      	brne __i2c_write0
001411 9889      	cbi  __i2c_dir,__sda_bit
001412 dfc7      	rcall __i2c_delay1
001413 9888      	cbi  __i2c_dir,__scl_bit
001414 dfcd      	rcall __i2c_delay2
001415 e0e1      	ldi  r30,1
001416 9981      	sbic __i2c_pin,__sda_bit
001417 27ee      	clr  r30
001418 9a88      	sbi  __i2c_dir,__scl_bit
001419 cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
00141a 91e9      	ld   r30,y+
00141b 91f9      	ld   r31,y+
00141c 9630      	adiw r30,0
00141d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00141e ea80     +LDI R24 , LOW ( 0xFA0 )
00141f e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
001420 9701     +SBIW R24 , 1
001421 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
001422 95a8      	wdr
001423 9731      	sbiw r30,1
001424 f7c9      	brne __delay_ms0
                 __delay_ms1:
001425 9508      	ret
                 
                 __ROUND_REPACK:
001426 2355      	TST  R21
001427 f442      	BRPL __REPACK
001428 3850      	CPI  R21,0x80
001429 f411      	BRNE __ROUND_REPACK0
00142a ffe0      	SBRS R30,0
00142b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00142c 9631      	ADIW R30,1
00142d 1f69      	ADC  R22,R25
00142e 1f79      	ADC  R23,R25
00142f f06b      	BRVS __REPACK1
                 
                 __REPACK:
001430 e850      	LDI  R21,0x80
001431 2757      	EOR  R21,R23
001432 f411      	BRNE __REPACK0
001433 935f      	PUSH R21
001434 c073      	RJMP __ZERORES
                 __REPACK0:
001435 3f5f      	CPI  R21,0xFF
001436 f031      	BREQ __REPACK1
001437 0f66      	LSL  R22
001438 0c00      	LSL  R0
001439 9557      	ROR  R21
00143a 9567      	ROR  R22
00143b 2f75      	MOV  R23,R21
00143c 9508      	RET
                 __REPACK1:
00143d 935f      	PUSH R21
00143e 2000      	TST  R0
00143f f00a      	BRMI __REPACK2
001440 c073      	RJMP __MAXRES
                 __REPACK2:
001441 c06c      	RJMP __MINRES
                 
                 __UNPACK:
001442 e850      	LDI  R21,0x80
001443 2e19      	MOV  R1,R25
001444 2215      	AND  R1,R21
001445 0f88      	LSL  R24
001446 1f99      	ROL  R25
001447 2795      	EOR  R25,R21
001448 0f55      	LSL  R21
001449 9587      	ROR  R24
                 
                 __UNPACK1:
00144a e850      	LDI  R21,0x80
00144b 2e07      	MOV  R0,R23
00144c 2205      	AND  R0,R21
00144d 0f66      	LSL  R22
00144e 1f77      	ROL  R23
00144f 2775      	EOR  R23,R21
001450 0f55      	LSL  R21
001451 9567      	ROR  R22
001452 9508      	RET
                 
                 __CFD1U:
001453 9468      	SET
001454 c001      	RJMP __CFD1U0
                 __CFD1:
001455 94e8      	CLT
                 __CFD1U0:
001456 935f      	PUSH R21
001457 dff2      	RCALL __UNPACK1
001458 3870      	CPI  R23,0x80
001459 f018      	BRLO __CFD10
00145a 3f7f      	CPI  R23,0xFF
00145b f408      	BRCC __CFD10
00145c c04b      	RJMP __ZERORES
                 __CFD10:
00145d e156      	LDI  R21,22
00145e 1b57      	SUB  R21,R23
00145f f4aa      	BRPL __CFD11
001460 9551      	NEG  R21
001461 3058      	CPI  R21,8
001462 f40e      	BRTC __CFD19
001463 3059      	CPI  R21,9
                 __CFD19:
001464 f030      	BRLO __CFD17
001465 efef      	SER  R30
001466 efff      	SER  R31
001467 ef6f      	SER  R22
001468 e77f      	LDI  R23,0x7F
001469 f977      	BLD  R23,7
00146a c01a      	RJMP __CFD15
                 __CFD17:
00146b 2777      	CLR  R23
00146c 2355      	TST  R21
00146d f0b9      	BREQ __CFD15
                 __CFD18:
00146e 0fee      	LSL  R30
00146f 1fff      	ROL  R31
001470 1f66      	ROL  R22
001471 1f77      	ROL  R23
001472 955a      	DEC  R21
001473 f7d1      	BRNE __CFD18
001474 c010      	RJMP __CFD15
                 __CFD11:
001475 2777      	CLR  R23
                 __CFD12:
001476 3058      	CPI  R21,8
001477 f028      	BRLO __CFD13
001478 2fef      	MOV  R30,R31
001479 2ff6      	MOV  R31,R22
00147a 2f67      	MOV  R22,R23
00147b 5058      	SUBI R21,8
00147c cff9      	RJMP __CFD12
                 __CFD13:
00147d 2355      	TST  R21
00147e f031      	BREQ __CFD15
                 __CFD14:
00147f 9576      	LSR  R23
001480 9567      	ROR  R22
001481 95f7      	ROR  R31
001482 95e7      	ROR  R30
001483 955a      	DEC  R21
001484 f7d1      	BRNE __CFD14
                 __CFD15:
001485 2000      	TST  R0
001486 f40a      	BRPL __CFD16
001487 d080      	RCALL __ANEGD1
                 __CFD16:
001488 915f      	POP  R21
001489 9508      	RET
                 
                 __CDF1U:
00148a 9468      	SET
00148b c001      	RJMP __CDF1U0
                 __CDF1:
00148c 94e8      	CLT
                 __CDF1U0:
00148d 9730      	SBIW R30,0
00148e 4060      	SBCI R22,0
00148f 4070      	SBCI R23,0
001490 f0b1      	BREQ __CDF10
001491 2400      	CLR  R0
001492 f026      	BRTS __CDF11
001493 2377      	TST  R23
001494 f412      	BRPL __CDF11
001495 9400      	COM  R0
001496 d071      	RCALL __ANEGD1
                 __CDF11:
001497 2e17      	MOV  R1,R23
001498 e17e      	LDI  R23,30
001499 2011      	TST  R1
                 __CDF12:
00149a f032      	BRMI __CDF13
00149b 957a      	DEC  R23
00149c 0fee      	LSL  R30
00149d 1fff      	ROL  R31
00149e 1f66      	ROL  R22
00149f 1c11      	ROL  R1
0014a0 cff9      	RJMP __CDF12
                 __CDF13:
0014a1 2fef      	MOV  R30,R31
0014a2 2ff6      	MOV  R31,R22
0014a3 2d61      	MOV  R22,R1
0014a4 935f      	PUSH R21
0014a5 df8a      	RCALL __REPACK
0014a6 915f      	POP  R21
                 __CDF10:
0014a7 9508      	RET
                 
                 __ZERORES:
0014a8 27ee      	CLR  R30
0014a9 27ff      	CLR  R31
0014aa 2766      	CLR  R22
0014ab 2777      	CLR  R23
0014ac 915f      	POP  R21
0014ad 9508      	RET
                 
                 __MINRES:
0014ae efef      	SER  R30
0014af efff      	SER  R31
0014b0 e76f      	LDI  R22,0x7F
0014b1 ef7f      	SER  R23
0014b2 915f      	POP  R21
0014b3 9508      	RET
                 
                 __MAXRES:
0014b4 efef      	SER  R30
0014b5 efff      	SER  R31
0014b6 e76f      	LDI  R22,0x7F
0014b7 e77f      	LDI  R23,0x7F
0014b8 915f      	POP  R21
0014b9 9508      	RET
                 
                 __DIVF21:
0014ba 935f      	PUSH R21
0014bb df86      	RCALL __UNPACK
0014bc 3870      	CPI  R23,0x80
0014bd f421      	BRNE __DIVF210
0014be 2011      	TST  R1
                 __DIVF211:
0014bf f40a      	BRPL __DIVF219
0014c0 cfed      	RJMP __MINRES
                 __DIVF219:
0014c1 cff2      	RJMP __MAXRES
                 __DIVF210:
0014c2 3890      	CPI  R25,0x80
0014c3 f409      	BRNE __DIVF218
                 __DIVF217:
0014c4 cfe3      	RJMP __ZERORES
                 __DIVF218:
0014c5 2401      	EOR  R0,R1
0014c6 9408      	SEC
0014c7 0b97      	SBC  R25,R23
0014c8 f41b      	BRVC __DIVF216
0014c9 f3d4      	BRLT __DIVF217
0014ca 2000      	TST  R0
0014cb cff3      	RJMP __DIVF211
                 __DIVF216:
0014cc 2f79      	MOV  R23,R25
0014cd 931f      	PUSH R17
0014ce 932f      	PUSH R18
0014cf 933f      	PUSH R19
0014d0 934f      	PUSH R20
0014d1 2411      	CLR  R1
0014d2 2711      	CLR  R17
0014d3 2722      	CLR  R18
0014d4 2733      	CLR  R19
0014d5 2744      	CLR  R20
0014d6 2755      	CLR  R21
0014d7 e290      	LDI  R25,32
                 __DIVF212:
0014d8 17ae      	CP   R26,R30
0014d9 07bf      	CPC  R27,R31
0014da 0786      	CPC  R24,R22
0014db 0741      	CPC  R20,R17
0014dc f030      	BRLO __DIVF213
0014dd 1bae      	SUB  R26,R30
0014de 0bbf      	SBC  R27,R31
0014df 0b86      	SBC  R24,R22
0014e0 0b41      	SBC  R20,R17
0014e1 9408      	SEC
0014e2 c001      	RJMP __DIVF214
                 __DIVF213:
0014e3 9488      	CLC
                 __DIVF214:
0014e4 1f55      	ROL  R21
0014e5 1f22      	ROL  R18
0014e6 1f33      	ROL  R19
0014e7 1c11      	ROL  R1
0014e8 1faa      	ROL  R26
0014e9 1fbb      	ROL  R27
0014ea 1f88      	ROL  R24
0014eb 1f44      	ROL  R20
0014ec 959a      	DEC  R25
0014ed f751      	BRNE __DIVF212
0014ee 01f9      	MOVW R30,R18
0014ef 2d61      	MOV  R22,R1
0014f0 914f      	POP  R20
0014f1 913f      	POP  R19
0014f2 912f      	POP  R18
0014f3 911f      	POP  R17
0014f4 2366      	TST  R22
0014f5 f032      	BRMI __DIVF215
0014f6 0f55      	LSL  R21
0014f7 1fee      	ROL  R30
0014f8 1fff      	ROL  R31
0014f9 1f66      	ROL  R22
0014fa 957a      	DEC  R23
0014fb f243      	BRVS __DIVF217
                 __DIVF215:
0014fc df29      	RCALL __ROUND_REPACK
0014fd 915f      	POP  R21
0014fe 9508      	RET
                 
                 __ADDD12:
0014ff 0fea      	ADD  R30,R26
001500 1ffb      	ADC  R31,R27
001501 1f68      	ADC  R22,R24
001502 1f79      	ADC  R23,R25
001503 9508      	RET
                 
                 __ANEGW1:
001504 95f1      	NEG  R31
001505 95e1      	NEG  R30
001506 40f0      	SBCI R31,0
001507 9508      	RET
                 
                 __ANEGD1:
001508 95f0      	COM  R31
001509 9560      	COM  R22
00150a 9570      	COM  R23
00150b 95e1      	NEG  R30
00150c 4fff      	SBCI R31,-1
00150d 4f6f      	SBCI R22,-1
00150e 4f7f      	SBCI R23,-1
00150f 9508      	RET
                 
                 __LSLB12:
001510 23ee      	TST  R30
001511 2e0e      	MOV  R0,R30
001512 2fea      	MOV  R30,R26
001513 f019      	BREQ __LSLB12R
                 __LSLB12L:
001514 0fee      	LSL  R30
001515 940a      	DEC  R0
001516 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
001517 9508      	RET
                 
                 __LSRB12:
001518 23ee      	TST  R30
001519 2e0e      	MOV  R0,R30
00151a 2fea      	MOV  R30,R26
00151b f019      	BREQ __LSRB12R
                 __LSRB12L:
00151c 95e6      	LSR  R30
00151d 940a      	DEC  R0
00151e f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00151f 9508      	RET
                 
                 __ASRW4:
001520 95f5      	ASR  R31
001521 95e7      	ROR  R30
                 __ASRW3:
001522 95f5      	ASR  R31
001523 95e7      	ROR  R30
                 __ASRW2:
001524 95f5      	ASR  R31
001525 95e7      	ROR  R30
001526 95f5      	ASR  R31
001527 95e7      	ROR  R30
001528 9508      	RET
                 
                 __CWD1:
001529 2f6f      	MOV  R22,R31
00152a 0f66      	ADD  R22,R22
00152b 0b66      	SBC  R22,R22
00152c 2f76      	MOV  R23,R22
00152d 9508      	RET
                 
                 __MULW12U:
00152e 9ffa      	MUL  R31,R26
00152f 2df0      	MOV  R31,R0
001530 9feb      	MUL  R30,R27
001531 0df0      	ADD  R31,R0
001532 9fea      	MUL  R30,R26
001533 2de0      	MOV  R30,R0
001534 0df1      	ADD  R31,R1
001535 9508      	RET
                 
                 __MULD12U:
001536 9f7a      	MUL  R23,R26
001537 2d70      	MOV  R23,R0
001538 9f6b      	MUL  R22,R27
001539 0d70      	ADD  R23,R0
00153a 9ff8      	MUL  R31,R24
00153b 0d70      	ADD  R23,R0
00153c 9fe9      	MUL  R30,R25
00153d 0d70      	ADD  R23,R0
00153e 9f6a      	MUL  R22,R26
00153f 2d60      	MOV  R22,R0
001540 0d71      	ADD  R23,R1
001541 9ffb      	MUL  R31,R27
001542 0d60      	ADD  R22,R0
001543 1d71      	ADC  R23,R1
001544 9fe8      	MUL  R30,R24
001545 0d60      	ADD  R22,R0
001546 1d71      	ADC  R23,R1
001547 2788      	CLR  R24
001548 9ffa      	MUL  R31,R26
001549 2df0      	MOV  R31,R0
00154a 0d61      	ADD  R22,R1
00154b 1f78      	ADC  R23,R24
00154c 9feb      	MUL  R30,R27
00154d 0df0      	ADD  R31,R0
00154e 1d61      	ADC  R22,R1
00154f 1f78      	ADC  R23,R24
001550 9fea      	MUL  R30,R26
001551 2de0      	MOV  R30,R0
001552 0df1      	ADD  R31,R1
001553 1f68      	ADC  R22,R24
001554 1f78      	ADC  R23,R24
001555 9508      	RET
                 
                 __MULW12:
001556 d046      	RCALL __CHKSIGNW
001557 dfd6      	RCALL __MULW12U
001558 f40e      	BRTC __MULW121
001559 dfaa      	RCALL __ANEGW1
                 __MULW121:
00155a 9508      	RET
                 
                 __MULD12:
00155b d04f      	RCALL __CHKSIGND
00155c dfd9      	RCALL __MULD12U
00155d f40e      	BRTC __MULD121
00155e dfa9      	RCALL __ANEGD1
                 __MULD121:
00155f 9508      	RET
                 
                 __DIVW21U:
001560 2400      	CLR  R0
001561 2411      	CLR  R1
001562 e190      	LDI  R25,16
                 __DIVW21U1:
001563 0faa      	LSL  R26
001564 1fbb      	ROL  R27
001565 1c00      	ROL  R0
001566 1c11      	ROL  R1
001567 1a0e      	SUB  R0,R30
001568 0a1f      	SBC  R1,R31
001569 f418      	BRCC __DIVW21U2
00156a 0e0e      	ADD  R0,R30
00156b 1e1f      	ADC  R1,R31
00156c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00156d 60a1      	SBR  R26,1
                 __DIVW21U3:
00156e 959a      	DEC  R25
00156f f799      	BRNE __DIVW21U1
001570 01fd      	MOVW R30,R26
001571 01d0      	MOVW R26,R0
001572 9508      	RET
                 
                 __DIVD21U:
001573 933f      	PUSH R19
001574 934f      	PUSH R20
001575 935f      	PUSH R21
001576 2400      	CLR  R0
001577 2411      	CLR  R1
001578 2744      	CLR  R20
001579 2755      	CLR  R21
00157a e230      	LDI  R19,32
                 __DIVD21U1:
00157b 0faa      	LSL  R26
00157c 1fbb      	ROL  R27
00157d 1f88      	ROL  R24
00157e 1f99      	ROL  R25
00157f 1c00      	ROL  R0
001580 1c11      	ROL  R1
001581 1f44      	ROL  R20
001582 1f55      	ROL  R21
001583 1a0e      	SUB  R0,R30
001584 0a1f      	SBC  R1,R31
001585 0b46      	SBC  R20,R22
001586 0b57      	SBC  R21,R23
001587 f428      	BRCC __DIVD21U2
001588 0e0e      	ADD  R0,R30
001589 1e1f      	ADC  R1,R31
00158a 1f46      	ADC  R20,R22
00158b 1f57      	ADC  R21,R23
00158c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00158d 60a1      	SBR  R26,1
                 __DIVD21U3:
00158e 953a      	DEC  R19
00158f f759      	BRNE __DIVD21U1
001590 01fd      	MOVW R30,R26
001591 01bc      	MOVW R22,R24
001592 01d0      	MOVW R26,R0
001593 01ca      	MOVW R24,R20
001594 915f      	POP  R21
001595 914f      	POP  R20
001596 913f      	POP  R19
001597 9508      	RET
                 
                 __DIVD21:
001598 d012      	RCALL __CHKSIGND
001599 dfd9      	RCALL __DIVD21U
00159a f40e      	BRTC __DIVD211
00159b df6c      	RCALL __ANEGD1
                 __DIVD211:
00159c 9508      	RET
                 
                 __CHKSIGNW:
00159d 94e8      	CLT
00159e fff7      	SBRS R31,7
00159f c002      	RJMP __CHKSW1
0015a0 df63      	RCALL __ANEGW1
0015a1 9468      	SET
                 __CHKSW1:
0015a2 ffb7      	SBRS R27,7
0015a3 c006      	RJMP __CHKSW2
0015a4 95a0      	COM  R26
0015a5 95b0      	COM  R27
0015a6 9611      	ADIW R26,1
0015a7 f800      	BLD  R0,0
0015a8 9403      	INC  R0
0015a9 fa00      	BST  R0,0
                 __CHKSW2:
0015aa 9508      	RET
                 
                 __CHKSIGND:
0015ab 94e8      	CLT
0015ac ff77      	SBRS R23,7
0015ad c002      	RJMP __CHKSD1
0015ae df59      	RCALL __ANEGD1
0015af 9468      	SET
                 __CHKSD1:
0015b0 ff97      	SBRS R25,7
0015b1 c00b      	RJMP __CHKSD2
0015b2 2400      	CLR  R0
0015b3 95a0      	COM  R26
0015b4 95b0      	COM  R27
0015b5 9580      	COM  R24
0015b6 9590      	COM  R25
0015b7 9611      	ADIW R26,1
0015b8 1d80      	ADC  R24,R0
0015b9 1d90      	ADC  R25,R0
0015ba f800      	BLD  R0,0
0015bb 9403      	INC  R0
0015bc fa00      	BST  R0,0
                 __CHKSD2:
0015bd 9508      	RET
                 
                 __GETW1P:
0015be 91ed      	LD   R30,X+
0015bf 91fc      	LD   R31,X
0015c0 9711      	SBIW R26,1
0015c1 9508      	RET
                 
                 __PUTDP1:
0015c2 93ed      	ST   X+,R30
0015c3 93fd      	ST   X+,R31
0015c4 936d      	ST   X+,R22
0015c5 937c      	ST   X,R23
0015c6 9508      	RET
                 
                 __GETW1PF:
0015c7 9005      	LPM  R0,Z+
0015c8 91f4      	LPM  R31,Z
0015c9 2de0      	MOV  R30,R0
0015ca 9508      	RET
                 
                 __EEPROMRDW:
0015cb 9611      	ADIW R26,1
0015cc d002      	RCALL __EEPROMRDB
0015cd 2ffe      	MOV  R31,R30
0015ce 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0015cf 99e1      	SBIC EECR,EEWE
0015d0 cffe      	RJMP __EEPROMRDB
0015d1 93ff      	PUSH R31
0015d2 b7ff      	IN   R31,SREG
0015d3 94f8      	CLI
0015d4 bbae      	OUT  EEARL,R26
0015d5 bbbf      	OUT  EEARH,R27
0015d6 9ae0      	SBI  EECR,EERE
0015d7 b3ed      	IN   R30,EEDR
0015d8 bfff      	OUT  SREG,R31
0015d9 91ff      	POP  R31
0015da 9508      	RET
                 
                 __EEPROMWRW:
0015db d007      	RCALL __EEPROMWRB
0015dc 9611      	ADIW R26,1
0015dd 93ef      	PUSH R30
0015de 2fef      	MOV  R30,R31
0015df d003      	RCALL __EEPROMWRB
0015e0 91ef      	POP  R30
0015e1 9711      	SBIW R26,1
0015e2 9508      	RET
                 
                 __EEPROMWRB:
0015e3 9be1      	SBIS EECR,EEWE
0015e4 c002      	RJMP __EEPROMWRB1
0015e5 95a8      	WDR
0015e6 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0015e7 b79f      	IN   R25,SREG
0015e8 94f8      	CLI
0015e9 bbae      	OUT  EEARL,R26
0015ea bbbf      	OUT  EEARH,R27
0015eb 9ae0      	SBI  EECR,EERE
0015ec b38d      	IN   R24,EEDR
0015ed 17e8      	CP   R30,R24
0015ee f019      	BREQ __EEPROMWRB0
0015ef bbed      	OUT  EEDR,R30
0015f0 9ae2      	SBI  EECR,EEMWE
0015f1 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0015f2 bf9f      	OUT  SREG,R25
0015f3 9508      	RET
                 
                 __CPD21:
0015f4 17ae      	CP   R26,R30
0015f5 07bf      	CPC  R27,R31
0015f6 0786      	CPC  R24,R22
0015f7 0797      	CPC  R25,R23
0015f8 9508      	RET
                 
                 __SAVELOCR6:
0015f9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0015fa 934a      	ST   -Y,R20
                 __SAVELOCR4:
0015fb 933a      	ST   -Y,R19
                 __SAVELOCR3:
0015fc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0015fd 931a      	ST   -Y,R17
0015fe 930a      	ST   -Y,R16
0015ff 9508      	RET
                 
                 __LOADLOCR6:
001600 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001601 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001602 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001603 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001604 8119      	LDD  R17,Y+1
001605 8108      	LD   R16,Y
001606 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  59 r1 :  34 r2 :   2 r3 :   0 r4 :   8 r5 :   0 r6 :   9 r7 :   8 
r8 :   9 r9 :   8 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  58 r17:  62 r18:  25 r19:  18 r20:  21 r21:  50 r22:  75 r23:  73 
r24:  47 r25:  35 r26: 397 r27: 126 r28:  24 r29:   1 r30:1150 r31: 551 
x  :  43 y  : 594 z  :  17 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  38 add   :  35 
adiw  :  53 and   :   4 andi  :  11 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  24 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   5 brmi  :   3 brne  : 120 brpl  :  13 brsh  :  28 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 454 
cbi   :  29 cbr   :   0 clc   :   2 clh   :   0 cli   :   7 cln   :   0 
clr   :  38 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  11 
cp    :  32 cpc   : 115 cpi   : 132 cpse  :   0 dec   :  14 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   9 inc   :   4 jmp   :  61 ld    :  54 ldd   : 181 
ldi   : 629 lds   : 132 lpm   :  12 lsl   :  23 lsr   :   2 mov   :  42 
movw  :  59 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :  10 
or    :   4 ori   :   2 out   :  64 pop   :  15 push  :  14 rcall :  87 
ret   : 122 reti  :   2 rjmp  : 183 rol   :  37 ror   :  12 sbc   :  16 
sbci  :  20 sbi   :  34 sbic  :   5 sbis  :   6 sbiw  :  38 sbr   :   2 
sbrc  :   0 sbrs  :   5 sec   :   3 seh   :   0 sei   :   5 sen   :   0 
ser   :   8 ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 343 std   :  66 sts   : 103 sub   :  11 subi  :  38 
swap  :   1 tst   :  19 wdr   :   2 
Instructions used: 79 out of 117 (67.5%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002c0e   8976   2302  11278  131072   8.6%
[.dseg] 0x000100 0x00096c      0   1132   1132    4351  26.0%
[.eseg] 0x000000 0x000007      0      7      7    4096   0.2%

Assembly complete, 0 errors, 20 warnings
