
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm Tue Jul 28 15:42:45 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1061): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1065): warning: Register r12 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1066): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rtc_status=R5
                 	.DEF _TOUCH_X=R6
                 	.DEF _TOUCH_Y=R8
                 	.DEF _TOUCH_X_LAST=R10
                 	.DEF _TOUCH_Y_LAST=R12
                 	.DEF _i=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 04bb 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0a92 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 09ae 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 09f1 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0a31 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0a5c 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _Default_Parameters:
0003e6 01f4
0003e7 000a
0003e8 012c      	.DB  0xF4,0x1,0xA,0x0,0x2C,0x1
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0003e9 0000      	.DW  0x0000
                 
                 _0x182:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1409): warning: .cseg .db misalignment - padding zero byte
0003ea 00f0      	.DB  0xF0
                 _0x183:
0003eb 010e      	.DB  0xE,0x1
                 _0x184:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1413): warning: .cseg .db misalignment - padding zero byte
0003ec 0064      	.DB  0x64
                 _0x185:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1415): warning: .cseg .db misalignment - padding zero byte
0003ed 00f0      	.DB  0xF0
                 _0x186:
0003ee 010e      	.DB  0xE,0x1
                 _0x187:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1419): warning: .cseg .db misalignment - padding zero byte
0003ef 0078      	.DB  0x78
                 _0x188:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1421): warning: .cseg .db misalignment - padding zero byte
0003f0 00dc      	.DB  0xDC
                 _0x189:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1423): warning: .cseg .db misalignment - padding zero byte
0003f1 00f0      	.DB  0xF0
                 _0x18A:
0003f2 010e      	.DB  0xE,0x1
                 _0x18B:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1427): warning: .cseg .db misalignment - padding zero byte
0003f3 00f0      	.DB  0xF0
                 _0x18C:
0003f4 0154      	.DB  0x54,0x1
                 _0x18D:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1431): warning: .cseg .db misalignment - padding zero byte
0003f5 00f0      	.DB  0xF0
                 _0x18E:
0003f6 010e      	.DB  0xE,0x1
                 _0x18F:
0003f7 0168      	.DB  0x68,0x1
                 _0x190:
0003f8 01cc      	.DB  0xCC,0x1
                 _0x191:
0003f9 0bb8      	.DB  0xB8,0xB
                 _0x192:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1441): warning: .cseg .db misalignment - padding zero byte
0003fa 00fa      	.DB  0xFA
                 _0x193:
0003fb 03e8      	.DB  0xE8,0x3
                 _0x0:
0003fc 2020
0003fd 2020
0003fe 0020
0003ff c5cc      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xCC,0xC5
000400 decd
000401 2000
000402 2b20
000403 2000      	.DB  0xCD,0xDE,0x0,0x20,0x20,0x2B,0x0,0x20
000404 2d20
000405 cf00
000406 d3c0
000407 c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
000408 2000
000409 2020
00040a 2020
00040b 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00040c 2020
00040d 2020
00040e 2020
00040f 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000410 0020
000411 c0cd
000412 d0cf
000413 c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
000414 cdc5
000415 c5c8
000416 d400
000417 c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
000418 d200
000419 cace
00041a cd00
00041b cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
00041c dfd0
00041d c5c6
00041e c8cd
00041f 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000420 20c8
000421 ced2
000422 00ca
000423 cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
000424 c1c7
000425 c6d3
000426 c5c4
000427 c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
000428 00df
000429 c5c4
00042a cad1
00042b ccce      	.DB  0xDF,0x0,0xC4,0xC5,0xD1,0xCA,0xCE,0xCC
00042c d100
00042d c0d2
00042e d2d0
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1457): warning: .cseg .db misalignment - padding zero byte
00042f 0000      	.DB  0x0,0xD1,0xD2,0xC0,0xD0,0xD2,0x0
                 _0x2080060:
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1459): warning: .cseg .db misalignment - padding zero byte
000430 0001      	.DB  0x1
                 _0x2080000:
000431 4e2d
000432 4e41
000433 4900
000434 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Проекты от студии\mnsauV3 (07.07.15)\CONTR_MODULE_128\Release\List\CONTROL_MODULE.asm(1462): warning: .cseg .db misalignment - padding zero byte
000435 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000436 0001      	.DW  0x01
000437 0002      	.DW  0x02
000438 07d2      	.DW  __REG_BIT_VARS*2
                 
000439 0001      	.DW  0x01
00043a 0802      	.DW  _BTN1_Y_Begin
00043b 07d4      	.DW  _0x182*2
                 
00043c 0002      	.DW  0x02
00043d 0804      	.DW  _BTN1_Y_End
00043e 07d6      	.DW  _0x183*2
                 
00043f 0001      	.DW  0x01
000440 0808      	.DW  _BTN1_X_End
000441 07d8      	.DW  _0x184*2
                 
000442 0001      	.DW  0x01
000443 080a      	.DW  _BTN2_Y_Begin
000444 07da      	.DW  _0x185*2
                 
000445 0002      	.DW  0x02
000446 080c      	.DW  _BTN2_Y_End
000447 07dc      	.DW  _0x186*2
                 
000448 0001      	.DW  0x01
000449 080e      	.DW  _BTN2_X_Begin
00044a 07de      	.DW  _0x187*2
                 
00044b 0001      	.DW  0x01
00044c 0810      	.DW  _BTN2_X_End
00044d 07e0      	.DW  _0x188*2
                 
00044e 0001      	.DW  0x01
00044f 0812      	.DW  _BTN3_Y_Begin
000450 07e2      	.DW  _0x189*2
                 
000451 0002      	.DW  0x02
000452 0814      	.DW  _BTN3_Y_End
000453 07e4      	.DW  _0x18A*2
                 
000454 0001      	.DW  0x01
000455 0816      	.DW  _BTN3_X_Begin
000456 07e6      	.DW  _0x18B*2
                 
000457 0002      	.DW  0x02
000458 0818      	.DW  _BTN3_X_End
000459 07e8      	.DW  _0x18C*2
                 
00045a 0001      	.DW  0x01
00045b 081a      	.DW  _BTN4_Y_Begin
00045c 07ea      	.DW  _0x18D*2
                 
00045d 0002      	.DW  0x02
00045e 081c      	.DW  _BTN4_Y_End
00045f 07ec      	.DW  _0x18E*2
                 
000460 0002      	.DW  0x02
000461 081e      	.DW  _BTN4_X_Begin
000462 07ee      	.DW  _0x18F*2
                 
000463 0002      	.DW  0x02
000464 0820      	.DW  _BTN4_X_End
000465 07f0      	.DW  _0x190*2
                 
000466 0002      	.DW  0x02
000467 082e      	.DW  _LEDGREEN_max
000468 07f2      	.DW  _0x191*2
                 
000469 0001      	.DW  0x01
00046a 0830      	.DW  _LEDRED_max
00046b 07f4      	.DW  _0x192*2
                 
00046c 0002      	.DW  0x02
00046d 0832      	.DW  _LEDBLUE_max
00046e 07f6      	.DW  _0x193*2
                 
00046f 0006      	.DW  0x06
000470 0500      	.DW  _0x1C6
000471 07f8      	.DW  _0x0*2
                 
000472 0006      	.DW  0x06
000473 0506      	.DW  _0x1C6+6
000474 07f8      	.DW  _0x0*2
                 
000475 0006      	.DW  0x06
000476 050c      	.DW  _0x1C6+12
000477 07f8      	.DW  _0x0*2
                 
000478 0006      	.DW  0x06
000479 0512      	.DW  _0x1C6+18
00047a 07f8      	.DW  _0x0*2
                 
00047b 0005      	.DW  0x05
00047c 0518      	.DW  _0x1CA
00047d 07fe      	.DW  _0x0*2+6
                 
00047e 0004      	.DW  0x04
00047f 051d      	.DW  _0x1CA+5
000480 0803      	.DW  _0x0*2+11
                 
000481 0004      	.DW  0x04
000482 0521      	.DW  _0x1CA+9
000483 0807      	.DW  _0x0*2+15
                 
000484 0006      	.DW  0x06
000485 0525      	.DW  _0x1CA+13
000486 080b      	.DW  _0x0*2+19
                 
000487 0011      	.DW  0x11
000488 052b      	.DW  _0x1E0
000489 0811      	.DW  _0x0*2+25
                 
00048a 0011      	.DW  0x11
00048b 053c      	.DW  _0x1E0+17
00048c 0811      	.DW  _0x0*2+25
                 
00048d 000b      	.DW  0x0B
00048e 054d      	.DW  _0x1E0+34
00048f 0822      	.DW  _0x0*2+42
                 
000490 0004      	.DW  0x04
000491 0558      	.DW  _0x1E0+45
000492 082d      	.DW  _0x0*2+53
                 
000493 0004      	.DW  0x04
000494 055c      	.DW  _0x1E0+49
000495 0831      	.DW  _0x0*2+57
                 
000496 0004      	.DW  0x04
000497 0560      	.DW  _0x1E0+53
000498 082d      	.DW  _0x0*2+53
                 
000499 0011      	.DW  0x11
00049a 0564      	.DW  _0x1E0+57
00049b 0835      	.DW  _0x0*2+61
                 
00049c 000c      	.DW  0x0C
00049d 0575      	.DW  _0x1E0+74
00049e 0846      	.DW  _0x0*2+78
                 
00049f 0007      	.DW  0x07
0004a0 0581      	.DW  _0x1EB
0004a1 0852      	.DW  _0x0*2+90
                 
0004a2 0007      	.DW  0x07
0004a3 0588      	.DW  _0x1EB+7
0004a4 0852      	.DW  _0x0*2+90
                 
0004a5 0007      	.DW  0x07
0004a6 058f      	.DW  _0x1EB+14
0004a7 0852      	.DW  _0x0*2+90
                 
0004a8 0007      	.DW  0x07
0004a9 0596      	.DW  _0x1EB+21
0004aa 081b      	.DW  _0x0*2+35
                 
0004ab 0007      	.DW  0x07
0004ac 059d      	.DW  _0x1EB+28
0004ad 081b      	.DW  _0x0*2+35
                 
0004ae 0007      	.DW  0x07
0004af 05a4      	.DW  _0x1EB+35
0004b0 081b      	.DW  _0x0*2+35
                 
0004b1 0006      	.DW  0x06
0004b2 05ab      	.DW  _0x1EB+42
0004b3 0859      	.DW  _0x0*2+97
                 
0004b4 0006      	.DW  0x06
0004b5 05b1      	.DW  _0x1EB+48
0004b6 080b      	.DW  _0x0*2+19
                 
0004b7 0001      	.DW  0x01
0004b8 0858      	.DW  __seed_G104
0004b9 0860      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
0004ba 0000      	.DW  0
                 
                 __RESET:
0004bb 94f8      	CLI
0004bc 27ee      	CLR  R30
0004bd bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0004be e0f1      	LDI  R31,1
0004bf bff5      	OUT  MCUCR,R31
0004c0 bfe5      	OUT  MCUCR,R30
0004c1 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0004c3 e1f8      	LDI  R31,0x18
0004c4 bdf1      	OUT  WDTCR,R31
0004c5 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0004c6 e08d      	LDI  R24,(14-2)+1
0004c7 e0a2      	LDI  R26,2
0004c8 27bb      	CLR  R27
                 __CLEAR_REG:
0004c9 93ed      	ST   X+,R30
0004ca 958a      	DEC  R24
0004cb f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0004cc e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0004cd e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0004ce e0a0      	LDI  R26,LOW(__SRAM_START)
0004cf e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0004d0 93ed      	ST   X+,R30
0004d1 9701      	SBIW R24,1
0004d2 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0004d3 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0004d4 e0f8      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0004d5 9185      	LPM  R24,Z+
0004d6 9195      	LPM  R25,Z+
0004d7 9700      	SBIW R24,0
0004d8 f061      	BREQ __GLOBAL_INI_END
0004d9 91a5      	LPM  R26,Z+
0004da 91b5      	LPM  R27,Z+
0004db 9005      	LPM  R0,Z+
0004dc 9015      	LPM  R1,Z+
0004dd 01bf      	MOVW R22,R30
0004de 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0004df 9005      	LPM  R0,Z+
0004e0 920d      	ST   X+,R0
0004e1 9701      	SBIW R24,1
0004e2 f7e1      	BRNE __GLOBAL_INI_LOOP
0004e3 01fb      	MOVW R30,R22
0004e4 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0004e5 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0004e6 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0004e7 bfed      	OUT  SPL,R30
0004e8 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0004e9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0004ea e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0004eb e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0004ec 940c 0da1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <spi.h>
                 ;#include <string.h>
                 ;#include "PCF8583.h"
                 ;unsigned char rtc_status;
                 ;bit rtc_alarm;
                 ;
                 ;unsigned char rtc_read(unsigned char chip,unsigned char address)
                 ; 0000 0006 {
                 
                 	.CSEG
                 ;unsigned char a;
                 ;a=(chip<<1)|0xa0;
                 ;	chip -> Y+2
                 ;	address -> Y+1
                 ;	a -> R17
                 ;i2c_start();
                 ;i2c_write(a);
                 ;i2c_write(address);
                 ;i2c_start();
                 ;i2c_write(a|1);
                 ;a=i2c_read(0);
                 ;i2c_stop();
                 ;return a;
                 ;}
                 ;
                 ;void rtc_write(unsigned char chip, unsigned char address,unsigned char data)
                 ;{
                 ;i2c_start();
                 ;	chip -> Y+2
                 ;	address -> Y+1
                 ;	data -> Y+0
                 ;i2c_write((chip<<1)|0xa0);
                 ;i2c_write(address);
                 ;i2c_write(data);
                 ;i2c_stop();
                 ;}
                 ;
                 ;unsigned char rtc_get_status(unsigned char chip)
                 ;{
                 ;rtc_status=rtc_read(chip,0);
                 ;	chip -> Y+0
                 ;rtc_alarm=(rtc_status&2);
                 ;return rtc_status;
                 ;}
                 ;
                 ;void rtc_init(unsigned char chip, unsigned char dated_alarm)
                 ;{
                 ;unsigned char d;
                 ;d=0x90;
                 ;	chip -> Y+2
                 ;	dated_alarm -> Y+1
                 ;	d -> R17
                 ;if (dated_alarm) d=0xb0;
                 ;rtc_status=0;
                 ;rtc_alarm=0;
                 ;rtc_write(chip,0,0);
                 ;rtc_write(chip,4,rtc_read(chip,4)&0x3f);
                 ;rtc_write(chip,8,d);
                 ;}
                 ;
                 ;void rtc_stop(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status|=0x80;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_start(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status&=0x7f;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_hold_off(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status&=0xbf;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;void rtc_hold_on(unsigned char chip)
                 ;{
                 ;rtc_get_status(chip);
                 ;	chip -> Y+0
                 ;rtc_status|=0x40;
                 ;rtc_write(chip,0,rtc_status);
                 ;}
                 ;
                 ;unsigned char rtc_read_bcd(unsigned char chip,unsigned char addr)
                 ;{
                 ;return bcd2bin(rtc_read(chip,addr));
                 ;	chip -> Y+1
                 ;	addr -> Y+0
                 ;}
                 ;
                 ;void rtc_write_bcd(unsigned char chip,unsigned char addr,unsigned char data)
                 ;{
                 ;rtc_write(chip,addr,bin2bcd(data));
                 ;	chip -> Y+2
                 ;	addr -> Y+1
                 ;	data -> Y+0
                 ;}
                 ;
                 ;void rtc_write_word(unsigned char chip,unsigned char addr,unsigned data)
                 ;{
                 ;rtc_write(chip,addr,(unsigned char) data&0xff);
                 ;	chip -> Y+3
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 ;rtc_write(chip,++addr,(unsigned char)(data>>8));
                 ;}
                 ;
                 ;void rtc_write_date(unsigned char chip,unsigned char addr,unsigned char date,
                 ;unsigned year)
                 ;{
                 ;rtc_write(chip,addr,bin2bcd(date)|(((unsigned char) year&3)<<6));
                 ;	chip -> Y+4
                 ;	addr -> Y+3
                 ;	date -> Y+2
                 ;	year -> Y+0
                 ;}
                 ;
                 ;void rtc_get_time(unsigned char chip,unsigned char *hour,unsigned char *min,
                 ;unsigned char *sec,unsigned char *hsec)
                 ;{
                 ;rtc_hold_on(chip);
                 ;	chip -> Y+8
                 ;	*hour -> Y+6
                 ;	*min -> Y+4
                 ;	*sec -> Y+2
                 ;	*hsec -> Y+0
                 ;*hsec=rtc_read_bcd(chip,1);
                 ;*sec=rtc_read_bcd(chip,2);
                 ;*min=rtc_read_bcd(chip,3);
                 ;*hour=rtc_read_bcd(chip,4);
                 ;rtc_hold_off(chip);
                 ;}
                 ;
                 ;void rtc_set_time(unsigned char chip,unsigned char hour,unsigned char min,
                 ;unsigned char sec,unsigned char hsec)
                 ;{
                 ;rtc_stop(chip);
                 ;	chip -> Y+4
                 ;	hour -> Y+3
                 ;	min -> Y+2
                 ;	sec -> Y+1
                 ;	hsec -> Y+0
                 ;rtc_write_bcd(chip,1,hsec);
                 ;rtc_write_bcd(chip,2,sec);
                 ;rtc_write_bcd(chip,3,min);
                 ;rtc_write_bcd(chip,4,hour);
                 ;rtc_start(chip);
                 ;}
                 ;
                 ;void rtc_get_date(unsigned char chip,unsigned char *date,unsigned char *month,
                 ;unsigned *year)
                 ;{
                 ;unsigned char dy;
                 ;unsigned y1;
                 ;rtc_hold_on(chip);
                 ;	chip -> Y+10
                 ;	*date -> Y+8
                 ;	*month -> Y+6
                 ;	*year -> Y+4
                 ;	dy -> R17
                 ;	y1 -> R18,R19
                 ;dy=rtc_read(chip,5);
                 ;*month=bcd2bin(rtc_read(chip,6)&0x1f);
                 ;rtc_hold_off(chip);
                 ;*date=bcd2bin(dy&0x3f);
                 ;dy>>=6;
                 ;y1=rtc_read(chip,0x10)|((unsigned) rtc_read(chip,0x11)<<8);
                 ;if (((unsigned char) y1&3)!=dy) rtc_write_word(chip,0x10,++y1);
                 ;*year=y1;
                 ;}
                 ;
                 ;void rtc_set_date(unsigned char chip,unsigned char date,unsigned char month,
                 ;unsigned year)
                 ;{
                 ;rtc_write_word(chip,0x10,year);
                 ;	chip -> Y+4
                 ;	date -> Y+3
                 ;	month -> Y+2
                 ;	year -> Y+0
                 ;rtc_stop(chip);
                 ;rtc_write_date(chip,5,date,year);
                 ;rtc_write_bcd(chip,6,month);
                 ;rtc_start(chip);
                 ;}
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;/*flash char RotationByte[256] =
                 ;{
                 ;0b00000000, //0
                 ;0b10000000, //128
                 ;0b01000000, //64
                 ;0b11000000, //192
                 ;0b00100000, //32
                 ;0b10100000, //160
                 ;0b01100000, //96
                 ;0b11100000, //224
                 ;0b00010000, //16
                 ;0b10010000, //144
                 ;0b01010000, //80
                 ;0b11010000, //208
                 ;0b00110000, //48
                 ;0b10110000, //176
                 ;0b01110000, //112
                 ;0b11110000, //240
                 ;0b00001000, //8
                 ;0b10001000, //136
                 ;0b01001000, //72
                 ;0b11001000, //200
                 ;0b00101000, //40
                 ;0b10101000, //168
                 ;0b01101000, //104
                 ;0b11101000, //232
                 ;0b00011000, //24
                 ;0b10011000, //152
                 ;0b01011000, //88
                 ;0b11011000, //216
                 ;0b00111000, //56
                 ;0b10111000, //184
                 ;0b01111000, //120
                 ;0b11111000, //248
                 ;0b00000100, //4
                 ;0b10000100, //132
                 ;0b01000100, //68
                 ;0b11000100, //196
                 ;0b00100100, //36
                 ;0b10100100, //164
                 ;0b01100100, //100
                 ;0b11100100, //228
                 ;0b00010100, //20
                 ;0b10010100, //148
                 ;0b01010100, //84
                 ;0b11010100, //212
                 ;0b00110100, //52
                 ;0b10110100, //180
                 ;0b01110100, //116
                 ;0b11110100, //244
                 ;0b00001100, //12
                 ;0b10001100, //140
                 ;0b01001100, //76
                 ;0b11001100, //204
                 ;0b00101100, //44
                 ;0b10101100, //172
                 ;0b01101100, //108
                 ;0b11101100, //236
                 ;0b00011100, //28
                 ;0b10011100, //156
                 ;0b01011100, //92
                 ;0b11011100, //220
                 ;0b00111100, //60
                 ;0b10111100, //188
                 ;0b01111100, //124
                 ;0b11111100, //252
                 ;0b00000010, //2
                 ;0b10000010, //130
                 ;0b01000010, //66
                 ;0b11000010, //194
                 ;0b00100010, //34
                 ;0b10100010, //162
                 ;0b01100010, //98
                 ;0b11100010, //226
                 ;0b00010010, //18
                 ;0b10010010, //146
                 ;0b01010010, //82
                 ;0b11010010, //210
                 ;0b00110010, //50
                 ;0b10110010, //178
                 ;0b01110010, //114
                 ;0b11110010, //242
                 ;0b00001010, //10
                 ;0b10001010, //138
                 ;0b01001010, //74
                 ;0b11001010, //202
                 ;0b00101010, //42
                 ;0b10101010, //170
                 ;0b01101010, //106
                 ;0b11101010, //234
                 ;0b00011010, //26
                 ;0b10011010, //154
                 ;0b01011010, //90
                 ;0b11011010, //218
                 ;0b00111010, //58
                 ;0b10111010, //186
                 ;0b01111010, //122
                 ;0b11111010, //250
                 ;0b00000110, //6
                 ;0b10000110, //134
                 ;0b01000110, //70
                 ;0b11000110, //198
                 ;0b00100110, //38
                 ;0b10100110, //166
                 ;0b01100110, //102
                 ;0b11100110, //230
                 ;0b00010110, //22
                 ;0b10010110, //150
                 ;0b01010110, //86
                 ;0b11010110, //214
                 ;0b00110110, //54
                 ;0b10110110, //182
                 ;0b01110110, //118
                 ;0b11110110, //246
                 ;0b00001110, //14
                 ;0b10001110, //142
                 ;0b01001110, //78
                 ;0b11001110, //206
                 ;0b00101110, //46
                 ;0b10101110, //174
                 ;0b01101110, //110
                 ;0b11101110, //238
                 ;0b00011110, //30
                 ;0b10011110, //158
                 ;0b01011110, //94
                 ;0b11011110, //222
                 ;0b00111110, //62
                 ;0b10111110, //190
                 ;0b01111110, //126
                 ;0b11111110, //254
                 ;0b00000001, //1
                 ;0b10000001, //129
                 ;0b01000001, //65
                 ;0b11000001, //193
                 ;0b00100001, //33
                 ;0b10100001, //161
                 ;0b01100001, //97
                 ;0b11100001, //225
                 ;0b00010001, //17
                 ;0b10010001, //145
                 ;0b01010001, //81
                 ;0b11010001, //209
                 ;0b00110001, //49
                 ;0b10110001, //177
                 ;0b01110001, //113
                 ;0b11110001, //241
                 ;0b00001001, //9
                 ;0b10001001, //137
                 ;0b01001001, //73
                 ;0b11001001, //201
                 ;0b00101001, //41
                 ;0b10101001, //169
                 ;0b01101001, //105
                 ;0b11101001, //233
                 ;0b00011001, //25
                 ;0b10011001, //153
                 ;0b01011001, //89
                 ;0b11011001, //217
                 ;0b00111001, //57
                 ;0b10111001, //185
                 ;0b01111001, //121
                 ;0b11111001, //249
                 ;0b00000101, //5
                 ;0b10000101, //133
                 ;0b01000101, //69
                 ;0b11000101, //197
                 ;0b00100101, //37
                 ;0b10100101, //165
                 ;0b01100101, //101
                 ;0b11100101, //229
                 ;0b00010101, //21
                 ;0b10010101, //149
                 ;0b01010101, //85
                 ;0b11010101, //213
                 ;0b00110101, //53
                 ;0b10110101, //181
                 ;0b01110101, //117
                 ;0b11110101, //245
                 ;0b00001101, //13
                 ;0b10001101, //141
                 ;0b01001101, //77
                 ;0b11001101, //205
                 ;0b00101101, //45
                 ;0b10101101, //173
                 ;0b01101101, //109
                 ;0b11101101, //237
                 ;0b00011101, //29
                 ;0b10011101, //157
                 ;0b01011101, //93
                 ;0b11011101, //221
                 ;0b00111101, //61
                 ;0b10111101, //189
                 ;0b01111101, //125
                 ;0b11111101, //253
                 ;0b00000011, //3
                 ;0b10000011, //131
                 ;0b01000011, //67
                 ;0b11000011, //195
                 ;0b00100011, //35
                 ;0b10100011, //163
                 ;0b01100011, //99
                 ;0b11100011, //227
                 ;0b00010011, //19
                 ;0b10010011, //147
                 ;0b01010011, //83
                 ;0b11010011, //211
                 ;0b00110011, //51
                 ;0b10110011, //179
                 ;0b01110011, //115
                 ;0b11110011, //243
                 ;0b00001011, //11
                 ;0b10001011, //139
                 ;0b01001011, //75
                 ;0b11001011, //203
                 ;0b00101011, //43
                 ;0b10101011, //171
                 ;0b01101011, //107
                 ;0b11101011, //235
                 ;0b00011011, //27
                 ;0b10011011, //155
                 ;0b01011011, //91
                 ;0b11011011, //219
                 ;0b00111011, //59
                 ;0b10111011, //187
                 ;0b01111011, //123
                 ;0b11111011, //251
                 ;0b00000111, //7
                 ;0b10000111, //135
                 ;0b01000111, //71
                 ;0b11000111, //199
                 ;0b00100111, //39
                 ;0b10100111, //167
                 ;0b01100111, //103
                 ;0b11100111, //231
                 ;0b00010111, //23
                 ;0b10010111, //151
                 ;0b01010111, //87
                 ;0b11010111, //215
                 ;0b00110111, //55
                 ;0b10110111, //183
                 ;0b01110111, //119
                 ;0b11110111, //247
                 ;0b00001111, //15
                 ;0b10001111, //143
                 ;0b01001111, //79
                 ;0b11001111, //207
                 ;0b00101111, //47
                 ;0b10101111, //175
                 ;0b01101111, //111
                 ;0b11101111, //239
                 ;0b00011111, //31
                 ;0b10011111, //159
                 ;0b01011111, //95
                 ;0b11011111, //223
                 ;0b00111111, //63
                 ;0b10111111, //191
                 ;0b01111111, //127
                 ;0b11111111, //255
                 ;};
                 ;*/
                 ;unsigned char RotateByte(unsigned char Value)
                 ; 0000 0008 {
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
0004ee 940e 0fa4 	CALL SUBOPT_0x0
0004f0 95f5      	ASR  R31
0004f1 95e7      	ROR  R30
0004f2 75e5      	ANDI R30,LOW(0x55)
0004f3 2fae      	MOV  R26,R30
0004f4 81e8      	LD   R30,Y
0004f5 0fee      	LSL  R30
0004f6 7aea      	ANDI R30,LOW(0xAA)
0004f7 2bea      	OR   R30,R26
0004f8 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
0004f9 940e 0fa4 	CALL SUBOPT_0x0
0004fb 940e 1427 	CALL __ASRW2
0004fd 73e3      	ANDI R30,LOW(0x33)
0004fe 2fae      	MOV  R26,R30
0004ff 81e8      	LD   R30,Y
000500 0fee      	LSL  R30
000501 0fee      	LSL  R30
000502 7cec      	ANDI R30,LOW(0xCC)
000503 2bea      	OR   R30,R26
000504 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
000505 940e 0fa4 	CALL SUBOPT_0x0
000507 940e 1423 	CALL __ASRW4
000509 70ef      	ANDI R30,LOW(0xF)
00050a 2fae      	MOV  R26,R30
00050b 81e8      	LD   R30,Y
00050c 95e2      	SWAP R30
00050d 7fe0      	ANDI R30,LOW(0xF0)
00050e 2bea      	OR   R30,R26
00050f 83e8      	ST   Y,R30
                 ;  return Value;
000510 c023      	RJMP _0x20C0006
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
000511 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
000512 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
000513 940e 0fa7 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
000515 981d      	CBI  0x3,5
                 ;  delay_ms(100);
000516 940e 0fa7 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
000518 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
000519 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
00051a 940e 0fa7 	CALL SUBOPT_0x1
                 ;}
00051c 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
00051d 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
00051e 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
00051f 940e 0fad 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
000521 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000522 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000523 9896      	CBI  0x12,6
                 ;  #asm("nop")
000524 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000525 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000526 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000527 0000      	nop
000528 c00b      	RJMP _0x20C0005
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
000529 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
00052a 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
00052b 940e 0fad 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
00052d 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00052e 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00052f 9896      	CBI  0x12,6
                 ;  #asm("nop")
000530 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000531 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000532 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000533 0000      	nop
                 _0x20C0005:
                 ;} // SSD1963_Writedata
                 _0x20C0006:
000534 9621      	ADIW R28,1
000535 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000536 931a      	ST   -Y,R17
000537 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
000538 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
000539 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
00053a 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
00053b 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
00053c bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
00053d bb05      	OUT  0x15,R16
                 ;  #asm("nop")
00053e 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00053f 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000540 9896      	CBI  0x12,6
                 ;  #asm("nop")
000541 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000542 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000543 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000544 0000      	nop
                 ;} // SSD1963_Writedata
000545 8119      	LDD  R17,Y+1
000546 8108      	LDD  R16,Y+0
000547 9624      	ADIW R28,4
000548 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_Reset();
000549 dfc7      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
00054a 940e 0fb5 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
00054c 940e 0fb5 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
00054e 940e 0fb5 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
000550 940e 0fb9 	CALL SUBOPT_0x4
000552 940e 12c6 	CALL _delay_ms
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
000554 eee2      	LDI  R30,LOW(226)
000555 93ea      	ST   -Y,R30
000556 dfc6      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
000557 e2e3      	LDI  R30,LOW(35)
000558 93ea      	ST   -Y,R30
000559 dfcf      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
00055a e0e2      	LDI  R30,LOW(2)
00055b 940e 0fbe 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
00055d eee0      	LDI  R30,LOW(224)
00055e 940e 0fc5 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
000560 940e 0fcc 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
000562 eee0      	LDI  R30,LOW(224)
000563 940e 0fd2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
000565 940e 0fb5 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
000567 e7e8      	LDI  R30,LOW(120)
000568 e0f0      	LDI  R31,HIGH(120)
000569 940e 0fd9 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
00056b eee6      	LDI  R30,LOW(230)
00056c 940e 0fc5 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
00056e edea      	LDI  R30,LOW(218)
00056f 93ea      	ST   -Y,R30
000570 dfb8      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
000571 e7e3      	LDI  R30,LOW(115)
000572 93ea      	ST   -Y,R30
000573 dfb5      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
000574 ebe0      	LDI  R30,LOW(176)
000575 93ea      	ST   -Y,R30
000576 dfa6      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
000577 e2e4      	LDI  R30,LOW(36)
000578 940e 0fdd 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
00057a 940e 0fe4 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
00057c edef      	LDI  R30,LOW(223)
00057d 940e 0fe8 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
00057f e0ef      	LDI  R30,LOW(15)
000580 940e 0fdd 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
000582 ebe4      	LDI  R30,LOW(180)
000583 940e 0fd2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
000585 e8e4      	LDI  R30,LOW(132)
000586 940e 0fdd 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
000588 e5ea      	LDI  R30,LOW(90)
000589 93ea      	ST   -Y,R30
00058a df9e      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
00058b e0ea      	LDI  R30,LOW(10)
00058c 940e 0fdd 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
00058e e0e8      	LDI  R30,LOW(8)
00058f 940e 0fdd 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
000591 ebe6      	LDI  R30,LOW(182)
000592 940e 0fc5 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
000594 e2ec      	LDI  R30,LOW(44)
000595 940e 0fdd 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
000597 e0ec      	LDI  R30,LOW(12)
000598 93ea      	ST   -Y,R30
000599 df8f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
00059a e0ea      	LDI  R30,LOW(10)
00059b 93ea      	ST   -Y,R30
00059c df8c      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
00059d e0e0      	LDI  R30,LOW(0)
00059e 940e 0fbe 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
0005a0 ebea      	LDI  R30,LOW(186)
0005a1 93ea      	ST   -Y,R30
0005a2 df7a      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
0005a3 e0ef      	LDI  R30,LOW(15)
0005a4 93ea      	ST   -Y,R30
0005a5 df83      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
0005a6 ebe8      	LDI  R30,LOW(184)
0005a7 93ea      	ST   -Y,R30
0005a8 df74      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
0005a9 e0e7      	LDI  R30,LOW(7)
0005aa 940e 0fe8 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
0005ac e3e6      	LDI  R30,LOW(54)
0005ad 940e 0fd2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
0005af ebec      	LDI  R30,LOW(188)
0005b0 93ea      	ST   -Y,R30
0005b1 df6b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
0005b2 e5e0      	LDI  R30,LOW(80)
0005b3 93ea      	ST   -Y,R30
0005b4 df74      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
0005b5 e9e0      	LDI  R30,LOW(144)
0005b6 93ea      	ST   -Y,R30
0005b7 df71      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
0005b8 e5e0      	LDI  R30,LOW(80)
0005b9 940e 0fe8 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
0005bb efe0      	LDI  R30,LOW(240)
0005bc 940e 0fd2 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
0005be e0e5      	LDI  R30,LOW(5)
0005bf e0f0      	LDI  R31,HIGH(5)
0005c0 940e 0fd9 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
0005c2 e2e9      	LDI  R30,LOW(41)
0005c3 93ea      	ST   -Y,R30
0005c4 df58      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
0005c5 ede0      	LDI  R30,LOW(208)
0005c6 93ea      	ST   -Y,R30
0005c7 df55      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
0005c8 e0ed      	LDI  R30,LOW(13)
0005c9 93ea      	ST   -Y,R30
0005ca df5e      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
0005cb 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
0005cc e2ea      	LDI  R30,LOW(42)
0005cd 93ea      	ST   -Y,R30
0005ce df4e      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
0005cf 81ef      	LDD  R30,Y+7
0005d0 93ea      	ST   -Y,R30
0005d1 df57      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
0005d2 81ee      	LDD  R30,Y+6
0005d3 93ea      	ST   -Y,R30
0005d4 df54      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
0005d5 81ed      	LDD  R30,Y+5
0005d6 93ea      	ST   -Y,R30
0005d7 df51      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
0005d8 81ec      	LDD  R30,Y+4
0005d9 93ea      	ST   -Y,R30
0005da df4e      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
0005db e2eb      	LDI  R30,LOW(43)
0005dc 93ea      	ST   -Y,R30
0005dd df3f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
0005de 81eb      	LDD  R30,Y+3
0005df 93ea      	ST   -Y,R30
0005e0 df48      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
0005e1 81ea      	LDD  R30,Y+2
0005e2 93ea      	ST   -Y,R30
0005e3 df45      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
0005e4 81e9      	LDD  R30,Y+1
0005e5 93ea      	ST   -Y,R30
0005e6 df42      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
0005e7 81e8      	LD   R30,Y
0005e8 93ea      	ST   -Y,R30
0005e9 df3f      	RCALL _SSD1963_WriteData_b8
                 ;}
0005ea 9628      	ADIW R28,8
0005eb 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
0005ec 940e 1511 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
0005ee e2e8      	LDI  R30,LOW(40)
0005ef 93ea      	ST   -Y,R30
0005f0 df2c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
0005f1 940e 0fec 	CALL SUBOPT_0xD
0005f3 edef      	LDI  R30,LOW(479)
0005f4 e0f1      	LDI  R31,HIGH(479)
0005f5 940e 0ff1 	CALL SUBOPT_0xE
0005f7 e0ef      	LDI  R30,LOW(271)
0005f8 e0f1      	LDI  R31,HIGH(271)
0005f9 940e 0ff4 	CALL SUBOPT_0xF
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
0005fb e000     +LDI R16 , LOW ( 0 )
0005fc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x33:
                +
0005fd 3100     +CPI R16 , LOW ( 272 )
0005fe e0e1     +LDI R30 , HIGH ( 272 )
0005ff 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
000600 f480      	BRSH _0x35
                 ;  {
                 ;    y=0;
                +
000601 e020     +LDI R18 , LOW ( 0 )
000602 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x36:
                +
000603 3e20     +CPI R18 , LOW ( 480 )
000604 e0e1     +LDI R30 , HIGH ( 480 )
000605 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
000606 f438      	BRSH _0x38
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
000607 81ec      	LDD  R30,Y+4
000608 81fd      	LDD  R31,Y+4+1
000609 940e 0ffc 	CALL SUBOPT_0x10
                 ;      y++;
                +
00060b 5f2f     +SUBI R18 , LOW ( - 1 )
00060c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
00060d cff5      	RJMP _0x36
                 _0x38:
                 ;  x++;
                +
00060e 5f0f     +SUBI R16 , LOW ( - 1 )
00060f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
000610 cfec      	RJMP _0x33
                 _0x35:
                 ;  SSD1963_WriteCmd(0x29);
000611 e2e9      	LDI  R30,LOW(41)
000612 93ea      	ST   -Y,R30
000613 df09      	RCALL _SSD1963_WriteCmd
                 ;}
000614 940e 1518 	CALL __LOADLOCR4
000616 9626      	ADIW R28,6
000617 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
000618 931a      	ST   -Y,R17
000619 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
00061a 940e 1000 	CALL SUBOPT_0x11
00061c 85aa      	LDD  R26,Y+10
00061d 85bb      	LDD  R27,Y+10+1
00061e 9650      	ADIW R26,16
00061f 9711      	SBIW R26,1
000620 93ba      	ST   -Y,R27
000621 93aa      	ST   -Y,R26
000622 940e 1005 	CALL SUBOPT_0x12
000624 85ac      	LDD  R26,Y+12
000625 85bd      	LDD  R27,Y+12+1
000626 9650      	ADIW R26,16
000627 9711      	SBIW R26,1
000628 93ba      	ST   -Y,R27
000629 93aa      	ST   -Y,R26
00062a dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
00062b e2ec      	LDI  R30,LOW(44)
00062c 93ea      	ST   -Y,R30
00062d deef      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
00062e e010      	LDI  R17,LOW(0)
                 _0x3A:
00062f 3210      	CPI  R17,32
000630 f4e8      	BRSH _0x3B
                 ;  {
                 ;    for (j = 0; j < 8; j++)
000631 e000      	LDI  R16,LOW(0)
                 _0x3D:
000632 3008      	CPI  R16,8
000633 f4c0      	BRSH _0x3E
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
000634 2fe1      	MOV  R30,R17
000635 85aa      	LDD  R26,Y+10
000636 85bb      	LDD  R27,Y+10+1
000637 e0f0      	LDI  R31,0
000638 0fea      	ADD  R30,R26
000639 1ffb      	ADC  R31,R27
00063a 9014      	LPM  R1,Z
00063b 2fe0      	MOV  R30,R16
00063c e8a0      	LDI  R26,LOW(128)
00063d 940e 141b 	CALL __LSRB12
00063f 21e1      	AND  R30,R1
000640 30e1      	CPI  R30,LOW(0x1)
000641 f018      	BRLO _0x3F
000642 81ec      	LDD  R30,Y+4
000643 81fd      	LDD  R31,Y+4+1
000644 c002      	RJMP _0x212
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3F:
000645 81ea      	LDD  R30,Y+2
000646 81fb      	LDD  R31,Y+2+1
                 _0x212:
000647 93fa      	ST   -Y,R31
000648 93ea      	ST   -Y,R30
000649 deec      	RCALL _SSD1963_WriteData_b16
                 ;    }
00064a 5f0f      	SUBI R16,-1
00064b cfe6      	RJMP _0x3D
                 _0x3E:
                 ;  }
00064c 5f1f      	SUBI R17,-1
00064d cfe1      	RJMP _0x3A
                 _0x3B:
                 ;}
00064e 8119      	LDD  R17,Y+1
00064f 8108      	LDD  R16,Y+0
000650 c2c2      	RJMP _0x20C0004
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000651 85e8      	LDD  R30,Y+8
000652 e0f0      	LDI  R31,0
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
000653 33e0      	CPI  R30,LOW(0x30)
000654 e0a0      	LDI  R26,HIGH(0x30)
000655 07fa      	CPC  R31,R26
000656 f419      	BRNE _0x44
000657 e0ec      	LDI  R30,LOW(_S_48*2)
000658 e0f1      	LDI  R31,HIGH(_S_48*2)
000659 c18e      	RJMP _0x213
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x44:
00065a 33e1      	CPI  R30,LOW(0x31)
00065b e0a0      	LDI  R26,HIGH(0x31)
00065c 07fa      	CPC  R31,R26
00065d f419      	BRNE _0x45
00065e e2ec      	LDI  R30,LOW(_S_49*2)
00065f e0f1      	LDI  R31,HIGH(_S_49*2)
000660 c187      	RJMP _0x213
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x45:
000661 33e2      	CPI  R30,LOW(0x32)
000662 e0a0      	LDI  R26,HIGH(0x32)
000663 07fa      	CPC  R31,R26
000664 f419      	BRNE _0x46
000665 e4ec      	LDI  R30,LOW(_S_50*2)
000666 e0f1      	LDI  R31,HIGH(_S_50*2)
000667 c180      	RJMP _0x213
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x46:
000668 33e3      	CPI  R30,LOW(0x33)
000669 e0a0      	LDI  R26,HIGH(0x33)
00066a 07fa      	CPC  R31,R26
00066b f419      	BRNE _0x47
00066c e6ec      	LDI  R30,LOW(_S_51*2)
00066d e0f1      	LDI  R31,HIGH(_S_51*2)
00066e c179      	RJMP _0x213
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x47:
00066f 33e4      	CPI  R30,LOW(0x34)
000670 e0a0      	LDI  R26,HIGH(0x34)
000671 07fa      	CPC  R31,R26
000672 f419      	BRNE _0x48
000673 e8ec      	LDI  R30,LOW(_S_52*2)
000674 e0f1      	LDI  R31,HIGH(_S_52*2)
000675 c172      	RJMP _0x213
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x48:
000676 33e5      	CPI  R30,LOW(0x35)
000677 e0a0      	LDI  R26,HIGH(0x35)
000678 07fa      	CPC  R31,R26
000679 f419      	BRNE _0x49
00067a eaec      	LDI  R30,LOW(_S_53*2)
00067b e0f1      	LDI  R31,HIGH(_S_53*2)
00067c c16b      	RJMP _0x213
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x49:
00067d 33e6      	CPI  R30,LOW(0x36)
00067e e0a0      	LDI  R26,HIGH(0x36)
00067f 07fa      	CPC  R31,R26
000680 f419      	BRNE _0x4A
000681 ecec      	LDI  R30,LOW(_S_54*2)
000682 e0f1      	LDI  R31,HIGH(_S_54*2)
000683 c164      	RJMP _0x213
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x4A:
000684 33e7      	CPI  R30,LOW(0x37)
000685 e0a0      	LDI  R26,HIGH(0x37)
000686 07fa      	CPC  R31,R26
000687 f419      	BRNE _0x4B
000688 eeec      	LDI  R30,LOW(_S_55*2)
000689 e0f1      	LDI  R31,HIGH(_S_55*2)
00068a c15d      	RJMP _0x213
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x4B:
00068b 33e8      	CPI  R30,LOW(0x38)
00068c e0a0      	LDI  R26,HIGH(0x38)
00068d 07fa      	CPC  R31,R26
00068e f419      	BRNE _0x4C
00068f e0ec      	LDI  R30,LOW(_S_56*2)
000690 e0f2      	LDI  R31,HIGH(_S_56*2)
000691 c156      	RJMP _0x213
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4C:
000692 33e9      	CPI  R30,LOW(0x39)
000693 e0a0      	LDI  R26,HIGH(0x39)
000694 07fa      	CPC  R31,R26
000695 f419      	BRNE _0x4D
000696 e2ec      	LDI  R30,LOW(_S_57*2)
000697 e0f2      	LDI  R31,HIGH(_S_57*2)
000698 c14f      	RJMP _0x213
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4D:
000699 32e1      	CPI  R30,LOW(0x21)
00069a e0a0      	LDI  R26,HIGH(0x21)
00069b 07fa      	CPC  R31,R26
00069c f419      	BRNE _0x4E
00069d e6ec      	LDI  R30,LOW(_S_33*2)
00069e e0f2      	LDI  R31,HIGH(_S_33*2)
00069f c148      	RJMP _0x213
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4E:
0006a0 32e8      	CPI  R30,LOW(0x28)
0006a1 e0a0      	LDI  R26,HIGH(0x28)
0006a2 07fa      	CPC  R31,R26
0006a3 f419      	BRNE _0x4F
0006a4 e8ec      	LDI  R30,LOW(_S_40*2)
0006a5 e0f2      	LDI  R31,HIGH(_S_40*2)
0006a6 c141      	RJMP _0x213
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4F:
0006a7 32e9      	CPI  R30,LOW(0x29)
0006a8 e0a0      	LDI  R26,HIGH(0x29)
0006a9 07fa      	CPC  R31,R26
0006aa f419      	BRNE _0x50
0006ab eaec      	LDI  R30,LOW(_S_41*2)
0006ac e0f2      	LDI  R31,HIGH(_S_41*2)
0006ad c13a      	RJMP _0x213
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x50:
0006ae 32ef      	CPI  R30,LOW(0x2F)
0006af e0a0      	LDI  R26,HIGH(0x2F)
0006b0 07fa      	CPC  R31,R26
0006b1 f419      	BRNE _0x51
0006b2 ecec      	LDI  R30,LOW(_S_47*2)
0006b3 e0f2      	LDI  R31,HIGH(_S_47*2)
0006b4 c133      	RJMP _0x213
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x51:
0006b5 33ea      	CPI  R30,LOW(0x3A)
0006b6 e0a0      	LDI  R26,HIGH(0x3A)
0006b7 07fa      	CPC  R31,R26
0006b8 f419      	BRNE _0x52
0006b9 e2ec      	LDI  R30,LOW(_S_58*2)
0006ba e0f3      	LDI  R31,HIGH(_S_58*2)
0006bb c12c      	RJMP _0x213
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x52:
0006bc 33ec      	CPI  R30,LOW(0x3C)
0006bd e0a0      	LDI  R26,HIGH(0x3C)
0006be 07fa      	CPC  R31,R26
0006bf f419      	BRNE _0x53
0006c0 e4ec      	LDI  R30,LOW(_S_60*2)
0006c1 e0f3      	LDI  R31,HIGH(_S_60*2)
0006c2 c125      	RJMP _0x213
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x53:
0006c3 33ed      	CPI  R30,LOW(0x3D)
0006c4 e0a0      	LDI  R26,HIGH(0x3D)
0006c5 07fa      	CPC  R31,R26
0006c6 f419      	BRNE _0x54
0006c7 e6ec      	LDI  R30,LOW(_S_61*2)
0006c8 e0f3      	LDI  R31,HIGH(_S_61*2)
0006c9 c11e      	RJMP _0x213
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x54:
0006ca 33ee      	CPI  R30,LOW(0x3E)
0006cb e0a0      	LDI  R26,HIGH(0x3E)
0006cc 07fa      	CPC  R31,R26
0006cd f419      	BRNE _0x55
0006ce e8ec      	LDI  R30,LOW(_S_62*2)
0006cf e0f3      	LDI  R31,HIGH(_S_62*2)
0006d0 c117      	RJMP _0x213
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x55:
0006d1 33ef      	CPI  R30,LOW(0x3F)
0006d2 e0a0      	LDI  R26,HIGH(0x3F)
0006d3 07fa      	CPC  R31,R26
0006d4 f419      	BRNE _0x56
0006d5 eaec      	LDI  R30,LOW(_S_63*2)
0006d6 e0f3      	LDI  R31,HIGH(_S_63*2)
0006d7 c110      	RJMP _0x213
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x56:
0006d8 32eb      	CPI  R30,LOW(0x2B)
0006d9 e0a0      	LDI  R26,HIGH(0x2B)
0006da 07fa      	CPC  R31,R26
0006db f419      	BRNE _0x57
0006dc eeec      	LDI  R30,LOW(_S_43*2)
0006dd e0f2      	LDI  R31,HIGH(_S_43*2)
0006de c109      	RJMP _0x213
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x57:
0006df 32ed      	CPI  R30,LOW(0x2D)
0006e0 e0a0      	LDI  R26,HIGH(0x2D)
0006e1 07fa      	CPC  R31,R26
0006e2 f419      	BRNE _0x58
0006e3 e0ec      	LDI  R30,LOW(_S_45*2)
0006e4 e0f3      	LDI  R31,HIGH(_S_45*2)
0006e5 c102      	RJMP _0x213
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x58:
0006e6 3ce0      	CPI  R30,LOW(0xC0)
0006e7 e0a0      	LDI  R26,HIGH(0xC0)
0006e8 07fa      	CPC  R31,R26
0006e9 f419      	BRNE _0x59
0006ea ecec      	LDI  R30,LOW(_S_192*2)
0006eb e0f3      	LDI  R31,HIGH(_S_192*2)
0006ec c0fb      	RJMP _0x213
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x59:
0006ed 3ce1      	CPI  R30,LOW(0xC1)
0006ee e0a0      	LDI  R26,HIGH(0xC1)
0006ef 07fa      	CPC  R31,R26
0006f0 f419      	BRNE _0x5A
0006f1 eeec      	LDI  R30,LOW(_S_193*2)
0006f2 e0f3      	LDI  R31,HIGH(_S_193*2)
0006f3 c0f4      	RJMP _0x213
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x5A:
0006f4 3ce2      	CPI  R30,LOW(0xC2)
0006f5 e0a0      	LDI  R26,HIGH(0xC2)
0006f6 07fa      	CPC  R31,R26
0006f7 f419      	BRNE _0x5B
0006f8 e0ec      	LDI  R30,LOW(_S_194*2)
0006f9 e0f4      	LDI  R31,HIGH(_S_194*2)
0006fa c0ed      	RJMP _0x213
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x5B:
0006fb 3ce3      	CPI  R30,LOW(0xC3)
0006fc e0a0      	LDI  R26,HIGH(0xC3)
0006fd 07fa      	CPC  R31,R26
0006fe f419      	BRNE _0x5C
0006ff e2ec      	LDI  R30,LOW(_S_195*2)
000700 e0f4      	LDI  R31,HIGH(_S_195*2)
000701 c0e6      	RJMP _0x213
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5C:
000702 3ce4      	CPI  R30,LOW(0xC4)
000703 e0a0      	LDI  R26,HIGH(0xC4)
000704 07fa      	CPC  R31,R26
000705 f419      	BRNE _0x5D
000706 e4ec      	LDI  R30,LOW(_S_196*2)
000707 e0f4      	LDI  R31,HIGH(_S_196*2)
000708 c0df      	RJMP _0x213
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5D:
000709 3ce5      	CPI  R30,LOW(0xC5)
00070a e0a0      	LDI  R26,HIGH(0xC5)
00070b 07fa      	CPC  R31,R26
00070c f419      	BRNE _0x5E
00070d e6ec      	LDI  R30,LOW(_S_197*2)
00070e e0f4      	LDI  R31,HIGH(_S_197*2)
00070f c0d8      	RJMP _0x213
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5E:
000710 3ce6      	CPI  R30,LOW(0xC6)
000711 e0a0      	LDI  R26,HIGH(0xC6)
000712 07fa      	CPC  R31,R26
000713 f419      	BRNE _0x5F
000714 e8ec      	LDI  R30,LOW(_S_198*2)
000715 e0f4      	LDI  R31,HIGH(_S_198*2)
000716 c0d1      	RJMP _0x213
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5F:
000717 3ce7      	CPI  R30,LOW(0xC7)
000718 e0a0      	LDI  R26,HIGH(0xC7)
000719 07fa      	CPC  R31,R26
00071a f419      	BRNE _0x60
00071b eaec      	LDI  R30,LOW(_S_199*2)
00071c e0f4      	LDI  R31,HIGH(_S_199*2)
00071d c0ca      	RJMP _0x213
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x60:
00071e 3ce8      	CPI  R30,LOW(0xC8)
00071f e0a0      	LDI  R26,HIGH(0xC8)
000720 07fa      	CPC  R31,R26
000721 f419      	BRNE _0x61
000722 ecec      	LDI  R30,LOW(_S_200*2)
000723 e0f4      	LDI  R31,HIGH(_S_200*2)
000724 c0c3      	RJMP _0x213
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x61:
000725 3ce9      	CPI  R30,LOW(0xC9)
000726 e0a0      	LDI  R26,HIGH(0xC9)
000727 07fa      	CPC  R31,R26
000728 f419      	BRNE _0x62
000729 eeec      	LDI  R30,LOW(_S_201*2)
00072a e0f4      	LDI  R31,HIGH(_S_201*2)
00072b c0bc      	RJMP _0x213
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x62:
00072c 3cea      	CPI  R30,LOW(0xCA)
00072d e0a0      	LDI  R26,HIGH(0xCA)
00072e 07fa      	CPC  R31,R26
00072f f419      	BRNE _0x63
000730 e0ec      	LDI  R30,LOW(_S_202*2)
000731 e0f5      	LDI  R31,HIGH(_S_202*2)
000732 c0b5      	RJMP _0x213
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x63:
000733 3ceb      	CPI  R30,LOW(0xCB)
000734 e0a0      	LDI  R26,HIGH(0xCB)
000735 07fa      	CPC  R31,R26
000736 f419      	BRNE _0x64
000737 e2ec      	LDI  R30,LOW(_S_203*2)
000738 e0f5      	LDI  R31,HIGH(_S_203*2)
000739 c0ae      	RJMP _0x213
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x64:
00073a 3cec      	CPI  R30,LOW(0xCC)
00073b e0a0      	LDI  R26,HIGH(0xCC)
00073c 07fa      	CPC  R31,R26
00073d f419      	BRNE _0x65
00073e e4ec      	LDI  R30,LOW(_S_204*2)
00073f e0f5      	LDI  R31,HIGH(_S_204*2)
000740 c0a7      	RJMP _0x213
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x65:
000741 3ced      	CPI  R30,LOW(0xCD)
000742 e0a0      	LDI  R26,HIGH(0xCD)
000743 07fa      	CPC  R31,R26
000744 f419      	BRNE _0x66
000745 e6ec      	LDI  R30,LOW(_S_205*2)
000746 e0f5      	LDI  R31,HIGH(_S_205*2)
000747 c0a0      	RJMP _0x213
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x66:
000748 3cee      	CPI  R30,LOW(0xCE)
000749 e0a0      	LDI  R26,HIGH(0xCE)
00074a 07fa      	CPC  R31,R26
00074b f419      	BRNE _0x67
00074c e8ec      	LDI  R30,LOW(_S_206*2)
00074d e0f5      	LDI  R31,HIGH(_S_206*2)
00074e c099      	RJMP _0x213
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x67:
00074f 3cef      	CPI  R30,LOW(0xCF)
000750 e0a0      	LDI  R26,HIGH(0xCF)
000751 07fa      	CPC  R31,R26
000752 f419      	BRNE _0x68
000753 eaec      	LDI  R30,LOW(_S_207*2)
000754 e0f5      	LDI  R31,HIGH(_S_207*2)
000755 c092      	RJMP _0x213
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x68:
000756 3de0      	CPI  R30,LOW(0xD0)
000757 e0a0      	LDI  R26,HIGH(0xD0)
000758 07fa      	CPC  R31,R26
000759 f419      	BRNE _0x69
00075a ecec      	LDI  R30,LOW(_S_208*2)
00075b e0f5      	LDI  R31,HIGH(_S_208*2)
00075c c08b      	RJMP _0x213
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x69:
00075d 3de1      	CPI  R30,LOW(0xD1)
00075e e0a0      	LDI  R26,HIGH(0xD1)
00075f 07fa      	CPC  R31,R26
000760 f419      	BRNE _0x6A
000761 eeec      	LDI  R30,LOW(_S_209*2)
000762 e0f5      	LDI  R31,HIGH(_S_209*2)
000763 c084      	RJMP _0x213
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x6A:
000764 3de2      	CPI  R30,LOW(0xD2)
000765 e0a0      	LDI  R26,HIGH(0xD2)
000766 07fa      	CPC  R31,R26
000767 f419      	BRNE _0x6B
000768 e0ec      	LDI  R30,LOW(_S_210*2)
000769 e0f6      	LDI  R31,HIGH(_S_210*2)
00076a c07d      	RJMP _0x213
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x6B:
00076b 3de3      	CPI  R30,LOW(0xD3)
00076c e0a0      	LDI  R26,HIGH(0xD3)
00076d 07fa      	CPC  R31,R26
00076e f419      	BRNE _0x6C
00076f e2ec      	LDI  R30,LOW(_S_211*2)
000770 e0f6      	LDI  R31,HIGH(_S_211*2)
000771 c076      	RJMP _0x213
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6C:
000772 3de4      	CPI  R30,LOW(0xD4)
000773 e0a0      	LDI  R26,HIGH(0xD4)
000774 07fa      	CPC  R31,R26
000775 f419      	BRNE _0x6D
000776 e4ec      	LDI  R30,LOW(_S_212*2)
000777 e0f6      	LDI  R31,HIGH(_S_212*2)
000778 c06f      	RJMP _0x213
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6D:
000779 3de5      	CPI  R30,LOW(0xD5)
00077a e0a0      	LDI  R26,HIGH(0xD5)
00077b 07fa      	CPC  R31,R26
00077c f419      	BRNE _0x6E
00077d e6ec      	LDI  R30,LOW(_S_213*2)
00077e e0f6      	LDI  R31,HIGH(_S_213*2)
00077f c068      	RJMP _0x213
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6E:
000780 3de6      	CPI  R30,LOW(0xD6)
000781 e0a0      	LDI  R26,HIGH(0xD6)
000782 07fa      	CPC  R31,R26
000783 f419      	BRNE _0x6F
000784 e8ec      	LDI  R30,LOW(_S_214*2)
000785 e0f6      	LDI  R31,HIGH(_S_214*2)
000786 c061      	RJMP _0x213
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6F:
000787 3de7      	CPI  R30,LOW(0xD7)
000788 e0a0      	LDI  R26,HIGH(0xD7)
000789 07fa      	CPC  R31,R26
00078a f419      	BRNE _0x70
00078b eaec      	LDI  R30,LOW(_S_215*2)
00078c e0f6      	LDI  R31,HIGH(_S_215*2)
00078d c05a      	RJMP _0x213
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x70:
00078e 3de8      	CPI  R30,LOW(0xD8)
00078f e0a0      	LDI  R26,HIGH(0xD8)
000790 07fa      	CPC  R31,R26
000791 f419      	BRNE _0x71
000792 ecec      	LDI  R30,LOW(_S_216*2)
000793 e0f6      	LDI  R31,HIGH(_S_216*2)
000794 c053      	RJMP _0x213
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x71:
000795 3de9      	CPI  R30,LOW(0xD9)
000796 e0a0      	LDI  R26,HIGH(0xD9)
000797 07fa      	CPC  R31,R26
000798 f419      	BRNE _0x72
000799 eeec      	LDI  R30,LOW(_S_217*2)
00079a e0f6      	LDI  R31,HIGH(_S_217*2)
00079b c04c      	RJMP _0x213
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x72:
00079c 3dea      	CPI  R30,LOW(0xDA)
00079d e0a0      	LDI  R26,HIGH(0xDA)
00079e 07fa      	CPC  R31,R26
00079f f419      	BRNE _0x73
0007a0 e0ec      	LDI  R30,LOW(_S_218*2)
0007a1 e0f7      	LDI  R31,HIGH(_S_218*2)
0007a2 c045      	RJMP _0x213
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x73:
0007a3 3deb      	CPI  R30,LOW(0xDB)
0007a4 e0a0      	LDI  R26,HIGH(0xDB)
0007a5 07fa      	CPC  R31,R26
0007a6 f419      	BRNE _0x74
0007a7 e2ec      	LDI  R30,LOW(_S_219*2)
0007a8 e0f7      	LDI  R31,HIGH(_S_219*2)
0007a9 c03e      	RJMP _0x213
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x74:
0007aa 3dec      	CPI  R30,LOW(0xDC)
0007ab e0a0      	LDI  R26,HIGH(0xDC)
0007ac 07fa      	CPC  R31,R26
0007ad f419      	BRNE _0x75
0007ae e4ec      	LDI  R30,LOW(_S_220*2)
0007af e0f7      	LDI  R31,HIGH(_S_220*2)
0007b0 c037      	RJMP _0x213
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x75:
0007b1 3ded      	CPI  R30,LOW(0xDD)
0007b2 e0a0      	LDI  R26,HIGH(0xDD)
0007b3 07fa      	CPC  R31,R26
0007b4 f419      	BRNE _0x76
0007b5 e6ec      	LDI  R30,LOW(_S_221*2)
0007b6 e0f7      	LDI  R31,HIGH(_S_221*2)
0007b7 c030      	RJMP _0x213
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x76:
0007b8 3dee      	CPI  R30,LOW(0xDE)
0007b9 e0a0      	LDI  R26,HIGH(0xDE)
0007ba 07fa      	CPC  R31,R26
0007bb f419      	BRNE _0x77
0007bc e8ec      	LDI  R30,LOW(_S_222*2)
0007bd e0f7      	LDI  R31,HIGH(_S_222*2)
0007be c029      	RJMP _0x213
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x77:
0007bf 3def      	CPI  R30,LOW(0xDF)
0007c0 e0a0      	LDI  R26,HIGH(0xDF)
0007c1 07fa      	CPC  R31,R26
0007c2 f419      	BRNE _0x78
0007c3 eaec      	LDI  R30,LOW(_S_223*2)
0007c4 e0f7      	LDI  R31,HIGH(_S_223*2)
0007c5 c022      	RJMP _0x213
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x78:
0007c6 32ee      	CPI  R30,LOW(0x2E)
0007c7 e0a0      	LDI  R26,HIGH(0x2E)
0007c8 07fa      	CPC  R31,R26
0007c9 f419      	BRNE _0x79
0007ca eaec      	LDI  R30,LOW(_S_46*2)
0007cb e0f0      	LDI  R31,HIGH(_S_46*2)
0007cc c01b      	RJMP _0x213
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x79:
0007cd 32e0      	CPI  R30,LOW(0x20)
0007ce e0a0      	LDI  R26,HIGH(0x20)
0007cf 07fa      	CPC  R31,R26
0007d0 f419      	BRNE _0x7A
0007d1 e4ec      	LDI  R30,LOW(_S_32*2)
0007d2 e0f2      	LDI  R31,HIGH(_S_32*2)
0007d3 c014      	RJMP _0x213
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x7A:
0007d4 30e1      	CPI  R30,LOW(0x1)
0007d5 e0a0      	LDI  R26,HIGH(0x1)
0007d6 07fa      	CPC  R31,R26
0007d7 f419      	BRNE _0x7B
0007d8 ecec      	LDI  R30,LOW(_S_UP*2)
0007d9 e0f0      	LDI  R31,HIGH(_S_UP*2)
0007da c00d      	RJMP _0x213
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x7B:
0007db 30e2      	CPI  R30,LOW(0x2)
0007dc e0a0      	LDI  R26,HIGH(0x2)
0007dd 07fa      	CPC  R31,R26
0007de f419      	BRNE _0x7C
0007df eeec      	LDI  R30,LOW(_S_DOWN*2)
0007e0 e0f0      	LDI  R31,HIGH(_S_DOWN*2)
0007e1 c006      	RJMP _0x213
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7C:
0007e2 30e3      	CPI  R30,LOW(0x3)
0007e3 e0a0      	LDI  R26,HIGH(0x3)
0007e4 07fa      	CPC  R31,R26
0007e5 f469      	BRNE _0x43
0007e6 e8ec      	LDI  R30,LOW(_blank_symb*2)
0007e7 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x213:
0007e8 93fa      	ST   -Y,R31
0007e9 93ea      	ST   -Y,R30
0007ea 940e 1000 	CALL SUBOPT_0x11
0007ec 940e 1000 	CALL SUBOPT_0x11
0007ee 940e 1000 	CALL SUBOPT_0x11
0007f0 940e 1000 	CALL SUBOPT_0x11
0007f2 de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x43:
                 ;}
0007f3 9629      	ADIW R28,9
0007f4 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7E:
0007f5 85a8      	LDD  R26,Y+8
0007f6 85b9      	LDD  R27,Y+8+1
0007f7 91ec      	LD   R30,X
0007f8 30e0      	CPI  R30,0
0007f9 f099      	BREQ _0x80
0007fa 91ed      	LD   R30,X+
0007fb 87a8      	STD  Y+8,R26
0007fc 87b9      	STD  Y+8+1,R27
0007fd 93ea      	ST   -Y,R30
0007fe 940e 100a 	CALL SUBOPT_0x13
000800 940e 100a 	CALL SUBOPT_0x13
000802 940e 100a 	CALL SUBOPT_0x13
000804 940e 100a 	CALL SUBOPT_0x13
000806 de4a      	RCALL _SSD1963_PutChar16
000807 81ee      	LDD  R30,Y+6
000808 81ff      	LDD  R31,Y+6+1
000809 9670      	ADIW R30,16
00080a 83ee      	STD  Y+6,R30
00080b 83ff      	STD  Y+6+1,R31
00080c cfe8      	RJMP _0x7E
                 _0x80:
                 ;}
00080d 962a      	ADIW R28,10
00080e 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  {
                 ;    case 5 :
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10000;
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 1000;
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;      Value %= 100;
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10;
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;    break;
                 ;  }
                 ;}
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
00080f 940e 100f 	CALL SUBOPT_0x14
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
000811 940e 1021 	CALL SUBOPT_0x15
                 ;  if (j < 0) j *= -1;
000813 f412      	BRPL _0x8D
000814 940e 102b 	CALL SUBOPT_0x16
                 ;  k = StopY - StartY + 1;
                 _0x8D:
000816 940e 1032 	CALL SUBOPT_0x17
                 ;  if (k < 0) k *= -1;
000818 f422      	BRPL _0x8E
000819 940e 1042 	CALL SUBOPT_0x18
00081b 940e 1047 	CALL SUBOPT_0x19
                 ;  k = k * j;
                 _0x8E:
00081d 940e 1052 	CALL SUBOPT_0x1A
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x90:
00081f 940e 1065 	CALL SUBOPT_0x1B
000821 f43c      	BRGE _0x91
000822 85ea      	LDD  R30,Y+10
000823 85fb      	LDD  R31,Y+10+1
000824 940e 0ffc 	CALL SUBOPT_0x10
000826 940e 106d 	CALL SUBOPT_0x1C
000828 cff6      	RJMP _0x90
                 _0x91:
000829 c105      	RJMP _0x20C0003
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
00082a 972a      	SBIW R28,10
00082b 940e 150f 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
00082d 8da9      	LDD  R26,Y+25
00082e 8dba      	LDD  R27,Y+25+1
00082f 89ef      	LDD  R30,Y+23
000830 8df8      	LDD  R31,Y+23+1
000831 1bea      	SUB  R30,R26
000832 0bfb      	SBC  R31,R27
000833 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
000834 2355      	TST  R21
000835 f432      	BRPL _0x92
000836 01fa      	MOVW R30,R20
000837 efaf      	LDI  R26,LOW(65535)
000838 efbf      	LDI  R27,HIGH(65535)
000839 940e 145e 	CALL __MULW12
00083b 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x92:
00083c 89ad      	LDD  R26,Y+21
00083d 89be      	LDD  R27,Y+21+1
00083e 89eb      	LDD  R30,Y+19
00083f 89fc      	LDD  R31,Y+19+1
000840 1bea      	SUB  R30,R26
000841 0bfb      	SBC  R31,R27
000842 87ee      	STD  Y+14,R30
000843 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
000844 85af      	LDD  R26,Y+15
000845 23aa      	TST  R26
000846 f432      	BRPL _0x93
000847 efaf      	LDI  R26,LOW(65535)
000848 efbf      	LDI  R27,HIGH(65535)
000849 940e 145e 	CALL __MULW12
00084b 87ee      	STD  Y+14,R30
00084c 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x93:
00084d 89ef      	LDD  R30,Y+23
00084e 8df8      	LDD  R31,Y+23+1
00084f 8da9      	LDD  R26,Y+25
000850 8dba      	LDD  R27,Y+25+1
000851 17ae      	CP   R26,R30
000852 07bf      	CPC  R27,R31
000853 f418      	BRSH _0x94
000854 e0e1      	LDI  R30,LOW(1)
000855 e0f0      	LDI  R31,HIGH(1)
000856 c002      	RJMP _0x95
                 _0x94:
000857 efef      	LDI  R30,LOW(65535)
000858 efff      	LDI  R31,HIGH(65535)
                 _0x95:
000859 87ec      	STD  Y+12,R30
00085a 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
00085b 89eb      	LDD  R30,Y+19
00085c 89fc      	LDD  R31,Y+19+1
00085d 89ad      	LDD  R26,Y+21
00085e 89be      	LDD  R27,Y+21+1
00085f 17ae      	CP   R26,R30
000860 07bf      	CPC  R27,R31
000861 f418      	BRSH _0x97
000862 e0e1      	LDI  R30,LOW(1)
000863 e0f0      	LDI  R31,HIGH(1)
000864 c002      	RJMP _0x98
                 _0x97:
000865 efef      	LDI  R30,LOW(65535)
000866 efff      	LDI  R31,HIGH(65535)
                 _0x98:
000867 87ea      	STD  Y+10,R30
000868 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
000869 85ae      	LDD  R26,Y+14
00086a 85bf      	LDD  R27,Y+14+1
00086b 01fa      	MOVW R30,R20
00086c 1bea      	SUB  R30,R26
00086d 0bfb      	SBC  R31,R27
00086e 87e8      	STD  Y+8,R30
00086f 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x9A:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
000870 8de9      	LDD  R30,Y+25
000871 8dfa      	LDD  R31,Y+25+1
000872 93fa      	ST   -Y,R31
000873 93ea      	ST   -Y,R30
000874 89ea      	LDD  R30,Y+18
000875 940e 107a 	CALL SUBOPT_0x1D
000877 93fa      	ST   -Y,R31
000878 93ea      	ST   -Y,R30
000879 8de9      	LDD  R30,Y+25
00087a 8dfa      	LDD  R31,Y+25+1
00087b 93fa      	ST   -Y,R31
00087c 93ea      	ST   -Y,R30
00087d 89ee      	LDD  R30,Y+22
00087e 940e 107a 	CALL SUBOPT_0x1D
000880 940e 0ff4 	CALL SUBOPT_0xF
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
000882 89a8      	LDD  R26,Y+16
000883 27bb      	CLR  R27
000884 89e8      	LDD  R30,Y+16
000885 e0f0      	LDI  R31,0
000886 940e 145e 	CALL __MULW12
000888 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
000889 e000     +LDI R16 , LOW ( 0 )
00088a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9E:
                +
00088b 1720     +CP R18 , R16
00088c 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
00088d f03c      	BRLT _0x9F
00088e 89e9      	LDD  R30,Y+17
00088f 89fa      	LDD  R31,Y+17+1
000890 940e 0ffc 	CALL SUBOPT_0x10
                +
000892 5f0f     +SUBI R16 , LOW ( - 1 )
000893 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000894 cff6      	RJMP _0x9E
                 _0x9F:
000895 89ef      	LDD  R30,Y+23
000896 8df8      	LDD  R31,Y+23+1
000897 8da9      	LDD  R26,Y+25
000898 8dba      	LDD  R27,Y+25+1
000899 17ea      	CP   R30,R26
00089a 07fb      	CPC  R31,R27
00089b f439      	BRNE _0xA1
00089c 89eb      	LDD  R30,Y+19
00089d 89fc      	LDD  R31,Y+19+1
00089e 89ad      	LDD  R26,Y+21
00089f 89be      	LDD  R27,Y+21+1
0008a0 17ea      	CP   R30,R26
0008a1 07fb      	CPC  R31,R27
0008a2 f009      	BREQ _0xA2
                 _0xA1:
0008a3 c001      	RJMP _0xA0
                 _0xA2:
                 ;		break;
0008a4 c032      	RJMP _0x9C
                 ;
                 ;		error2 = error * 2;
                 _0xA0:
0008a5 85e8      	LDD  R30,Y+8
0008a6 85f9      	LDD  R31,Y+8+1
0008a7 0fee      	LSL  R30
0008a8 1fff      	ROL  R31
0008a9 83ee      	STD  Y+6,R30
0008aa 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
0008ab 85ee      	LDD  R30,Y+14
0008ac 85ff      	LDD  R31,Y+14+1
0008ad 940e 1407 	CALL __ANEGW1
0008af 81ae      	LDD  R26,Y+6
0008b0 81bf      	LDD  R27,Y+6+1
0008b1 17ea      	CP   R30,R26
0008b2 07fb      	CPC  R31,R27
0008b3 f474      	BRGE _0xA3
                 ;		{
                 ;			error -= deltaY;
0008b4 85ae      	LDD  R26,Y+14
0008b5 85bf      	LDD  R27,Y+14+1
0008b6 940e 1080 	CALL SUBOPT_0x1E
0008b8 87e8      	STD  Y+8,R30
0008b9 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
0008ba 85ec      	LDD  R30,Y+12
0008bb 85fd      	LDD  R31,Y+12+1
0008bc 8da9      	LDD  R26,Y+25
0008bd 8dba      	LDD  R27,Y+25+1
0008be 0fea      	ADD  R30,R26
0008bf 1ffb      	ADC  R31,R27
0008c0 8fe9      	STD  Y+25,R30
0008c1 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA3:
0008c2 81ae      	LDD  R26,Y+6
0008c3 81bf      	LDD  R27,Y+6+1
0008c4 17a4      	CP   R26,R20
0008c5 07b5      	CPC  R27,R21
0008c6 f47c      	BRGE _0xA4
                 ;		{
                 ;			error += deltaX;
0008c7 01fa      	MOVW R30,R20
0008c8 85a8      	LDD  R26,Y+8
0008c9 85b9      	LDD  R27,Y+8+1
0008ca 0fea      	ADD  R30,R26
0008cb 1ffb      	ADC  R31,R27
0008cc 87e8      	STD  Y+8,R30
0008cd 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
0008ce 85ea      	LDD  R30,Y+10
0008cf 85fb      	LDD  R31,Y+10+1
0008d0 89ad      	LDD  R26,Y+21
0008d1 89be      	LDD  R27,Y+21+1
0008d2 0fea      	ADD  R30,R26
0008d3 1ffb      	ADC  R31,R27
0008d4 8bed      	STD  Y+21,R30
0008d5 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA4:
0008d6 cf99      	RJMP _0x9A
                 _0x9C:
                 ;}
0008d7 940e 1516 	CALL __LOADLOCR6
0008d9 966b      	ADIW R28,27
0008da 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
0008db 940e 1005 	CALL SUBOPT_0x12
0008dd 940e 1005 	CALL SUBOPT_0x12
0008df 940e 1005 	CALL SUBOPT_0x12
0008e1 85e8      	LDD  R30,Y+8
0008e2 85f9      	LDD  R31,Y+8+1
0008e3 940e 1085 	CALL SUBOPT_0x1F
0008e5 940e 1000 	CALL SUBOPT_0x11
0008e7 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
0008e8 940e 1005 	CALL SUBOPT_0x12
0008ea 81ec      	LDD  R30,Y+4
0008eb 81fd      	LDD  R31,Y+4+1
0008ec 940e 1085 	CALL SUBOPT_0x1F
0008ee 940e 1005 	CALL SUBOPT_0x12
0008f0 940e 1005 	CALL SUBOPT_0x12
0008f2 940e 1000 	CALL SUBOPT_0x11
0008f4 df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
0008f5 940e 1005 	CALL SUBOPT_0x12
0008f7 940e 1005 	CALL SUBOPT_0x12
0008f9 81ae      	LDD  R26,Y+6
0008fa 81bf      	LDD  R27,Y+6+1
0008fb 940e 1080 	CALL SUBOPT_0x1E
0008fd 93fa      	ST   -Y,R31
0008fe 93ea      	ST   -Y,R30
0008ff 940e 1005 	CALL SUBOPT_0x12
000901 940e 1000 	CALL SUBOPT_0x11
000903 df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
000904 81aa      	LDD  R26,Y+2
000905 81bb      	LDD  R27,Y+2+1
000906 940e 1080 	CALL SUBOPT_0x1E
000908 93fa      	ST   -Y,R31
000909 93ea      	ST   -Y,R30
00090a 940e 1005 	CALL SUBOPT_0x12
00090c 940e 1005 	CALL SUBOPT_0x12
00090e 940e 1005 	CALL SUBOPT_0x12
000910 940e 1000 	CALL SUBOPT_0x11
000912 defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x20C0004:
000913 962c      	ADIW R28,12
000914 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000915 940e 100f 	CALL SUBOPT_0x14
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
000917 940e 1021 	CALL SUBOPT_0x15
                 ;  if (j < 0) j *= -1;
000919 f412      	BRPL _0xA5
00091a 940e 102b 	CALL SUBOPT_0x16
                 ;  k = StopY - StartY + 1;
                 _0xA5:
00091c 940e 1032 	CALL SUBOPT_0x17
                 ;  if (k < 0) k *= -1;
00091e f422      	BRPL _0xA6
00091f 940e 1042 	CALL SUBOPT_0x18
000921 940e 1047 	CALL SUBOPT_0x19
                 ;  k = k * j;
                 _0xA6:
000923 940e 1052 	CALL SUBOPT_0x1A
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA8:
000925 940e 1065 	CALL SUBOPT_0x1B
000927 f43c      	BRGE _0xA9
000928 85ea      	LDD  R30,Y+10
000929 85fb      	LDD  R31,Y+10+1
00092a 940e 0ffc 	CALL SUBOPT_0x10
00092c 940e 106d 	CALL SUBOPT_0x1C
00092e cff6      	RJMP _0xA8
                 _0xA9:
                 _0x20C0003:
00092f 8119      	LDD  R17,Y+1
000930 8108      	LDD  R16,Y+0
000931 9664      	ADIW R28,20
000932 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;char i;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ; 0000 0009 {
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000933 931a      	ST   -Y,R17
000934 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000935 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000936 940e 0fcc 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
000938 ede3      	LDI  R30,LOW(211)
000939 940e 108c 	CALL SUBOPT_0x20
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
00093b c05b      	RJMP _0x20C0002
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
00093c 931a      	ST   -Y,R17
00093d 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00093e 981a      	CBI  0x3,2
                 ;  delay_ms(1);
00093f 940e 0fcc 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
000941 e9e3      	LDI  R30,LOW(147)
000942 940e 108c 	CALL SUBOPT_0x20
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000944 c052      	RJMP _0x20C0002
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
000945 981a      	CBI  0x3,2
                 ;  delay_ms(5);
000946 e0e5      	LDI  R30,LOW(5)
000947 e0f0      	LDI  R31,HIGH(5)
000948 940e 0fd9 	CALL SUBOPT_0x9
                 ;  spi(0b10010000);
00094a e9e0      	LDI  R30,LOW(144)
00094b 93ea      	ST   -Y,R30
00094c 940e 0f9d 	CALL _spi
                 ;  delay_us(100);
                +
00094e e980     +LDI R24 , LOW ( 400 )
00094f e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000950 9701     +SBIW R24 , 1
000951 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
000952 e0e0      	LDI  R30,LOW(0)
000953 93ea      	ST   -Y,R30
000954 940e 0f9d 	CALL _spi
                 ;  spi(0x00);
000956 e0e0      	LDI  R30,LOW(0)
000957 93ea      	ST   -Y,R30
000958 940e 0f9d 	CALL _spi
                 ;  TOUCH_CS = 1;
00095a 9a1a      	SBI  0x3,2
                 ;}
00095b 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
00095c 931a      	ST   -Y,R17
00095d 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00095e dfd4      	RCALL _TSC2046_getADC_X
00095f 51e4      	SUBI R30,LOW(1300)
000960 40f5      	SBCI R31,HIGH(1300)
000961 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000962 2311      	TST  R17
000963 f412      	BRPL _0xBA
                +
000964 e000     +LDI R16 , LOW ( 0 )
000965 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xBA:
000966 940e 10a5 	CALL SUBOPT_0x21
                +
000968 e5e5     +LDI R30 , LOW ( 0x4275D555 )
000969 edf5     +LDI R31 , HIGH ( 0x4275D555 )
00096a e765     +LDI R22 , BYTE3 ( 0x4275D555 )
00096b e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
00096c 940e 10ad 	CALL SUBOPT_0x22
                 ;  return res;
00096e c028      	RJMP _0x20C0002
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
00096f 931a      	ST   -Y,R17
000970 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000971 dfca      	RCALL _TSC2046_getADC_Y
000972 53e4      	SUBI R30,LOW(2100)
000973 40f8      	SBCI R31,HIGH(2100)
000974 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000975 2311      	TST  R17
000976 f412      	BRPL _0xBB
                +
000977 e000     +LDI R16 , LOW ( 0 )
000978 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xBB:
000979 940e 10a5 	CALL SUBOPT_0x21
                +
00097b e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
00097c e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
00097d ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
00097e e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
00097f 940e 10ad 	CALL SUBOPT_0x22
                 ;  return res;
000981 c015      	RJMP _0x20C0002
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;  //TOUCH_CS = 0;
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  //delay_us(10);
                 ;  //TOUCH_IRQ_PORT = 1;
                 ;  //TOUCH_CS = 1;
                 ;  if (TOUCH_IRQ < 1)
000982 931a      	ST   -Y,R17
000983 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
000984 e010      	LDI  R17,0
000985 e0a0      	LDI  R26,0
000986 990b      	SBIC 0x1,3
000987 e0a1      	LDI  R26,1
000988 30a1      	CPI  R26,LOW(0x1)
000989 f460      	BRSH _0xBC
                 ;  {
                 ;    tempX = 0;
00098a 940e 10b4 	CALL SUBOPT_0x23
                 ;    tempY = 0;
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
00098c e000      	LDI  R16,LOW(0)
                 _0xBE:
00098d 3100      	CPI  R16,16
00098e f420      	BRSH _0xBF
                 ;    {
                 ;      tempX += TSC2046_getX();
00098f 940e 10c6 	CALL SUBOPT_0x24
                 ;      tempY += TSC2046_getY();
                 ;    }
000991 5f0f      	SUBI R16,-1
000992 cffa      	RJMP _0xBE
                 _0xBF:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
000993 940e 10f3 	CALL SUBOPT_0x25
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
                 ;    TSC2046_Stop();
                 ;    res = 1;
000995 e011      	LDI  R17,LOW(1)
                 ;  }
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  return res;
                 _0xBC:
000996 2fe1      	MOV  R30,R17
                 _0x20C0002:
000997 9109      	LD   R16,Y+
000998 9119      	LD   R17,Y+
000999 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  TOUCH_CS = 0;
00099a 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
00099b 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
00099c e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
00099d 958a     +DEC R24
00099e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
00099f 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
0009a0 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
0009a1 940e 10b4 	CALL SUBOPT_0x23
                 ;    tempY = 0;
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
0009a3 2444      	CLR  R4
                 _0xC9:
0009a4 e1e0      	LDI  R30,LOW(16)
0009a5 164e      	CP   R4,R30
0009a6 f420      	BRSH _0xCA
                 ;    {
                 ;      tempX += TSC2046_getX();
0009a7 940e 10c6 	CALL SUBOPT_0x24
                 ;      tempY += TSC2046_getY();
                 ;    }
0009a9 9443      	INC  R4
0009aa cff9      	RJMP _0xC9
                 _0xCA:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
0009ab 940e 10f3 	CALL SUBOPT_0x25
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
                 ;    TSC2046_Stop();
                 ;}
0009ad 9508      	RET
                 ;#include "SPI_routines.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : SPI_routines.c ******
                 ;//**************************************************
                 ;#include "SPI_routines.h"
                 ;
                 ;unsigned char SPI_transmit(unsigned char data)
                 ; 0000 000A {
                 ;// Start transmission
                 ;SPDR = data;
                 ;	data -> Y+0
                 ;
                 ;// Wait for transmission complete
                 ;while(!(SPSR & (1<<SPIF)));
                 ;  data = SPDR;
                 ;
                 ;return(data);
                 ;}
                 ;
                 ;unsigned char SPI_receive(void)
                 ;{
                 ;unsigned char data;
                 ;// Wait for reception complete
                 ;
                 ;SPDR = 0xff;
                 ;	data -> R17
                 ;while(!(SPSR & (1<<SPIF)));
                 ;  data = SPDR;
                 ;
                 ;// Return data register
                 ;return data;
                 ;}
                 ;#include "SD_routines.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : SD_routines.c ******
                 ;//**************************************************
                 ;#include "SPI_routines.h"
                 ;#include "SD_routines.h"
                 ;
                 ;//******************************************************************
                 ;//Function: to initialize the SD card in SPI mode
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_init(void)
                 ; 0000 000B {
                 ;  unsigned char i, response, retry = 0;
                 ;
                 ;  SD_CS_ASSERT;
                 ;	i -> R17
                 ;	response -> R16
                 ;	retry -> R19
                 ;  do
                 ;  {
                 ;    for(i=0;i<10;i++) SPI_transmit(0xff);
                 ;    retry++;
                 ;    if(retry>0xfe) return 1; //time out
                 ;  }
                 ;  while(response != 0x01);
                 ;
                 ;  SD_CS_DEASSERT;
                 ;
                 ;  SPI_transmit (0xff);
                 ;  SPI_transmit (0xff);
                 ;
                 ;  retry = 0;
                 ;
                 ;  do
                 ;  {
                 ;    response = SD_sendCommand(SEND_OP_COND, 0); //activate card's initialization process
                 ;    response = SD_sendCommand(SEND_OP_COND, 0); //resend command (for compatibility with some cards)
                 ;    retry++;
                 ;    if(retry>0xfe) return 1; //time out
                 ;  }
                 ;  while(response);
                 ;
                 ;
                 ;  SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
                 ;  SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512
                 ;
                 ;  return 0; //normal return
                 ;}
                 ;
                 ;//******************************************************************
                 ;//Function: to send a command to SD card
                 ;//Arguments: unsigned char (8-bit command value)
                 ;// & unsigned long (32-bit command argument)
                 ;//return: unsigned char; response byte
                 ;//******************************************************************
                 ;unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
                 ;{
                 ;unsigned char response, retry=0;
                 ;
                 ;
                 ;SD_CS_ASSERT;
                 ;	cmd -> Y+6
                 ;	arg -> Y+2
                 ;	response -> R17
                 ;	retry -> R16
                 ;
                 ;
                 ;SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
                 ;SPI_transmit(arg>>24);
                 ;SPI_transmit(arg>>16);
                 ;SPI_transmit(arg>>8);
                 ;SPI_transmit(arg);
                 ;SPI_transmit(0x95);
                 ;
                 ;
                 ;while((response = SPI_receive()) == 0xff) //wait response
                 ;   if(retry++ > 0xfe) break; //time out error
                 ;
                 ;
                 ;SPI_receive(); //extra 8 CLK
                 ;SD_CS_DEASSERT;
                 ;
                 ;
                 ;return response; //return state
                 ;}
                 ;
                 ;
                 ;//******************************************************************
                 ;//Function: to read a single block from SD card
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_readSingleBlock(unsigned long startBlock)
                 ;{
                 ;unsigned char response;
                 ;unsigned int i, retry=0;
                 ;
                 ;response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock<<9); //read a Block command
                 ;	startBlock -> Y+6
                 ;	response -> R17
                 ;	i -> R18,R19
                 ;	retry -> R20,R21
                 ;//block address converted to starting address of 512 byte Block
                 ;if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
                 ;  return response;
                 ;
                 ;SD_CS_ASSERT;
                 ;
                 ;while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
                 ;  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
                 ;
                 ;  for(i=0; i<512; i++) //read 512 bytes
                 ;  buffer[i] = SPI_receive();
                 ;SPI_receive();
                 ;
                 ;
                 ;SPI_receive(); //extra 8 clock pulses
                 ;SD_CS_DEASSERT;
                 ;return 0;
                 ;}
                 ;
                 ;//******************************************************************
                 ;//Function: to write to a single block of SD card
                 ;//Arguments: none
                 ;//return: unsigned char; will be 0 if no error,
                 ;// otherwise the response byte will be sent
                 ;//******************************************************************
                 ;unsigned char SD_writeSingleBlock(unsigned long startBlock)
                 ;{
                 ;unsigned char response;
                 ;unsigned int i, retry=0;
                 ;
                 ;
                 ;response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock<<9); //write a Block command
                 ;	startBlock -> Y+6
                 ;	response -> R17
                 ;	i -> R18,R19
                 ;	retry -> R20,R21
                 ;if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
                 ;return response;
                 ;
                 ;
                 ;SD_CS_ASSERT;
                 ;
                 ;
                 ;SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
                 ;
                 ;
                 ;for(i=0; i<512; i++)    //send 512 bytes data
                 ;  SPI_transmit(buffer[i]);
                 ;SPI_transmit(0xff);
                 ;
                 ;
                 ;response = SPI_receive();
                 ;
                 ;
                 ;if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
                 ;{                              //AAA='101'-data rejected due to CRC error
                 ;  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
                 ;  return response;
                 ;}
                 ;
                 ;
                 ;while(!SPI_receive()) //wait for SD card to complete writing and get idle
                 ;if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
                 ;
                 ;
                 ;SD_CS_DEASSERT;
                 ;SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
                 ;SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
                 ;
                 ;
                 ;while(!SPI_receive()) //wait for SD card to complete writing and get idle
                 ;   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
                 ;SD_CS_DEASSERT;
                 ;
                 ;
                 ;return 0;
                 ;}
                 ;#include "FAT32.c"
                 ;//**************************************************
                 ;// ***** SOURCE FILE : FAT32.c ******
                 ;//**************************************************
                 ;#include "FAT32.h"
                 ;#include "SD_routines.h"
                 ;
                 ;//***************************************************************************
                 ;//Function: to read data from boot sector of SD card, to determine important
                 ;//parameters like bytesPerSector, sectorsPerCluster etc.
                 ;//Arguments: none
                 ;//return: none
                 ;//***************************************************************************
                 ;unsigned char getBootSectorData (void)
                 ; 0000 000C {
                 ;  struct BS_Structure *bpb; //mapping the buffer onto the structure
                 ;  struct MBRinfo_Structure *mbr;
                 ;  struct partitionInfo_Structure *partition;
                 ;  unsigned long dataSectors;
                 ;
                 ;  unusedSectors = 0;
                 ;	*bpb -> R16,R17
                 ;	*mbr -> R18,R19
                 ;	*partition -> R20,R21
                 ;	dataSectors -> Y+6
                 ;
                 ;  SD_readSingleBlock(0);
                 ;  bpb = (struct BS_Structure *)buffer;
                 ;
                 ;  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) //check if it is boot sector
                 ;  {
                 ;    mbr = (struct MBRinfo_Structure *) buffer;         //if it is not boot sector, it must be MBR
                 ;    if(mbr->signature != 0xaa55) return 1;            //if it is not even MBR then it's not FAT32
                 ;    partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
                 ;    unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
                 ;    SD_readSingleBlock(partition->firstSector);//read the bpb sector
                 ;    bpb = (struct BS_Structure *)buffer;
                 ;    if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)  return 1;
                 ;  }
                 ;
                 ;  bytesPerSector      = bpb->bytesPerSector;
                 ;  sectorPerCluster    = bpb->sectorPerCluster;
                 ;  reservedSectorCount = bpb->reservedSectorCount;
                 ;  rootCluster         = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
                 ;  firstDataSector     = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
                 ;  dataSectors         = bpb->totalSectors_F32 - bpb->reservedSectorCount - ( bpb->numberofFATs * bpb->FATsize_F32);
                 ;  totalClusters       = dataSectors / sectorPerCluster;
                 ;
                 ;  if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
                 ;    freeClusterCountUpdated = 0;
                 ;  else freeClusterCountUpdated = 1;
                 ;
                 ;  return 0;
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to calculate first sector address of any given cluster
                 ;//Arguments: cluster number for which first sector is to be found
                 ;//return: first sector address
                 ;//***************************************************************************
                 ;unsigned long getFirstSector(unsigned long clusterNumber)
                 ;{
                 ;  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
                 ;	clusterNumber -> Y+0
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: get cluster entry value from FAT to find out the next cluster in the chain
                 ;//or set new cluster entry in FAT
                 ;//Arguments: 1. current cluster number, 2. get_set (=GET, if next cluster is to be found or = SET,
                 ;//if next cluster is to be set 3. next cluster number, if argument#2 = SET, else 0
                 ;//return: next cluster number, if if argument#2 = GET, else 0
                 ;//****************************************************************************
                 ;unsigned long getSetNextCluster (unsigned long clusterNumber,
                 ;                                 unsigned char get_set,
                 ;                                 unsigned long clusterEntry)
                 ;{
                 ;  unsigned int  FATEntryOffset;
                 ;  unsigned long *FATEntryValue;
                 ;  unsigned long FATEntrySector;
                 ;  unsigned char retry = 0;
                 ;
                 ;  //get sector number of the cluster entry in the FAT
                 ;  FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
                 ;	clusterNumber -> Y+15
                 ;	get_set -> Y+14
                 ;	clusterEntry -> Y+10
                 ;	FATEntryOffset -> R16,R17
                 ;	*FATEntryValue -> R18,R19
                 ;	FATEntrySector -> Y+6
                 ;	retry -> R21
                 ;  //get the offset address in that sector number
                 ;  FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
                 ;  //read the sector into a buffer
                 ;  while(retry <10)
                 ;  {
                 ;    if(!SD_readSingleBlock(FATEntrySector)) break;
                 ;    retry++;
                 ;  }
                 ;
                 ;  //get the cluster address from the buffer
                 ;  FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
                 ;
                 ;  if(get_set == GET) return ((*FATEntryValue) & 0x0fffffff);
                 ;
                 ;  *FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
                 ;
                 ;  SD_writeSingleBlock(FATEntrySector);
                 ;
                 ;  return 0;
                 ;}
                 ;
                 ;//********************************************************************************************
                 ;//Function: to get or set next free cluster or total free clusters in FSinfo sector of SD card
                 ;//Arguments: 1.flag:TOTAL_FREE or NEXT_FREE,
                 ;//           2.flag: GET or SET
                 ;//           3.new FS entry, when argument2 is SET; or 0, when argument2 is GET
                 ;//return: -next free cluster, if arg1 is NEXT_FREE & arg2 is GET
                 ;//        -total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
                 ;//        -0xffffffff, if any error or if arg2 is SET
                 ;//********************************************************************************************
                 ;unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
                 ;{
                 ;  struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
                 ;  unsigned char error;
                 ;
                 ;  SD_readSingleBlock(unusedSectors + 1);
                 ;	totOrNext -> Y+9
                 ;	get_set -> Y+8
                 ;	FSEntry -> Y+4
                 ;	*FS -> R16,R17
                 ;	error -> R19
                 ;
                 ;  if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
                 ;    return 0xffffffff;
                 ;
                 ;
                 ;  if(get_set == GET)
                 ;  {
                 ;    if(totOrNext == TOTAL_FREE) return(FS->freeClusterCount);
                 ;    else // when totOrNext = NEXT_FREE
                 ;    return(FS->nextFreeCluster);
                 ;  }
                 ;  else
                 ;  {
                 ;    if(totOrNext == TOTAL_FREE) FS->freeClusterCount = FSEntry;
                 ;    else // when totOrNext = NEXT_FREE
                 ;      FS->nextFreeCluster = FSEntry;
                 ;    error = SD_writeSingleBlock(unusedSectors + 1); return error;   //update FSinfo
                 ;  }
                 ;  return 0xffffffff;
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to convert normal short file name into FAT format
                 ;//Arguments: pointer to the file name
                 ;//return: 0-if no error, 1-if error
                 ;//****************************************************************************
                 ;unsigned char convertFileName (unsigned char *fileName)
                 ;{
                 ;  unsigned char fileNameFAT[11];
                 ;  unsigned char j, k, dot;
                 ;
                 ;  for(j = 0; j < 11; j++)
                 ;	*fileName -> Y+15
                 ;	fileNameFAT -> Y+4
                 ;	j -> R17
                 ;	k -> R16
                 ;	dot -> R19
                 ;    if (fileName[j] == '.') dot = j;
                 ;
                 ;  if(dot>8) return dot;
                 ;
                 ;  for(k=0; k<dot; k++) //setting file name
                 ;    fileNameFAT[k] = fileName[k];
                 ;    fileNameFAT[k] = ' ';
                 ;  for(k=8; k<11; k++) //setting file extention
                 ;  {
                 ;    if (fileName[dot] != 0)
                 ;      fileNameFAT[k] = fileName[dot++];
                 ;    else //filling extension trail with blanks
                 ;      while( k < 11)
                 ;        fileNameFAT[k++] = ' ';
                 ;
                 ;  for(j = 0; j < 11; j++) //converting small letters to caps
                 ;    if ((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
                 ;      fileNameFAT[j] -= 0x20;
                 ;
                 ;  for(j = 0; j < 11; j++)
                 ;    fileName[j] = fileNameFAT[j];
                 ;}
                 ;
                 ;//***************************************************************************
                 ;//Function: to get DIR/FILE list or a single file address (cluster number) or to delete a specified file
                 ;//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
                 ;//return: first cluster of the file, if flag = GET_FILE
                 ;//        print file/dir list of the root directory, if flag = GET_LIST
                 ;//        Delete the file mentioned in arg#2, if flag = DELETE
                 ;//****************************************************************************
                 ;struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
                 ;{
                 ;unsigned long cluster, sector, firstSector;
                 ;struct dir_Structure *dir;
                 ;unsigned int i;
                 ;unsigned char j;
                 ;
                 ;cluster = rootCluster; //root cluster
                 ;	flag -> Y+20
                 ;	*fileName -> Y+18
                 ;	cluster -> Y+14
                 ;	sector -> Y+10
                 ;	firstSector -> Y+6
                 ;	*dir -> R16,R17
                 ;	i -> R18,R19
                 ;	j -> R21
                 ;
                 ;while(1)
                 ;{
                 ;   firstSector = getFirstSector (cluster);
                 ;
                 ;   for(sector = 0; sector < sectorPerCluster; sector++)
                 ;   {
                 ;     SD_readSingleBlock (firstSector + sector);
                 ;
                 ;     for(i=0; i<bytesPerSector; i+=32)
                 ;     {
                 ;            dir = (struct dir_Structure *) &buffer[i];
                 ;
                 ;        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
                 ;        {
                 ;          if((flag == GET_FILE) || (flag == DELETE))
                 ;          //transmitString("File does not exist!");
                 ;          return 0;
                 ;        }
                 ;
                 ;        else if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
                 ;        {
                 ;          if((flag == GET_FILE) || (flag == DELETE))
                 ;          {
                 ;            for(j=0; j<11; j++)
                 ;              if(dir->name[j] != fileName[j]) break;
                 ;            if(j == 11)
                 ;            {
                 ;              if(flag == GET_FILE)
                 ;              return (dir);
                 ;            }
                 ;          }
                 ;       }
                 ;     }
                 ;   }
                 ;   cluster = (getSetNextCluster (cluster, GET, 0));
                 ;   if(cluster > 0x0ffffff6) return 0;
                 ;   if(cluster == 0)
                 ;   {
                 ;   //transmitString("Error in getting cluster");
                 ;   return 0;}
                 ; }
                 ;return 0;
                 ;}
                 ;
                 ;#define M_PI 3.14159265
                 ;
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 0015 #endasm
                 ;#include <i2c.h>
                 ;
                 ;
                 ;unsigned int k;
                 ;unsigned C_H, C_L;
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define sinf sin
                 ;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0055 {
                 _usart0_rx_isr:
0009ae 940e 1113 	CALL SUBOPT_0x26
                 ; 0000 0056 char status,data;
                 ; 0000 0057 status=UCSR0A;
0009b0 931a      	ST   -Y,R17
0009b1 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0009b2 b11b      	IN   R17,11
                 ; 0000 0058 data=UDR0;
0009b3 b10c      	IN   R16,12
                 ; 0000 0059 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0009b4 2fe1      	MOV  R30,R17
0009b5 71ec      	ANDI R30,LOW(0x1C)
0009b6 f4d9      	BRNE _0x160
                 ; 0000 005A    {
                 ; 0000 005B    rx_buffer0[rx_wr_index0++]=data;
0009b7 91e0 07de 	LDS  R30,_rx_wr_index0
0009b9 5fef      	SUBI R30,-LOW(1)
0009ba 93e0 07de 	STS  _rx_wr_index0,R30
0009bc 940e 1119 	CALL SUBOPT_0x27
0009be 8300      	ST   Z,R16
                 ; 0000 005C #if RX_BUFFER_SIZE0 == 256
                 ; 0000 005D    // special case for receiver buffer size=256
                 ; 0000 005E    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 005F #else
                 ; 0000 0060    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0009bf 91a0 07de 	LDS  R26,_rx_wr_index0
0009c1 30a8      	CPI  R26,LOW(0x8)
0009c2 f419      	BRNE _0x161
0009c3 e0e0      	LDI  R30,LOW(0)
0009c4 93e0 07de 	STS  _rx_wr_index0,R30
                 ; 0000 0061    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x161:
0009c6 91a0 07e0 	LDS  R26,_rx_counter0
0009c8 5faf      	SUBI R26,-LOW(1)
0009c9 93a0 07e0 	STS  _rx_counter0,R26
0009cb 30a8      	CPI  R26,LOW(0x8)
0009cc f429      	BRNE _0x162
                 ; 0000 0062       {
                 ; 0000 0063       rx_counter0=0;
0009cd e0e0      	LDI  R30,LOW(0)
0009ce 93e0 07e0 	STS  _rx_counter0,R30
                 ; 0000 0064       rx_buffer_overflow0=1;
0009d0 9468      	SET
0009d1 f821      	BLD  R2,1
                 ; 0000 0065       }
                 ; 0000 0066 #endif
                 ; 0000 0067    }
                 _0x162:
                 ; 0000 0068 }
                 _0x160:
0009d2 9109      	LD   R16,Y+
0009d3 9119      	LD   R17,Y+
0009d4 c0a3      	RJMP _0x21A
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 006F {
                 _getchar:
                 ; 0000 0070 char data;
                 ; 0000 0071 while (rx_counter0==0);
0009d5 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x163:
0009d6 91e0 07e0 	LDS  R30,_rx_counter0
0009d8 30e0      	CPI  R30,0
0009d9 f3e1      	BREQ _0x163
                 ; 0000 0072 data=rx_buffer0[rx_rd_index0++];
0009da 91e0 07df 	LDS  R30,_rx_rd_index0
0009dc 5fef      	SUBI R30,-LOW(1)
0009dd 93e0 07df 	STS  _rx_rd_index0,R30
0009df 940e 1119 	CALL SUBOPT_0x27
0009e1 8110      	LD   R17,Z
                 ; 0000 0073 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0074 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0009e2 91a0 07df 	LDS  R26,_rx_rd_index0
0009e4 30a8      	CPI  R26,LOW(0x8)
0009e5 f419      	BRNE _0x166
0009e6 e0e0      	LDI  R30,LOW(0)
0009e7 93e0 07df 	STS  _rx_rd_index0,R30
                 ; 0000 0075 #endif
                 ; 0000 0076 #asm("cli")
                 _0x166:
0009e9 94f8      	cli
                 ; 0000 0077 --rx_counter0;
0009ea 91e0 07e0 	LDS  R30,_rx_counter0
0009ec 50e1      	SUBI R30,LOW(1)
0009ed 93e0 07e0 	STS  _rx_counter0,R30
                 ; 0000 0078 #asm("sei")
0009ef 9478      	sei
                 ; 0000 0079 return data;
0009f0 c1aa      	RJMP _0x20C0001
                 ; 0000 007A }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0090 {
                 _usart0_tx_isr:
0009f1 940e 1113 	CALL SUBOPT_0x26
                 ; 0000 0091 if (tx_counter0)
0009f3 91e0 07eb 	LDS  R30,_tx_counter0
0009f5 30e0      	CPI  R30,0
0009f6 f099      	BREQ _0x167
                 ; 0000 0092    {
                 ; 0000 0093    --tx_counter0;
0009f7 50e1      	SUBI R30,LOW(1)
0009f8 93e0 07eb 	STS  _tx_counter0,R30
                 ; 0000 0094    UDR0=tx_buffer0[tx_rd_index0++];
0009fa 91e0 07ea 	LDS  R30,_tx_rd_index0
0009fc 5fef      	SUBI R30,-LOW(1)
0009fd 93e0 07ea 	STS  _tx_rd_index0,R30
0009ff 940e 111e 	CALL SUBOPT_0x28
000a01 81e0      	LD   R30,Z
000a02 b9ec      	OUT  0xC,R30
                 ; 0000 0095 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0096    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000a03 91a0 07ea 	LDS  R26,_tx_rd_index0
000a05 30a8      	CPI  R26,LOW(0x8)
000a06 f419      	BRNE _0x168
000a07 e0e0      	LDI  R30,LOW(0)
000a08 93e0 07ea 	STS  _tx_rd_index0,R30
                 ; 0000 0097 #endif
                 ; 0000 0098    }
                 _0x168:
                 ; 0000 0099 }
                 _0x167:
000a0a c06d      	RJMP _0x21A
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00A1 {
                 _putchar:
                 ; 0000 00A2 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x169:
000a0b 91a0 07eb 	LDS  R26,_tx_counter0
000a0d 30a8      	CPI  R26,LOW(0x8)
000a0e f3e1      	BREQ _0x169
                 ; 0000 00A3 #asm("cli")
000a0f 94f8      	cli
                 ; 0000 00A4 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000a10 91e0 07eb 	LDS  R30,_tx_counter0
000a12 30e0      	CPI  R30,0
000a13 f411      	BRNE _0x16D
000a14 995d      	SBIC 0xB,5
000a15 c016      	RJMP _0x16C
                 _0x16D:
                 ; 0000 00A5    {
                 ; 0000 00A6    tx_buffer0[tx_wr_index0++]=c;
000a16 91e0 07e9 	LDS  R30,_tx_wr_index0
000a18 5fef      	SUBI R30,-LOW(1)
000a19 93e0 07e9 	STS  _tx_wr_index0,R30
000a1b 940e 111e 	CALL SUBOPT_0x28
000a1d 81a8      	LD   R26,Y
000a1e 83a0      	STD  Z+0,R26
                 ; 0000 00A7 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00A8    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000a1f 91a0 07e9 	LDS  R26,_tx_wr_index0
000a21 30a8      	CPI  R26,LOW(0x8)
000a22 f419      	BRNE _0x16F
000a23 e0e0      	LDI  R30,LOW(0)
000a24 93e0 07e9 	STS  _tx_wr_index0,R30
                 ; 0000 00A9 #endif
                 ; 0000 00AA    ++tx_counter0;
                 _0x16F:
000a26 91e0 07eb 	LDS  R30,_tx_counter0
000a28 5fef      	SUBI R30,-LOW(1)
000a29 93e0 07eb 	STS  _tx_counter0,R30
                 ; 0000 00AB    }
                 ; 0000 00AC else
000a2b c002      	RJMP _0x170
                 _0x16C:
                 ; 0000 00AD    UDR0=c;
000a2c 81e8      	LD   R30,Y
000a2d b9ec      	OUT  0xC,R30
                 ; 0000 00AE #asm("sei")
                 _0x170:
000a2e 9478      	sei
                 ; 0000 00AF }
000a2f 9621      	ADIW R28,1
000a30 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 8
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00C3 {
                 _usart1_rx_isr:
000a31 940e 1113 	CALL SUBOPT_0x26
                 ; 0000 00C4 char status,data;
                 ; 0000 00C5 status=UCSR1A;
000a33 931a      	ST   -Y,R17
000a34 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000a35 9110 009b 	LDS  R17,155
                 ; 0000 00C6 data=UDR1;
000a37 9100 009c 	LDS  R16,156
                 ; 0000 00C7 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000a39 2fe1      	MOV  R30,R17
000a3a 71ec      	ANDI R30,LOW(0x1C)
000a3b f4e9      	BRNE _0x171
                 ; 0000 00C8    {
                 ; 0000 00C9    rx_buffer1[rx_wr_index1++]=data;
000a3c 91e0 07f4 	LDS  R30,_rx_wr_index1
000a3e 5fef      	SUBI R30,-LOW(1)
000a3f 93e0 07f4 	STS  _rx_wr_index1,R30
000a41 50e1      	SUBI R30,LOW(1)
000a42 e0f0      	LDI  R31,0
000a43 51e4      	SUBI R30,LOW(-_rx_buffer1)
000a44 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
000a45 8300      	ST   Z,R16
                 ; 0000 00CA #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00CB    // special case for receiver buffer size=256
                 ; 0000 00CC    if (++rx_counter1 == 0)
                 ; 0000 00CD       {
                 ; 0000 00CE #else
                 ; 0000 00CF    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000a46 91a0 07f4 	LDS  R26,_rx_wr_index1
000a48 30a8      	CPI  R26,LOW(0x8)
000a49 f419      	BRNE _0x172
000a4a e0e0      	LDI  R30,LOW(0)
000a4b 93e0 07f4 	STS  _rx_wr_index1,R30
                 ; 0000 00D0    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0x172:
000a4d 91a0 07f6 	LDS  R26,_rx_counter1
000a4f 5faf      	SUBI R26,-LOW(1)
000a50 93a0 07f6 	STS  _rx_counter1,R26
000a52 30a8      	CPI  R26,LOW(0x8)
000a53 f429      	BRNE _0x173
                 ; 0000 00D1       {
                 ; 0000 00D2       rx_counter1=0;
000a54 e0e0      	LDI  R30,LOW(0)
000a55 93e0 07f6 	STS  _rx_counter1,R30
                 ; 0000 00D3 #endif
                 ; 0000 00D4       rx_buffer_overflow1=1;
000a57 9468      	SET
000a58 f822      	BLD  R2,2
                 ; 0000 00D5       }
                 ; 0000 00D6    }
                 _0x173:
                 ; 0000 00D7 }
                 _0x171:
000a59 9109      	LD   R16,Y+
000a5a 9119      	LD   R17,Y+
000a5b c01c      	RJMP _0x21A
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 00DC {
                 ; 0000 00DD char data;
                 ; 0000 00DE while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 00DF data=rx_buffer1[rx_rd_index1++];
                 ; 0000 00E0 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00E1 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 00E2 #endif
                 ; 0000 00E3 #asm("cli")
                 ; 0000 00E4 --rx_counter1;
                 ; 0000 00E5 #asm("sei")
                 ; 0000 00E6 return data;
                 ; 0000 00E7 }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 8
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 00F5 {
                 _usart1_tx_isr:
000a5c 940e 1113 	CALL SUBOPT_0x26
                 ; 0000 00F6 if (tx_counter1)
000a5e 91e0 0801 	LDS  R30,_tx_counter1
000a60 30e0      	CPI  R30,0
000a61 f0b1      	BREQ _0x178
                 ; 0000 00F7    {
                 ; 0000 00F8    --tx_counter1;
000a62 50e1      	SUBI R30,LOW(1)
000a63 93e0 0801 	STS  _tx_counter1,R30
                 ; 0000 00F9    UDR1=tx_buffer1[tx_rd_index1++];
000a65 91e0 0800 	LDS  R30,_tx_rd_index1
000a67 5fef      	SUBI R30,-LOW(1)
000a68 93e0 0800 	STS  _tx_rd_index1,R30
000a6a 50e1      	SUBI R30,LOW(1)
000a6b e0f0      	LDI  R31,0
000a6c 50e9      	SUBI R30,LOW(-_tx_buffer1)
000a6d 4ff8      	SBCI R31,HIGH(-_tx_buffer1)
000a6e 81e0      	LD   R30,Z
000a6f 93e0 009c 	STS  156,R30
                 ; 0000 00FA #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00FB    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000a71 91a0 0800 	LDS  R26,_tx_rd_index1
000a73 30a8      	CPI  R26,LOW(0x8)
000a74 f419      	BRNE _0x179
000a75 e0e0      	LDI  R30,LOW(0)
000a76 93e0 0800 	STS  _tx_rd_index1,R30
                 ; 0000 00FC #endif
                 ; 0000 00FD    }
                 _0x179:
                 ; 0000 00FE }
                 _0x178:
                 _0x21A:
000a78 91e9      	LD   R30,Y+
000a79 bfef      	OUT  SREG,R30
000a7a 91f9      	LD   R31,Y+
000a7b 91e9      	LD   R30,Y+
000a7c 91a9      	LD   R26,Y+
000a7d 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar1(char c)
                 ; 0000 0103 {
                 ; 0000 0104 while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 ; 0000 0105 #asm("cli")
                 ; 0000 0106 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 0107    {
                 ; 0000 0108    tx_buffer1[tx_wr_index1++]=c;
                 ; 0000 0109 #if TX_BUFFER_SIZE1 != 256
                 ; 0000 010A    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
                 ; 0000 010B #endif
                 ; 0000 010C    ++tx_counter1;
                 ; 0000 010D    }
                 ; 0000 010E else
                 ; 0000 010F    UDR1=c;
                 ; 0000 0110 #asm("sei")
                 ; 0000 0111 }
                 ;#pragma used-
                 ;
                 ;#define BTN_StartX 0
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;unsigned int BTN1_Y_Begin = BTN_StartY;
                 
                 	.DSEG
                 ;unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN1_X_Begin = BTN_StartX;
                 ;unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;volatile char Button_Pressed;
                 ;
                 ;#define BACKLIGHT 6
                 ;#define LEDGREEN 3
                 ;#define LEDRED 4
                 ;#define LEDBLUE 5
                 ;
                 ;volatile char Hour, Minute, Seconds, mSeconds, Day, Month;
                 ;volatile unsigned int Year;
                 ;
                 ;#define DateTime_X 300
                 ;#define DateTime_Y 256
                 ;
                 ;volatile unsigned int mSec;
                 ;
                 ;char SD_Ready;
                 ;unsigned char error, FAT32_active;
                 ;volatile long cluster, firstSector, nextSector;
                 ;volatile unsigned char buffer[512];
                 ;volatile long firstDataSector, rootCluster, totalClusters, byteCounter, fileSize;
                 ;volatile unsigned int bytesPerSector, sectorPerCluster, reservedSectorCount;
                 ;
                 ;volatile unsigned int LEDGREEN_mSec, LEDRED_mSec, LEDBLUE_mSec, LEDGREEN_max = 3000, LEDRED_max = 250, LEDBLUE_max = 1000;
                 ;
                 ;#define Pulse_X_Min 270
                 ;#define Pulse_X_Max 430
                 ;#define Pulse_Y_Min 0
                 ;#define Pulse_Y_Max 48
                 ;volatile unsigned int Pulse_X, Pulse_Y_Last, Pulse_mSec, Pulse_Value, Pulse_Counter, Pulse_ScreenValue;
                 ;volatile char Pulse_Flag, Pulse_ScreenFlag;
                 ;
                 ;#define Pulse_Value_X 430
                 ;#define Pulse_Value_Y 0
                 ;
                 ;#define Pulse_Enable PORTB.0
                 ;
                 ;#define Cardio_X_Min 0
                 ;#define Cardio_X_Max 480
                 ;#define Cardio_Y_Min 50
                 ;#define Cardio_Y_Max 232
                 ;volatile unsigned int Cardio_X, Cardio_Y_Last, Cardio_mSec, Cardio_Value, Cardio_Counter;
                 ;volatile float Cardio_Divider;
                 ;volatile int CardioMassive[128], CardioMassive_Counter;
                 ;
                 ;// 0 - высота осциллограммы
                 ;// 1 - длина шага осциллограммы
                 ;// 2 - высота отпределителя пульса
                 ;eeprom unsigned int WorkParameters[3] = {500, 10, 300};
                 ;flash unsigned int Default_Parameters[3] = {500, 10, 300};
                 ;eeprom char EEPROM_FLAG;
                 ;char Parameter_Counter;
                 ;
                 ;// Красный светодиод - был пульс и пропал
                 ;// Синий светодиод - низкий заряд батареи
                 ;// Зеленый светодиод - нормальная работа
                 ;
                 ;volatile char Alarm, Battery_Discharged, State;
                 ;
                 ;#define Battery_Width 24
                 ;#define Battery_Height 50
                 ;#define Battery_X 0
                 ;#define Battery_Y 0
                 ;
                 ;#define ScanLine_Length 25
                 ;unsigned int ScanLine_X;
                 ;
                 ;volatile unsigned int Refresh_mSec, Battery_Value, ADC0, ADC1, ADC2, Sleep_mSec;
                 ;volatile long longADC;
                 ;unsigned int Alarm_mSec;
                 ;
                 ;#define Address_Slave 'G'
                 ;
                 ;void SwitchPORTF(char Number, char Value)
                 ; 0000 0177 {
                 
                 	.CSEG
                 _SwitchPORTF:
                 ; 0000 0178   switch(Value)
                 ;	Number -> Y+1
                 ;	Value -> Y+0
000a7e 940e 0fa4 	CALL SUBOPT_0x0
                 ; 0000 0179   {
                 ; 0000 017A     case 0 :
000a80 9730      	SBIW R30,0
000a81 f429      	BRNE _0x197
                 ; 0000 017B       PORTF &= ~(0b00000001 << Number);
000a82 940e 1123 	CALL SUBOPT_0x29
000a84 95e0      	COM  R30
000a85 21e1      	AND  R30,R1
000a86 c007      	RJMP _0x215
                 ; 0000 017C     break;
                 ; 0000 017D     case 1 :
                 _0x197:
000a87 30e1      	CPI  R30,LOW(0x1)
000a88 e0a0      	LDI  R26,HIGH(0x1)
000a89 07fa      	CPC  R31,R26
000a8a f429      	BRNE _0x196
                 ; 0000 017E       PORTF |= 0b00000001 << Number;
000a8b 940e 1123 	CALL SUBOPT_0x29
000a8d 29e1      	OR   R30,R1
                 _0x215:
000a8e 2fa6      	MOV  R26,R22
000a8f 93ec      	ST   X,R30
                 ; 0000 017F     break;
                 ; 0000 0180   }
                 _0x196:
                 ; 0000 0181 }
000a90 9622      	ADIW R28,2
000a91 9508      	RET
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0185 {
                 _timer0_ovf_isr:
000a92 920a      	ST   -Y,R0
000a93 921a      	ST   -Y,R1
000a94 92fa      	ST   -Y,R15
000a95 936a      	ST   -Y,R22
000a96 937a      	ST   -Y,R23
000a97 938a      	ST   -Y,R24
000a98 939a      	ST   -Y,R25
000a99 93aa      	ST   -Y,R26
000a9a 93ba      	ST   -Y,R27
000a9b 93ea      	ST   -Y,R30
000a9c 93fa      	ST   -Y,R31
000a9d b7ef      	IN   R30,SREG
000a9e 93ea      	ST   -Y,R30
                 ; 0000 0186   TCNT0=0x06;
000a9f e0e6      	LDI  R30,LOW(6)
000aa0 bfe2      	OUT  0x32,R30
                 ; 0000 0187   mSec++;
000aa1 e2a3      	LDI  R26,LOW(_mSec)
000aa2 e0b8      	LDI  R27,HIGH(_mSec)
000aa3 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 0188   Pulse_mSec++;
000aa5 e3a8      	LDI  R26,LOW(_Pulse_mSec)
000aa6 e0b8      	LDI  R27,HIGH(_Pulse_mSec)
000aa7 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 0189   Refresh_mSec++;
000aa9 e5a0      	LDI  R26,LOW(_Refresh_mSec)
000aaa e0b8      	LDI  R27,HIGH(_Refresh_mSec)
000aab 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 018A   Sleep_mSec++;
000aad e5a4      	LDI  R26,LOW(_Sleep_mSec)
000aae e0b8      	LDI  R27,HIGH(_Sleep_mSec)
000aaf 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 018B   Alarm_mSec++;
000ab1 e5a6      	LDI  R26,LOW(_Alarm_mSec)
000ab2 e0b8      	LDI  R27,HIGH(_Alarm_mSec)
000ab3 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 018C   if (Alarm < 1)
000ab5 91a0 084b 	LDS  R26,_Alarm
000ab7 30a1      	CPI  R26,LOW(0x1)
000ab8 f010      	BRLO PC+3
000ab9 940c 0b07 	JMP _0x199
                 ; 0000 018D   {
                 ; 0000 018E     if (Battery_Discharged < 1)
000abb 91a0 084c 	LDS  R26,_Battery_Discharged
000abd 30a1      	CPI  R26,LOW(0x1)
000abe f520      	BRSH _0x19A
                 ; 0000 018F     {
                 ; 0000 0190       SwitchPORTF(LEDRED, 1);
000abf 940e 1132 	CALL SUBOPT_0x2B
                 ; 0000 0191       SwitchPORTF(LEDBLUE, 1);
000ac1 940e 1138 	CALL SUBOPT_0x2C
                 ; 0000 0192       LEDGREEN_mSec++;
000ac3 e2a8      	LDI  R26,LOW(_LEDGREEN_mSec)
000ac4 e0b8      	LDI  R27,HIGH(_LEDGREEN_mSec)
000ac5 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 0193       if (LEDGREEN_mSec > 30) SwitchPORTF(LEDGREEN, 1);
000ac7 91a0 0828 	LDS  R26,_LEDGREEN_mSec
000ac9 91b0 0829 	LDS  R27,_LEDGREEN_mSec+1
000acb 975f      	SBIW R26,31
000acc f010      	BRLO _0x19B
000acd 940e 113e 	CALL SUBOPT_0x2D
                 ; 0000 0194       if (LEDGREEN_mSec > LEDGREEN_max) {LEDGREEN_mSec = 0; SwitchPORTF(LEDGREEN, 0);}
                 _0x19B:
000acf 91e0 082e 	LDS  R30,_LEDGREEN_max
000ad1 91f0 082f 	LDS  R31,_LEDGREEN_max+1
000ad3 91a0 0828 	LDS  R26,_LEDGREEN_mSec
000ad5 91b0 0829 	LDS  R27,_LEDGREEN_mSec+1
000ad7 17ea      	CP   R30,R26
000ad8 07fb      	CPC  R31,R27
000ad9 f440      	BRSH _0x19C
000ada e0e0      	LDI  R30,LOW(0)
000adb 93e0 0828 	STS  _LEDGREEN_mSec,R30
000add 93e0 0829 	STS  _LEDGREEN_mSec+1,R30
000adf e0e3      	LDI  R30,LOW(3)
000ae0 940e 1144 	CALL SUBOPT_0x2E
                 ; 0000 0195     }
                 _0x19C:
                 ; 0000 0196     else
000ae2 c023      	RJMP _0x19D
                 _0x19A:
                 ; 0000 0197     {
                 ; 0000 0198       SwitchPORTF(LEDGREEN, 1);
000ae3 940e 113e 	CALL SUBOPT_0x2D
                 ; 0000 0199       SwitchPORTF(LEDRED, 1);
000ae5 940e 1132 	CALL SUBOPT_0x2B
                 ; 0000 019A       LEDBLUE_mSec++;
000ae7 e2ac      	LDI  R26,LOW(_LEDBLUE_mSec)
000ae8 e0b8      	LDI  R27,HIGH(_LEDBLUE_mSec)
000ae9 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 019B       if (LEDBLUE_mSec > 30) SwitchPORTF(LEDBLUE, 1);
000aeb 91a0 082c 	LDS  R26,_LEDBLUE_mSec
000aed 91b0 082d 	LDS  R27,_LEDBLUE_mSec+1
000aef 975f      	SBIW R26,31
000af0 f010      	BRLO _0x19E
000af1 940e 1138 	CALL SUBOPT_0x2C
                 ; 0000 019C       if (LEDBLUE_mSec > LEDBLUE_max) {LEDBLUE_mSec = 0; SwitchPORTF(LEDBLUE, 0);}
                 _0x19E:
000af3 91e0 0832 	LDS  R30,_LEDBLUE_max
000af5 91f0 0833 	LDS  R31,_LEDBLUE_max+1
000af7 91a0 082c 	LDS  R26,_LEDBLUE_mSec
000af9 91b0 082d 	LDS  R27,_LEDBLUE_mSec+1
000afb 17ea      	CP   R30,R26
000afc 07fb      	CPC  R31,R27
000afd f440      	BRSH _0x19F
000afe e0e0      	LDI  R30,LOW(0)
000aff 93e0 082c 	STS  _LEDBLUE_mSec,R30
000b01 93e0 082d 	STS  _LEDBLUE_mSec+1,R30
000b03 e0e5      	LDI  R30,LOW(5)
000b04 940e 1144 	CALL SUBOPT_0x2E
                 ; 0000 019D     }
                 _0x19F:
                 _0x19D:
                 ; 0000 019E   }
                 ; 0000 019F   else
000b06 c023      	RJMP _0x1A0
                 _0x199:
                 ; 0000 01A0   {
                 ; 0000 01A1     SwitchPORTF(LEDGREEN, 1);
000b07 940e 113e 	CALL SUBOPT_0x2D
                 ; 0000 01A2     SwitchPORTF(LEDBLUE, 1);
000b09 940e 1138 	CALL SUBOPT_0x2C
                 ; 0000 01A3     LEDRED_mSec++;
000b0b e2aa      	LDI  R26,LOW(_LEDRED_mSec)
000b0c e0b8      	LDI  R27,HIGH(_LEDRED_mSec)
000b0d 940e 112c 	CALL SUBOPT_0x2A
                 ; 0000 01A4     if (LEDRED_mSec > 30) SwitchPORTF(LEDRED, 1);
000b0f 91a0 082a 	LDS  R26,_LEDRED_mSec
000b11 91b0 082b 	LDS  R27,_LEDRED_mSec+1
000b13 975f      	SBIW R26,31
000b14 f010      	BRLO _0x1A1
000b15 940e 1132 	CALL SUBOPT_0x2B
                 ; 0000 01A5     if (LEDRED_mSec > LEDRED_max) {LEDRED_mSec = 0; SwitchPORTF(LEDRED, 0);}
                 _0x1A1:
000b17 91e0 0830 	LDS  R30,_LEDRED_max
000b19 91f0 0831 	LDS  R31,_LEDRED_max+1
000b1b 91a0 082a 	LDS  R26,_LEDRED_mSec
000b1d 91b0 082b 	LDS  R27,_LEDRED_mSec+1
000b1f 17ea      	CP   R30,R26
000b20 07fb      	CPC  R31,R27
000b21 f440      	BRSH _0x1A2
000b22 e0e0      	LDI  R30,LOW(0)
000b23 93e0 082a 	STS  _LEDRED_mSec,R30
000b25 93e0 082b 	STS  _LEDRED_mSec+1,R30
000b27 e0e4      	LDI  R30,LOW(4)
000b28 940e 1144 	CALL SUBOPT_0x2E
                 ; 0000 01A6   }
                 _0x1A2:
                 _0x1A0:
                 ; 0000 01A7 }
000b2a 91e9      	LD   R30,Y+
000b2b bfef      	OUT  SREG,R30
000b2c 91f9      	LD   R31,Y+
000b2d 91e9      	LD   R30,Y+
000b2e 91b9      	LD   R27,Y+
000b2f 91a9      	LD   R26,Y+
000b30 9199      	LD   R25,Y+
000b31 9189      	LD   R24,Y+
000b32 9179      	LD   R23,Y+
000b33 9169      	LD   R22,Y+
000b34 90f9      	LD   R15,Y+
000b35 9019      	LD   R1,Y+
000b36 9009      	LD   R0,Y+
000b37 9518      	RETI
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 01AD {
                 ; 0000 01AE ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
                 ; 0000 01AF // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 01B0 delay_us(10);
                 ; 0000 01B1 // Start the AD conversion
                 ; 0000 01B2 ADCSRA|=0x40;
                 ; 0000 01B3 // Wait for the AD conversion to complete
                 ; 0000 01B4 while ((ADCSRA & 0x10)==0);
                 ; 0000 01B5 ADCSRA|=0x10;
                 ; 0000 01B6 return ADCW;
                 ; 0000 01B7 }
                 ;
                 ;char SDCardInit(void)
                 ; 0000 01BA {
                 ; 0000 01BB   delay_ms(50);
                 ; 0000 01BC   if (SD_init() == 1)
                 ; 0000 01BD   {
                 ; 0000 01BE     SD_Ready = 0;
                 ; 0000 01BF     //PutString(SDAbsent, 199);
                 ; 0000 01C0   }
                 ; 0000 01C1   else
                 ; 0000 01C2   {
                 ; 0000 01C3     SD_Ready = 1;
                 ; 0000 01C4     //PutString(SDReady, 99);
                 ; 0000 01C5     //Minute_mSec = 0;
                 ; 0000 01C6     //while (Minute_mSec < 999)
                 ; 0000 01C7     //{
                 ; 0000 01C8 //      PutAntAnimation(49); // выводить анимацию
                 ; 0000 01C9 //      RefreshLEDDisplay();
                 ; 0000 01CA     //}
                 ; 0000 01CB   }
                 ; 0000 01CC   delay_ms(1);
                 ; 0000 01CD 
                 ; 0000 01CE   FAT32_active = 1;
                 ; 0000 01CF   error = getBootSectorData (); //read boot sector and keep necessary data in global variables
                 ; 0000 01D0   if(error)
                 ; 0000 01D1   {
                 ; 0000 01D2 //    PutString(SDnoFAT32, 199); // FAT32 incompatible drive
                 ; 0000 01D3     FAT32_active = 0;
                 ; 0000 01D4     SD_Ready = 0;
                 ; 0000 01D5   }
                 ; 0000 01D6   return SD_Ready;
                 ; 0000 01D7 }
                 ;
                 ;char GetButton(void)
                 ; 0000 01DA {
                 _GetButton:
                 ; 0000 01DB   char res = 0;
                 ; 0000 01DC   if (TSC2046_GetCoordinates())
000b38 931a      	ST   -Y,R17
                 ;	res -> R17
000b39 e010      	LDI  R17,0
000b3a de47      	RCALL _TSC2046_GetCoordinates
000b3b 30e0      	CPI  R30,0
000b3c f411      	BRNE PC+3
000b3d 940c 0b9b 	JMP _0x1A9
                 ; 0000 01DD   {
                 ; 0000 01DE     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000b3f 940e 1149 	CALL SUBOPT_0x2F
000b41 15e6      	CP   R30,R6
000b42 05f7      	CPC  R31,R7
000b43 f428      	BRSH _0x1AB
000b44 940e 114e 	CALL SUBOPT_0x30
000b46 166e      	CP   R6,R30
000b47 067f      	CPC  R7,R31
000b48 f008      	BRLO _0x1AC
                 _0x1AB:
000b49 c00c      	RJMP _0x1AA
                 _0x1AC:
                 ; 0000 01DF     {
                 ; 0000 01E0       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
000b4a 940e 1153 	CALL SUBOPT_0x31
000b4c 15e8      	CP   R30,R8
000b4d 05f9      	CPC  R31,R9
000b4e f428      	BRSH _0x1AE
000b4f 940e 1158 	CALL SUBOPT_0x32
000b51 168e      	CP   R8,R30
000b52 069f      	CPC  R9,R31
000b53 f008      	BRLO _0x1AF
                 _0x1AE:
000b54 c001      	RJMP _0x1AD
                 _0x1AF:
000b55 e011      	LDI  R17,LOW(1)
                 ; 0000 01E1     }
                 _0x1AD:
                 ; 0000 01E2     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0x1AA:
000b56 940e 115d 	CALL SUBOPT_0x33
000b58 15e6      	CP   R30,R6
000b59 05f7      	CPC  R31,R7
000b5a f428      	BRSH _0x1B1
000b5b 940e 1162 	CALL SUBOPT_0x34
000b5d 166e      	CP   R6,R30
000b5e 067f      	CPC  R7,R31
000b5f f008      	BRLO _0x1B2
                 _0x1B1:
000b60 c00c      	RJMP _0x1B0
                 _0x1B2:
                 ; 0000 01E3     {
                 ; 0000 01E4       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000b61 940e 1167 	CALL SUBOPT_0x35
000b63 15e8      	CP   R30,R8
000b64 05f9      	CPC  R31,R9
000b65 f428      	BRSH _0x1B4
000b66 940e 116c 	CALL SUBOPT_0x36
000b68 168e      	CP   R8,R30
000b69 069f      	CPC  R9,R31
000b6a f008      	BRLO _0x1B5
                 _0x1B4:
000b6b c001      	RJMP _0x1B3
                 _0x1B5:
000b6c e012      	LDI  R17,LOW(2)
                 ; 0000 01E5     }
                 _0x1B3:
                 ; 0000 01E6     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0x1B0:
000b6d 940e 1171 	CALL SUBOPT_0x37
000b6f 15e6      	CP   R30,R6
000b70 05f7      	CPC  R31,R7
000b71 f428      	BRSH _0x1B7
000b72 940e 1176 	CALL SUBOPT_0x38
000b74 166e      	CP   R6,R30
000b75 067f      	CPC  R7,R31
000b76 f008      	BRLO _0x1B8
                 _0x1B7:
000b77 c00c      	RJMP _0x1B6
                 _0x1B8:
                 ; 0000 01E7     {
                 ; 0000 01E8       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000b78 940e 117b 	CALL SUBOPT_0x39
000b7a 15e8      	CP   R30,R8
000b7b 05f9      	CPC  R31,R9
000b7c f428      	BRSH _0x1BA
000b7d 940e 1180 	CALL SUBOPT_0x3A
000b7f 168e      	CP   R8,R30
000b80 069f      	CPC  R9,R31
000b81 f008      	BRLO _0x1BB
                 _0x1BA:
000b82 c001      	RJMP _0x1B9
                 _0x1BB:
000b83 e013      	LDI  R17,LOW(3)
                 ; 0000 01E9     }
                 _0x1B9:
                 ; 0000 01EA     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x1B6:
000b84 940e 1185 	CALL SUBOPT_0x3B
000b86 15e6      	CP   R30,R6
000b87 05f7      	CPC  R31,R7
000b88 f428      	BRSH _0x1BD
000b89 940e 118a 	CALL SUBOPT_0x3C
000b8b 166e      	CP   R6,R30
000b8c 067f      	CPC  R7,R31
000b8d f008      	BRLO _0x1BE
                 _0x1BD:
000b8e c00c      	RJMP _0x1BC
                 _0x1BE:
                 ; 0000 01EB     {
                 ; 0000 01EC       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
000b8f 940e 118f 	CALL SUBOPT_0x3D
000b91 15e8      	CP   R30,R8
000b92 05f9      	CPC  R31,R9
000b93 f428      	BRSH _0x1C0
000b94 940e 1194 	CALL SUBOPT_0x3E
000b96 168e      	CP   R8,R30
000b97 069f      	CPC  R9,R31
000b98 f008      	BRLO _0x1C1
                 _0x1C0:
000b99 c001      	RJMP _0x1BF
                 _0x1C1:
000b9a e014      	LDI  R17,LOW(4)
                 ; 0000 01ED     }
                 _0x1BF:
                 ; 0000 01EE 
                 ; 0000 01EF   }
                 _0x1BC:
                 ; 0000 01F0   return res;
                 _0x1A9:
                 _0x20C0001:
000b9b 2fe1      	MOV  R30,R17
000b9c 9119      	LD   R17,Y+
000b9d 9508      	RET
                 ; 0000 01F1 }
                 ;
                 ;long CalcLongValue(long Value1, unsigned int Value2)
                 ; 0000 01F4 {
                 ; 0000 01F5   return (Value1 * Value2) / 1000;
                 ;	Value1 -> Y+2
                 ;	Value2 -> Y+0
                 ; 0000 01F6 }
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 01F9 {
                 _Repaint_Button:
                 ; 0000 01FA   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000b9e 81ec      	LDD  R30,Y+4
000b9f 940e 1199 	CALL SUBOPT_0x3F
                 ; 0000 01FB   {
                 ; 0000 01FC     case 1 :
000ba1 f469      	BRNE _0x1C5
                 ; 0000 01FD       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000ba2 e0e0     +LDI R30 , LOW ( _0x1C6 + ( 0 ) )
000ba3 e0f5     +LDI R31 , HIGH ( _0x1C6 + ( 0 ) )
                 	__POINTW1MN _0x1C6,0
000ba4 940e 119e 	CALL SUBOPT_0x40
000ba6 940e 11a5 	CALL SUBOPT_0x41
000ba8 940e 1000 	CALL SUBOPT_0x11
000baa 940e 11aa 	CALL SUBOPT_0x42
                 ; 0000 01FE       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bac 940e 119e 	CALL SUBOPT_0x40
000bae c032      	RJMP _0x217
                 ; 0000 01FF     break;
                 ; 0000 0200     case 2 :
                 _0x1C5:
000baf 30e2      	CPI  R30,LOW(0x2)
000bb0 e0a0      	LDI  R26,HIGH(0x2)
000bb1 07fa      	CPC  R31,R26
000bb2 f469      	BRNE _0x1C7
                 ; 0000 0201       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bb3 e0e6     +LDI R30 , LOW ( _0x1C6 + ( 6 ) )
000bb4 e0f5     +LDI R31 , HIGH ( _0x1C6 + ( 6 ) )
                 	__POINTW1MN _0x1C6,6
000bb5 940e 11af 	CALL SUBOPT_0x43
000bb7 940e 11a5 	CALL SUBOPT_0x41
000bb9 940e 1000 	CALL SUBOPT_0x11
000bbb 940e 11aa 	CALL SUBOPT_0x42
                 ; 0000 0202       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bbd 940e 11af 	CALL SUBOPT_0x43
000bbf c021      	RJMP _0x217
                 ; 0000 0203     break;
                 ; 0000 0204     case 3 :
                 _0x1C7:
000bc0 30e3      	CPI  R30,LOW(0x3)
000bc1 e0a0      	LDI  R26,HIGH(0x3)
000bc2 07fa      	CPC  R31,R26
000bc3 f469      	BRNE _0x1C8
                 ; 0000 0205       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bc4 e0ec     +LDI R30 , LOW ( _0x1C6 + ( 12 ) )
000bc5 e0f5     +LDI R31 , HIGH ( _0x1C6 + ( 12 ) )
                 	__POINTW1MN _0x1C6,12
000bc6 940e 11b6 	CALL SUBOPT_0x44
000bc8 940e 11a5 	CALL SUBOPT_0x41
000bca 940e 1000 	CALL SUBOPT_0x11
000bcc 940e 11aa 	CALL SUBOPT_0x42
                 ; 0000 0206       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bce 940e 11b6 	CALL SUBOPT_0x44
000bd0 c010      	RJMP _0x217
                 ; 0000 0207     break;
                 ; 0000 0208     case 4 :
                 _0x1C8:
000bd1 30e4      	CPI  R30,LOW(0x4)
000bd2 e0a0      	LDI  R26,HIGH(0x4)
000bd3 07fa      	CPC  R31,R26
000bd4 f4b1      	BRNE _0x1C4
                 ; 0000 0209       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bd5 e1e2     +LDI R30 , LOW ( _0x1C6 + ( 18 ) )
000bd6 e0f5     +LDI R31 , HIGH ( _0x1C6 + ( 18 ) )
                 	__POINTW1MN _0x1C6,18
000bd7 940e 11bd 	CALL SUBOPT_0x45
000bd9 940e 11a5 	CALL SUBOPT_0x41
000bdb 940e 1000 	CALL SUBOPT_0x11
000bdd 940e 11aa 	CALL SUBOPT_0x42
                 ; 0000 020A       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bdf 940e 11bd 	CALL SUBOPT_0x45
                 _0x217:
000be1 963f      	ADIW R30,15
000be2 9738      	SBIW R30,8
000be3 93fa      	ST   -Y,R31
000be4 93ea      	ST   -Y,R30
000be5 940e 1000 	CALL SUBOPT_0x11
000be7 940e 1000 	CALL SUBOPT_0x11
000be9 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 020B     break;
                 ; 0000 020C   }
                 _0x1C4:
                 ; 0000 020D }
000beb 9627      	ADIW R28,7
000bec 9508      	RET
                 
                 	.DSEG
                 _0x1C6:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0210 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0211   // рисуем окошко под батарею
                 ; 0000 0212 // SSD1963_DrawFillRect(Battery_X + 3, Battery_Width - 3, Battery_Y, Battery_Y + 2, GREEN);
                 ; 0000 0213 // SSD1963_DrawRect(Battery_X, Battery_Width, Battery_Y + 2, Battery_Height, 1, GREEN);
                 ; 0000 0214   // рисуем кнопки
                 ; 0000 0215   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000bed 940e 1149 	CALL SUBOPT_0x2F
000bef 93fa      	ST   -Y,R31
000bf0 93ea      	ST   -Y,R30
000bf1 940e 114e 	CALL SUBOPT_0x30
000bf3 93fa      	ST   -Y,R31
000bf4 93ea      	ST   -Y,R30
000bf5 940e 1153 	CALL SUBOPT_0x31
000bf7 93fa      	ST   -Y,R31
000bf8 93ea      	ST   -Y,R30
000bf9 940e 1158 	CALL SUBOPT_0x32
000bfb 940e 11c4 	CALL SUBOPT_0x46
                 ; 0000 0216   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000bfd 940e 115d 	CALL SUBOPT_0x33
000bff 93fa      	ST   -Y,R31
000c00 93ea      	ST   -Y,R30
000c01 940e 1162 	CALL SUBOPT_0x34
000c03 93fa      	ST   -Y,R31
000c04 93ea      	ST   -Y,R30
000c05 940e 1167 	CALL SUBOPT_0x35
000c07 93fa      	ST   -Y,R31
000c08 93ea      	ST   -Y,R30
000c09 940e 116c 	CALL SUBOPT_0x36
000c0b 940e 11c4 	CALL SUBOPT_0x46
                 ; 0000 0217   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000c0d 940e 1171 	CALL SUBOPT_0x37
000c0f 93fa      	ST   -Y,R31
000c10 93ea      	ST   -Y,R30
000c11 940e 1176 	CALL SUBOPT_0x38
000c13 93fa      	ST   -Y,R31
000c14 93ea      	ST   -Y,R30
000c15 940e 117b 	CALL SUBOPT_0x39
000c17 93fa      	ST   -Y,R31
000c18 93ea      	ST   -Y,R30
000c19 940e 1180 	CALL SUBOPT_0x3A
000c1b 940e 11c4 	CALL SUBOPT_0x46
                 ; 0000 0218   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000c1d 940e 1185 	CALL SUBOPT_0x3B
000c1f 93fa      	ST   -Y,R31
000c20 93ea      	ST   -Y,R30
000c21 940e 118a 	CALL SUBOPT_0x3C
000c23 93fa      	ST   -Y,R31
000c24 93ea      	ST   -Y,R30
000c25 940e 118f 	CALL SUBOPT_0x3D
000c27 93fa      	ST   -Y,R31
000c28 93ea      	ST   -Y,R30
000c29 940e 1194 	CALL SUBOPT_0x3E
000c2b 940e 11c4 	CALL SUBOPT_0x46
                 ; 0000 0219   // рисуем окантовку
                 ; 0000 021A   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000c2d 940e 1149 	CALL SUBOPT_0x2F
000c2f 9631      	ADIW R30,1
000c30 93fa      	ST   -Y,R31
000c31 93ea      	ST   -Y,R30
000c32 940e 114e 	CALL SUBOPT_0x30
000c34 9731      	SBIW R30,1
000c35 93fa      	ST   -Y,R31
000c36 93ea      	ST   -Y,R30
000c37 940e 1153 	CALL SUBOPT_0x31
000c39 9631      	ADIW R30,1
000c3a 93fa      	ST   -Y,R31
000c3b 93ea      	ST   -Y,R30
000c3c 940e 1158 	CALL SUBOPT_0x32
000c3e 940e 11cc 	CALL SUBOPT_0x47
000c40 940e 08db 	CALL _SSD1963_DrawRect
                 ; 0000 021B   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000c42 940e 115d 	CALL SUBOPT_0x33
000c44 9631      	ADIW R30,1
000c45 93fa      	ST   -Y,R31
000c46 93ea      	ST   -Y,R30
000c47 940e 1162 	CALL SUBOPT_0x34
000c49 9731      	SBIW R30,1
000c4a 93fa      	ST   -Y,R31
000c4b 93ea      	ST   -Y,R30
000c4c 940e 1167 	CALL SUBOPT_0x35
000c4e 9631      	ADIW R30,1
000c4f 93fa      	ST   -Y,R31
000c50 93ea      	ST   -Y,R30
000c51 940e 116c 	CALL SUBOPT_0x36
000c53 940e 11cc 	CALL SUBOPT_0x47
000c55 940e 08db 	CALL _SSD1963_DrawRect
                 ; 0000 021C   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000c57 940e 1171 	CALL SUBOPT_0x37
000c59 9631      	ADIW R30,1
000c5a 93fa      	ST   -Y,R31
000c5b 93ea      	ST   -Y,R30
000c5c 940e 1176 	CALL SUBOPT_0x38
000c5e 9731      	SBIW R30,1
000c5f 93fa      	ST   -Y,R31
000c60 93ea      	ST   -Y,R30
000c61 940e 117b 	CALL SUBOPT_0x39
000c63 9631      	ADIW R30,1
000c64 93fa      	ST   -Y,R31
000c65 93ea      	ST   -Y,R30
000c66 940e 1180 	CALL SUBOPT_0x3A
000c68 940e 11cc 	CALL SUBOPT_0x47
000c6a 940e 08db 	CALL _SSD1963_DrawRect
                 ; 0000 021D   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000c6c 940e 1185 	CALL SUBOPT_0x3B
000c6e 9631      	ADIW R30,1
000c6f 93fa      	ST   -Y,R31
000c70 93ea      	ST   -Y,R30
000c71 940e 118a 	CALL SUBOPT_0x3C
000c73 9731      	SBIW R30,1
000c74 93fa      	ST   -Y,R31
000c75 93ea      	ST   -Y,R30
000c76 940e 118f 	CALL SUBOPT_0x3D
000c78 9631      	ADIW R30,1
000c79 93fa      	ST   -Y,R31
000c7a 93ea      	ST   -Y,R30
000c7b 940e 1194 	CALL SUBOPT_0x3E
000c7d 940e 11cc 	CALL SUBOPT_0x47
000c7f 940e 08db 	CALL _SSD1963_DrawRect
                 ; 0000 021E 
                 ; 0000 021F   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
                +
000c81 e1e8     +LDI R30 , LOW ( _0x1CA + ( 0 ) )
000c82 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 0 ) )
                 	__POINTW1MN _0x1CA,0
000c83 93fa      	ST   -Y,R31
000c84 93ea      	ST   -Y,R30
000c85 e0e1      	LDI  R30,LOW(1)
000c86 93ea      	ST   -Y,R30
000c87 940e 0fec 	CALL SUBOPT_0xD
000c89 940e 11d2 	CALL SUBOPT_0x48
                 ; 0000 0220   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000c8b e1ed     +LDI R30 , LOW ( _0x1CA + ( 5 ) )
000c8c e0f5     +LDI R31 , HIGH ( _0x1CA + ( 5 ) )
                 	__POINTW1MN _0x1CA,5
000c8d 93fa      	ST   -Y,R31
000c8e 93ea      	ST   -Y,R30
000c8f e0e2      	LDI  R30,LOW(2)
000c90 93ea      	ST   -Y,R30
000c91 940e 0fec 	CALL SUBOPT_0xD
000c93 940e 11d2 	CALL SUBOPT_0x48
                 ; 0000 0221   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000c95 e2e1     +LDI R30 , LOW ( _0x1CA + ( 9 ) )
000c96 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 9 ) )
                 	__POINTW1MN _0x1CA,9
000c97 93fa      	ST   -Y,R31
000c98 93ea      	ST   -Y,R30
000c99 e0e3      	LDI  R30,LOW(3)
000c9a 93ea      	ST   -Y,R30
000c9b 940e 0fec 	CALL SUBOPT_0xD
000c9d 940e 11d2 	CALL SUBOPT_0x48
                 ; 0000 0222   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000c9f e2e5     +LDI R30 , LOW ( _0x1CA + ( 13 ) )
000ca0 e0f5     +LDI R31 , HIGH ( _0x1CA + ( 13 ) )
                 	__POINTW1MN _0x1CA,13
000ca1 940e 11d8 	CALL SUBOPT_0x49
000ca3 940e 11d2 	CALL SUBOPT_0x48
                 ; 0000 0223   /*SSD1963_PutChar16('К', 0, 136, WHITE, BLACK);
                 ; 0000 0224   SSD1963_PutChar16('А', 0, 152, WHITE, BLACK);
                 ; 0000 0225   SSD1963_PutChar16('Р', 0, 168, WHITE, BLACK);
                 ; 0000 0226   SSD1963_PutChar16('Д', 0, 184, WHITE, BLACK);
                 ; 0000 0227   SSD1963_PutChar16('И', 0, 200, WHITE, BLACK);
                 ; 0000 0228   SSD1963_PutChar16('О', 0, 216, WHITE, BLACK);      */
                 ; 0000 0229 }
000ca5 9508      	RET
                 
                 	.DSEG
                 _0x1CA:
000518           	.BYTE 0x13
                 ;
                 ;void Paint_ScanLine(unsigned int X_Min, unsigned int X_Max, unsigned int Y_Min, unsigned int Y_Max, unsigned int Color, unsigned int Length)
                 ; 0000 022C {
                 
                 	.CSEG
                 ; 0000 022D   signed int ScanLine_NetHeight, ScanLine_NetWidth;
                 ; 0000 022E   if (ScanLine_X == 0) ScanLine_X = X_Min;
                 ;	X_Min -> Y+14
                 ;	X_Max -> Y+12
                 ;	Y_Min -> Y+10
                 ;	Y_Max -> Y+8
                 ;	Color -> Y+6
                 ;	Length -> Y+4
                 ;	ScanLine_NetHeight -> R16,R17
                 ;	ScanLine_NetWidth -> R18,R19
                 ; 0000 022F   ScanLine_NetHeight = (Y_Max - Y_Min) - Length;
                 ; 0000 0230   ScanLine_NetWidth = (X_Max - X_Min) - Length;
                 ; 0000 0231   while (ScanLine_NetHeight > 0)
                 ; 0000 0232   {
                 ; 0000 0233     SSD1963_DrawFastLine(X_Min, X_Max, Y_Min + ScanLine_NetHeight, Y_Min + ScanLine_NetHeight, Color);
                 ; 0000 0234     ScanLine_NetHeight -= Length;
                 ; 0000 0235   }
                 ; 0000 0236   while (ScanLine_NetWidth > 0)
                 ; 0000 0237   {
                 ; 0000 0238     SSD1963_DrawFastLine(X_Min + ScanLine_NetWidth, X_Min + ScanLine_NetWidth, Y_Min, Y_Max, Color);
                 ; 0000 0239     ScanLine_NetWidth -= Length;
                 ; 0000 023A   }
                 ; 0000 023B 
                 ; 0000 023C //  if ((ScanLine_X % Length) < 1)  SSD1963_DrawFastLine(ScanLine_X, ScanLine_X, Y_Min, Y_Max, Color);
                 ; 0000 023D   //if ((Counter % Length) < 1)  SSD1963_DrawFastLine(Counter, Counter, Y_Min, Y_Max, Color);
                 ; 0000 023E //  ScanLine_X += Counter; // увеличеваем Х сетки
                 ; 0000 023F //  if (ScanLine_X > X_Max - Length - 1) // если добежали до конца отведённого пространства
                 ; 0000 0240 //  {
                 ; 0000 0241 //    ScanLine_X = X_Min; // уходим обратно
                 ; 0000 0242 //  }
                 ; 0000 0243 }
                 ;
                 ;void Paint_Pulse(unsigned int Value, unsigned int Color)
                 ; 0000 0246 {
                 ; 0000 0247   if (Pulse_ScreenFlag != Pulse_Flag)
                 ;	Value -> Y+2
                 ;	Color -> Y+0
                 ; 0000 0248   {
                 ; 0000 0249     if (Pulse_Flag == 1) Pulse_ScreenValue = Pulse_Y_Min + 5;
                 ; 0000 024A     else if (Pulse_Flag == 0) Pulse_ScreenValue = Pulse_Y_Max - 5;
                 ; 0000 024B     Pulse_ScreenFlag = Pulse_Flag;
                 ; 0000 024C     Alarm_mSec = 0;
                 ; 0000 024D     Alarm = 0;
                 ; 0000 024E   }
                 ; 0000 024F 
                 ; 0000 0250   SSD1963_DrawFastLine(Pulse_X, Pulse_X + Value, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем за собой столбец пикселей
                 ; 0000 0251   SSD1963_DrawLine(Pulse_X, Pulse_X + Value, Pulse_Y_Last, Pulse_ScreenValue, Color, 1); // пишем точку в столбце
                 ; 0000 0252   Pulse_X += Value; // увеличиваем Х пульса
                 ; 0000 0253   Pulse_Y_Last = Pulse_ScreenValue; // определяем предыдущую точку пульса
                 ; 0000 0254   Pulse_ScreenValue = Pulse_Y_Max / 2;
                 ; 0000 0255   if (Pulse_X > Pulse_X_Max - (2 * Value)) // если добежали до конца отведённого пространства
                 ; 0000 0256   {
                 ; 0000 0257     SSD1963_DrawFastLine(Pulse_X, Pulse_X_Max, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 0258     Pulse_X = Pulse_X_Min; // уходим обратно
                 ; 0000 0259     SSD1963_DrawFastLine(Pulse_X - Value, Pulse_X, Pulse_Y_Min, Pulse_Y_Max, BLACK); // очищаем столбец в начале для красоты работы
                 ; 0000 025A   }
                 ; 0000 025B }
                 ;
                 ;void Paint_Cardio(unsigned int Value, unsigned int Color, unsigned int Length)
                 ; 0000 025E {
                 _Paint_Cardio:
                 ; 0000 025F   signed int temp, temp2;
                 ; 0000 0260   temp = Cardio_Y_Max - (Value / Cardio_Divider);
000ca6 940e 1511 	CALL __SAVELOCR4
                 ;	Value -> Y+8
                 ;	Color -> Y+6
                 ;	Length -> Y+4
                 ;	temp -> R16,R17
                 ;	temp2 -> R18,R19
000ca8 940e 11dd 	CALL SUBOPT_0x4A
000caa 85a8      	LDD  R26,Y+8
000cab 85b9      	LDD  R27,Y+8+1
000cac 940e 11e6 	CALL SUBOPT_0x4B
000cae 018f      	MOVW R16,R30
                 ; 0000 0261   if (temp < Cardio_Y_Min) temp = Cardio_Y_Min;
                +
000caf 3302     +CPI R16 , LOW ( 50 )
000cb0 e0e0     +LDI R30 , HIGH ( 50 )
000cb1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,50
000cb2 f414      	BRGE _0x1D7
                +
000cb3 e302     +LDI R16 , LOW ( 50 )
000cb4 e010     +LDI R17 , HIGH ( 50 )
                 	__GETWRN 16,17,50
                 ; 0000 0262   if (temp > Cardio_Y_Max) temp = Cardio_Y_Max - 1;
                 _0x1D7:
                +
000cb5 3e09     +CPI R16 , LOW ( 233 )
000cb6 e0e0     +LDI R30 , HIGH ( 233 )
000cb7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,233
000cb8 f014      	BRLT _0x1D8
                +
000cb9 ee07     +LDI R16 , LOW ( 231 )
000cba e010     +LDI R17 , HIGH ( 231 )
                 	__GETWRN 16,17,231
                 ; 0000 0263   temp2 = Cardio_Y_Max - (WorkParameters[2] / Cardio_Divider);
                 _0x1D8:
                +
000cbb e0a4     +LDI R26 , LOW ( _WorkParameters + ( 4 ) )
000cbc e0b0     +LDI R27 , HIGH ( _WorkParameters + ( 4 ) )
                 	__POINTW2MN _WorkParameters,4
000cbd 940e 14e1 	CALL __EEPROMRDW
000cbf 01df      	MOVW R26,R30
000cc0 940e 11dd 	CALL SUBOPT_0x4A
000cc2 940e 11e6 	CALL SUBOPT_0x4B
000cc4 019f      	MOVW R18,R30
                 ; 0000 0264   if (temp2 < Cardio_Y_Min) temp2 = Cardio_Y_Min;
                +
000cc5 3322     +CPI R18 , LOW ( 50 )
000cc6 e0e0     +LDI R30 , HIGH ( 50 )
000cc7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,50
000cc8 f414      	BRGE _0x1D9
                +
000cc9 e322     +LDI R18 , LOW ( 50 )
000cca e030     +LDI R19 , HIGH ( 50 )
                 	__GETWRN 18,19,50
                 ; 0000 0265 
                 ; 0000 0266   SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем за собой столбец пикселей
                 _0x1D9:
000ccb 940e 11f7 	CALL SUBOPT_0x4C
000ccd 940e 1208 	CALL SUBOPT_0x4D
000ccf 940e 0915 	CALL _SSD1963_DrawFillRect
                 ; 0000 0267 //  Paint_ScanLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max, DGRAY, 25);
                 ; 0000 0268   //SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Min, DGRAY);
                 ; 0000 0269   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 25, Cardio_Y_Min + 25, DGRAY);
000cd1 940e 11f7 	CALL SUBOPT_0x4C
000cd3 e4eb      	LDI  R30,LOW(75)
000cd4 e0f0      	LDI  R31,HIGH(75)
000cd5 93fa      	ST   -Y,R31
000cd6 93ea      	ST   -Y,R30
000cd7 940e 120f 	CALL SUBOPT_0x4E
                 ; 0000 026A   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 50, Cardio_Y_Min + 50, DGRAY);
000cd9 e6e4      	LDI  R30,LOW(100)
000cda e0f0      	LDI  R31,HIGH(100)
000cdb 93fa      	ST   -Y,R31
000cdc 93ea      	ST   -Y,R30
000cdd 940e 120f 	CALL SUBOPT_0x4E
                 ; 0000 026B   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 75, Cardio_Y_Min + 75, DGRAY);
000cdf e7ed      	LDI  R30,LOW(125)
000ce0 e0f0      	LDI  R31,HIGH(125)
000ce1 93fa      	ST   -Y,R31
000ce2 93ea      	ST   -Y,R30
000ce3 940e 120f 	CALL SUBOPT_0x4E
                 ; 0000 026C   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 100, Cardio_Y_Min + 100, DGRAY);
000ce5 e9e6      	LDI  R30,LOW(150)
000ce6 e0f0      	LDI  R31,HIGH(150)
000ce7 93fa      	ST   -Y,R31
000ce8 93ea      	ST   -Y,R30
000ce9 940e 120f 	CALL SUBOPT_0x4E
                 ; 0000 026D   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 125, Cardio_Y_Min + 125, DGRAY);
000ceb eaef      	LDI  R30,LOW(175)
000cec e0f0      	LDI  R31,HIGH(175)
000ced 93fa      	ST   -Y,R31
000cee 93ea      	ST   -Y,R30
000cef 940e 120f 	CALL SUBOPT_0x4E
                 ; 0000 026E   SSD1963_DrawFastLine(Cardio_X, Cardio_X + Length, Cardio_Y_Min + 150, Cardio_Y_Min + 150, DGRAY);
000cf1 940e 0fb9 	CALL SUBOPT_0x4
000cf3 940e 0fb9 	CALL SUBOPT_0x4
000cf5 e0e8      	LDI  R30,LOW(8456)
000cf6 e2f1      	LDI  R31,HIGH(8456)
000cf7 93fa      	ST   -Y,R31
000cf8 93ea      	ST   -Y,R30
000cf9 940e 080f 	CALL _SSD1963_DrawFastLine
                 ; 0000 026F 
                 ; 0000 0270   //if ((Cardio_X % Length) < 1)  SSD1963_DrawFastLine(Cardio_X, Cardio_X, Cardio_Y_Min, Cardio_Y_Max, DGRAY);
                 ; 0000 0271   SSD1963_DrawLine(Cardio_X, Cardio_X + Length, temp2, temp2, YELLOW, 1); // пишем точку в столбце
000cfb 940e 11f7 	CALL SUBOPT_0x4C
000cfd 933a      	ST   -Y,R19
000cfe 932a      	ST   -Y,R18
000cff 933a      	ST   -Y,R19
000d00 932a      	ST   -Y,R18
000d01 e0e7      	LDI  R30,LOW(65287)
000d02 efff      	LDI  R31,HIGH(65287)
000d03 93fa      	ST   -Y,R31
000d04 93ea      	ST   -Y,R30
000d05 e0e1      	LDI  R30,LOW(1)
000d06 93ea      	ST   -Y,R30
000d07 940e 082a 	CALL _SSD1963_DrawLine
                 ; 0000 0272   SSD1963_DrawLine(Cardio_X, Cardio_X + Length, Cardio_Y_Last, temp, Color, 2); // пишем точку в столбце
000d09 940e 11f7 	CALL SUBOPT_0x4C
000d0b 91e0 0844 	LDS  R30,_Cardio_Y_Last
000d0d 91f0 0845 	LDS  R31,_Cardio_Y_Last+1
000d0f 93fa      	ST   -Y,R31
000d10 93ea      	ST   -Y,R30
000d11 931a      	ST   -Y,R17
000d12 930a      	ST   -Y,R16
000d13 85ee      	LDD  R30,Y+14
000d14 85ff      	LDD  R31,Y+14+1
000d15 93fa      	ST   -Y,R31
000d16 93ea      	ST   -Y,R30
000d17 e0e2      	LDI  R30,LOW(2)
000d18 93ea      	ST   -Y,R30
000d19 940e 082a 	CALL _SSD1963_DrawLine
                 ; 0000 0273   Cardio_X += Length; // увеличеваем Х кардиограммы
000d1b 81ec      	LDD  R30,Y+4
000d1c 81fd      	LDD  R31,Y+4+1
000d1d 91a0 0842 	LDS  R26,_Cardio_X
000d1f 91b0 0843 	LDS  R27,_Cardio_X+1
000d21 0fea      	ADD  R30,R26
000d22 1ffb      	ADC  R31,R27
000d23 93e0 0842 	STS  _Cardio_X,R30
000d25 93f0 0843 	STS  _Cardio_X+1,R31
                 ; 0000 0274   Cardio_Y_Last = temp; // определяем предыдущую точку кардиограммы
                +
000d27 9300 0844+STS _Cardio_Y_Last + ( 0 ) , R16
000d29 9310 0845+STS _Cardio_Y_Last + ( 0 ) + 1 , R17
                 	__PUTWMRN _Cardio_Y_Last,0,16,17
                 ; 0000 0275   if (Cardio_X > Cardio_X_Max - Length) // если добежали до конца отведённого пространства
000d2b 81ac      	LDD  R26,Y+4
000d2c 81bd      	LDD  R27,Y+4+1
000d2d eee0      	LDI  R30,LOW(480)
000d2e e0f1      	LDI  R31,HIGH(480)
000d2f 1bea      	SUB  R30,R26
000d30 0bfb      	SBC  R31,R27
000d31 91a0 0842 	LDS  R26,_Cardio_X
000d33 91b0 0843 	LDS  R27,_Cardio_X+1
000d35 17ea      	CP   R30,R26
000d36 07fb      	CPC  R31,R27
000d37 f4c8      	BRSH _0x1DA
                 ; 0000 0276   {
                 ; 0000 0277     SSD1963_DrawFillRect(Cardio_X, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000d38 91e0 0842 	LDS  R30,_Cardio_X
000d3a 91f0 0843 	LDS  R31,_Cardio_X+1
000d3c 93fa      	ST   -Y,R31
000d3d 93ea      	ST   -Y,R30
000d3e eee0      	LDI  R30,LOW(480)
000d3f e0f1      	LDI  R31,HIGH(480)
000d40 93fa      	ST   -Y,R31
000d41 93ea      	ST   -Y,R30
000d42 940e 1208 	CALL SUBOPT_0x4D
000d44 940e 0915 	CALL _SSD1963_DrawFillRect
                 ; 0000 0278     Cardio_X = Cardio_X_Min; // уходим обратно
000d46 e0e0      	LDI  R30,LOW(0)
000d47 93e0 0842 	STS  _Cardio_X,R30
000d49 93e0 0843 	STS  _Cardio_X+1,R30
                 ; 0000 0279     SSD1963_DrawFillRect(Cardio_X, Cardio_X + Length, Cardio_Y_Min, Cardio_Y_Max + 1, BLACK); // очищаем столбец в начале для красоты работы
000d4b 940e 11f7 	CALL SUBOPT_0x4C
000d4d 940e 1208 	CALL SUBOPT_0x4D
000d4f 940e 0915 	CALL _SSD1963_DrawFillRect
                 ; 0000 027A   }
                 ; 0000 027B }
                 _0x1DA:
000d51 940e 1518 	CALL __LOADLOCR4
000d53 962a      	ADIW R28,10
000d54 9508      	RET
                 ;
                 ;void Calc_Pulse(unsigned int Value)
                 ; 0000 027E {
                 ; 0000 027F   if (Value > WorkParameters[2])
                 ;	Value -> Y+0
                 ; 0000 0280   {
                 ; 0000 0281     if (Pulse_Flag < 1)
                 ; 0000 0282     {
                 ; 0000 0283       Pulse_Counter++;
                 ; 0000 0284       Pulse_Flag = 1;
                 ; 0000 0285     }
                 ; 0000 0286   }
                 ; 0000 0287   else if (Pulse_Flag > 0) Pulse_Flag = 0;
                 ; 0000 0288 
                 ; 0000 0289   if (Pulse_mSec > 59999)
                 ; 0000 028A   {
                 ; 0000 028B     Pulse_mSec = 0;
                 ; 0000 028C     Pulse_Value = Pulse_Counter;
                 ; 0000 028D     Pulse_Counter = 0;
                 ; 0000 028E   }
                 ; 0000 028F }
                 ;
                 ;/*void Paint_Battery(unsigned int Value)
                 ;{
                 ;  SSD1963_DrawFillRect(Battery_X + 4, Battery_Width - 4, Battery_Y + 4, Battery_Height - 4, BLACK);
                 ;  SSD1963_DrawFillRect(Battery_X + 4, Battery_Width - 4, Battery_Y + 4 + (45 - Value), Battery_Height - 4, GREEN);
                 ;*/
                 ;void PutParameterText(char Number, char X, char Y, unsigned int Color)
                 ; 0000 0297 {
                 _PutParameterText:
                 ; 0000 0298   SSD1963_PutString16("                ", X, Y, Color, BLACK);
                 ;	Number -> Y+4
                 ;	X -> Y+3
                 ;	Y -> Y+2
                 ;	Color -> Y+0
                +
000d55 e2eb     +LDI R30 , LOW ( _0x1E0 + ( 0 ) )
000d56 e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 0 ) )
                 	__POINTW1MN _0x1E0,0
000d57 940e 1218 	CALL SUBOPT_0x4F
000d59 940e 1221 	CALL SUBOPT_0x50
000d5b 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 0299   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d5d e3ec     +LDI R30 , LOW ( _0x1E0 + ( 17 ) )
000d5e e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 17 ) )
                 	__POINTW1MN _0x1E0,17
000d5f 940e 1218 	CALL SUBOPT_0x4F
000d61 9670      	ADIW R30,16
000d62 940e 1221 	CALL SUBOPT_0x50
000d64 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 029A   switch (Number)
000d66 81ec      	LDD  R30,Y+4
000d67 e0f0      	LDI  R31,0
                 ; 0000 029B   {
                 ; 0000 029C     case 0 :
000d68 9730      	SBIW R30,0
000d69 f459      	BRNE _0x1E4
                 ; 0000 029D       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000d6a e4ed     +LDI R30 , LOW ( _0x1E0 + ( 34 ) )
000d6b e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 34 ) )
                 	__POINTW1MN _0x1E0,34
000d6c 940e 1218 	CALL SUBOPT_0x4F
000d6e 940e 1221 	CALL SUBOPT_0x50
000d70 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 029E       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d72 e5e8     +LDI R30 , LOW ( _0x1E0 + ( 45 ) )
000d73 e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 45 ) )
                 	__POINTW1MN _0x1E0,45
000d74 c01d      	RJMP _0x219
                 ; 0000 029F     break;
                 ; 0000 02A0     case 1 :
                 _0x1E4:
000d75 30e1      	CPI  R30,LOW(0x1)
000d76 e0a0      	LDI  R26,HIGH(0x1)
000d77 07fa      	CPC  R31,R26
000d78 f459      	BRNE _0x1E5
                 ; 0000 02A1       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000d79 e5ec     +LDI R30 , LOW ( _0x1E0 + ( 49 ) )
000d7a e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 49 ) )
                 	__POINTW1MN _0x1E0,49
000d7b 940e 1218 	CALL SUBOPT_0x4F
000d7d 940e 1221 	CALL SUBOPT_0x50
000d7f 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 02A2       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d81 e6e0     +LDI R30 , LOW ( _0x1E0 + ( 53 ) )
000d82 e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 53 ) )
                 	__POINTW1MN _0x1E0,53
000d83 c00e      	RJMP _0x219
                 ; 0000 02A3     break;
                 ; 0000 02A4     case 2 :
                 _0x1E5:
000d84 30e2      	CPI  R30,LOW(0x2)
000d85 e0a0      	LDI  R26,HIGH(0x2)
000d86 07fa      	CPC  R31,R26
000d87 f4b9      	BRNE _0x1E3
                 ; 0000 02A5       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000d88 e6e4     +LDI R30 , LOW ( _0x1E0 + ( 57 ) )
000d89 e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 57 ) )
                 	__POINTW1MN _0x1E0,57
000d8a 940e 1218 	CALL SUBOPT_0x4F
000d8c 940e 1221 	CALL SUBOPT_0x50
000d8e 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 02A6       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d90 e7e5     +LDI R30 , LOW ( _0x1E0 + ( 74 ) )
000d91 e0f5     +LDI R31 , HIGH ( _0x1E0 + ( 74 ) )
                 	__POINTW1MN _0x1E0,74
                 _0x219:
000d92 93fa      	ST   -Y,R31
000d93 93ea      	ST   -Y,R30
000d94 81ed      	LDD  R30,Y+5
000d95 e0f0      	LDI  R31,0
000d96 93fa      	ST   -Y,R31
000d97 93ea      	ST   -Y,R30
000d98 81ee      	LDD  R30,Y+6
000d99 e0f0      	LDI  R31,0
000d9a 9670      	ADIW R30,16
000d9b 940e 1221 	CALL SUBOPT_0x50
000d9d 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 02A7     break;
                 ; 0000 02A8     /*
                 ; 0000 02A9     case 3 :
                 ; 0000 02AA       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 02AB       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02AC     break;
                 ; 0000 02AD     case 4 :
                 ; 0000 02AE       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 02AF       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02B0     break;
                 ; 0000 02B1     case 5 :
                 ; 0000 02B2       SSD1963_PutString16("НЕ ИСПОЛЬЗУЕТСЯ", X, Y, Color, BLACK);
                 ; 0000 02B3       SSD1963_PutString16("В ТЕКУЩЕЙ ВЕРСИИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02B4     break;
                 ; 0000 02B5     case 6 :
                 ; 0000 02B6       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 02B7       SSD1963_PutString16("ДЕНЬ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02B8     break;
                 ; 0000 02B9     case 7 :
                 ; 0000 02BA       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 02BB       SSD1963_PutString16("МЕСЯЦ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02BC     break;
                 ; 0000 02BD     case 8 :
                 ; 0000 02BE       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 02BF       SSD1963_PutString16("ЧАС", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02C0     break;
                 ; 0000 02C1     case 9 :
                 ; 0000 02C2       SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ", X, Y, Color, BLACK);
                 ; 0000 02C3       SSD1963_PutString16("МИНУТЫ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 02C4     break;*/
                 ; 0000 02C5   }
                 _0x1E3:
                 ; 0000 02C6 }
000d9f 9625      	ADIW R28,5
000da0 9508      	RET
                 
                 	.DSEG
                 _0x1E0:
00052b           	.BYTE 0x56
                 ;
                 ;void main(void)
                 ; 0000 02C9 {
                 
                 	.CSEG
                 _main:
                 ; 0000 02CA unsigned int ii = 0xffff;
                 ; 0000 02CB {
                 ;	ii -> R16,R17
                +
000da1 ef0f     +LDI R16 , LOW ( - 1 )
000da2 ef1f     +LDI R17 , HIGH ( - 1 )
                 	__GETWRN 16,17,-1
                 ; 0000 02CC // Input/Output Ports initialization
                 ; 0000 02CD // Port A initialization
                 ; 0000 02CE // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 02CF // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 02D0 PORTA=0x00;
000da3 e0e0      	LDI  R30,LOW(0)
000da4 bbeb      	OUT  0x1B,R30
                 ; 0000 02D1 DDRA=0xFF;
000da5 efef      	LDI  R30,LOW(255)
000da6 bbea      	OUT  0x1A,R30
                 ; 0000 02D2 
                 ; 0000 02D3 // Port B initialization
                 ; 0000 02D4 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 02D5 // State7=0 State6=0 State5=0 State4=0 State3=T State2=0 State1=0 State0=0
                 ; 0000 02D6 PORTB=0x00;
000da7 e0e0      	LDI  R30,LOW(0)
000da8 bbe8      	OUT  0x18,R30
                 ; 0000 02D7 DDRB=0xF7;
000da9 efe7      	LDI  R30,LOW(247)
000daa bbe7      	OUT  0x17,R30
                 ; 0000 02D8 
                 ; 0000 02D9 // Port C initialization
                 ; 0000 02DA // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 02DB // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 02DC PORTC=0x00;
000dab e0e0      	LDI  R30,LOW(0)
000dac bbe5      	OUT  0x15,R30
                 ; 0000 02DD DDRC=0xFF;
000dad efef      	LDI  R30,LOW(255)
000dae bbe4      	OUT  0x14,R30
                 ; 0000 02DE 
                 ; 0000 02DF // Port D initialization
                 ; 0000 02E0 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=Out
                 ; 0000 02E1 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=0 State0=0
                 ; 0000 02E2 PORTD=0x00;
000daf e0e0      	LDI  R30,LOW(0)
000db0 bbe2      	OUT  0x12,R30
                 ; 0000 02E3 DDRD=0xFB;
000db1 efeb      	LDI  R30,LOW(251)
000db2 bbe1      	OUT  0x11,R30
                 ; 0000 02E4 
                 ; 0000 02E5 // Port E initialization
                 ; 0000 02E6 // Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=In
                 ; 0000 02E7 // State7=0 State6=T State5=0 State4=0 State3=T State2=0 State1=0 State0=T
                 ; 0000 02E8 PORTE=0x00;
000db3 e0e0      	LDI  R30,LOW(0)
000db4 b9e3      	OUT  0x3,R30
                 ; 0000 02E9 DDRE=0xB6;
000db5 ebe6      	LDI  R30,LOW(182)
000db6 b9e2      	OUT  0x2,R30
                 ; 0000 02EA 
                 ; 0000 02EB // Port F initialization
                 ; 0000 02EC // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 02ED // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
                 ; 0000 02EE PORTF=0x00;
000db7 e0e0      	LDI  R30,LOW(0)
000db8 93e0 0062 	STS  98,R30
                 ; 0000 02EF DDRF=0xF8;
000dba efe8      	LDI  R30,LOW(248)
000dbb 93e0 0061 	STS  97,R30
                 ; 0000 02F0 
                 ; 0000 02F1 // Port G initialization
                 ; 0000 02F2 // Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 02F3 // State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 02F4 PORTG=0x00;
000dbd e0e0      	LDI  R30,LOW(0)
000dbe 93e0 0065 	STS  101,R30
                 ; 0000 02F5 DDRG=0x1F;
000dc0 e1ef      	LDI  R30,LOW(31)
000dc1 93e0 0064 	STS  100,R30
                 ; 0000 02F6 
                 ; 0000 02F7 // Timer/Counter 0 initialization
                 ; 0000 02F8 // Clock source: System Clock
                 ; 0000 02F9 // Clock value: 250,000 kHz
                 ; 0000 02FA // Mode: Normal top=0xFF
                 ; 0000 02FB // OC0 output: Disconnected
                 ; 0000 02FC ASSR=0x00;
000dc3 e0e0      	LDI  R30,LOW(0)
000dc4 bfe0      	OUT  0x30,R30
                 ; 0000 02FD TCCR0=0x04;
000dc5 e0e4      	LDI  R30,LOW(4)
000dc6 bfe3      	OUT  0x33,R30
                 ; 0000 02FE TCNT0=0x06;
000dc7 e0e6      	LDI  R30,LOW(6)
000dc8 bfe2      	OUT  0x32,R30
                 ; 0000 02FF OCR0=0x00;
000dc9 e0e0      	LDI  R30,LOW(0)
000dca bfe1      	OUT  0x31,R30
                 ; 0000 0300 
                 ; 0000 0301 // Timer/Counter 1 initialization
                 ; 0000 0302 // Clock source: System Clock
                 ; 0000 0303 // Clock value: Timer1 Stopped
                 ; 0000 0304 // Mode: Normal top=0xFFFF
                 ; 0000 0305 // OC1A output: Discon.
                 ; 0000 0306 // OC1B output: Discon.
                 ; 0000 0307 // OC1C output: Discon.
                 ; 0000 0308 // Noise Canceler: Off
                 ; 0000 0309 // Input Capture on Falling Edge
                 ; 0000 030A // Timer1 Overflow Interrupt: Off
                 ; 0000 030B // Input Capture Interrupt: Off
                 ; 0000 030C // Compare A Match Interrupt: Off
                 ; 0000 030D // Compare B Match Interrupt: Off
                 ; 0000 030E // Compare C Match Interrupt: Off
                 ; 0000 030F TCCR1A=0x00;
000dcb bdef      	OUT  0x2F,R30
                 ; 0000 0310 TCCR1B=0x00;
000dcc bdee      	OUT  0x2E,R30
                 ; 0000 0311 TCNT1H=0x00;
000dcd bded      	OUT  0x2D,R30
                 ; 0000 0312 TCNT1L=0x00;
000dce bdec      	OUT  0x2C,R30
                 ; 0000 0313 ICR1H=0x00;
000dcf bde7      	OUT  0x27,R30
                 ; 0000 0314 ICR1L=0x00;
000dd0 bde6      	OUT  0x26,R30
                 ; 0000 0315 OCR1AH=0x00;
000dd1 bdeb      	OUT  0x2B,R30
                 ; 0000 0316 OCR1AL=0x00;
000dd2 bdea      	OUT  0x2A,R30
                 ; 0000 0317 OCR1BH=0x00;
000dd3 bde9      	OUT  0x29,R30
                 ; 0000 0318 OCR1BL=0x00;
000dd4 bde8      	OUT  0x28,R30
                 ; 0000 0319 OCR1CH=0x00;
000dd5 93e0 0079 	STS  121,R30
                 ; 0000 031A OCR1CL=0x00;
000dd7 93e0 0078 	STS  120,R30
                 ; 0000 031B 
                 ; 0000 031C // Timer/Counter 2 initialization
                 ; 0000 031D // Clock source: System Clock
                 ; 0000 031E // Clock value: Timer2 Stopped
                 ; 0000 031F // Mode: Normal top=0xFF
                 ; 0000 0320 // OC2 output: Disconnected
                 ; 0000 0321 TCCR2=0x00;
000dd9 bde5      	OUT  0x25,R30
                 ; 0000 0322 TCNT2=0x00;
000dda bde4      	OUT  0x24,R30
                 ; 0000 0323 OCR2=0x00;
000ddb bde3      	OUT  0x23,R30
                 ; 0000 0324 
                 ; 0000 0325 // Timer/Counter 3 initialization
                 ; 0000 0326 // Clock source: System Clock
                 ; 0000 0327 // Clock value: Timer3 Stopped
                 ; 0000 0328 // Mode: Normal top=0xFFFF
                 ; 0000 0329 // OC3A output: Discon.
                 ; 0000 032A // OC3B output: Discon.
                 ; 0000 032B // OC3C output: Discon.
                 ; 0000 032C // Noise Canceler: Off
                 ; 0000 032D // Input Capture on Falling Edge
                 ; 0000 032E // Timer3 Overflow Interrupt: Off
                 ; 0000 032F // Input Capture Interrupt: Off
                 ; 0000 0330 // Compare A Match Interrupt: Off
                 ; 0000 0331 // Compare B Match Interrupt: Off
                 ; 0000 0332 // Compare C Match Interrupt: Off
                 ; 0000 0333 TCCR3A=0x00;
000ddc 93e0 008b 	STS  139,R30
                 ; 0000 0334 TCCR3B=0x00;
000dde 93e0 008a 	STS  138,R30
                 ; 0000 0335 TCNT3H=0x00;
000de0 93e0 0089 	STS  137,R30
                 ; 0000 0336 TCNT3L=0x00;
000de2 93e0 0088 	STS  136,R30
                 ; 0000 0337 ICR3H=0x00;
000de4 93e0 0081 	STS  129,R30
                 ; 0000 0338 ICR3L=0x00;
000de6 93e0 0080 	STS  128,R30
                 ; 0000 0339 OCR3AH=0x00;
000de8 93e0 0087 	STS  135,R30
                 ; 0000 033A OCR3AL=0x00;
000dea 93e0 0086 	STS  134,R30
                 ; 0000 033B OCR3BH=0x00;
000dec 93e0 0085 	STS  133,R30
                 ; 0000 033C OCR3BL=0x00;
000dee 93e0 0084 	STS  132,R30
                 ; 0000 033D OCR3CH=0x00;
000df0 93e0 0083 	STS  131,R30
                 ; 0000 033E OCR3CL=0x00;
000df2 93e0 0082 	STS  130,R30
                 ; 0000 033F 
                 ; 0000 0340 // External Interrupt(s) initialization
                 ; 0000 0341 // INT0: Off
                 ; 0000 0342 // INT1: Off
                 ; 0000 0343 // INT2: Off
                 ; 0000 0344 // INT3: Off
                 ; 0000 0345 // INT4: Off
                 ; 0000 0346 // INT5: Off
                 ; 0000 0347 // INT6: Off
                 ; 0000 0348 // INT7: Off
                 ; 0000 0349 EICRA=0x00;
000df4 93e0 006a 	STS  106,R30
                 ; 0000 034A EICRB=0x00;
000df6 bfea      	OUT  0x3A,R30
                 ; 0000 034B EIMSK=0x00;
000df7 bfe9      	OUT  0x39,R30
                 ; 0000 034C 
                 ; 0000 034D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 034E TIMSK=0x01;
000df8 e0e1      	LDI  R30,LOW(1)
000df9 bfe7      	OUT  0x37,R30
                 ; 0000 034F 
                 ; 0000 0350 ETIMSK=0x00;
000dfa e0e0      	LDI  R30,LOW(0)
000dfb 93e0 007d 	STS  125,R30
                 ; 0000 0351 
                 ; 0000 0352 // USART0 initialization
                 ; 0000 0353 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0354 // USART0 Receiver: On
                 ; 0000 0355 // USART0 Transmitter: On
                 ; 0000 0356 // USART0 Mode: Asynchronous
                 ; 0000 0357 // USART0 Baud Rate: 115200
                 ; 0000 0358 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000dfd b9eb      	OUT  0xB,R30
                 ; 0000 0359 UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000dfe ede8      	LDI  R30,LOW(216)
000dff b9ea      	OUT  0xA,R30
                 ; 0000 035A UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000e00 e0e6      	LDI  R30,LOW(6)
000e01 93e0 0095 	STS  149,R30
                 ; 0000 035B UBRR0H=0x00;
000e03 e0e0      	LDI  R30,LOW(0)
000e04 93e0 0090 	STS  144,R30
                 ; 0000 035C UBRR0L=0x08;
000e06 e0e8      	LDI  R30,LOW(8)
000e07 b9e9      	OUT  0x9,R30
                 ; 0000 035D 
                 ; 0000 035E // USART1 initialization
                 ; 0000 035F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0360 // USART1 Receiver: On
                 ; 0000 0361 // USART1 Transmitter: On
                 ; 0000 0362 // USART1 Mode: Asynchronous
                 ; 0000 0363 // USART1 Baud Rate: 9600
                 ; 0000 0364 UCSR1A=0x00;
000e08 e0e0      	LDI  R30,LOW(0)
000e09 93e0 009b 	STS  155,R30
                 ; 0000 0365 UCSR1B=0xD8;
000e0b ede8      	LDI  R30,LOW(216)
000e0c 93e0 009a 	STS  154,R30
                 ; 0000 0366 UCSR1C=0x06;
000e0e e0e6      	LDI  R30,LOW(6)
000e0f 93e0 009d 	STS  157,R30
                 ; 0000 0367 UBRR1H=0x00;
000e11 e0e0      	LDI  R30,LOW(0)
000e12 93e0 0098 	STS  152,R30
                 ; 0000 0368 UBRR1L=0x67;
000e14 e6e7      	LDI  R30,LOW(103)
000e15 93e0 0099 	STS  153,R30
                 ; 0000 0369 
                 ; 0000 036A // Analog Comparator initialization
                 ; 0000 036B // Analog Comparator: Off
                 ; 0000 036C // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 036D ACSR=0x80;
000e17 e8e0      	LDI  R30,LOW(128)
000e18 b9e8      	OUT  0x8,R30
                 ; 0000 036E SFIOR=0x00;
000e19 e0e0      	LDI  R30,LOW(0)
000e1a bde0      	OUT  0x20,R30
                 ; 0000 036F 
                 ; 0000 0370 // ADC initialization
                 ; 0000 0371 // ADC Clock frequency: 1000,000 kHz
                 ; 0000 0372 // ADC Voltage Reference: AREF pin
                 ; 0000 0373 ADMUX=ADC_VREF_TYPE & 0xff;
000e1b b9e7      	OUT  0x7,R30
                 ; 0000 0374 ADCSRA=0x84;
000e1c e8e4      	LDI  R30,LOW(132)
000e1d b9e6      	OUT  0x6,R30
                 ; 0000 0375 
                 ; 0000 0376 // SPI initialization
                 ; 0000 0377 // SPI Type: Master
                 ; 0000 0378 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 0379 // SPI Clock Phase: Cycle Start
                 ; 0000 037A // SPI Clock Polarity: Low
                 ; 0000 037B // SPI Data Order: MSB First
                 ; 0000 037C SPCR=0x52;
000e1e e5e2      	LDI  R30,LOW(82)
000e1f b9ed      	OUT  0xD,R30
                 ; 0000 037D SPSR=0x00;
000e20 e0e0      	LDI  R30,LOW(0)
000e21 b9ee      	OUT  0xE,R30
                 ; 0000 037E 
                 ; 0000 037F // TWI initialization
                 ; 0000 0380 // TWI disabled
                 ; 0000 0381 TWCR=0x00;
000e22 93e0 0074 	STS  116,R30
                 ; 0000 0382 
                 ; 0000 0383 // I2C Bus initialization
                 ; 0000 0384 i2c_init();
000e24 940e 1274 	CALL _i2c_init
                 ; 0000 0385 
                 ; 0000 0386 // Global enable interrupts
                 ; 0000 0387 #asm("sei")
000e26 9478      	sei
                 ; 0000 0388 }
                 ; 0000 0389 
                 ; 0000 038A   //PORTE.6 = 1;
                 ; 0000 038B   SwitchPORTF(LEDGREEN, 1);
000e27 940e 113e 	CALL SUBOPT_0x2D
                 ; 0000 038C   SwitchPORTF(LEDRED, 1);
000e29 940e 1132 	CALL SUBOPT_0x2B
                 ; 0000 038D   SwitchPORTF(LEDBLUE, 1);
000e2b 940e 1138 	CALL SUBOPT_0x2C
                 ; 0000 038E   delay_ms(1000);
000e2d eee8      	LDI  R30,LOW(1000)
000e2e e0f3      	LDI  R31,HIGH(1000)
000e2f 940e 0fd9 	CALL SUBOPT_0x9
                 ; 0000 038F 
                 ; 0000 0390   SSD1963_Init();
000e31 940e 0549 	CALL _SSD1963_Init
                 ; 0000 0391   SwitchPORTF(BACKLIGHT, 1);
000e33 940e 1226 	CALL SUBOPT_0x51
                 ; 0000 0392   /*SSD1963_ClearScreen(BLACK);
                 ; 0000 0393   SSD1963_PutString16("ИНИЦИАЛИЗАЦИЯ...", 0, 0, WHITE, BLACK);
                 ; 0000 0394   SSD1963_PutString16("ВНУТРЕННЯЯ ПАМЯТЬ...", 0, FONT_HEIGHT * 1, WHITE, BLACK);
                 ; 0000 0395   */
                 ; 0000 0396   if (EEPROM_FLAG > 1)
000e35 e0a6      	LDI  R26,LOW(_EEPROM_FLAG)
000e36 e0b0      	LDI  R27,HIGH(_EEPROM_FLAG)
000e37 940e 14e5 	CALL __EEPROMRDB
000e39 30e2      	CPI  R30,LOW(0x2)
000e3a f0f0      	BRLO _0x1E7
                 ; 0000 0397   {
                 ; 0000 0398     for(i = 0; i < 3; i++)
000e3b 2444      	CLR  R4
                 _0x1E9:
000e3c e0e3      	LDI  R30,LOW(3)
000e3d 164e      	CP   R4,R30
000e3e f4a8      	BRSH _0x1EA
                 ; 0000 0399     WorkParameters[i] = Default_Parameters[i];
000e3f 2de4      	MOV  R30,R4
000e40 940e 122c 	CALL SUBOPT_0x52
000e42 0fea      	ADD  R30,R26
000e43 1ffb      	ADC  R31,R27
000e44 01bf      	MOVW R22,R30
000e45 2de4      	MOV  R30,R4
000e46 ecac      	LDI  R26,LOW(_Default_Parameters*2)
000e47 e0b7      	LDI  R27,HIGH(_Default_Parameters*2)
000e48 e0f0      	LDI  R31,0
000e49 0fee      	LSL  R30
000e4a 1fff      	ROL  R31
000e4b 0fea      	ADD  R30,R26
000e4c 1ffb      	ADC  R31,R27
000e4d 940e 14cb 	CALL __GETW1PF
000e4f 01db      	MOVW R26,R22
000e50 940e 14f1 	CALL __EEPROMWRW
000e52 9443      	INC  R4
000e53 cfe8      	RJMP _0x1E9
                 _0x1EA:
                 ; 0000 039A EEPROM_FLAG = 0;
000e54 e0a6      	LDI  R26,LOW(_EEPROM_FLAG)
000e55 e0b0      	LDI  R27,HIGH(_EEPROM_FLAG)
000e56 e0e0      	LDI  R30,LOW(0)
000e57 940e 14f9 	CALL __EEPROMWRB
                 ; 0000 039B   }
                 ; 0000 039C   /*
                 ; 0000 039D   SSD1963_PutString16("ВНУТРЕННИЕ ЧАСЫ...", 0, FONT_HEIGHT * 2, WHITE, BLACK);
                 ; 0000 039E   rtc_init(0, 0);
                 ; 0000 039F   rtc_get_time(0, &Hour, &Minute, &Seconds, &mSeconds);
                 ; 0000 03A0   rtc_get_date(0, &Day, &Month, &Year);*/
                 ; 0000 03A1 
                 ; 0000 03A2   SSD1963_ClearScreen(BLACK);
                 _0x1E7:
000e59 940e 0fec 	CALL SUBOPT_0xD
000e5b 940e 05ec 	CALL _SSD1963_ClearScreen
                 ; 0000 03A3 
                 ; 0000 03A4   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, RED, BLACK);
                +
000e5d e8e1     +LDI R30 , LOW ( _0x1EB + ( 0 ) )
000e5e e0f5     +LDI R31 , HIGH ( _0x1EB + ( 0 ) )
                 	__POINTW1MN _0x1EB,0
000e5f 940e 1232 	CALL SUBOPT_0x53
000e61 e7e0      	LDI  R30,LOW(112)
000e62 e0f0      	LDI  R31,HIGH(112)
000e63 940e 1239 	CALL SUBOPT_0x54
000e65 940e 123e 	CALL SUBOPT_0x55
                 ; 0000 03A5   delay_ms(300);
                 ; 0000 03A6   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), YELLOW, BLACK);
                +
000e67 e8e8     +LDI R30 , LOW ( _0x1EB + ( 7 ) )
000e68 e0f5     +LDI R31 , HIGH ( _0x1EB + ( 7 ) )
                 	__POINTW1MN _0x1EB,7
000e69 940e 1232 	CALL SUBOPT_0x53
000e6b e8e0      	LDI  R30,LOW(128)
000e6c e0f0      	LDI  R31,HIGH(128)
000e6d 93fa      	ST   -Y,R31
000e6e 93ea      	ST   -Y,R30
000e6f e0e7      	LDI  R30,LOW(65287)
000e70 efff      	LDI  R31,HIGH(65287)
000e71 940e 0ff1 	CALL SUBOPT_0xE
000e73 940e 123e 	CALL SUBOPT_0x55
                 ; 0000 03A7   delay_ms(300);
                 ; 0000 03A8   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, RED, BLACK);
                +
000e75 e8ef     +LDI R30 , LOW ( _0x1EB + ( 14 ) )
000e76 e0f5     +LDI R31 , HIGH ( _0x1EB + ( 14 ) )
                 	__POINTW1MN _0x1EB,14
000e77 940e 1232 	CALL SUBOPT_0x53
000e79 e9e0      	LDI  R30,LOW(144)
000e7a e0f0      	LDI  R31,HIGH(144)
000e7b 940e 1239 	CALL SUBOPT_0x54
000e7d 940e 123e 	CALL SUBOPT_0x55
                 ; 0000 03A9   delay_ms(300);
                 ; 0000 03AA   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
000e7f e9e6     +LDI R30 , LOW ( _0x1EB + ( 21 ) )
000e80 e0f5     +LDI R31 , HIGH ( _0x1EB + ( 21 ) )
                 	__POINTW1MN _0x1EB,21
000e81 940e 1232 	CALL SUBOPT_0x53
000e83 e7e0      	LDI  R30,LOW(112)
000e84 e0f0      	LDI  R31,HIGH(112)
000e85 940e 0ff1 	CALL SUBOPT_0xE
000e87 940e 0fec 	CALL SUBOPT_0xD
000e89 940e 123e 	CALL SUBOPT_0x55
                 ; 0000 03AB   delay_ms(300);
                 ; 0000 03AC   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
000e8b e9ed     +LDI R30 , LOW ( _0x1EB + ( 28 ) )
000e8c e0f5     +LDI R31 , HIGH ( _0x1EB + ( 28 ) )
                 	__POINTW1MN _0x1EB,28
000e8d 940e 1232 	CALL SUBOPT_0x53
000e8f e8e0      	LDI  R30,LOW(128)
000e90 e0f0      	LDI  R31,HIGH(128)
000e91 940e 0ff1 	CALL SUBOPT_0xE
000e93 940e 0fec 	CALL SUBOPT_0xD
000e95 940e 123e 	CALL SUBOPT_0x55
                 ; 0000 03AD   delay_ms(300);
                 ; 0000 03AE   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
000e97 eae4     +LDI R30 , LOW ( _0x1EB + ( 35 ) )
000e98 e0f5     +LDI R31 , HIGH ( _0x1EB + ( 35 ) )
                 	__POINTW1MN _0x1EB,35
000e99 940e 1232 	CALL SUBOPT_0x53
000e9b e9e0      	LDI  R30,LOW(144)
000e9c e0f0      	LDI  R31,HIGH(144)
000e9d 940e 0ff1 	CALL SUBOPT_0xE
000e9f 940e 0fec 	CALL SUBOPT_0xD
000ea1 940e 07f5 	CALL _SSD1963_PutString16
                 ; 0000 03AF 
                 ; 0000 03B0   Prepare_Screen();
000ea3 dd49      	RCALL _Prepare_Screen
                 ; 0000 03B1   TSC2046_Init();
000ea4 940e 099a 	CALL _TSC2046_Init
                 ; 0000 03B2 
                 ; 0000 03B3   Cardio_Y_Last = Cardio_Y_Min;
000ea6 e3e2      	LDI  R30,LOW(50)
000ea7 e0f0      	LDI  R31,HIGH(50)
000ea8 93e0 0844 	STS  _Cardio_Y_Last,R30
000eaa 93f0 0845 	STS  _Cardio_Y_Last+1,R31
                 ; 0000 03B4   Cardio_X = Cardio_X_Min;
000eac e0e0      	LDI  R30,LOW(0)
000ead 93e0 0842 	STS  _Cardio_X,R30
000eaf 93e0 0843 	STS  _Cardio_X+1,R30
                 ; 0000 03B5   Cardio_Divider = WorkParameters[0] / (Cardio_Y_Max - Cardio_Y_Min);
000eb1 940e 1243 	CALL SUBOPT_0x56
                 ; 0000 03B6   PutParameterText(Parameter_Counter, 30, 16, BLUE);
000eb3 940e 1255 	CALL SUBOPT_0x57
                 ; 0000 03B7   Pulse_X = Pulse_X_Min;
000eb5 e0ee      	LDI  R30,LOW(270)
000eb6 e0f1      	LDI  R31,HIGH(270)
000eb7 93e0 0834 	STS  _Pulse_X,R30
000eb9 93f0 0835 	STS  _Pulse_X+1,R31
                 ; 0000 03B8 
                 ; 0000 03B9   //Paint_ScanLine(Cardio_X_Min, Cardio_X_Max, Cardio_Y_Min, Cardio_Y_Max, DGRAY, 50);
                 ; 0000 03BA 
                 ; 0000 03BB 
                 ; 0000 03BC 
                 ; 0000 03BD while (1)
                 _0x1EC:
                 ; 0000 03BE {
                 ; 0000 03BF 
                 ; 0000 03C0         {
                 ; 0000 03C1         switch(State)
000ebb 91e0 084d 	LDS  R30,_State
000ebd e0f0      	LDI  R31,0
                 ; 0000 03C2         {
                 ; 0000 03C3           case 0 : // основной рабочий режим
000ebe 9730      	SBIW R30,0
000ebf f011      	BREQ PC+3
000ec0 940c 0f65 	JMP _0x1F2
                 ; 0000 03C4           {
                 ; 0000 03C5             /*if (ADC0 > WorkParameters[0]) ADC0 = WorkParameters[0];
                 ; 0000 03C6             for (i = 0; i < 192; i++) longADC += read_adc(0);
                 ; 0000 03C7             longADC = longADC / 192;
                 ; 0000 03C8             ADC0 = longADC;
                 ; 0000 03C9             longADC = 0;*/
                 ; 0000 03CA             //ADC0 = read_adc(0);
                 ; 0000 03CB             //if (ADC0 > WorkParameters[0]) ADC0 = WorkParameters[0];
                 ; 0000 03CC             putchar(Address_Slave);
000ec2 e4e7      	LDI  R30,LOW(71)
000ec3 93ea      	ST   -Y,R30
000ec4 db46      	RCALL _putchar
                 ; 0000 03CD             if (rx_counter0 > 0)
000ec5 91a0 07e0 	LDS  R26,_rx_counter0
000ec7 30a1      	CPI  R26,LOW(0x1)
000ec8 f088      	BRLO _0x1F3
                 ; 0000 03CE             {
                 ; 0000 03CF                 ADC0 = ((getchar() << 8) + getchar());
000ec9 940e 09d5 	CALL _getchar
000ecb 2ffe      	MOV  R31,R30
000ecc e0e0      	LDI  R30,0
000ecd 93ff      	PUSH R31
000ece 93ef      	PUSH R30
000ecf 940e 09d5 	CALL _getchar
000ed1 e0f0      	LDI  R31,0
000ed2 91af      	POP  R26
000ed3 91bf      	POP  R27
000ed4 0fea      	ADD  R30,R26
000ed5 1ffb      	ADC  R31,R27
000ed6 93e0 0852 	STS  _ADC0,R30
000ed8 93f0 0853 	STS  _ADC0+1,R31
                 ; 0000 03D0             }
                 ; 0000 03D1 
                 ; 0000 03D2             Cardio_Divider = WorkParameters[0] / (Cardio_Y_Max - Cardio_Y_Min);
                 _0x1F3:
000eda 940e 1243 	CALL SUBOPT_0x56
                 ; 0000 03D3             Paint_Cardio(ADC0, RED, WorkParameters[1]);
000edc 91e0 0852 	LDS  R30,_ADC0
000ede 91f0 0853 	LDS  R31,_ADC0+1
000ee0 93fa      	ST   -Y,R31
000ee1 93ea      	ST   -Y,R30
000ee2 e0e0      	LDI  R30,LOW(7936)
000ee3 e1ff      	LDI  R31,HIGH(7936)
000ee4 93fa      	ST   -Y,R31
000ee5 93ea      	ST   -Y,R30
                +
000ee6 e0a2     +LDI R26 , LOW ( _WorkParameters + ( 2 ) )
000ee7 e0b0     +LDI R27 , HIGH ( _WorkParameters + ( 2 ) )
                 	__POINTW2MN _WorkParameters,2
000ee8 940e 14e1 	CALL __EEPROMRDW
000eea 93fa      	ST   -Y,R31
000eeb 93ea      	ST   -Y,R30
000eec ddb9      	RCALL _Paint_Cardio
                 ; 0000 03D4             }
                 ; 0000 03D5 
                 ; 0000 03D6 
                 ; 0000 03D7             if (TSC2046_GetCoordinates() > 0)
000eed 940e 0982 	CALL _TSC2046_GetCoordinates
000eef 30e1      	CPI  R30,LOW(0x1)
000ef0 f410      	BRSH PC+3
000ef1 940c 0f64 	JMP _0x1F4
                 ; 0000 03D8             {
                 ; 0000 03D9               Sleep_mSec = 0;
000ef3 940e 1262 	CALL SUBOPT_0x58
                 ; 0000 03DA               Button_Pressed = GetButton();
                 ; 0000 03DB               switch (Button_Pressed)
                 ; 0000 03DC               {
                 ; 0000 03DD                 case 1 :
000ef5 f479      	BRNE _0x1F8
                 ; 0000 03DE                   Parameter_Counter++;
000ef6 91e0 084a 	LDS  R30,_Parameter_Counter
000ef8 5fef      	SUBI R30,-LOW(1)
000ef9 93e0 084a 	STS  _Parameter_Counter,R30
                 ; 0000 03DF                   if (Parameter_Counter > 2) Parameter_Counter = 0;
000efb 91a0 084a 	LDS  R26,_Parameter_Counter
000efd 30a3      	CPI  R26,LOW(0x3)
000efe f018      	BRLO _0x1F9
000eff e0e0      	LDI  R30,LOW(0)
000f00 93e0 084a 	STS  _Parameter_Counter,R30
                 ; 0000 03E0                   PutParameterText(Parameter_Counter, 30, 16, BLUE);
                 _0x1F9:
000f02 940e 1255 	CALL SUBOPT_0x57
                 ; 0000 03E1                 break;
000f04 c05f      	RJMP _0x1F7
                 ; 0000 03E2                 case 2 :
                 _0x1F8:
000f05 30e2      	CPI  R30,LOW(0x2)
000f06 e0a0      	LDI  R26,HIGH(0x2)
000f07 07fa      	CPC  R31,R26
000f08 f519      	BRNE _0x1FA
                 ; 0000 03E3                   if (Parameter_Counter == 0) {if (WorkParameters[Parameter_Counter] > 1) WorkParameters[Parameter_Counter] -= 10;}
000f09 91e0 084a 	LDS  R30,_Parameter_Counter
000f0b 30e0      	CPI  R30,0
000f0c f471      	BRNE _0x1FB
000f0d 940e 126c 	CALL SUBOPT_0x59
000f0f 940e 126f 	CALL SUBOPT_0x5A
000f11 9732      	SBIW R30,2
000f12 f038      	BRLO _0x1FC
000f13 940e 126c 	CALL SUBOPT_0x59
000f15 940e 126f 	CALL SUBOPT_0x5A
000f17 973a      	SBIW R30,10
000f18 940e 14f1 	CALL __EEPROMWRW
                 _0x1FC:
                 ; 0000 03E4                   else {if (WorkParameters[Parameter_Counter] < 1000) WorkParameters[Parameter_Counter]++;}
000f1a c010      	RJMP _0x1FD
                 _0x1FB:
000f1b 940e 126c 	CALL SUBOPT_0x59
000f1d 940e 126f 	CALL SUBOPT_0x5A
000f1f 3ee8      	CPI  R30,LOW(0x3E8)
000f20 e0a3      	LDI  R26,HIGH(0x3E8)
000f21 07fa      	CPC  R31,R26
000f22 f440      	BRSH _0x1FE
000f23 940e 126c 	CALL SUBOPT_0x59
000f25 940e 126f 	CALL SUBOPT_0x5A
000f27 9631      	ADIW R30,1
000f28 940e 14f1 	CALL __EEPROMWRW
000f2a 9731      	SBIW R30,1
                 _0x1FE:
                 _0x1FD:
                 ; 0000 03E5                 break;
000f2b c038      	RJMP _0x1F7
                 ; 0000 03E6                 case 3 :
                 _0x1FA:
000f2c 30e3      	CPI  R30,LOW(0x3)
000f2d e0a0      	LDI  R26,HIGH(0x3)
000f2e 07fa      	CPC  R31,R26
000f2f f519      	BRNE _0x1FF
                 ; 0000 03E7                   if (Parameter_Counter == 0) {if (WorkParameters[Parameter_Counter] < 1000) WorkParameters[Parameter_Counter] += 10;}
000f30 91e0 084a 	LDS  R30,_Parameter_Counter
000f32 30e0      	CPI  R30,0
000f33 f481      	BRNE _0x200
000f34 940e 126c 	CALL SUBOPT_0x59
000f36 940e 126f 	CALL SUBOPT_0x5A
000f38 3ee8      	CPI  R30,LOW(0x3E8)
000f39 e0a3      	LDI  R26,HIGH(0x3E8)
000f3a 07fa      	CPC  R31,R26
000f3b f438      	BRSH _0x201
000f3c 940e 126c 	CALL SUBOPT_0x59
000f3e 940e 126f 	CALL SUBOPT_0x5A
000f40 963a      	ADIW R30,10
000f41 940e 14f1 	CALL __EEPROMWRW
                 _0x201:
                 ; 0000 03E8                   else {if (WorkParameters[Parameter_Counter] > 1) WorkParameters[Parameter_Counter]--;}
000f43 c00e      	RJMP _0x202
                 _0x200:
000f44 940e 126c 	CALL SUBOPT_0x59
000f46 940e 126f 	CALL SUBOPT_0x5A
000f48 9732      	SBIW R30,2
000f49 f040      	BRLO _0x203
000f4a 940e 126c 	CALL SUBOPT_0x59
000f4c 940e 126f 	CALL SUBOPT_0x5A
000f4e 9731      	SBIW R30,1
000f4f 940e 14f1 	CALL __EEPROMWRW
000f51 9631      	ADIW R30,1
                 _0x203:
                 _0x202:
                 ; 0000 03E9                 break;
000f52 c011      	RJMP _0x1F7
                 ; 0000 03EA                 case 4 :
                 _0x1FF:
000f53 30e4      	CPI  R30,LOW(0x4)
000f54 e0a0      	LDI  R26,HIGH(0x4)
000f55 07fa      	CPC  R31,R26
000f56 f469      	BRNE _0x1F7
                 ; 0000 03EB                   State = 200;
000f57 ece8      	LDI  R30,LOW(200)
000f58 93e0 084d 	STS  _State,R30
                 ; 0000 03EC                   Repaint_Button("СТАРТ", 4, BLACK, WHITE);
                +
000f5a eaeb     +LDI R30 , LOW ( _0x1EB + ( 42 ) )
000f5b e0f5     +LDI R31 , HIGH ( _0x1EB + ( 42 ) )
                 	__POINTW1MN _0x1EB,42
000f5c 940e 11d8 	CALL SUBOPT_0x49
000f5e 940e 11d2 	CALL SUBOPT_0x48
                 ; 0000 03ED                   delay_ms(250);
000f60 efea      	LDI  R30,LOW(250)
000f61 e0f0      	LDI  R31,HIGH(250)
000f62 940e 0fd9 	CALL SUBOPT_0x9
                 ; 0000 03EE                 break;
                 ; 0000 03EF               }
                 _0x1F7:
                 ; 0000 03F0             }
                 ; 0000 03F1 
                 ; 0000 03F2           break;
                 _0x1F4:
000f64 c036      	RJMP _0x1F1
                 ; 0000 03F3           case 1 : // настройки
                 _0x1F2:
000f65 30e1      	CPI  R30,LOW(0x1)
000f66 e0a0      	LDI  R26,HIGH(0x1)
000f67 07fa      	CPC  R31,R26
000f68 f191      	BREQ _0x1F1
                 ; 0000 03F4           {
                 ; 0000 03F5           }
                 ; 0000 03F6           break;
                 ; 0000 03F7           case 200 : // пауза
000f69 3ce8      	CPI  R30,LOW(0xC8)
000f6a e0a0      	LDI  R26,HIGH(0xC8)
000f6b 07fa      	CPC  R31,R26
000f6c f509      	BRNE _0x206
                 ; 0000 03F8           if (TSC2046_GetCoordinates() > 0)
000f6d 940e 0982 	CALL _TSC2046_GetCoordinates
000f6f 30e1      	CPI  R30,LOW(0x1)
000f70 f0e0      	BRLO _0x207
                 ; 0000 03F9           {
                 ; 0000 03FA             Sleep_mSec = 0;
000f71 940e 1262 	CALL SUBOPT_0x58
                 ; 0000 03FB             Button_Pressed = GetButton();
                 ; 0000 03FC             switch (Button_Pressed)
                 ; 0000 03FD             {
                 ; 0000 03FE               case 1 :
000f73 f0c9      	BREQ _0x20A
                 ; 0000 03FF               break;
                 ; 0000 0400               case 2 :
000f74 30e2      	CPI  R30,LOW(0x2)
000f75 e0a0      	LDI  R26,HIGH(0x2)
000f76 07fa      	CPC  R31,R26
000f77 f0a9      	BREQ _0x20A
                 ; 0000 0401               break;
                 ; 0000 0402               case 3 :
000f78 30e3      	CPI  R30,LOW(0x3)
000f79 e0a0      	LDI  R26,HIGH(0x3)
000f7a 07fa      	CPC  R31,R26
000f7b f089      	BREQ _0x20A
                 ; 0000 0403               break;
                 ; 0000 0404               case 4 :
000f7c 30e4      	CPI  R30,LOW(0x4)
000f7d e0a0      	LDI  R26,HIGH(0x4)
000f7e 07fa      	CPC  R31,R26
000f7f f469      	BRNE _0x20A
                 ; 0000 0405                 State = 0;
000f80 e0e0      	LDI  R30,LOW(0)
000f81 93e0 084d 	STS  _State,R30
                 ; 0000 0406                 Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000f83 ebe1     +LDI R30 , LOW ( _0x1EB + ( 48 ) )
000f84 e0f5     +LDI R31 , HIGH ( _0x1EB + ( 48 ) )
                 	__POINTW1MN _0x1EB,48
000f85 940e 11d8 	CALL SUBOPT_0x49
000f87 940e 11d2 	CALL SUBOPT_0x48
                 ; 0000 0407                 delay_ms(250);
000f89 efea      	LDI  R30,LOW(250)
000f8a e0f0      	LDI  R31,HIGH(250)
000f8b 940e 0fd9 	CALL SUBOPT_0x9
                 ; 0000 0408               break;
                 ; 0000 0409             }
                 _0x20A:
                 ; 0000 040A           }
                 ; 0000 040B           break;
                 _0x207:
000f8d c00d      	RJMP _0x1F1
                 ; 0000 040C           case 250 : // спящий режим
                 _0x206:
000f8e 3fea      	CPI  R30,LOW(0xFA)
000f8f e0a0      	LDI  R26,HIGH(0xFA)
000f90 07fa      	CPC  R31,R26
000f91 f449      	BRNE _0x1F1
                 ; 0000 040D           {
                 ; 0000 040E             if (TSC2046_GetCoordinates() > 0)
000f92 940e 0982 	CALL _TSC2046_GetCoordinates
000f94 30e1      	CPI  R30,LOW(0x1)
000f95 f028      	BRLO _0x210
                 ; 0000 040F             {
                 ; 0000 0410               State = 0;
000f96 e0e0      	LDI  R30,LOW(0)
000f97 93e0 084d 	STS  _State,R30
                 ; 0000 0411               SwitchPORTF(BACKLIGHT, 1);
000f99 940e 1226 	CALL SUBOPT_0x51
                 ; 0000 0412             }
                 ; 0000 0413           }
                 _0x210:
                 ; 0000 0414           break;
                 ; 0000 0415         }
                 _0x1F1:
                 ; 0000 0416 
                 ; 0000 0417       }
                 ; 0000 0418 }
000f9b cf1f      	RJMP _0x1EC
                 ; 0000 0419 }
                 _0x211:
000f9c cfff      	RJMP _0x211
                 
                 	.DSEG
                 _0x1EB:
000581           	.BYTE 0x36
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
000f9d 81e8      	LD   R30,Y
000f9e b9ef      	OUT  0xF,R30
                 _0x2020003:
000f9f 9b77      	SBIS 0xE,7
000fa0 cffe      	RJMP _0x2020003
000fa1 b1ef      	IN   R30,0xF
000fa2 9621      	ADIW R28,1
000fa3 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _tempX:
0005b7           	.BYTE 0x4
                 _tempY:
0005bb           	.BYTE 0x4
                 _buffer:
0005bf           	.BYTE 0x200
                 _firstDataSector:
0007bf           	.BYTE 0x4
                 _rootCluster:
0007c3           	.BYTE 0x4
                 _totalClusters:
0007c7           	.BYTE 0x4
                 _bytesPerSector:
0007cb           	.BYTE 0x2
                 _sectorPerCluster:
0007cd           	.BYTE 0x2
                 _reservedSectorCount:
0007cf           	.BYTE 0x2
                 _freeClusterCountUpdated:
0007d1           	.BYTE 0x1
                 _unusedSectors:
0007d2           	.BYTE 0x4
                 _rx_buffer0:
0007d6           	.BYTE 0x8
                 _rx_wr_index0:
0007de           	.BYTE 0x1
                 _rx_rd_index0:
0007df           	.BYTE 0x1
                 _rx_counter0:
0007e0           	.BYTE 0x1
                 _tx_buffer0:
0007e1           	.BYTE 0x8
                 _tx_wr_index0:
0007e9           	.BYTE 0x1
                 _tx_rd_index0:
0007ea           	.BYTE 0x1
                 _tx_counter0:
0007eb           	.BYTE 0x1
                 _rx_buffer1:
0007ec           	.BYTE 0x8
                 _rx_wr_index1:
0007f4           	.BYTE 0x1
                 _rx_rd_index1:
0007f5           	.BYTE 0x1
                 _rx_counter1:
0007f6           	.BYTE 0x1
                 _tx_buffer1:
0007f7           	.BYTE 0x8
                 _tx_wr_index1:
0007ff           	.BYTE 0x1
                 _tx_rd_index1:
000800           	.BYTE 0x1
                 _tx_counter1:
000801           	.BYTE 0x1
                 _BTN1_Y_Begin:
000802           	.BYTE 0x2
                 _BTN1_Y_End:
000804           	.BYTE 0x2
                 _BTN1_X_Begin:
000806           	.BYTE 0x2
                 _BTN1_X_End:
000808           	.BYTE 0x2
                 _BTN2_Y_Begin:
00080a           	.BYTE 0x2
                 _BTN2_Y_End:
00080c           	.BYTE 0x2
                 _BTN2_X_Begin:
00080e           	.BYTE 0x2
                 _BTN2_X_End:
000810           	.BYTE 0x2
                 _BTN3_Y_Begin:
000812           	.BYTE 0x2
                 _BTN3_Y_End:
000814           	.BYTE 0x2
                 _BTN3_X_Begin:
000816           	.BYTE 0x2
                 _BTN3_X_End:
000818           	.BYTE 0x2
                 _BTN4_Y_Begin:
00081a           	.BYTE 0x2
                 _BTN4_Y_End:
00081c           	.BYTE 0x2
                 _BTN4_X_Begin:
00081e           	.BYTE 0x2
                 _BTN4_X_End:
000820           	.BYTE 0x2
                 _Button_Pressed:
000822           	.BYTE 0x1
                 _mSec:
000823           	.BYTE 0x2
                 _SD_Ready:
000825           	.BYTE 0x1
                 _error:
000826           	.BYTE 0x1
                 _FAT32_active:
000827           	.BYTE 0x1
                 _LEDGREEN_mSec:
000828           	.BYTE 0x2
                 _LEDRED_mSec:
00082a           	.BYTE 0x2
                 _LEDBLUE_mSec:
00082c           	.BYTE 0x2
                 _LEDGREEN_max:
00082e           	.BYTE 0x2
                 _LEDRED_max:
000830           	.BYTE 0x2
                 _LEDBLUE_max:
000832           	.BYTE 0x2
                 _Pulse_X:
000834           	.BYTE 0x2
                 _Pulse_Y_Last:
000836           	.BYTE 0x2
                 _Pulse_mSec:
000838           	.BYTE 0x2
                 _Pulse_Value:
00083a           	.BYTE 0x2
                 _Pulse_Counter:
00083c           	.BYTE 0x2
                 _Pulse_ScreenValue:
00083e           	.BYTE 0x2
                 _Pulse_Flag:
000840           	.BYTE 0x1
                 _Pulse_ScreenFlag:
000841           	.BYTE 0x1
                 _Cardio_X:
000842           	.BYTE 0x2
                 _Cardio_Y_Last:
000844           	.BYTE 0x2
                 _Cardio_Divider:
000846           	.BYTE 0x4
                 
                 	.ESEG
                 _WorkParameters:
000000 f4
000001 01
000002 0a
000003 00        	.DB  LOW(0xA01F4),HIGH(0xA01F4),BYTE3(0xA01F4),BYTE4(0xA01F4)
000004 2c 01     	.DW  0x12C
                 _EEPROM_FLAG:
000006           	.BYTE 0x1
                 
                 	.DSEG
                 _Parameter_Counter:
00084a           	.BYTE 0x1
                 _Alarm:
00084b           	.BYTE 0x1
                 _Battery_Discharged:
00084c           	.BYTE 0x1
                 _State:
00084d           	.BYTE 0x1
                 _ScanLine_X:
00084e           	.BYTE 0x2
                 _Refresh_mSec:
000850           	.BYTE 0x2
                 _ADC0:
000852           	.BYTE 0x2
                 _Sleep_mSec:
000854           	.BYTE 0x2
                 _Alarm_mSec:
000856           	.BYTE 0x2
                 __seed_G104:
000858           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000fa4 81e8      	LD   R30,Y
000fa5 e0f0      	LDI  R31,0
000fa6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000fa7 e6e4      	LDI  R30,LOW(100)
000fa8 e0f0      	LDI  R31,HIGH(100)
000fa9 93fa      	ST   -Y,R31
000faa 93ea      	ST   -Y,R30
000fab 940c 12c6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000fad 81e8      	LD   R30,Y
000fae 93ea      	ST   -Y,R30
000faf 940e 04ee 	CALL _RotateByte
000fb1 bbeb      	OUT  0x1B,R30
000fb2 e0e0      	LDI  R30,LOW(0)
000fb3 bbe5      	OUT  0x15,R30
000fb4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000fb5 e0e1      	LDI  R30,LOW(1)
000fb6 93ea      	ST   -Y,R30
000fb7 940c 051d 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000fb9 ece8      	LDI  R30,LOW(200)
000fba e0f0      	LDI  R31,HIGH(200)
000fbb 93fa      	ST   -Y,R31
000fbc 93ea      	ST   -Y,R30
000fbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000fbe 93ea      	ST   -Y,R30
000fbf 940e 0529 	CALL _SSD1963_WriteData_b8
000fc1 e0e4      	LDI  R30,LOW(4)
000fc2 93ea      	ST   -Y,R30
000fc3 940c 0529 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000fc5 93ea      	ST   -Y,R30
000fc6 940e 051d 	CALL _SSD1963_WriteCmd
000fc8 e0e1      	LDI  R30,LOW(1)
000fc9 93ea      	ST   -Y,R30
000fca 940c 0529 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000fcc e0e1      	LDI  R30,LOW(1)
000fcd e0f0      	LDI  R31,HIGH(1)
000fce 93fa      	ST   -Y,R31
000fcf 93ea      	ST   -Y,R30
000fd0 940c 12c6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
000fd2 93ea      	ST   -Y,R30
000fd3 940e 051d 	CALL _SSD1963_WriteCmd
000fd5 e0e3      	LDI  R30,LOW(3)
000fd6 93ea      	ST   -Y,R30
000fd7 940c 0529 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x9:
000fd9 93fa      	ST   -Y,R31
000fda 93ea      	ST   -Y,R30
000fdb 940c 12c6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
000fdd 93ea      	ST   -Y,R30
000fde 940e 0529 	CALL _SSD1963_WriteData_b8
000fe0 e0e0      	LDI  R30,LOW(0)
000fe1 93ea      	ST   -Y,R30
000fe2 940c 0529 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000fe4 e0e1      	LDI  R30,LOW(1)
000fe5 93ea      	ST   -Y,R30
000fe6 940c 0529 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000fe8 93ea      	ST   -Y,R30
000fe9 940e 0529 	CALL _SSD1963_WriteData_b8
000feb cff8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 31 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0xD:
000fec e0e0      	LDI  R30,LOW(0)
000fed e0f0      	LDI  R31,HIGH(0)
000fee 93fa      	ST   -Y,R31
000fef 93ea      	ST   -Y,R30
000ff0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0xE:
000ff1 93fa      	ST   -Y,R31
000ff2 93ea      	ST   -Y,R30
000ff3 cff8      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xF:
000ff4 93fa      	ST   -Y,R31
000ff5 93ea      	ST   -Y,R30
000ff6 940e 05cc 	CALL _SSD1963_SetArea
000ff8 e2ec      	LDI  R30,LOW(44)
000ff9 93ea      	ST   -Y,R30
000ffa 940c 051d 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
000ffc 93fa      	ST   -Y,R31
000ffd 93ea      	ST   -Y,R30
000ffe 940c 0536 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x11:
001000 85e8      	LDD  R30,Y+8
001001 85f9      	LDD  R31,Y+8+1
001002 93fa      	ST   -Y,R31
001003 93ea      	ST   -Y,R30
001004 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
001005 85ea      	LDD  R30,Y+10
001006 85fb      	LDD  R31,Y+10+1
001007 93fa      	ST   -Y,R31
001008 93ea      	ST   -Y,R30
001009 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
00100a 81ef      	LDD  R30,Y+7
00100b 85f8      	LDD  R31,Y+7+1
00100c 93fa      	ST   -Y,R31
00100d 93ea      	ST   -Y,R30
00100e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
00100f 9728      	SBIW R28,8
001010 931a      	ST   -Y,R17
001011 930a      	ST   -Y,R16
001012 89ea      	LDD  R30,Y+18
001013 89fb      	LDD  R31,Y+18+1
001014 93fa      	ST   -Y,R31
001015 93ea      	ST   -Y,R30
001016 89ea      	LDD  R30,Y+18
001017 89fb      	LDD  R31,Y+18+1
001018 93fa      	ST   -Y,R31
001019 93ea      	ST   -Y,R30
00101a 89ea      	LDD  R30,Y+18
00101b 89fb      	LDD  R31,Y+18+1
00101c 93fa      	ST   -Y,R31
00101d 93ea      	ST   -Y,R30
00101e 89ea      	LDD  R30,Y+18
00101f 89fb      	LDD  R31,Y+18+1
001020 cfd3      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
001021 89aa      	LDD  R26,Y+18
001022 89bb      	LDD  R27,Y+18+1
001023 89e8      	LDD  R30,Y+16
001024 89f9      	LDD  R31,Y+16+1
001025 1bea      	SUB  R30,R26
001026 0bfb      	SBC  R31,R27
001027 9631      	ADIW R30,1
001028 018f      	MOVW R16,R30
001029 2311      	TST  R17
00102a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00102b 01f8      	MOVW R30,R16
00102c efaf      	LDI  R26,LOW(65535)
00102d efbf      	LDI  R27,HIGH(65535)
00102e 940e 145e 	CALL __MULW12
001030 018f      	MOVW R16,R30
001031 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x17:
001032 85ae      	LDD  R26,Y+14
001033 85bf      	LDD  R27,Y+14+1
001034 85ec      	LDD  R30,Y+12
001035 85fd      	LDD  R31,Y+12+1
001036 1bea      	SUB  R30,R26
001037 0bfb      	SBC  R31,R27
001038 9631      	ADIW R30,1
001039 2766      	CLR  R22
00103a 2777      	CLR  R23
                +
00103b 83ea     +STD Y + 2 , R30
00103c 83fb     +STD Y + 2 + 1 , R31
00103d 836c     +STD Y + 2 + 2 , R22
00103e 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00103f 81ad      	LDD  R26,Y+5
001040 23aa      	TST  R26
001041 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
                +
001042 81ea     +LDD R30 , Y + 2
001043 81fb     +LDD R31 , Y + 2 + 1
001044 816c     +LDD R22 , Y + 2 + 2
001045 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
001046 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
                +
001047 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
001048 efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
001049 ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
00104a ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
00104b 940e 1463 	CALL __MULD12
                +
00104d 83ea     +STD Y + 2 , R30
00104e 83fb     +STD Y + 2 + 1 , R31
00104f 836c     +STD Y + 2 + 2 , R22
001050 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001051 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1A:
001052 01f8      	MOVW R30,R16
                +
001053 81aa     +LDD R26 , Y + 2
001054 81bb     +LDD R27 , Y + 2 + 1
001055 818c     +LDD R24 , Y + 2 + 2
001056 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001057 940e 142c 	CALL __CWD1
001059 940e 1463 	CALL __MULD12
                +
00105b 83ea     +STD Y + 2 , R30
00105c 83fb     +STD Y + 2 + 1 , R31
00105d 836c     +STD Y + 2 + 2 , R22
00105e 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00105f e0e0      	LDI  R30,LOW(0)
                +
001060 83ee     +STD Y + 6 , R30
001061 83ef     +STD Y + 6 + 1 , R30
001062 87e8     +STD Y + 6 + 2 , R30
001063 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
001064 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
001065 dfdc      	RCALL SUBOPT_0x18
                +
001066 81ae     +LDD R26 , Y + 6
001067 81bf     +LDD R27 , Y + 6 + 1
001068 8588     +LDD R24 , Y + 6 + 2
001069 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00106a 940e 150a 	CALL __CPD21
00106c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
                +
00106d 81ee     +LDD R30 , Y + 6
00106e 81ff     +LDD R31 , Y + 6 + 1
00106f 8568     +LDD R22 , Y + 6 + 2
001070 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
001071 5fef     +SUBI R30 , LOW ( - 1 )
001072 4fff     +SBCI R31 , HIGH ( - 1 )
001073 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001074 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
001075 83ee     +STD Y + 6 , R30
001076 83ff     +STD Y + 6 + 1 , R31
001077 8768     +STD Y + 6 + 2 , R22
001078 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
001079 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
00107a e0f0      	LDI  R31,0
00107b 8dab      	LDD  R26,Y+27
00107c 8dbc      	LDD  R27,Y+27+1
00107d 0fea      	ADD  R30,R26
00107e 1ffb      	ADC  R31,R27
00107f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
001080 85e8      	LDD  R30,Y+8
001081 85f9      	LDD  R31,Y+8+1
001082 1bea      	SUB  R30,R26
001083 0bfb      	SBC  R31,R27
001084 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
001085 85ac      	LDD  R26,Y+12
001086 85bd      	LDD  R27,Y+12+1
001087 0fea      	ADD  R30,R26
001088 1ffb      	ADC  R31,R27
001089 93fa      	ST   -Y,R31
00108a 93ea      	ST   -Y,R30
00108b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x20:
00108c 93ea      	ST   -Y,R30
00108d 940e 0f9d 	CALL _spi
                +
00108f e980     +LDI R24 , LOW ( 400 )
001090 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
001091 9701     +SBIW R24 , 1
001092 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
001093 e0e0      	LDI  R30,LOW(0)
001094 93ea      	ST   -Y,R30
001095 940e 0f9d 	CALL _spi
001097 2f0e      	MOV  R16,R30
001098 2711      	CLR  R17
001099 2f10      	MOV  R17,R16
00109a 2700      	CLR  R16
00109b e0e0      	LDI  R30,LOW(0)
00109c 93ea      	ST   -Y,R30
00109d 940e 0f9d 	CALL _spi
00109f e0f0      	LDI  R31,0
                +
0010a0 0f0e     +ADD R16 , R30
0010a1 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
0010a2 9a1a      	SBI  0x3,2
0010a3 01f8      	MOVW R30,R16
0010a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
0010a5 01f8      	MOVW R30,R16
0010a6 940e 142c 	CALL __CWD1
0010a8 940e 1338 	CALL __CDF1
0010aa 01df      	MOVW R26,R30
0010ab 01cb      	MOVW R24,R22
0010ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0010ad 940e 13bd 	CALL __DIVF21
0010af 940e 1301 	CALL __CFD1
0010b1 018f      	MOVW R16,R30
0010b2 01f8      	MOVW R30,R16
0010b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x23:
0010b4 e0e0      	LDI  R30,LOW(0)
0010b5 93e0 05b7 	STS  _tempX,R30
0010b7 93e0 05b8 	STS  _tempX+1,R30
0010b9 93e0 05b9 	STS  _tempX+2,R30
0010bb 93e0 05ba 	STS  _tempX+3,R30
0010bd 93e0 05bb 	STS  _tempY,R30
0010bf 93e0 05bc 	STS  _tempY+1,R30
0010c1 93e0 05bd 	STS  _tempY+2,R30
0010c3 93e0 05be 	STS  _tempY+3,R30
0010c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x24:
0010c6 940e 095c 	CALL _TSC2046_getX
0010c8 91a0 05b7 	LDS  R26,_tempX
0010ca 91b0 05b8 	LDS  R27,_tempX+1
0010cc 9180 05b9 	LDS  R24,_tempX+2
0010ce 9190 05ba 	LDS  R25,_tempX+3
0010d0 2766      	CLR  R22
0010d1 2777      	CLR  R23
0010d2 940e 1402 	CALL __ADDD12
0010d4 93e0 05b7 	STS  _tempX,R30
0010d6 93f0 05b8 	STS  _tempX+1,R31
0010d8 9360 05b9 	STS  _tempX+2,R22
0010da 9370 05ba 	STS  _tempX+3,R23
0010dc 940e 096f 	CALL _TSC2046_getY
0010de 91a0 05bb 	LDS  R26,_tempY
0010e0 91b0 05bc 	LDS  R27,_tempY+1
0010e2 9180 05bd 	LDS  R24,_tempY+2
0010e4 9190 05be 	LDS  R25,_tempY+3
0010e6 2766      	CLR  R22
0010e7 2777      	CLR  R23
0010e8 940e 1402 	CALL __ADDD12
0010ea 93e0 05bb 	STS  _tempY,R30
0010ec 93f0 05bc 	STS  _tempY+1,R31
0010ee 9360 05bd 	STS  _tempY+2,R22
0010f0 9370 05be 	STS  _tempY+3,R23
0010f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x25:
0010f3 91a0 05b7 	LDS  R26,_tempX
0010f5 91b0 05b8 	LDS  R27,_tempX+1
0010f7 9180 05b9 	LDS  R24,_tempX+2
0010f9 9190 05ba 	LDS  R25,_tempX+3
                +
0010fb e1e0     +LDI R30 , LOW ( 0x10 )
0010fc e0f0     +LDI R31 , HIGH ( 0x10 )
0010fd e060     +LDI R22 , BYTE3 ( 0x10 )
0010fe e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0010ff 940e 14a0 	CALL __DIVD21
001101 013f      	MOVW R6,R30
001102 91a0 05bb 	LDS  R26,_tempY
001104 91b0 05bc 	LDS  R27,_tempY+1
001106 9180 05bd 	LDS  R24,_tempY+2
001108 9190 05be 	LDS  R25,_tempY+3
                +
00110a e1e0     +LDI R30 , LOW ( 0x10 )
00110b e0f0     +LDI R31 , HIGH ( 0x10 )
00110c e060     +LDI R22 , BYTE3 ( 0x10 )
00110d e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
00110e 940e 14a0 	CALL __DIVD21
001110 014f      	MOVW R8,R30
001111 940c 0945 	JMP  _TSC2046_Stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x26:
001113 93aa      	ST   -Y,R26
001114 93ea      	ST   -Y,R30
001115 93fa      	ST   -Y,R31
001116 b7ef      	IN   R30,SREG
001117 93ea      	ST   -Y,R30
001118 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
001119 50e1      	SUBI R30,LOW(1)
00111a e0f0      	LDI  R31,0
00111b 52ea      	SUBI R30,LOW(-_rx_buffer0)
00111c 4ff8      	SBCI R31,HIGH(-_rx_buffer0)
00111d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
00111e 50e1      	SUBI R30,LOW(1)
00111f e0f0      	LDI  R31,0
001120 51ef      	SUBI R30,LOW(-_tx_buffer0)
001121 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
001122 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
001123 e6a2      	LDI  R26,LOW(98)
001124 e0b0      	LDI  R27,HIGH(98)
001125 2f6a      	MOV  R22,R26
001126 901c      	LD   R1,X
001127 81e9      	LDD  R30,Y+1
001128 e0a1      	LDI  R26,LOW(1)
001129 940e 1413 	CALL __LSLB12
00112b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2A:
00112c 91ed      	LD   R30,X+
00112d 91fd      	LD   R31,X+
00112e 9631      	ADIW R30,1
00112f 93fe      	ST   -X,R31
001130 93ee      	ST   -X,R30
001131 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
001132 e0e4      	LDI  R30,LOW(4)
001133 93ea      	ST   -Y,R30
001134 e0e1      	LDI  R30,LOW(1)
001135 93ea      	ST   -Y,R30
001136 940c 0a7e 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
001138 e0e5      	LDI  R30,LOW(5)
001139 93ea      	ST   -Y,R30
00113a e0e1      	LDI  R30,LOW(1)
00113b 93ea      	ST   -Y,R30
00113c 940c 0a7e 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2D:
00113e e0e3      	LDI  R30,LOW(3)
00113f 93ea      	ST   -Y,R30
001140 e0e1      	LDI  R30,LOW(1)
001141 93ea      	ST   -Y,R30
001142 940c 0a7e 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
001144 93ea      	ST   -Y,R30
001145 e0e0      	LDI  R30,LOW(0)
001146 93ea      	ST   -Y,R30
001147 940c 0a7e 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2F:
001149 91e0 0806 	LDS  R30,_BTN1_X_Begin
00114b 91f0 0807 	LDS  R31,_BTN1_X_Begin+1
00114d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
00114e 91e0 0808 	LDS  R30,_BTN1_X_End
001150 91f0 0809 	LDS  R31,_BTN1_X_End+1
001152 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x31:
001153 91e0 0802 	LDS  R30,_BTN1_Y_Begin
001155 91f0 0803 	LDS  R31,_BTN1_Y_Begin+1
001157 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
001158 91e0 0804 	LDS  R30,_BTN1_Y_End
00115a 91f0 0805 	LDS  R31,_BTN1_Y_End+1
00115c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
00115d 91e0 080e 	LDS  R30,_BTN2_X_Begin
00115f 91f0 080f 	LDS  R31,_BTN2_X_Begin+1
001161 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
001162 91e0 0810 	LDS  R30,_BTN2_X_End
001164 91f0 0811 	LDS  R31,_BTN2_X_End+1
001166 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
001167 91e0 080a 	LDS  R30,_BTN2_Y_Begin
001169 91f0 080b 	LDS  R31,_BTN2_Y_Begin+1
00116b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
00116c 91e0 080c 	LDS  R30,_BTN2_Y_End
00116e 91f0 080d 	LDS  R31,_BTN2_Y_End+1
001170 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
001171 91e0 0816 	LDS  R30,_BTN3_X_Begin
001173 91f0 0817 	LDS  R31,_BTN3_X_Begin+1
001175 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
001176 91e0 0818 	LDS  R30,_BTN3_X_End
001178 91f0 0819 	LDS  R31,_BTN3_X_End+1
00117a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
00117b 91e0 0812 	LDS  R30,_BTN3_Y_Begin
00117d 91f0 0813 	LDS  R31,_BTN3_Y_Begin+1
00117f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
001180 91e0 0814 	LDS  R30,_BTN3_Y_End
001182 91f0 0815 	LDS  R31,_BTN3_Y_End+1
001184 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3B:
001185 91e0 081e 	LDS  R30,_BTN4_X_Begin
001187 91f0 081f 	LDS  R31,_BTN4_X_Begin+1
001189 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
00118a 91e0 0820 	LDS  R30,_BTN4_X_End
00118c 91f0 0821 	LDS  R31,_BTN4_X_End+1
00118e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3D:
00118f 91e0 081a 	LDS  R30,_BTN4_Y_Begin
001191 91f0 081b 	LDS  R31,_BTN4_Y_Begin+1
001193 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
001194 91e0 081c 	LDS  R30,_BTN4_Y_End
001196 91f0 081d 	LDS  R31,_BTN4_Y_End+1
001198 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3F:
001199 e0f0      	LDI  R31,0
00119a 30e1      	CPI  R30,LOW(0x1)
00119b e0a0      	LDI  R26,HIGH(0x1)
00119c 07fa      	CPC  R31,R26
00119d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x40:
00119e 93fa      	ST   -Y,R31
00119f 93ea      	ST   -Y,R30
0011a0 dfa8      	RCALL SUBOPT_0x2F
0011a1 963a      	ADIW R30,10
0011a2 93fa      	ST   -Y,R31
0011a3 93ea      	ST   -Y,R30
0011a4 cfae      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
0011a5 963f      	ADIW R30,15
0011a6 9738      	SBIW R30,8
0011a7 93fa      	ST   -Y,R31
0011a8 93ea      	ST   -Y,R30
0011a9 ce56      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
0011aa 940e 07f5 	CALL _SSD1963_PutString16
0011ac 81ed      	LDD  R30,Y+5
0011ad 81fe      	LDD  R31,Y+5+1
0011ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
0011af 93fa      	ST   -Y,R31
0011b0 93ea      	ST   -Y,R30
0011b1 dfab      	RCALL SUBOPT_0x33
0011b2 963a      	ADIW R30,10
0011b3 93fa      	ST   -Y,R31
0011b4 93ea      	ST   -Y,R30
0011b5 cfb1      	RJMP SUBOPT_0x35
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x44:
0011b6 93fa      	ST   -Y,R31
0011b7 93ea      	ST   -Y,R30
0011b8 dfb8      	RCALL SUBOPT_0x37
0011b9 963a      	ADIW R30,10
0011ba 93fa      	ST   -Y,R31
0011bb 93ea      	ST   -Y,R30
0011bc cfbe      	RJMP SUBOPT_0x39
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x45:
0011bd 93fa      	ST   -Y,R31
0011be 93ea      	ST   -Y,R30
0011bf dfc5      	RCALL SUBOPT_0x3B
0011c0 963a      	ADIW R30,10
0011c1 93fa      	ST   -Y,R31
0011c2 93ea      	ST   -Y,R30
0011c3 cfcb      	RJMP SUBOPT_0x3D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x46:
0011c4 93fa      	ST   -Y,R31
0011c5 93ea      	ST   -Y,R30
0011c6 efef      	LDI  R30,LOW(65535)
0011c7 efff      	LDI  R31,HIGH(65535)
0011c8 93fa      	ST   -Y,R31
0011c9 93ea      	ST   -Y,R30
0011ca 940c 0915 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x47:
0011cc 9731      	SBIW R30,1
0011cd 93fa      	ST   -Y,R31
0011ce 93ea      	ST   -Y,R30
0011cf e0e1      	LDI  R30,LOW(1)
0011d0 e0f0      	LDI  R31,HIGH(1)
0011d1 ce1f      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x48:
0011d2 efef      	LDI  R30,LOW(65535)
0011d3 efff      	LDI  R31,HIGH(65535)
0011d4 93fa      	ST   -Y,R31
0011d5 93ea      	ST   -Y,R30
0011d6 940c 0b9e 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x49:
0011d8 93fa      	ST   -Y,R31
0011d9 93ea      	ST   -Y,R30
0011da e0e4      	LDI  R30,LOW(4)
0011db 93ea      	ST   -Y,R30
0011dc ce0f      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
0011dd 91e0 0846 	LDS  R30,_Cardio_Divider
0011df 91f0 0847 	LDS  R31,_Cardio_Divider+1
0011e1 9160 0848 	LDS  R22,_Cardio_Divider+2
0011e3 9170 0849 	LDS  R23,_Cardio_Divider+3
0011e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4B:
0011e6 2788      	CLR  R24
0011e7 2799      	CLR  R25
0011e8 940e 14d1 	CALL __CDF2
0011ea 940e 13bd 	CALL __DIVF21
                +
0011ec e0a0     +LDI R26 , LOW ( 0x43680000 )
0011ed e0b0     +LDI R27 , HIGH ( 0x43680000 )
0011ee e688     +LDI R24 , BYTE3 ( 0x43680000 )
0011ef e493     +LDI R25 , BYTE4 ( 0x43680000 )
                 	__GETD2N 0x43680000
0011f0 940e 14d4 	CALL __SWAPD12
0011f2 940e 136b 	CALL __SUBF12
0011f4 940e 1301 	CALL __CFD1
0011f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:123 WORDS
                 SUBOPT_0x4C:
0011f7 91e0 0842 	LDS  R30,_Cardio_X
0011f9 91f0 0843 	LDS  R31,_Cardio_X+1
0011fb 93fa      	ST   -Y,R31
0011fc 93ea      	ST   -Y,R30
0011fd 81ee      	LDD  R30,Y+6
0011fe 81ff      	LDD  R31,Y+6+1
0011ff 91a0 0842 	LDS  R26,_Cardio_X
001201 91b0 0843 	LDS  R27,_Cardio_X+1
001203 0fea      	ADD  R30,R26
001204 1ffb      	ADC  R31,R27
001205 93fa      	ST   -Y,R31
001206 93ea      	ST   -Y,R30
001207 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4D:
001208 e3e2      	LDI  R30,LOW(50)
001209 e0f0      	LDI  R31,HIGH(50)
00120a 93fa      	ST   -Y,R31
00120b 93ea      	ST   -Y,R30
00120c eee9      	LDI  R30,LOW(233)
00120d e0f0      	LDI  R31,HIGH(233)
00120e cde2      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x4E:
00120f 93fa      	ST   -Y,R31
001210 93ea      	ST   -Y,R30
001211 e0e8      	LDI  R30,LOW(8456)
001212 e2f1      	LDI  R31,HIGH(8456)
001213 93fa      	ST   -Y,R31
001214 93ea      	ST   -Y,R30
001215 940e 080f 	CALL _SSD1963_DrawFastLine
001217 cfdf      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x4F:
001218 93fa      	ST   -Y,R31
001219 93ea      	ST   -Y,R30
00121a 81ed      	LDD  R30,Y+5
00121b e0f0      	LDI  R31,0
00121c 93fa      	ST   -Y,R31
00121d 93ea      	ST   -Y,R30
00121e 81ee      	LDD  R30,Y+6
00121f e0f0      	LDI  R31,0
001220 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x50:
001221 93fa      	ST   -Y,R31
001222 93ea      	ST   -Y,R30
001223 81ee      	LDD  R30,Y+6
001224 81ff      	LDD  R31,Y+6+1
001225 cdcb      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x51:
001226 e0e6      	LDI  R30,LOW(6)
001227 93ea      	ST   -Y,R30
001228 e0e1      	LDI  R30,LOW(1)
001229 93ea      	ST   -Y,R30
00122a 940c 0a7e 	JMP  _SwitchPORTF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x52:
00122c e0a0      	LDI  R26,LOW(_WorkParameters)
00122d e0b0      	LDI  R27,HIGH(_WorkParameters)
00122e e0f0      	LDI  R31,0
00122f 0fee      	LSL  R30
001230 1fff      	ROL  R31
001231 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x53:
001232 93fa      	ST   -Y,R31
001233 93ea      	ST   -Y,R30
001234 ece0      	LDI  R30,LOW(192)
001235 e0f0      	LDI  R31,HIGH(192)
001236 93fa      	ST   -Y,R31
001237 93ea      	ST   -Y,R30
001238 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x54:
001239 93fa      	ST   -Y,R31
00123a 93ea      	ST   -Y,R30
00123b e0e0      	LDI  R30,LOW(7936)
00123c e1ff      	LDI  R31,HIGH(7936)
00123d cdb3      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x55:
00123e 940e 07f5 	CALL _SSD1963_PutString16
001240 e2ec      	LDI  R30,LOW(300)
001241 e0f1      	LDI  R31,HIGH(300)
001242 cd96      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x56:
001243 e0a0      	LDI  R26,LOW(_WorkParameters)
001244 e0b0      	LDI  R27,HIGH(_WorkParameters)
001245 940e 14e1 	CALL __EEPROMRDW
001247 01df      	MOVW R26,R30
001248 ebe6      	LDI  R30,LOW(182)
001249 e0f0      	LDI  R31,HIGH(182)
00124a 940e 1468 	CALL __DIVW21U
00124c e4a6      	LDI  R26,LOW(_Cardio_Divider)
00124d e0b8      	LDI  R27,HIGH(_Cardio_Divider)
00124e 2766      	CLR  R22
00124f 2777      	CLR  R23
001250 940e 1338 	CALL __CDF1
001252 940e 14c6 	CALL __PUTDP1
001254 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x57:
001255 91e0 084a 	LDS  R30,_Parameter_Counter
001257 93ea      	ST   -Y,R30
001258 e1ee      	LDI  R30,LOW(30)
001259 93ea      	ST   -Y,R30
00125a e1e0      	LDI  R30,LOW(16)
00125b 93ea      	ST   -Y,R30
00125c efe8      	LDI  R30,LOW(248)
00125d e0f0      	LDI  R31,HIGH(248)
00125e 93fa      	ST   -Y,R31
00125f 93ea      	ST   -Y,R30
001260 940c 0d55 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x58:
001262 e0e0      	LDI  R30,LOW(0)
001263 93e0 0854 	STS  _Sleep_mSec,R30
001265 93e0 0855 	STS  _Sleep_mSec+1,R30
001267 940e 0b38 	CALL _GetButton
001269 93e0 0822 	STS  _Button_Pressed,R30
00126b cf2d      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x59:
00126c 91e0 084a 	LDS  R30,_Parameter_Counter
00126e cfbd      	RJMP SUBOPT_0x52
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5A:
00126f 0fae      	ADD  R26,R30
001270 1fbf      	ADC  R27,R31
001271 940e 14e1 	CALL __EEPROMRDW
001273 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
001274 9890      	cbi  __i2c_port,__scl_bit
001275 9891      	cbi  __i2c_port,__sda_bit
001276 9a88      	sbi  __i2c_dir,__scl_bit
001277 9889      	cbi  __i2c_dir,__sda_bit
001278 c015      	rjmp __i2c_delay2
                 _i2c_start:
001279 9889      	cbi  __i2c_dir,__sda_bit
00127a 9888      	cbi  __i2c_dir,__scl_bit
00127b 27ee      	clr  r30
00127c 0000      	nop
00127d 9b81      	sbis __i2c_pin,__sda_bit
00127e 9508      	ret
00127f 9b80      	sbis __i2c_pin,__scl_bit
001280 9508      	ret
001281 d004      	rcall __i2c_delay1
001282 9a89      	sbi  __i2c_dir,__sda_bit
001283 d002      	rcall __i2c_delay1
001284 9a88      	sbi  __i2c_dir,__scl_bit
001285 e0e1      	ldi  r30,1
                 __i2c_delay1:
001286 e16b      	ldi  r22,27
001287 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
001288 9a89      	sbi  __i2c_dir,__sda_bit
001289 9a88      	sbi  __i2c_dir,__scl_bit
00128a d003      	rcall __i2c_delay2
00128b 9888      	cbi  __i2c_dir,__scl_bit
00128c dff9      	rcall __i2c_delay1
00128d 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00128e e365      	ldi  r22,53
                 __i2c_delay2l:
00128f 956a      	dec  r22
001290 f7f1      	brne __i2c_delay2l
001291 9508      	ret
                 _i2c_read:
001292 e078      	ldi  r23,8
                 __i2c_read0:
001293 9888      	cbi  __i2c_dir,__scl_bit
001294 dff1      	rcall __i2c_delay1
                 __i2c_read3:
001295 9b80      	sbis __i2c_pin,__scl_bit
001296 cffe      	rjmp __i2c_read3
001297 dfee      	rcall __i2c_delay1
001298 9488      	clc
001299 9981      	sbic __i2c_pin,__sda_bit
00129a 9408      	sec
00129b 9a88      	sbi  __i2c_dir,__scl_bit
00129c dff1      	rcall __i2c_delay2
00129d 1fee      	rol  r30
00129e 957a      	dec  r23
00129f f799      	brne __i2c_read0
0012a0 9179      	ld   r23,y+
0012a1 2377      	tst  r23
0012a2 f411      	brne __i2c_read1
0012a3 9889      	cbi  __i2c_dir,__sda_bit
0012a4 c001      	rjmp __i2c_read2
                 __i2c_read1:
0012a5 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0012a6 dfdf      	rcall __i2c_delay1
0012a7 9888      	cbi  __i2c_dir,__scl_bit
0012a8 dfe5      	rcall __i2c_delay2
0012a9 9a88      	sbi  __i2c_dir,__scl_bit
0012aa dfdb      	rcall __i2c_delay1
0012ab 9889      	cbi  __i2c_dir,__sda_bit
0012ac cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0012ad 91e9      	ld   r30,y+
0012ae e078      	ldi  r23,8
                 __i2c_write0:
0012af 0fee      	lsl  r30
0012b0 f410      	brcc __i2c_write1
0012b1 9889      	cbi  __i2c_dir,__sda_bit
0012b2 c001      	rjmp __i2c_write2
                 __i2c_write1:
0012b3 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0012b4 dfd9      	rcall __i2c_delay2
0012b5 9888      	cbi  __i2c_dir,__scl_bit
0012b6 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
0012b7 9b80      	sbis __i2c_pin,__scl_bit
0012b8 cffe      	rjmp __i2c_write3
0012b9 dfcc      	rcall __i2c_delay1
0012ba 9a88      	sbi  __i2c_dir,__scl_bit
0012bb 957a      	dec  r23
0012bc f791      	brne __i2c_write0
0012bd 9889      	cbi  __i2c_dir,__sda_bit
0012be dfc7      	rcall __i2c_delay1
0012bf 9888      	cbi  __i2c_dir,__scl_bit
0012c0 dfcd      	rcall __i2c_delay2
0012c1 e0e1      	ldi  r30,1
0012c2 9981      	sbic __i2c_pin,__sda_bit
0012c3 27ee      	clr  r30
0012c4 9a88      	sbi  __i2c_dir,__scl_bit
0012c5 cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
0012c6 91e9      	ld   r30,y+
0012c7 91f9      	ld   r31,y+
0012c8 9630      	adiw r30,0
0012c9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0012ca ea80     +LDI R24 , LOW ( 0xFA0 )
0012cb e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0012cc 9701     +SBIW R24 , 1
0012cd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0012ce 95a8      	wdr
0012cf 9731      	sbiw r30,1
0012d0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0012d1 9508      	ret
                 
                 __ROUND_REPACK:
0012d2 2355      	TST  R21
0012d3 f442      	BRPL __REPACK
0012d4 3850      	CPI  R21,0x80
0012d5 f411      	BRNE __ROUND_REPACK0
0012d6 ffe0      	SBRS R30,0
0012d7 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0012d8 9631      	ADIW R30,1
0012d9 1f69      	ADC  R22,R25
0012da 1f79      	ADC  R23,R25
0012db f06b      	BRVS __REPACK1
                 
                 __REPACK:
0012dc e850      	LDI  R21,0x80
0012dd 2757      	EOR  R21,R23
0012de f411      	BRNE __REPACK0
0012df 935f      	PUSH R21
0012e0 c0ca      	RJMP __ZERORES
                 __REPACK0:
0012e1 3f5f      	CPI  R21,0xFF
0012e2 f031      	BREQ __REPACK1
0012e3 0f66      	LSL  R22
0012e4 0c00      	LSL  R0
0012e5 9557      	ROR  R21
0012e6 9567      	ROR  R22
0012e7 2f75      	MOV  R23,R21
0012e8 9508      	RET
                 __REPACK1:
0012e9 935f      	PUSH R21
0012ea 2000      	TST  R0
0012eb f00a      	BRMI __REPACK2
0012ec c0ca      	RJMP __MAXRES
                 __REPACK2:
0012ed c0c3      	RJMP __MINRES
                 
                 __UNPACK:
0012ee e850      	LDI  R21,0x80
0012ef 2e19      	MOV  R1,R25
0012f0 2215      	AND  R1,R21
0012f1 0f88      	LSL  R24
0012f2 1f99      	ROL  R25
0012f3 2795      	EOR  R25,R21
0012f4 0f55      	LSL  R21
0012f5 9587      	ROR  R24
                 
                 __UNPACK1:
0012f6 e850      	LDI  R21,0x80
0012f7 2e07      	MOV  R0,R23
0012f8 2205      	AND  R0,R21
0012f9 0f66      	LSL  R22
0012fa 1f77      	ROL  R23
0012fb 2775      	EOR  R23,R21
0012fc 0f55      	LSL  R21
0012fd 9567      	ROR  R22
0012fe 9508      	RET
                 
                 __CFD1U:
0012ff 9468      	SET
001300 c001      	RJMP __CFD1U0
                 __CFD1:
001301 94e8      	CLT
                 __CFD1U0:
001302 935f      	PUSH R21
001303 dff2      	RCALL __UNPACK1
001304 3870      	CPI  R23,0x80
001305 f018      	BRLO __CFD10
001306 3f7f      	CPI  R23,0xFF
001307 f408      	BRCC __CFD10
001308 c0a2      	RJMP __ZERORES
                 __CFD10:
001309 e156      	LDI  R21,22
00130a 1b57      	SUB  R21,R23
00130b f4aa      	BRPL __CFD11
00130c 9551      	NEG  R21
00130d 3058      	CPI  R21,8
00130e f40e      	BRTC __CFD19
00130f 3059      	CPI  R21,9
                 __CFD19:
001310 f030      	BRLO __CFD17
001311 efef      	SER  R30
001312 efff      	SER  R31
001313 ef6f      	SER  R22
001314 e77f      	LDI  R23,0x7F
001315 f977      	BLD  R23,7
001316 c01a      	RJMP __CFD15
                 __CFD17:
001317 2777      	CLR  R23
001318 2355      	TST  R21
001319 f0b9      	BREQ __CFD15
                 __CFD18:
00131a 0fee      	LSL  R30
00131b 1fff      	ROL  R31
00131c 1f66      	ROL  R22
00131d 1f77      	ROL  R23
00131e 955a      	DEC  R21
00131f f7d1      	BRNE __CFD18
001320 c010      	RJMP __CFD15
                 __CFD11:
001321 2777      	CLR  R23
                 __CFD12:
001322 3058      	CPI  R21,8
001323 f028      	BRLO __CFD13
001324 2fef      	MOV  R30,R31
001325 2ff6      	MOV  R31,R22
001326 2f67      	MOV  R22,R23
001327 5058      	SUBI R21,8
001328 cff9      	RJMP __CFD12
                 __CFD13:
001329 2355      	TST  R21
00132a f031      	BREQ __CFD15
                 __CFD14:
00132b 9576      	LSR  R23
00132c 9567      	ROR  R22
00132d 95f7      	ROR  R31
00132e 95e7      	ROR  R30
00132f 955a      	DEC  R21
001330 f7d1      	BRNE __CFD14
                 __CFD15:
001331 2000      	TST  R0
001332 f40a      	BRPL __CFD16
001333 d0d7      	RCALL __ANEGD1
                 __CFD16:
001334 915f      	POP  R21
001335 9508      	RET
                 
                 __CDF1U:
001336 9468      	SET
001337 c001      	RJMP __CDF1U0
                 __CDF1:
001338 94e8      	CLT
                 __CDF1U0:
001339 9730      	SBIW R30,0
00133a 4060      	SBCI R22,0
00133b 4070      	SBCI R23,0
00133c f0b1      	BREQ __CDF10
00133d 2400      	CLR  R0
00133e f026      	BRTS __CDF11
00133f 2377      	TST  R23
001340 f412      	BRPL __CDF11
001341 9400      	COM  R0
001342 d0c8      	RCALL __ANEGD1
                 __CDF11:
001343 2e17      	MOV  R1,R23
001344 e17e      	LDI  R23,30
001345 2011      	TST  R1
                 __CDF12:
001346 f032      	BRMI __CDF13
001347 957a      	DEC  R23
001348 0fee      	LSL  R30
001349 1fff      	ROL  R31
00134a 1f66      	ROL  R22
00134b 1c11      	ROL  R1
00134c cff9      	RJMP __CDF12
                 __CDF13:
00134d 2fef      	MOV  R30,R31
00134e 2ff6      	MOV  R31,R22
00134f 2d61      	MOV  R22,R1
001350 935f      	PUSH R21
001351 df8a      	RCALL __REPACK
001352 915f      	POP  R21
                 __CDF10:
001353 9508      	RET
                 
                 __SWAPACC:
001354 934f      	PUSH R20
001355 01af      	MOVW R20,R30
001356 01fd      	MOVW R30,R26
001357 01da      	MOVW R26,R20
001358 01ab      	MOVW R20,R22
001359 01bc      	MOVW R22,R24
00135a 01ca      	MOVW R24,R20
00135b 2d40      	MOV  R20,R0
00135c 2c01      	MOV  R0,R1
00135d 2e14      	MOV  R1,R20
00135e 914f      	POP  R20
00135f 9508      	RET
                 
                 __UADD12:
001360 0fea      	ADD  R30,R26
001361 1ffb      	ADC  R31,R27
001362 1f68      	ADC  R22,R24
001363 9508      	RET
                 
                 __NEGMAN1:
001364 95e0      	COM  R30
001365 95f0      	COM  R31
001366 9560      	COM  R22
001367 5fef      	SUBI R30,-1
001368 4fff      	SBCI R31,-1
001369 4f6f      	SBCI R22,-1
00136a 9508      	RET
                 
                 __SUBF12:
00136b 935f      	PUSH R21
00136c df81      	RCALL __UNPACK
00136d 3890      	CPI  R25,0x80
00136e f149      	BREQ __ADDF129
00136f e850      	LDI  R21,0x80
001370 2615      	EOR  R1,R21
                 
                 __ADDF120:
001371 3870      	CPI  R23,0x80
001372 f121      	BREQ __ADDF128
                 __ADDF121:
001373 2f57      	MOV  R21,R23
001374 1b59      	SUB  R21,R25
001375 f12b      	BRVS __ADDF1211
001376 f412      	BRPL __ADDF122
001377 dfdc      	RCALL __SWAPACC
001378 cffa      	RJMP __ADDF121
                 __ADDF122:
001379 3158      	CPI  R21,24
00137a f018      	BRLO __ADDF123
00137b 27aa      	CLR  R26
00137c 27bb      	CLR  R27
00137d 2788      	CLR  R24
                 __ADDF123:
00137e 3058      	CPI  R21,8
00137f f028      	BRLO __ADDF124
001380 2fab      	MOV  R26,R27
001381 2fb8      	MOV  R27,R24
001382 2788      	CLR  R24
001383 5058      	SUBI R21,8
001384 cff9      	RJMP __ADDF123
                 __ADDF124:
001385 2355      	TST  R21
001386 f029      	BREQ __ADDF126
                 __ADDF125:
001387 9586      	LSR  R24
001388 95b7      	ROR  R27
001389 95a7      	ROR  R26
00138a 955a      	DEC  R21
00138b f7d9      	BRNE __ADDF125
                 __ADDF126:
00138c 2d50      	MOV  R21,R0
00138d 2551      	EOR  R21,R1
00138e f072      	BRMI __ADDF127
00138f dfd0      	RCALL __UADD12
001390 f438      	BRCC __ADDF129
001391 9567      	ROR  R22
001392 95f7      	ROR  R31
001393 95e7      	ROR  R30
001394 9573      	INC  R23
001395 f413      	BRVC __ADDF129
001396 c020      	RJMP __MAXRES
                 __ADDF128:
001397 dfbc      	RCALL __SWAPACC
                 __ADDF129:
001398 df43      	RCALL __REPACK
001399 915f      	POP  R21
00139a 9508      	RET
                 __ADDF1211:
00139b f7d8      	BRCC __ADDF128
00139c cffb      	RJMP __ADDF129
                 __ADDF127:
00139d 1bea      	SUB  R30,R26
00139e 0bfb      	SBC  R31,R27
00139f 0b68      	SBC  R22,R24
0013a0 f051      	BREQ __ZERORES
0013a1 f410      	BRCC __ADDF1210
0013a2 9400      	COM  R0
0013a3 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0013a4 2366      	TST  R22
0013a5 f392      	BRMI __ADDF129
0013a6 0fee      	LSL  R30
0013a7 1fff      	ROL  R31
0013a8 1f66      	ROL  R22
0013a9 957a      	DEC  R23
0013aa f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0013ab 27ee      	CLR  R30
0013ac 27ff      	CLR  R31
0013ad 2766      	CLR  R22
0013ae 2777      	CLR  R23
0013af 915f      	POP  R21
0013b0 9508      	RET
                 
                 __MINRES:
0013b1 efef      	SER  R30
0013b2 efff      	SER  R31
0013b3 e76f      	LDI  R22,0x7F
0013b4 ef7f      	SER  R23
0013b5 915f      	POP  R21
0013b6 9508      	RET
                 
                 __MAXRES:
0013b7 efef      	SER  R30
0013b8 efff      	SER  R31
0013b9 e76f      	LDI  R22,0x7F
0013ba e77f      	LDI  R23,0x7F
0013bb 915f      	POP  R21
0013bc 9508      	RET
                 
                 __DIVF21:
0013bd 935f      	PUSH R21
0013be df2f      	RCALL __UNPACK
0013bf 3870      	CPI  R23,0x80
0013c0 f421      	BRNE __DIVF210
0013c1 2011      	TST  R1
                 __DIVF211:
0013c2 f40a      	BRPL __DIVF219
0013c3 cfed      	RJMP __MINRES
                 __DIVF219:
0013c4 cff2      	RJMP __MAXRES
                 __DIVF210:
0013c5 3890      	CPI  R25,0x80
0013c6 f409      	BRNE __DIVF218
                 __DIVF217:
0013c7 cfe3      	RJMP __ZERORES
                 __DIVF218:
0013c8 2401      	EOR  R0,R1
0013c9 9408      	SEC
0013ca 0b97      	SBC  R25,R23
0013cb f41b      	BRVC __DIVF216
0013cc f3d4      	BRLT __DIVF217
0013cd 2000      	TST  R0
0013ce cff3      	RJMP __DIVF211
                 __DIVF216:
0013cf 2f79      	MOV  R23,R25
0013d0 931f      	PUSH R17
0013d1 932f      	PUSH R18
0013d2 933f      	PUSH R19
0013d3 934f      	PUSH R20
0013d4 2411      	CLR  R1
0013d5 2711      	CLR  R17
0013d6 2722      	CLR  R18
0013d7 2733      	CLR  R19
0013d8 2744      	CLR  R20
0013d9 2755      	CLR  R21
0013da e290      	LDI  R25,32
                 __DIVF212:
0013db 17ae      	CP   R26,R30
0013dc 07bf      	CPC  R27,R31
0013dd 0786      	CPC  R24,R22
0013de 0741      	CPC  R20,R17
0013df f030      	BRLO __DIVF213
0013e0 1bae      	SUB  R26,R30
0013e1 0bbf      	SBC  R27,R31
0013e2 0b86      	SBC  R24,R22
0013e3 0b41      	SBC  R20,R17
0013e4 9408      	SEC
0013e5 c001      	RJMP __DIVF214
                 __DIVF213:
0013e6 9488      	CLC
                 __DIVF214:
0013e7 1f55      	ROL  R21
0013e8 1f22      	ROL  R18
0013e9 1f33      	ROL  R19
0013ea 1c11      	ROL  R1
0013eb 1faa      	ROL  R26
0013ec 1fbb      	ROL  R27
0013ed 1f88      	ROL  R24
0013ee 1f44      	ROL  R20
0013ef 959a      	DEC  R25
0013f0 f751      	BRNE __DIVF212
0013f1 01f9      	MOVW R30,R18
0013f2 2d61      	MOV  R22,R1
0013f3 914f      	POP  R20
0013f4 913f      	POP  R19
0013f5 912f      	POP  R18
0013f6 911f      	POP  R17
0013f7 2366      	TST  R22
0013f8 f032      	BRMI __DIVF215
0013f9 0f55      	LSL  R21
0013fa 1fee      	ROL  R30
0013fb 1fff      	ROL  R31
0013fc 1f66      	ROL  R22
0013fd 957a      	DEC  R23
0013fe f243      	BRVS __DIVF217
                 __DIVF215:
0013ff ded2      	RCALL __ROUND_REPACK
001400 915f      	POP  R21
001401 9508      	RET
                 
                 __ADDD12:
001402 0fea      	ADD  R30,R26
001403 1ffb      	ADC  R31,R27
001404 1f68      	ADC  R22,R24
001405 1f79      	ADC  R23,R25
001406 9508      	RET
                 
                 __ANEGW1:
001407 95f1      	NEG  R31
001408 95e1      	NEG  R30
001409 40f0      	SBCI R31,0
00140a 9508      	RET
                 
                 __ANEGD1:
00140b 95f0      	COM  R31
00140c 9560      	COM  R22
00140d 9570      	COM  R23
00140e 95e1      	NEG  R30
00140f 4fff      	SBCI R31,-1
001410 4f6f      	SBCI R22,-1
001411 4f7f      	SBCI R23,-1
001412 9508      	RET
                 
                 __LSLB12:
001413 23ee      	TST  R30
001414 2e0e      	MOV  R0,R30
001415 2fea      	MOV  R30,R26
001416 f019      	BREQ __LSLB12R
                 __LSLB12L:
001417 0fee      	LSL  R30
001418 940a      	DEC  R0
001419 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00141a 9508      	RET
                 
                 __LSRB12:
00141b 23ee      	TST  R30
00141c 2e0e      	MOV  R0,R30
00141d 2fea      	MOV  R30,R26
00141e f019      	BREQ __LSRB12R
                 __LSRB12L:
00141f 95e6      	LSR  R30
001420 940a      	DEC  R0
001421 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
001422 9508      	RET
                 
                 __ASRW4:
001423 95f5      	ASR  R31
001424 95e7      	ROR  R30
                 __ASRW3:
001425 95f5      	ASR  R31
001426 95e7      	ROR  R30
                 __ASRW2:
001427 95f5      	ASR  R31
001428 95e7      	ROR  R30
001429 95f5      	ASR  R31
00142a 95e7      	ROR  R30
00142b 9508      	RET
                 
                 __CWD1:
00142c 2f6f      	MOV  R22,R31
00142d 0f66      	ADD  R22,R22
00142e 0b66      	SBC  R22,R22
00142f 2f76      	MOV  R23,R22
001430 9508      	RET
                 
                 __CWD2:
001431 2f8b      	MOV  R24,R27
001432 0f88      	ADD  R24,R24
001433 0b88      	SBC  R24,R24
001434 2f98      	MOV  R25,R24
001435 9508      	RET
                 
                 __MULW12U:
001436 9ffa      	MUL  R31,R26
001437 2df0      	MOV  R31,R0
001438 9feb      	MUL  R30,R27
001439 0df0      	ADD  R31,R0
00143a 9fea      	MUL  R30,R26
00143b 2de0      	MOV  R30,R0
00143c 0df1      	ADD  R31,R1
00143d 9508      	RET
                 
                 __MULD12U:
00143e 9f7a      	MUL  R23,R26
00143f 2d70      	MOV  R23,R0
001440 9f6b      	MUL  R22,R27
001441 0d70      	ADD  R23,R0
001442 9ff8      	MUL  R31,R24
001443 0d70      	ADD  R23,R0
001444 9fe9      	MUL  R30,R25
001445 0d70      	ADD  R23,R0
001446 9f6a      	MUL  R22,R26
001447 2d60      	MOV  R22,R0
001448 0d71      	ADD  R23,R1
001449 9ffb      	MUL  R31,R27
00144a 0d60      	ADD  R22,R0
00144b 1d71      	ADC  R23,R1
00144c 9fe8      	MUL  R30,R24
00144d 0d60      	ADD  R22,R0
00144e 1d71      	ADC  R23,R1
00144f 2788      	CLR  R24
001450 9ffa      	MUL  R31,R26
001451 2df0      	MOV  R31,R0
001452 0d61      	ADD  R22,R1
001453 1f78      	ADC  R23,R24
001454 9feb      	MUL  R30,R27
001455 0df0      	ADD  R31,R0
001456 1d61      	ADC  R22,R1
001457 1f78      	ADC  R23,R24
001458 9fea      	MUL  R30,R26
001459 2de0      	MOV  R30,R0
00145a 0df1      	ADD  R31,R1
00145b 1f68      	ADC  R22,R24
00145c 1f78      	ADC  R23,R24
00145d 9508      	RET
                 
                 __MULW12:
00145e d046      	RCALL __CHKSIGNW
00145f dfd6      	RCALL __MULW12U
001460 f40e      	BRTC __MULW121
001461 dfa5      	RCALL __ANEGW1
                 __MULW121:
001462 9508      	RET
                 
                 __MULD12:
001463 d04f      	RCALL __CHKSIGND
001464 dfd9      	RCALL __MULD12U
001465 f40e      	BRTC __MULD121
001466 dfa4      	RCALL __ANEGD1
                 __MULD121:
001467 9508      	RET
                 
                 __DIVW21U:
001468 2400      	CLR  R0
001469 2411      	CLR  R1
00146a e190      	LDI  R25,16
                 __DIVW21U1:
00146b 0faa      	LSL  R26
00146c 1fbb      	ROL  R27
00146d 1c00      	ROL  R0
00146e 1c11      	ROL  R1
00146f 1a0e      	SUB  R0,R30
001470 0a1f      	SBC  R1,R31
001471 f418      	BRCC __DIVW21U2
001472 0e0e      	ADD  R0,R30
001473 1e1f      	ADC  R1,R31
001474 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001475 60a1      	SBR  R26,1
                 __DIVW21U3:
001476 959a      	DEC  R25
001477 f799      	BRNE __DIVW21U1
001478 01fd      	MOVW R30,R26
001479 01d0      	MOVW R26,R0
00147a 9508      	RET
                 
                 __DIVD21U:
00147b 933f      	PUSH R19
00147c 934f      	PUSH R20
00147d 935f      	PUSH R21
00147e 2400      	CLR  R0
00147f 2411      	CLR  R1
001480 2744      	CLR  R20
001481 2755      	CLR  R21
001482 e230      	LDI  R19,32
                 __DIVD21U1:
001483 0faa      	LSL  R26
001484 1fbb      	ROL  R27
001485 1f88      	ROL  R24
001486 1f99      	ROL  R25
001487 1c00      	ROL  R0
001488 1c11      	ROL  R1
001489 1f44      	ROL  R20
00148a 1f55      	ROL  R21
00148b 1a0e      	SUB  R0,R30
00148c 0a1f      	SBC  R1,R31
00148d 0b46      	SBC  R20,R22
00148e 0b57      	SBC  R21,R23
00148f f428      	BRCC __DIVD21U2
001490 0e0e      	ADD  R0,R30
001491 1e1f      	ADC  R1,R31
001492 1f46      	ADC  R20,R22
001493 1f57      	ADC  R21,R23
001494 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001495 60a1      	SBR  R26,1
                 __DIVD21U3:
001496 953a      	DEC  R19
001497 f759      	BRNE __DIVD21U1
001498 01fd      	MOVW R30,R26
001499 01bc      	MOVW R22,R24
00149a 01d0      	MOVW R26,R0
00149b 01ca      	MOVW R24,R20
00149c 915f      	POP  R21
00149d 914f      	POP  R20
00149e 913f      	POP  R19
00149f 9508      	RET
                 
                 __DIVD21:
0014a0 d012      	RCALL __CHKSIGND
0014a1 dfd9      	RCALL __DIVD21U
0014a2 f40e      	BRTC __DIVD211
0014a3 df67      	RCALL __ANEGD1
                 __DIVD211:
0014a4 9508      	RET
                 
                 __CHKSIGNW:
0014a5 94e8      	CLT
0014a6 fff7      	SBRS R31,7
0014a7 c002      	RJMP __CHKSW1
0014a8 df5e      	RCALL __ANEGW1
0014a9 9468      	SET
                 __CHKSW1:
0014aa ffb7      	SBRS R27,7
0014ab c006      	RJMP __CHKSW2
0014ac 95a0      	COM  R26
0014ad 95b0      	COM  R27
0014ae 9611      	ADIW R26,1
0014af f800      	BLD  R0,0
0014b0 9403      	INC  R0
0014b1 fa00      	BST  R0,0
                 __CHKSW2:
0014b2 9508      	RET
                 
                 __CHKSIGND:
0014b3 94e8      	CLT
0014b4 ff77      	SBRS R23,7
0014b5 c002      	RJMP __CHKSD1
0014b6 df54      	RCALL __ANEGD1
0014b7 9468      	SET
                 __CHKSD1:
0014b8 ff97      	SBRS R25,7
0014b9 c00b      	RJMP __CHKSD2
0014ba 2400      	CLR  R0
0014bb 95a0      	COM  R26
0014bc 95b0      	COM  R27
0014bd 9580      	COM  R24
0014be 9590      	COM  R25
0014bf 9611      	ADIW R26,1
0014c0 1d80      	ADC  R24,R0
0014c1 1d90      	ADC  R25,R0
0014c2 f800      	BLD  R0,0
0014c3 9403      	INC  R0
0014c4 fa00      	BST  R0,0
                 __CHKSD2:
0014c5 9508      	RET
                 
                 __PUTDP1:
0014c6 93ed      	ST   X+,R30
0014c7 93fd      	ST   X+,R31
0014c8 936d      	ST   X+,R22
0014c9 937c      	ST   X,R23
0014ca 9508      	RET
                 
                 __GETW1PF:
0014cb 9005      	LPM  R0,Z+
0014cc 91f4      	LPM  R31,Z
0014cd 2de0      	MOV  R30,R0
0014ce 9508      	RET
                 
                 __CDF2U:
0014cf 9468      	SET
0014d0 c001      	RJMP __CDF2U0
                 __CDF2:
0014d1 94e8      	CLT
                 __CDF2U0:
0014d2 d001      	RCALL __SWAPD12
0014d3 de65      	RCALL __CDF1U0
                 
                 __SWAPD12:
0014d4 2e18      	MOV  R1,R24
0014d5 2f86      	MOV  R24,R22
0014d6 2d61      	MOV  R22,R1
0014d7 2e19      	MOV  R1,R25
0014d8 2f97      	MOV  R25,R23
0014d9 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0014da 2e1b      	MOV  R1,R27
0014db 2fbf      	MOV  R27,R31
0014dc 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0014dd 2e1a      	MOV  R1,R26
0014de 2fae      	MOV  R26,R30
0014df 2de1      	MOV  R30,R1
0014e0 9508      	RET
                 
                 __EEPROMRDW:
0014e1 9611      	ADIW R26,1
0014e2 d002      	RCALL __EEPROMRDB
0014e3 2ffe      	MOV  R31,R30
0014e4 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0014e5 99e1      	SBIC EECR,EEWE
0014e6 cffe      	RJMP __EEPROMRDB
0014e7 93ff      	PUSH R31
0014e8 b7ff      	IN   R31,SREG
0014e9 94f8      	CLI
0014ea bbae      	OUT  EEARL,R26
0014eb bbbf      	OUT  EEARH,R27
0014ec 9ae0      	SBI  EECR,EERE
0014ed b3ed      	IN   R30,EEDR
0014ee bfff      	OUT  SREG,R31
0014ef 91ff      	POP  R31
0014f0 9508      	RET
                 
                 __EEPROMWRW:
0014f1 d007      	RCALL __EEPROMWRB
0014f2 9611      	ADIW R26,1
0014f3 93ef      	PUSH R30
0014f4 2fef      	MOV  R30,R31
0014f5 d003      	RCALL __EEPROMWRB
0014f6 91ef      	POP  R30
0014f7 9711      	SBIW R26,1
0014f8 9508      	RET
                 
                 __EEPROMWRB:
0014f9 9be1      	SBIS EECR,EEWE
0014fa c002      	RJMP __EEPROMWRB1
0014fb 95a8      	WDR
0014fc cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0014fd b79f      	IN   R25,SREG
0014fe 94f8      	CLI
0014ff bbae      	OUT  EEARL,R26
001500 bbbf      	OUT  EEARH,R27
001501 9ae0      	SBI  EECR,EERE
001502 b38d      	IN   R24,EEDR
001503 17e8      	CP   R30,R24
001504 f019      	BREQ __EEPROMWRB0
001505 bbed      	OUT  EEDR,R30
001506 9ae2      	SBI  EECR,EEMWE
001507 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
001508 bf9f      	OUT  SREG,R25
001509 9508      	RET
                 
                 __CPD21:
00150a 17ae      	CP   R26,R30
00150b 07bf      	CPC  R27,R31
00150c 0786      	CPC  R24,R22
00150d 0797      	CPC  R25,R23
00150e 9508      	RET
                 
                 __SAVELOCR6:
00150f 935a      	ST   -Y,R21
                 __SAVELOCR5:
001510 934a      	ST   -Y,R20
                 __SAVELOCR4:
001511 933a      	ST   -Y,R19
                 __SAVELOCR3:
001512 932a      	ST   -Y,R18
                 __SAVELOCR2:
001513 931a      	ST   -Y,R17
001514 930a      	ST   -Y,R16
001515 9508      	RET
                 
                 __LOADLOCR6:
001516 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001517 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001518 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001519 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00151a 8119      	LDD  R17,Y+1
00151b 8108      	LD   R16,Y
00151c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  57 r1 :  46 r2 :   2 r3 :   0 r4 :   8 r5 :   0 r6 :   9 r7 :   8 
r8 :   9 r9 :   8 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  61 r17:  67 r18:  17 r19:  18 r20:  29 r21:  63 r22:  85 r23:  80 
r24:  65 r25:  42 r26: 355 r27: 126 r28:  18 r29:   1 r30:1059 r31: 530 
x  :  15 y  : 566 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  33 add   :  30 
adiw  :  46 and   :   4 andi  :   8 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   0 break :   0 breq  :  24 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  26 
brlt  :   3 brmi  :   5 brne  : 113 brpl  :  14 brsh  :  26 brtc  :   4 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   2 call  : 407 
cbi   :  29 cbr   :   0 clc   :   2 clh   :   0 cli   :   5 cln   :   0 
clr   :  44 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  15 
cp    :  32 cpc   : 114 cpi   : 124 cpse  :   0 dec   :  16 des   :   0 
elpm  :   0 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   9 inc   :   5 jmp   :  60 ld    :  45 ldd   : 172 
ldi   : 628 lds   : 117 lpm   :  12 lsl   :  20 lsr   :   3 mov   :  64 
movw  :  42 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :  10 
or    :   4 ori   :   0 out   :  64 pop   :  19 push  :  18 rcall :  93 
ret   : 118 reti  :   2 rjmp  : 170 rol   :  35 ror   :  17 sbc   :  19 
sbci  :  20 sbi   :  33 sbic  :   5 sbis  :   6 sbiw  :  32 sbr   :   2 
sbrc  :   0 sbrs  :   5 sec   :   3 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 325 std   :  45 sts   :  94 sub   :  13 subi  :  33 
swap  :   1 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002a3a   8528   2282  10810  131072   8.2%
[.dseg] 0x000100 0x00085c      0    860    860    4351  19.8%
[.eseg] 0x000000 0x000007      0      7      7    4096   0.2%

Assembly complete, 0 errors, 18 warnings
