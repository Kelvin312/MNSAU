;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 28.07.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 004D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004E char status,data;
; 0000 004F status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0050 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0052    {
; 0000 0053    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0054 #if RX_BUFFER_SIZE == 256
; 0000 0055    // special case for receiver buffer size=256
; 0000 0056    if (++rx_counter == 0)
; 0000 0057       {
; 0000 0058 #else
; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005B       {
; 0000 005C       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 005D #endif
; 0000 005E       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 005F       }
; 0000 0060    }
;PCODE: $0000002A VOL: 0
; 0000 0061 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0068 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0069 char data;
; 0000 006A while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006B data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006C #if RX_BUFFER_SIZE != 256
; 0000 006D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006E #endif
; 0000 006F #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0070 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0071 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0072 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0073 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 128
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0083 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0084 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0085    {
; 0000 0086    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0087    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0088 #if TX_BUFFER_SIZE != 256
; 0000 0089    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008A #endif
; 0000 008B    }
;PCODE: $0000005A VOL: 0
; 0000 008C }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0093 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0094 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0095 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 0096 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0097    {
; 0000 0098    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0099 #if TX_BUFFER_SIZE != 256
; 0000 009A    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009B #endif
; 0000 009C    ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009D    }
; 0000 009E else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009F    UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00A0 #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 00A1 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define MIGMIG PORTB.5
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 00AB {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00AC // Reinitialize Timer2 value
; 0000 00AD TCNT2=0x06;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00AE // Place your code here
; 0000 00AF MIGMIG ^= 1;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B0 }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00B5 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B6 // Reinitialize Timer 0 value
; 0000 00B7 TCNT0=0x5F;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B8 TCCR0=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B9 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;
;#define FIRST_U_ADC_INPUT 5
;#define FIRST_I_ADC_INPUT 1
;#define ZU_ADC_INPUT 4
;#define ZI_ADC_INPUT 0
;#define FREQUENCY_ADC_INPUT 6
;#define ADC_BUF_SIZE 40
;#define ADC_VREF_TYPE 0x00
;
;unsigned char adc_data[8][ADC_BUF_SIZE];
;unsigned long adc_current[8], adc_real[8];
;unsigned char adc_count[8], s_val[8];
;unsigned char adc_temp;
;unsigned char adc_rd_input, adc_wr_input, adc_wr_index, adc_rd_index;
;unsigned char isRising[8] = {0,0,0,0,0,0,0,0}, isUpdate[8] = {0,0,0,0,0,0,0,0};
;unsigned int last_time = 0;
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 00CE {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00CF // Read the AD conversion result
; 0000 00D0     adc_temp = ADCW>>2;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D1 // Select next ADC input
; 0000 00D2     adc_rd_input = adc_wr_input + 1;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00D3     if(adc_rd_input > 7) adc_rd_input = 0;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00D4     ADMUX=(ADC_VREF_TYPE & 0xff) | adc_rd_input;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00D5 // Delay needed for the stabilization of the ADC input voltage
; 0000 00D6     TCNT0=0x5F;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D7     TCCR0=0x01;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00D8 
; 0000 00D9 adc_data[adc_wr_input][adc_wr_index] = adc_temp;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00DA 
; 0000 00DB if(adc_temp & 0x80)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00DC {
; 0000 00DD   if(!isRising[adc_wr_input])// && 0)  //0000000000
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00DE   {
; 0000 00DF     //Íàðàñòàþùèé
; 0000 00E0     if(adc_wr_input == FREQUENCY_ADC_INPUT)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E1     {
; 0000 00E2         last_time = TCNT1;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00E3         TCNT1H=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00E4         TCNT1L=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00E5     }
; 0000 00E6     adc_real[adc_wr_input] =  adc_current[adc_wr_input];
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E7     adc_current[adc_wr_input] = 0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00E8     isRising[adc_wr_input] = 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00E9     isUpdate[adc_wr_input] = adc_count[adc_wr_input];
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00EA     adc_count[adc_wr_input] = 0;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00EB   }
; 0000 00EC }
;PCODE: $000000F9 VOL: 0
; 0000 00ED else
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00EE {
; 0000 00EF   if(adc_temp < 120) isRising[adc_wr_input] = 0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00F0   adc_temp = 127 - adc_temp;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00F1 }
;PCODE: $0000010B VOL: 0
; 0000 00F2 
; 0000 00F3 adc_temp &= 0x7F;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00F4 adc_current[adc_wr_input] += adc_temp * adc_temp;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00F5 adc_count[adc_wr_input]++;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00F6 
; 0000 00F7 // Select next ADC input
; 0000 00F8 if (++adc_wr_input > 7)
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00F9 {
; 0000 00FA     adc_wr_input = 0;
;PCODE: $0000012C VOL: 0
; 0000 00FB     if(++adc_wr_index >= ADC_BUF_SIZE) adc_wr_index = 0;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00FC 	if(adc_wr_index == adc_rd_index)
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00FD 	{
; 0000 00FE 		if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00FF 	}
;PCODE: $0000013D VOL: 0
; 0000 0100 }
;PCODE: $0000013E VOL: 0
; 0000 0101 }
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;
;unsigned char isqrt( unsigned int from)
; 0000 0104 {
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0105      unsigned int mask = 0x4000, sqr = 0, temp;
; 0000 0106      do
;PCODE: $00000145 VOL: 0
;	from -> Y+6
;	mask -> R16,R17
;	sqr -> R18,R19
;	temp -> R20,R21
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0107      {
; 0000 0108          temp = sqr | mask;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0109          sqr >>= 1;
;PCODE: $0000014E VOL: 0
; 0000 010A          if( temp <= from ) {
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 010B              sqr |= mask;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 010C              from -= temp;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 010D          }
; 0000 010E      } while( mask >>= 2 );
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 010F      //îêðóãëåíèå
; 0000 0110      if( sqr < from ) ++sqr;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0111      return (unsigned char)sqr;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0112 }
;PCODE: $0000016A VOL: 0
;
;inline void main_loop()
; 0000 0115 {
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0116     char i, j;
; 0000 0117     unsigned int s_tval;
; 0000 0118     for(i=0; i<8; i++)
;PCODE: $0000016D VOL: 0
;	i -> R17
;	j -> R16
;	s_tval -> R18,R19
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0119     {
; 0000 011A         if(isUpdate[i])
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 011B         {
; 0000 011C             s_tval = adc_real[i]/isUpdate[i];
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 011D             isUpdate[i] = 0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 011E             s_val[i] = isqrt(s_tval);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 011F         }
; 0000 0120     }
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0121 
; 0000 0122     if(rx_counter)
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0123     {
; 0000 0124         switch(getchar())
;PCODE: $000001A1 VOL: 0
; 0000 0125         {
; 0000 0126             case 'U':
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0127                 j = FIRST_U_ADC_INPUT + 3;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0128                 while(adc_rd_index != adc_wr_index)
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0129                 {
; 0000 012A                         for(i=FIRST_U_ADC_INPUT; i<j; i++)
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 012B                         {
; 0000 012C                             putchar(adc_data[i][adc_rd_index]);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 012D                         }
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 012E                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 012F                 }
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0130             break;
;PCODE: $000001CC VOL: 0
; 0000 0131             case 'I':
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0132                 j = FIRST_I_ADC_INPUT + 3;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0133                 while(adc_rd_index != adc_wr_index)
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0134                 {
; 0000 0135                         for(i=FIRST_I_ADC_INPUT; i<j; i++)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0136                         {
; 0000 0137                             putchar(adc_data[i][adc_rd_index]);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0138                         }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0139                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 013A                 }
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 013B             break;
;PCODE: $000001F8 VOL: 0
; 0000 013C             case 'Z':
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 013D                 while(adc_rd_index != adc_wr_index)
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 013E                 {
; 0000 013F                     putchar(adc_data[ZU_ADC_INPUT][adc_rd_index]);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0140                     putchar(adc_data[ZI_ADC_INPUT][adc_rd_index]);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0141 
; 0000 0142                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0143                 }
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0144             break;
;PCODE: $00000218 VOL: 0
; 0000 0145             case 'S':
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0146                 // Ïåðèîä â òèêàõ 250 ÊÃö
; 0000 0147                 putchar(last_time & 0xFF);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0148                 putchar(last_time >> 8);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0149                 // Ñðåäíåêâàäðàòè÷íûå
; 0000 014A                 for(i=0; i<8; i++)
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 014B                 {
; 0000 014C                     putchar(s_val[i]);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 014D                 }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 014E             break;
;PCODE: $00000237 VOL: 0
; 0000 014F         }
;PCODE: $00000238 VOL: 0
; 0000 0150     }
; 0000 0151 }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 0157 {
;PCODE: $0000023E VOL: 0
; 0000 0158 // Declare your local variables here
; 0000 0159 
; 0000 015A // Input/Output Ports initialization
; 0000 015B // Port A initialization
; 0000 015C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 015D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 015E PORTA=0x00;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 015F DDRA=0x00;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0160 
; 0000 0161 // Port B initialization
; 0000 0162 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0163 // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
; 0000 0164 PORTB=0x00;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0165 DDRB=0x20;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0166 
; 0000 0167 // Port C initialization
; 0000 0168 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0169 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 016A PORTC=0x00;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 016B DDRC=0x00;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 016C 
; 0000 016D // Port D initialization
; 0000 016E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 016F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0170 PORTD=0x00;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0171 DDRD=0x00;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0172 
; 0000 0173 // Timer/Counter 0 initialization
; 0000 0174 // Clock source: System Clock
; 0000 0175 // Clock value: 16000,000 kHz
; 0000 0176 // Mode: Normal top=0xFF
; 0000 0177 // OC0 output: Disconnected
; 0000 0178 TCCR0=0x01;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0179 TCNT0=0x5F;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 017A OCR0=0x00;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 017B 
; 0000 017C // Timer/Counter 1 initialization
; 0000 017D // Clock source: System Clock
; 0000 017E // Clock value: 250,000 kHz
; 0000 017F // Mode: Normal top=0xFFFF
; 0000 0180 // OC1A output: Discon.
; 0000 0181 // OC1B output: Discon.
; 0000 0182 // Noise Canceler: Off
; 0000 0183 // Input Capture on Falling Edge
; 0000 0184 // Timer1 Overflow Interrupt: Off
; 0000 0185 // Input Capture Interrupt: Off
; 0000 0186 // Compare A Match Interrupt: Off
; 0000 0187 // Compare B Match Interrupt: Off
; 0000 0188 TCCR1A=0x00;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0189 TCCR1B=0x03;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 018A TCNT1H=0x00;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 018B TCNT1L=0x02;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 018C ICR1H=0x00;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 018D ICR1L=0x00;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 018E OCR1AH=0x00;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 018F OCR1AL=0x00;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0190 OCR1BH=0x00;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0191 OCR1BL=0x00;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0192 
; 0000 0193 // Timer/Counter 2 initialization
; 0000 0194 // Clock source: System Clock
; 0000 0195 // Clock value: 250,000 kHz
; 0000 0196 // Mode: Normal top=0xFF
; 0000 0197 // OC2 output: Disconnected
; 0000 0198 ASSR=0x00;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0199 TCCR2=0x04;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 019A TCNT2=0x06;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 019B OCR2=0x00;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 019C 
; 0000 019D // External Interrupt(s) initialization
; 0000 019E // INT0: Off
; 0000 019F // INT1: Off
; 0000 01A0 // INT2: Off
; 0000 01A1 MCUCR=0x00;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 01A2 MCUCSR=0x00;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 01A3 
; 0000 01A4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01A5 TIMSK=0x41;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01A6 
; 0000 01A7 // USART initialization
; 0000 01A8 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01A9 // USART Receiver: On
; 0000 01AA // USART Transmitter: On
; 0000 01AB // USART Mode: Asynchronous
; 0000 01AC // USART Baud Rate: 115200
; 0000 01AD UCSRA=0x00;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 01AE UCSRB=0xD8;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 01AF UCSRC=0x86;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 01B0 UBRRH=0x00;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 01B1 UBRRL=0x08;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01B2 
; 0000 01B3 // Analog Comparator initialization
; 0000 01B4 // Analog Comparator: Off
; 0000 01B5 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01B6 ACSR=0x80;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 01B7 SFIOR=0x00;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01B8 
; 0000 01B9 // ADC initialization
; 0000 01BA // ADC Clock frequency: 250,000 kHz
; 0000 01BB // ADC Voltage Reference: AREF pin
; 0000 01BC // ADC Auto Trigger Source: Timer0 Overflow
; 0000 01BD ADMUX=(ADC_VREF_TYPE & 0xff);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01BE ADCSRA=0xAE;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 01BF SFIOR&=0x1F;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 01C0 SFIOR|=0x80;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01C1 
; 0000 01C2 // SPI initialization
; 0000 01C3 // SPI disabled
; 0000 01C4 SPCR=0x00;
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 01C5 
; 0000 01C6 // TWI initialization
; 0000 01C7 // TWI disabled
; 0000 01C8 TWCR=0x00;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01C9 
; 0000 01CA // Watchdog Timer initialization
; 0000 01CB // Watchdog Timer Prescaler: OSC/256k
; 0000 01CC #pragma optsize-
; 0000 01CD WDTCR=0x1C;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01CE WDTCR=0x0C;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01CF #ifdef _OPTIMIZE_SIZE_
; 0000 01D0 #pragma optsize+
; 0000 01D1 #endif
; 0000 01D2 
; 0000 01D3 // Global enable interrupts
; 0000 01D4 #asm("sei")
;PCODE: $00000297 VOL: 0
	sei
;PCODE: $00000298 VOL: 0
; 0000 01D5 
; 0000 01D6 while (1)
;PCODE: $00000299 VOL: 0
; 0000 01D7       {
; 0000 01D8       #asm("wdr")
;PCODE: $0000029A VOL: 0
	wdr
;PCODE: $0000029B VOL: 0
; 0000 01D9       main_loop();
;PCODE: $0000029C VOL: 0
; 0000 01DA       }
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01DB }
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
