
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm Tue Jul 28 18:36:50 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1059): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1060): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1061): warning: Register r7 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1063): warning: Register r9 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1064): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1065): warning: Register r11 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1066): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1067): warning: Register r13 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1068): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF _adc_temp=R11
                 	.DEF _adc_rd_input=R10
                 	.DEF _adc_wr_input=R13
                 	.DEF _adc_wr_index=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00cb 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00df 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0068 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 009a 	JMP  _usart_tx_isr
00001c 940c 00e6 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 
                 __GLOBAL_INI_TBL:
000034 0001      	.DW  0x01
000035 0002      	.DW  0x02
000036 0066      	.DW  __REG_BIT_VARS*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003f e1f8      	LDI  R31,0x18
000040 bdf1      	OUT  WDTCR,R31
000041 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0259 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 28.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004D {
                 
                 	.CSEG
                 _usart_rx_isr:
000068 93ea      	ST   -Y,R30
000069 93fa      	ST   -Y,R31
00006a b7ef      	IN   R30,SREG
00006b 93ea      	ST   -Y,R30
                 ; 0000 004E char status,data;
                 ; 0000 004F status=UCSRA;
00006c 931a      	ST   -Y,R17
00006d 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00006e b11b      	IN   R17,11
                 ; 0000 0050 data=UDR;
00006f b10c      	IN   R16,12
                 ; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000070 2fe1      	MOV  R30,R17
000071 71ec      	ANDI R30,LOW(0x1C)
000072 f489      	BRNE _0x3
                 ; 0000 0052    {
                 ; 0000 0053    rx_buffer[rx_wr_index++]=data;
000073 2de5      	MOV  R30,R5
000074 9453      	INC  R5
000075 e0f0      	LDI  R31,0
000076 5ae0      	SUBI R30,LOW(-_rx_buffer)
000077 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000078 8300      	ST   Z,R16
                 ; 0000 0054 #if RX_BUFFER_SIZE == 256
                 ; 0000 0055    // special case for receiver buffer size=256
                 ; 0000 0056    if (++rx_counter == 0)
                 ; 0000 0057       {
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000079 e0e8      	LDI  R30,LOW(8)
00007a 15e5      	CP   R30,R5
00007b f409      	BRNE _0x4
00007c 2455      	CLR  R5
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00007d 9473      	INC  R7
00007e e0e8      	LDI  R30,LOW(8)
00007f 15e7      	CP   R30,R7
000080 f419      	BRNE _0x5
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
000081 2477      	CLR  R7
                 ; 0000 005D #endif
                 ; 0000 005E       rx_buffer_overflow=1;
000082 9468      	SET
000083 f820      	BLD  R2,0
                 ; 0000 005F       }
                 ; 0000 0060    }
                 _0x5:
                 ; 0000 0061 }
                 _0x3:
000084 9109      	LD   R16,Y+
000085 9119      	LD   R17,Y+
000086 c025      	RJMP _0x47
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0068 {
                 _getchar:
                 ; 0000 0069 char data;
                 ; 0000 006A while (rx_counter==0);
000087 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000088 2077      	TST  R7
000089 f3f1      	BREQ _0x6
                 ; 0000 006B data=rx_buffer[rx_rd_index++];
00008a 2de4      	MOV  R30,R4
00008b 9443      	INC  R4
00008c e0f0      	LDI  R31,0
00008d 5ae0      	SUBI R30,LOW(-_rx_buffer)
00008e 4ffe      	SBCI R31,HIGH(-_rx_buffer)
00008f 8110      	LD   R17,Z
                 ; 0000 006C #if RX_BUFFER_SIZE != 256
                 ; 0000 006D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000090 e0e8      	LDI  R30,LOW(8)
000091 15e4      	CP   R30,R4
000092 f409      	BRNE _0x9
000093 2444      	CLR  R4
                 ; 0000 006E #endif
                 ; 0000 006F #asm("cli")
                 _0x9:
000094 94f8      	cli
                 ; 0000 0070 --rx_counter;
000095 947a      	DEC  R7
                 ; 0000 0071 #asm("sei")
000096 9478      	sei
                 ; 0000 0072 return data;
000097 2fe1      	MOV  R30,R17
000098 9119      	LD   R17,Y+
000099 9508      	RET
                 ; 0000 0073 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 128
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0083 {
                 _usart_tx_isr:
00009a 93ea      	ST   -Y,R30
00009b 93fa      	ST   -Y,R31
00009c b7ef      	IN   R30,SREG
00009d 93ea      	ST   -Y,R30
                 ; 0000 0084 if (tx_counter)
00009e 2088      	TST  R8
00009f f061      	BREQ _0xA
                 ; 0000 0085    {
                 ; 0000 0086    --tx_counter;
0000a0 948a      	DEC  R8
                 ; 0000 0087    UDR=tx_buffer[tx_rd_index++];
0000a1 2de9      	MOV  R30,R9
0000a2 9493      	INC  R9
0000a3 e0f0      	LDI  R31,0
0000a4 59e8      	SUBI R30,LOW(-_tx_buffer)
0000a5 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000a6 81e0      	LD   R30,Z
0000a7 b9ec      	OUT  0xC,R30
                 ; 0000 0088 #if TX_BUFFER_SIZE != 256
                 ; 0000 0089    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000a8 e8e0      	LDI  R30,LOW(128)
0000a9 15e9      	CP   R30,R9
0000aa f409      	BRNE _0xB
0000ab 2499      	CLR  R9
                 ; 0000 008A #endif
                 ; 0000 008B    }
                 _0xB:
                 ; 0000 008C }
                 _0xA:
                 _0x47:
0000ac 91e9      	LD   R30,Y+
0000ad bfef      	OUT  SREG,R30
0000ae 91f9      	LD   R31,Y+
0000af 91e9      	LD   R30,Y+
0000b0 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0093 {
                 _putchar:
                 ; 0000 0094 while (tx_counter == TX_BUFFER_SIZE);
                 ;	c -> Y+0
                 _0xC:
0000b1 e8e0      	LDI  R30,LOW(128)
0000b2 15e8      	CP   R30,R8
0000b3 f3e9      	BREQ _0xC
                 ; 0000 0095 #asm("cli")
0000b4 94f8      	cli
                 ; 0000 0096 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000b5 2088      	TST  R8
0000b6 f411      	BRNE _0x10
0000b7 995d      	SBIC 0xB,5
0000b8 c00d      	RJMP _0xF
                 _0x10:
                 ; 0000 0097    {
                 ; 0000 0098    tx_buffer[tx_wr_index++]=c;
0000b9 2de6      	MOV  R30,R6
0000ba 9463      	INC  R6
0000bb e0f0      	LDI  R31,0
0000bc 59e8      	SUBI R30,LOW(-_tx_buffer)
0000bd 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000be 81a8      	LD   R26,Y
0000bf 83a0      	STD  Z+0,R26
                 ; 0000 0099 #if TX_BUFFER_SIZE != 256
                 ; 0000 009A    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
0000c0 e8e0      	LDI  R30,LOW(128)
0000c1 15e6      	CP   R30,R6
0000c2 f409      	BRNE _0x12
0000c3 2466      	CLR  R6
                 ; 0000 009B #endif
                 ; 0000 009C    ++tx_counter;
                 _0x12:
0000c4 9483      	INC  R8
                 ; 0000 009D    }
                 ; 0000 009E else
0000c5 c002      	RJMP _0x13
                 _0xF:
                 ; 0000 009F    UDR=c;
0000c6 81e8      	LD   R30,Y
0000c7 b9ec      	OUT  0xC,R30
                 ; 0000 00A0 #asm("sei")
                 _0x13:
0000c8 9478      	sei
                 ; 0000 00A1 }
0000c9 9621      	ADIW R28,1
0000ca 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define MIGMIG PORTB.5
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 00AB {
                 _timer2_ovf_isr:
0000cb 93aa      	ST   -Y,R26
0000cc 93ea      	ST   -Y,R30
0000cd b7ef      	IN   R30,SREG
0000ce 93ea      	ST   -Y,R30
                 ; 0000 00AC // Reinitialize Timer2 value
                 ; 0000 00AD TCNT2=0x06;
0000cf e0e6      	LDI  R30,LOW(6)
0000d0 bde4      	OUT  0x24,R30
                 ; 0000 00AE // Place your code here
                 ; 0000 00AF MIGMIG ^= 1;
0000d1 e0a0      	LDI  R26,0
0000d2 99c5      	SBIC 0x18,5
0000d3 e0a1      	LDI  R26,1
0000d4 e0e1      	LDI  R30,LOW(1)
0000d5 27ea      	EOR  R30,R26
0000d6 f411      	BRNE _0x14
0000d7 98c5      	CBI  0x18,5
0000d8 c001      	RJMP _0x15
                 _0x14:
0000d9 9ac5      	SBI  0x18,5
                 _0x15:
                 ; 0000 00B0 }
0000da 91e9      	LD   R30,Y+
0000db bfef      	OUT  SREG,R30
0000dc 91e9      	LD   R30,Y+
0000dd 91a9      	LD   R26,Y+
0000de 9518      	RETI
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00B5 {
                 _timer0_ovf_isr:
0000df 93ea      	ST   -Y,R30
                 ; 0000 00B6 // Reinitialize Timer 0 value
                 ; 0000 00B7 TCNT0=0x5F;
0000e0 e5ef      	LDI  R30,LOW(95)
0000e1 bfe2      	OUT  0x32,R30
                 ; 0000 00B8 TCCR0=0x00;
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 bfe3      	OUT  0x33,R30
                 ; 0000 00B9 }
0000e4 91e9      	LD   R30,Y+
0000e5 9518      	RETI
                 ;
                 ;#define FIRST_U_ADC_INPUT 5
                 ;#define FIRST_I_ADC_INPUT 1
                 ;#define ZU_ADC_INPUT 4
                 ;#define ZI_ADC_INPUT 0
                 ;#define FREQUENCY_ADC_INPUT 6
                 ;#define ADC_BUF_SIZE 40
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;signed char adc_data[8][ADC_BUF_SIZE];
                 ;unsigned long adc_current[8], adc_real[8];
                 ;unsigned char adc_count[8], s_val[8];
                 ;unsigned char adc_temp;
                 ;unsigned char adc_rd_input, adc_wr_input, adc_wr_index, adc_rd_index;
                 ;unsigned char isRising[8] = {0,0,0,0,0,0,0,0}, isUpdate[8] = {0,0,0,0,0,0,0,0};
                 ;unsigned int last_time = 0;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00CE {
                 _adc_isr:
0000e6 920a      	ST   -Y,R0
0000e7 921a      	ST   -Y,R1
0000e8 936a      	ST   -Y,R22
0000e9 937a      	ST   -Y,R23
0000ea 938a      	ST   -Y,R24
0000eb 939a      	ST   -Y,R25
0000ec 93aa      	ST   -Y,R26
0000ed 93ba      	ST   -Y,R27
0000ee 93ea      	ST   -Y,R30
0000ef 93fa      	ST   -Y,R31
0000f0 b7ef      	IN   R30,SREG
0000f1 93ea      	ST   -Y,R30
                 ; 0000 00CF // Read the AD conversion result
                 ; 0000 00D0     adc_temp = ADCW>>2;
0000f2 b1e4      	IN   R30,0x4
0000f3 b1f5      	IN   R31,0x4+1
0000f4 940e 02ec 	CALL __LSRW2
0000f6 2ebe      	MOV  R11,R30
                 ; 0000 00D1 // Select next ADC input
                 ; 0000 00D2     adc_rd_input = adc_wr_input + 1;
0000f7 2ded      	MOV  R30,R13
0000f8 5fef      	SUBI R30,-LOW(1)
0000f9 2eae      	MOV  R10,R30
                 ; 0000 00D3     if(adc_rd_input > 7) adc_rd_input = 0;
0000fa e0e7      	LDI  R30,LOW(7)
0000fb 15ea      	CP   R30,R10
0000fc f408      	BRSH _0x16
0000fd 24aa      	CLR  R10
                 ; 0000 00D4     ADMUX=(ADC_VREF_TYPE & 0xff) | adc_rd_input;
                 _0x16:
0000fe 2dea      	MOV  R30,R10
0000ff b9e7      	OUT  0x7,R30
                 ; 0000 00D5 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00D6     TCNT0=0x5F;
000100 e5ef      	LDI  R30,LOW(95)
000101 bfe2      	OUT  0x32,R30
                 ; 0000 00D7     TCCR0=0x01;
000102 e0e1      	LDI  R30,LOW(1)
000103 bfe3      	OUT  0x33,R30
                 ; 0000 00D8 
                 ; 0000 00D9 adc_data[adc_wr_input][adc_wr_index] = adc_temp ^ 0x80;
000104 2ded      	MOV  R30,R13
000105 e2a8      	LDI  R26,LOW(40)
000106 9fea      	MUL  R30,R26
000107 01f0      	MOVW R30,R0
000108 51e8      	SUBI R30,LOW(-_adc_data)
000109 4ffe      	SBCI R31,HIGH(-_adc_data)
00010a 01df      	MOVW R26,R30
00010b 27ee      	CLR  R30
00010c 0dac      	ADD  R26,R12
00010d 1fbe      	ADC  R27,R30
00010e e8e0      	LDI  R30,LOW(128)
00010f 25eb      	EOR  R30,R11
000110 93ec      	ST   X,R30
                 ; 0000 00DA 
                 ; 0000 00DB if(adc_temp & 0x80)
000111 feb7      	SBRS R11,7
000112 c037      	RJMP _0x17
                 ; 0000 00DC {
                 ; 0000 00DD   if(!isRising[adc_wr_input])
000113 940e 02a6 	CALL SUBOPT_0x0
000115 81e0      	LD   R30,Z
000116 30e0      	CPI  R30,0
000117 f589      	BRNE _0x18
                 ; 0000 00DE   {
                 ; 0000 00DF     //Нарастающий
                 ; 0000 00E0     if(adc_wr_input == FREQUENCY_ADC_INPUT)
000118 e0e6      	LDI  R30,LOW(6)
000119 15ed      	CP   R30,R13
00011a f449      	BRNE _0x19
                 ; 0000 00E1     {
                 ; 0000 00E2         last_time = TCNT1;
00011b b5ec      	IN   R30,0x2C
00011c b5fd      	IN   R31,0x2C+1
00011d 93e0 0389 	STS  _last_time,R30
00011f 93f0 038a 	STS  _last_time+1,R31
                 ; 0000 00E3         TCNT1H=0x00;
000121 e0e0      	LDI  R30,LOW(0)
000122 bded      	OUT  0x2D,R30
                 ; 0000 00E4         TCNT1L=0x00;
000123 bdec      	OUT  0x2C,R30
                 ; 0000 00E5     }
                 ; 0000 00E6     adc_real[adc_wr_input] =  adc_current[adc_wr_input];
                 _0x19:
000124 2ded      	MOV  R30,R13
000125 940e 02ab 	CALL SUBOPT_0x1
000127 0fea      	ADD  R30,R26
000128 1ffb      	ADC  R31,R27
000129 010f      	MOVW R0,R30
00012a 940e 02b1 	CALL SUBOPT_0x2
00012c 940e 0336 	CALL __GETD1P
00012e 01d0      	MOVW R26,R0
00012f 940e 033c 	CALL __PUTDP1
                 ; 0000 00E7     adc_current[adc_wr_input] = 0;
000131 940e 02b1 	CALL SUBOPT_0x2
                +
000133 e0e0     +LDI R30 , LOW ( 0x0 )
000134 e0f0     +LDI R31 , HIGH ( 0x0 )
000135 e060     +LDI R22 , BYTE3 ( 0x0 )
000136 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000137 940e 033c 	CALL __PUTDP1
                 ; 0000 00E8     isRising[adc_wr_input] = 1;
000139 940e 02a6 	CALL SUBOPT_0x0
00013b e0a1      	LDI  R26,LOW(1)
00013c 83a0      	STD  Z+0,R26
                 ; 0000 00E9     isUpdate[adc_wr_input] = adc_count[adc_wr_input];
00013d 2dad      	MOV  R26,R13
00013e e0b0      	LDI  R27,0
00013f 57af      	SUBI R26,LOW(-_isUpdate)
000140 4fbc      	SBCI R27,HIGH(-_isUpdate)
000141 940e 02ba 	CALL SUBOPT_0x3
000143 81e0      	LD   R30,Z
000144 93ec      	ST   X,R30
                 ; 0000 00EA     adc_count[adc_wr_input] = 0;
000145 940e 02ba 	CALL SUBOPT_0x3
000147 e0a0      	LDI  R26,LOW(0)
000148 83a0      	STD  Z+0,R26
                 ; 0000 00EB   }
                 ; 0000 00EC }
                 _0x18:
                 ; 0000 00ED else
000149 c010      	RJMP _0x1A
                 _0x17:
                 ; 0000 00EE {
                 ; 0000 00EF   if(adc_temp < 120) isRising[adc_wr_input] = 0;
00014a e7e8      	LDI  R30,LOW(120)
00014b 16be      	CP   R11,R30
00014c f420      	BRSH _0x1B
00014d 940e 02a6 	CALL SUBOPT_0x0
00014f e0a0      	LDI  R26,LOW(0)
000150 83a0      	STD  Z+0,R26
                 ; 0000 00F0   adc_temp = 127 - adc_temp;
                 _0x1B:
000151 2deb      	MOV  R30,R11
000152 e0f0      	LDI  R31,0
000153 e7af      	LDI  R26,LOW(127)
000154 e0b0      	LDI  R27,HIGH(127)
000155 940e 0341 	CALL __SWAPW12
000157 1bea      	SUB  R30,R26
000158 0bfb      	SBC  R31,R27
000159 2ebe      	MOV  R11,R30
                 ; 0000 00F1 }
                 _0x1A:
                 ; 0000 00F2 
                 ; 0000 00F3 adc_temp &= 0x7F;
00015a e7ef      	LDI  R30,LOW(127)
00015b 22be      	AND  R11,R30
                 ; 0000 00F4 adc_current[adc_wr_input] += adc_temp * adc_temp;
00015c 2ded      	MOV  R30,R13
00015d e2a8      	LDI  R26,LOW(_adc_current)
00015e e0b3      	LDI  R27,HIGH(_adc_current)
00015f e0f0      	LDI  R31,0
000160 940e 02e7 	CALL __LSLW2
000162 0fea      	ADD  R30,R26
000163 1ffb      	ADC  R31,R27
000164 93ff      	PUSH R31
000165 93ef      	PUSH R30
000166 01df      	MOVW R26,R30
000167 940e 0336 	CALL __GETD1P
000169 937f      	PUSH R23
00016a 936f      	PUSH R22
00016b 93ff      	PUSH R31
00016c 93ef      	PUSH R30
00016d 2dab      	MOV  R26,R11
00016e 27bb      	CLR  R27
00016f 2deb      	MOV  R30,R11
000170 e0f0      	LDI  R31,0
000171 940e 02fe 	CALL __MULW12
000173 91af      	POP  R26
000174 91bf      	POP  R27
000175 918f      	POP  R24
000176 919f      	POP  R25
000177 940e 02f1 	CALL __CWD1
000179 940e 02de 	CALL __ADDD12
00017b 91af      	POP  R26
00017c 91bf      	POP  R27
00017d 940e 033c 	CALL __PUTDP1
                 ; 0000 00F5 adc_count[adc_wr_input]++;
00017f 2dad      	MOV  R26,R13
000180 e0b0      	LDI  R27,0
000181 59a8      	SUBI R26,LOW(-_adc_count)
000182 4fbc      	SBCI R27,HIGH(-_adc_count)
000183 91ec      	LD   R30,X
000184 5fef      	SUBI R30,-LOW(1)
000185 93ec      	ST   X,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Select next ADC input
                 ; 0000 00F8 if (++adc_wr_input > 7)
000186 94d3      	INC  R13
000187 e0e7      	LDI  R30,LOW(7)
000188 15ed      	CP   R30,R13
000189 f430      	BRSH _0x1C
                 ; 0000 00F9 {
                 ; 0000 00FA     adc_wr_input = 0;
00018a 24dd      	CLR  R13
                 ; 0000 00FB     if(++adc_wr_index >= ADC_BUF_SIZE) adc_wr_index = 0;
00018b 94c3      	INC  R12
00018c e2e8      	LDI  R30,LOW(40)
00018d 16ce      	CP   R12,R30
00018e f008      	BRLO _0x1D
00018f 24cc      	CLR  R12
                 ; 0000 00FC }
                 _0x1D:
                 ; 0000 00FD }
                 _0x1C:
000190 91e9      	LD   R30,Y+
000191 bfef      	OUT  SREG,R30
000192 91f9      	LD   R31,Y+
000193 91e9      	LD   R30,Y+
000194 91b9      	LD   R27,Y+
000195 91a9      	LD   R26,Y+
000196 9199      	LD   R25,Y+
000197 9189      	LD   R24,Y+
000198 9179      	LD   R23,Y+
000199 9169      	LD   R22,Y+
00019a 9019      	LD   R1,Y+
00019b 9009      	LD   R0,Y+
00019c 9518      	RETI
                 ;
                 ;unsigned char isqrt( unsigned int from)
                 ; 0000 0100 {
                 _isqrt:
                 ; 0000 0101      unsigned int mask = 0x4000, sqr = 0, temp;
                 ; 0000 0102      do
00019d 940e 0348 	CALL __SAVELOCR6
                 ;	from -> Y+6
                 ;	mask -> R16,R17
                 ;	sqr -> R18,R19
                 ;	temp -> R20,R21
                +
00019f e000     +LDI R16 , LOW ( 16384 )
0001a0 e410     +LDI R17 , HIGH ( 16384 )
                 	__GETWRN 16,17,16384
                +
0001a1 e020     +LDI R18 , LOW ( 0 )
0001a2 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1F:
                 ; 0000 0103      {
                 ; 0000 0104          temp = sqr | mask;
0001a3 01f8      	MOVW R30,R16
0001a4 2be2      	OR   R30,R18
0001a5 2bf3      	OR   R31,R19
0001a6 01af      	MOVW R20,R30
                 ; 0000 0105          sqr >>= 1;
0001a7 9536      	LSR  R19
0001a8 9527      	ROR  R18
                 ; 0000 0106          if( temp <= from ) {
0001a9 81ee      	LDD  R30,Y+6
0001aa 81ff      	LDD  R31,Y+6+1
0001ab 17e4      	CP   R30,R20
0001ac 07f5      	CPC  R31,R21
0001ad f030      	BRLO _0x21
                 ; 0000 0107              sqr |= mask;
                +
0001ae 2b20     +OR R18 , R16
0001af 2b31     +OR R19 , R17
                 	__ORWRR 18,19,16,17
                 ; 0000 0108              from -= temp;
0001b0 1be4      	SUB  R30,R20
0001b1 0bf5      	SBC  R31,R21
0001b2 83ee      	STD  Y+6,R30
0001b3 83ff      	STD  Y+6+1,R31
                 ; 0000 0109          }
                 ; 0000 010A      } while( mask >>= 2 );
                 _0x21:
0001b4 01f8      	MOVW R30,R16
0001b5 940e 02ec 	CALL __LSRW2
0001b7 018f      	MOVW R16,R30
0001b8 9730      	SBIW R30,0
0001b9 f749      	BRNE _0x1F
                 ; 0000 010B      //округление
                 ; 0000 010C      if( sqr < from ) ++sqr;
0001ba 81ee      	LDD  R30,Y+6
0001bb 81ff      	LDD  R31,Y+6+1
0001bc 172e      	CP   R18,R30
0001bd 073f      	CPC  R19,R31
0001be f410      	BRSH _0x22
                +
0001bf 5f2f     +SUBI R18 , LOW ( - 1 )
0001c0 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 010D      return (unsigned char)sqr;
                 _0x22:
0001c1 2fe2      	MOV  R30,R18
0001c2 940e 034f 	CALL __LOADLOCR6
0001c4 9628      	ADIW R28,8
0001c5 9508      	RET
                 ; 0000 010E }
                 ;
                 ;inline void main_loop()
                 ; 0000 0111 {
                 _main_loop:
                 ; 0000 0112     char i, j;
                 ; 0000 0113     unsigned int s_tval;
                 ; 0000 0114     for(i=0; i<8; i++)
0001c6 940e 034a 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	j -> R16
                 ;	s_tval -> R18,R19
0001c8 e010      	LDI  R17,LOW(0)
                 _0x24:
0001c9 3018      	CPI  R17,8
0001ca f548      	BRSH _0x25
                 ; 0000 0115     {
                 ; 0000 0116         if(isUpdate[i])
0001cb 940e 02bf 	CALL SUBOPT_0x4
0001cd 30e0      	CPI  R30,0
0001ce f119      	BREQ _0x26
                 ; 0000 0117         {
                 ; 0000 0118             s_tval = adc_real[i]/isUpdate[i];
0001cf 2fe1      	MOV  R30,R17
0001d0 940e 02ab 	CALL SUBOPT_0x1
0001d2 0fae      	ADD  R26,R30
0001d3 1fbf      	ADC  R27,R31
0001d4 940e 0336 	CALL __GETD1P
0001d6 01df      	MOVW R26,R30
0001d7 01cb      	MOVW R24,R22
0001d8 940e 02bf 	CALL SUBOPT_0x4
0001da e0f0      	LDI  R31,0
0001db 940e 02f1 	CALL __CWD1
0001dd 940e 0303 	CALL __DIVD21U
0001df 019f      	MOVW R18,R30
                 ; 0000 0119             isUpdate[i] = 0;
0001e0 940e 02c5 	CALL SUBOPT_0x5
0001e2 57ef      	SUBI R30,LOW(-_isUpdate)
0001e3 4ffc      	SBCI R31,HIGH(-_isUpdate)
0001e4 e0a0      	LDI  R26,LOW(0)
0001e5 83a0      	STD  Z+0,R26
                 ; 0000 011A             s_val[i] = isqrt(s_tval);
0001e6 940e 02c5 	CALL SUBOPT_0x5
0001e8 59e0      	SUBI R30,LOW(-_s_val)
0001e9 4ffc      	SBCI R31,HIGH(-_s_val)
0001ea 93ff      	PUSH R31
0001eb 93ef      	PUSH R30
0001ec 933a      	ST   -Y,R19
0001ed 932a      	ST   -Y,R18
0001ee dfae      	RCALL _isqrt
0001ef 91af      	POP  R26
0001f0 91bf      	POP  R27
0001f1 93ec      	ST   X,R30
                 ; 0000 011B         }
                 ; 0000 011C     }
                 _0x26:
0001f2 5f1f      	SUBI R17,-1
0001f3 cfd5      	RJMP _0x24
                 _0x25:
                 ; 0000 011D 
                 ; 0000 011E     if(rx_counter)
0001f4 2077      	TST  R7
0001f5 f411      	BRNE PC+3
0001f6 940c 0255 	JMP _0x27
                 ; 0000 011F     {
                 ; 0000 0120         switch(getchar())
0001f8 de8e      	RCALL _getchar
                 ; 0000 0121         {
                 ; 0000 0122             case 'U':
0001f9 35e5      	CPI  R30,LOW(0x55)
0001fa f4a1      	BRNE _0x2B
                 ; 0000 0123                 j = FIRST_U_ADC_INPUT + 3;
0001fb e008      	LDI  R16,LOW(8)
                 ; 0000 0124                 while(adc_rd_index != adc_wr_index)
                 _0x2C:
0001fc 91a0 0378 	LDS  R26,_adc_rd_index
0001fe 16ca      	CP   R12,R26
0001ff f071      	BREQ _0x2E
                 ; 0000 0125                 {
                 ; 0000 0126                         for(i=FIRST_U_ADC_INPUT; i<j; i++)
000200 e015      	LDI  R17,LOW(5)
                 _0x30:
000201 1710      	CP   R17,R16
000202 f420      	BRSH _0x31
                 ; 0000 0127                         {
                 ; 0000 0128                             putchar(adc_data[i][adc_rd_index]);
000203 940e 02c8 	CALL SUBOPT_0x6
                 ; 0000 0129                         }
000205 5f1f      	SUBI R17,-1
000206 cffa      	RJMP _0x30
                 _0x31:
                 ; 0000 012A                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000207 940e 02d7 	CALL SUBOPT_0x7
000209 f018      	BRLO _0x32
00020a e0e0      	LDI  R30,LOW(0)
00020b 93e0 0378 	STS  _adc_rd_index,R30
                 ; 0000 012B                 }
                 _0x32:
00020d cfee      	RJMP _0x2C
                 _0x2E:
                 ; 0000 012C             break;
00020e c046      	RJMP _0x2A
                 ; 0000 012D             case 'I':
                 _0x2B:
00020f 34e9      	CPI  R30,LOW(0x49)
000210 f471      	BRNE _0x33
                 ; 0000 012E                 j = FIRST_I_ADC_INPUT + 3;
000211 e004      	LDI  R16,LOW(4)
                 ; 0000 012F                 while(adc_rd_index != adc_wr_index)
                 _0x34:
000212 91a0 0378 	LDS  R26,_adc_rd_index
000214 16ca      	CP   R12,R26
000215 f041      	BREQ _0x36
                 ; 0000 0130                 {
                 ; 0000 0131                         for(i=FIRST_I_ADC_INPUT; i<j; i++)
000216 e011      	LDI  R17,LOW(1)
                 _0x38:
000217 1710      	CP   R17,R16
000218 f420      	BRSH _0x39
                 ; 0000 0132                         {
                 ; 0000 0133                             putchar(adc_data[i][adc_rd_index]);
000219 940e 02c8 	CALL SUBOPT_0x6
                 ; 0000 0134                         }
00021b 5f1f      	SUBI R17,-1
00021c cffa      	RJMP _0x38
                 _0x39:
                 ; 0000 0135 
                 ; 0000 0136                 }
00021d cff4      	RJMP _0x34
                 _0x36:
                 ; 0000 0137             break;
00021e c036      	RJMP _0x2A
                 ; 0000 0138             case 'Z':
                 _0x33:
00021f 35ea      	CPI  R30,LOW(0x5A)
000220 f4f1      	BRNE _0x3A
                 ; 0000 0139                 while(adc_rd_index != adc_wr_index)
                 _0x3B:
000221 91a0 0378 	LDS  R26,_adc_rd_index
000223 16ca      	CP   R12,R26
000224 f0c9      	BREQ _0x3D
                 ; 0000 013A                 {
                 ; 0000 013B                     putchar(adc_data[ZU_ADC_INPUT][adc_rd_index]);
                +
000225 e8a8     +LDI R26 , LOW ( _adc_data + ( 160 ) )
000226 e0b2     +LDI R27 , HIGH ( _adc_data + ( 160 ) )
                 	__POINTW2MN _adc_data,160
000227 91e0 0378 	LDS  R30,_adc_rd_index
000229 e0f0      	LDI  R31,0
00022a 0fae      	ADD  R26,R30
00022b 1fbf      	ADC  R27,R31
00022c 91ec      	LD   R30,X
00022d 93ea      	ST   -Y,R30
00022e de82      	RCALL _putchar
                 ; 0000 013C                     putchar(adc_data[ZI_ADC_INPUT][adc_rd_index]);
00022f 91e0 0378 	LDS  R30,_adc_rd_index
000231 e0f0      	LDI  R31,0
000232 51e8      	SUBI R30,LOW(-_adc_data)
000233 4ffe      	SBCI R31,HIGH(-_adc_data)
000234 81e0      	LD   R30,Z
000235 93ea      	ST   -Y,R30
000236 de7a      	RCALL _putchar
                 ; 0000 013D                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000237 940e 02d7 	CALL SUBOPT_0x7
000239 f018      	BRLO _0x3E
00023a e0e0      	LDI  R30,LOW(0)
00023b 93e0 0378 	STS  _adc_rd_index,R30
                 ; 0000 013E                 }
                 _0x3E:
00023d cfe3      	RJMP _0x3B
                 _0x3D:
                 ; 0000 013F             break;
00023e c016      	RJMP _0x2A
                 ; 0000 0140             case 'S':
                 _0x3A:
00023f 35e3      	CPI  R30,LOW(0x53)
000240 f4a1      	BRNE _0x2A
                 ; 0000 0141                 // Период в тиках 250 КГц
                 ; 0000 0142                 putchar(last_time & 0xFF);
000241 91e0 0389 	LDS  R30,_last_time
000243 93ea      	ST   -Y,R30
000244 de6c      	RCALL _putchar
                 ; 0000 0143                 putchar(last_time >> 8);
000245 91e0 038a 	LDS  R30,_last_time+1
000247 93ea      	ST   -Y,R30
000248 de68      	RCALL _putchar
                 ; 0000 0144                 // Среднеквадратичные
                 ; 0000 0145                 for(i=0; i<8; i++)
000249 e010      	LDI  R17,LOW(0)
                 _0x41:
00024a 3018      	CPI  R17,8
00024b f448      	BRSH _0x42
                 ; 0000 0146                 {
                 ; 0000 0147                     putchar(s_val[i]);
00024c 940e 02c5 	CALL SUBOPT_0x5
00024e 59e0      	SUBI R30,LOW(-_s_val)
00024f 4ffc      	SBCI R31,HIGH(-_s_val)
000250 81e0      	LD   R30,Z
000251 93ea      	ST   -Y,R30
000252 de5e      	RCALL _putchar
                 ; 0000 0148                 }
000253 5f1f      	SUBI R17,-1
000254 cff5      	RJMP _0x41
                 _0x42:
                 ; 0000 0149             break;
                 ; 0000 014A         }
                 _0x2A:
                 ; 0000 014B     }
                 ; 0000 014C }
                 _0x27:
000255 940e 0351 	CALL __LOADLOCR4
000257 9624      	ADIW R28,4
000258 9508      	RET
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0152 {
                 _main:
                 ; 0000 0153 // Declare your local variables here
                 ; 0000 0154 
                 ; 0000 0155 // Input/Output Ports initialization
                 ; 0000 0156 // Port A initialization
                 ; 0000 0157 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0158 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0159 PORTA=0x00;
000259 e0e0      	LDI  R30,LOW(0)
00025a bbeb      	OUT  0x1B,R30
                 ; 0000 015A DDRA=0x00;
00025b bbea      	OUT  0x1A,R30
                 ; 0000 015B 
                 ; 0000 015C // Port B initialization
                 ; 0000 015D // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 015E // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 015F PORTB=0x00;
00025c bbe8      	OUT  0x18,R30
                 ; 0000 0160 DDRB=0x20;
00025d e2e0      	LDI  R30,LOW(32)
00025e bbe7      	OUT  0x17,R30
                 ; 0000 0161 
                 ; 0000 0162 // Port C initialization
                 ; 0000 0163 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0164 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0165 PORTC=0x00;
00025f e0e0      	LDI  R30,LOW(0)
000260 bbe5      	OUT  0x15,R30
                 ; 0000 0166 DDRC=0x00;
000261 bbe4      	OUT  0x14,R30
                 ; 0000 0167 
                 ; 0000 0168 // Port D initialization
                 ; 0000 0169 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 016A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 016B PORTD=0x00;
000262 bbe2      	OUT  0x12,R30
                 ; 0000 016C DDRD=0x00;
000263 bbe1      	OUT  0x11,R30
                 ; 0000 016D 
                 ; 0000 016E // Timer/Counter 0 initialization
                 ; 0000 016F // Clock source: System Clock
                 ; 0000 0170 // Clock value: 16000,000 kHz
                 ; 0000 0171 // Mode: Normal top=0xFF
                 ; 0000 0172 // OC0 output: Disconnected
                 ; 0000 0173 TCCR0=0x01;
000264 e0e1      	LDI  R30,LOW(1)
000265 bfe3      	OUT  0x33,R30
                 ; 0000 0174 TCNT0=0x5F;
000266 e5ef      	LDI  R30,LOW(95)
000267 bfe2      	OUT  0x32,R30
                 ; 0000 0175 OCR0=0x00;
000268 e0e0      	LDI  R30,LOW(0)
000269 bfec      	OUT  0x3C,R30
                 ; 0000 0176 
                 ; 0000 0177 // Timer/Counter 1 initialization
                 ; 0000 0178 // Clock source: System Clock
                 ; 0000 0179 // Clock value: 250,000 kHz
                 ; 0000 017A // Mode: Normal top=0xFFFF
                 ; 0000 017B // OC1A output: Discon.
                 ; 0000 017C // OC1B output: Discon.
                 ; 0000 017D // Noise Canceler: Off
                 ; 0000 017E // Input Capture on Falling Edge
                 ; 0000 017F // Timer1 Overflow Interrupt: Off
                 ; 0000 0180 // Input Capture Interrupt: Off
                 ; 0000 0181 // Compare A Match Interrupt: Off
                 ; 0000 0182 // Compare B Match Interrupt: Off
                 ; 0000 0183 TCCR1A=0x00;
00026a bdef      	OUT  0x2F,R30
                 ; 0000 0184 TCCR1B=0x03;
00026b e0e3      	LDI  R30,LOW(3)
00026c bdee      	OUT  0x2E,R30
                 ; 0000 0185 TCNT1H=0x00;
00026d e0e0      	LDI  R30,LOW(0)
00026e bded      	OUT  0x2D,R30
                 ; 0000 0186 TCNT1L=0x02;
00026f e0e2      	LDI  R30,LOW(2)
000270 bdec      	OUT  0x2C,R30
                 ; 0000 0187 ICR1H=0x00;
000271 e0e0      	LDI  R30,LOW(0)
000272 bde7      	OUT  0x27,R30
                 ; 0000 0188 ICR1L=0x00;
000273 bde6      	OUT  0x26,R30
                 ; 0000 0189 OCR1AH=0x00;
000274 bdeb      	OUT  0x2B,R30
                 ; 0000 018A OCR1AL=0x00;
000275 bdea      	OUT  0x2A,R30
                 ; 0000 018B OCR1BH=0x00;
000276 bde9      	OUT  0x29,R30
                 ; 0000 018C OCR1BL=0x00;
000277 bde8      	OUT  0x28,R30
                 ; 0000 018D 
                 ; 0000 018E // Timer/Counter 2 initialization
                 ; 0000 018F // Clock source: System Clock
                 ; 0000 0190 // Clock value: 250,000 kHz
                 ; 0000 0191 // Mode: Normal top=0xFF
                 ; 0000 0192 // OC2 output: Disconnected
                 ; 0000 0193 ASSR=0x00;
000278 bde2      	OUT  0x22,R30
                 ; 0000 0194 TCCR2=0x04;
000279 e0e4      	LDI  R30,LOW(4)
00027a bde5      	OUT  0x25,R30
                 ; 0000 0195 TCNT2=0x06;
00027b e0e6      	LDI  R30,LOW(6)
00027c bde4      	OUT  0x24,R30
                 ; 0000 0196 OCR2=0x00;
00027d e0e0      	LDI  R30,LOW(0)
00027e bde3      	OUT  0x23,R30
                 ; 0000 0197 
                 ; 0000 0198 // External Interrupt(s) initialization
                 ; 0000 0199 // INT0: Off
                 ; 0000 019A // INT1: Off
                 ; 0000 019B // INT2: Off
                 ; 0000 019C MCUCR=0x00;
00027f bfe5      	OUT  0x35,R30
                 ; 0000 019D MCUCSR=0x00;
000280 bfe4      	OUT  0x34,R30
                 ; 0000 019E 
                 ; 0000 019F // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01A0 TIMSK=0x41;
000281 e4e1      	LDI  R30,LOW(65)
000282 bfe9      	OUT  0x39,R30
                 ; 0000 01A1 
                 ; 0000 01A2 // USART initialization
                 ; 0000 01A3 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01A4 // USART Receiver: On
                 ; 0000 01A5 // USART Transmitter: On
                 ; 0000 01A6 // USART Mode: Asynchronous
                 ; 0000 01A7 // USART Baud Rate: 115200
                 ; 0000 01A8 UCSRA=0x00;
000283 e0e0      	LDI  R30,LOW(0)
000284 b9eb      	OUT  0xB,R30
                 ; 0000 01A9 UCSRB=0xD8;
000285 ede8      	LDI  R30,LOW(216)
000286 b9ea      	OUT  0xA,R30
                 ; 0000 01AA UCSRC=0x86;
000287 e8e6      	LDI  R30,LOW(134)
000288 bde0      	OUT  0x20,R30
                 ; 0000 01AB UBRRH=0x00;
000289 e0e0      	LDI  R30,LOW(0)
00028a bde0      	OUT  0x20,R30
                 ; 0000 01AC UBRRL=0x08;
00028b e0e8      	LDI  R30,LOW(8)
00028c b9e9      	OUT  0x9,R30
                 ; 0000 01AD 
                 ; 0000 01AE // Analog Comparator initialization
                 ; 0000 01AF // Analog Comparator: Off
                 ; 0000 01B0 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01B1 ACSR=0x80;
00028d e8e0      	LDI  R30,LOW(128)
00028e b9e8      	OUT  0x8,R30
                 ; 0000 01B2 SFIOR=0x00;
00028f e0e0      	LDI  R30,LOW(0)
000290 bfe0      	OUT  0x30,R30
                 ; 0000 01B3 
                 ; 0000 01B4 // ADC initialization
                 ; 0000 01B5 // ADC Clock frequency: 250,000 kHz
                 ; 0000 01B6 // ADC Voltage Reference: AREF pin
                 ; 0000 01B7 // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 01B8 ADMUX=(ADC_VREF_TYPE & 0xff);
000291 b9e7      	OUT  0x7,R30
                 ; 0000 01B9 ADCSRA=0xAE;
000292 eaee      	LDI  R30,LOW(174)
000293 b9e6      	OUT  0x6,R30
                 ; 0000 01BA SFIOR&=0x1F;
000294 b7e0      	IN   R30,0x30
000295 71ef      	ANDI R30,LOW(0x1F)
000296 bfe0      	OUT  0x30,R30
                 ; 0000 01BB SFIOR|=0x80;
000297 b7e0      	IN   R30,0x30
000298 68e0      	ORI  R30,0x80
000299 bfe0      	OUT  0x30,R30
                 ; 0000 01BC 
                 ; 0000 01BD // SPI initialization
                 ; 0000 01BE // SPI disabled
                 ; 0000 01BF SPCR=0x00;
00029a e0e0      	LDI  R30,LOW(0)
00029b b9ed      	OUT  0xD,R30
                 ; 0000 01C0 
                 ; 0000 01C1 // TWI initialization
                 ; 0000 01C2 // TWI disabled
                 ; 0000 01C3 TWCR=0x00;
00029c bfe6      	OUT  0x36,R30
                 ; 0000 01C4 
                 ; 0000 01C5 // Watchdog Timer initialization
                 ; 0000 01C6 // Watchdog Timer Prescaler: OSC/256k
                 ; 0000 01C7 #pragma optsize-
                 ; 0000 01C8 WDTCR=0x1C;
00029d e1ec      	LDI  R30,LOW(28)
00029e bde1      	OUT  0x21,R30
                 ; 0000 01C9 WDTCR=0x0C;
00029f e0ec      	LDI  R30,LOW(12)
0002a0 bde1      	OUT  0x21,R30
                 ; 0000 01CA #ifdef _OPTIMIZE_SIZE_
                 ; 0000 01CB #pragma optsize+
                 ; 0000 01CC #endif
                 ; 0000 01CD 
                 ; 0000 01CE // Global enable interrupts
                 ; 0000 01CF #asm("sei")
0002a1 9478      	sei
                 ; 0000 01D0 
                 ; 0000 01D1 while (1)
                 _0x43:
                 ; 0000 01D2       {
                 ; 0000 01D3       #asm("wdr")
0002a2 95a8      	wdr
                 ; 0000 01D4       main_loop();
0002a3 df22      	RCALL _main_loop
                 ; 0000 01D5       }
0002a4 cffd      	RJMP _0x43
                 ; 0000 01D6 }
                 _0x46:
0002a5 cfff      	RJMP _0x46
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _tx_buffer:
000168           	.BYTE 0x80
                 _adc_data:
0001e8           	.BYTE 0x140
                 _adc_current:
000328           	.BYTE 0x20
                 _adc_real:
000348           	.BYTE 0x20
                 _adc_count:
000368           	.BYTE 0x8
                 _s_val:
000370           	.BYTE 0x8
                 _adc_rd_index:
000378           	.BYTE 0x1
                 _isRising:
000379           	.BYTE 0x8
                 _isUpdate:
000381           	.BYTE 0x8
                 _last_time:
000389           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0002a6 2ded      	MOV  R30,R13
0002a7 e0f0      	LDI  R31,0
0002a8 58e7      	SUBI R30,LOW(-_isRising)
0002a9 4ffc      	SBCI R31,HIGH(-_isRising)
0002aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0002ab e4a8      	LDI  R26,LOW(_adc_real)
0002ac e0b3      	LDI  R27,HIGH(_adc_real)
0002ad e0f0      	LDI  R31,0
0002ae 940e 02e7 	CALL __LSLW2
0002b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0002b1 2ded      	MOV  R30,R13
0002b2 e2a8      	LDI  R26,LOW(_adc_current)
0002b3 e0b3      	LDI  R27,HIGH(_adc_current)
0002b4 e0f0      	LDI  R31,0
0002b5 940e 02e7 	CALL __LSLW2
0002b7 0fae      	ADD  R26,R30
0002b8 1fbf      	ADC  R27,R31
0002b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002ba 2ded      	MOV  R30,R13
0002bb e0f0      	LDI  R31,0
0002bc 59e8      	SUBI R30,LOW(-_adc_count)
0002bd 4ffc      	SBCI R31,HIGH(-_adc_count)
0002be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0002bf 2fe1      	MOV  R30,R17
0002c0 e0f0      	LDI  R31,0
0002c1 57ef      	SUBI R30,LOW(-_isUpdate)
0002c2 4ffc      	SBCI R31,HIGH(-_isUpdate)
0002c3 81e0      	LD   R30,Z
0002c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002c5 2fe1      	MOV  R30,R17
0002c6 e0f0      	LDI  R31,0
0002c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x6:
0002c8 e2a8      	LDI  R26,LOW(40)
0002c9 9f1a      	MUL  R17,R26
0002ca 01f0      	MOVW R30,R0
0002cb 51e8      	SUBI R30,LOW(-_adc_data)
0002cc 4ffe      	SBCI R31,HIGH(-_adc_data)
0002cd 01df      	MOVW R26,R30
0002ce 91e0 0378 	LDS  R30,_adc_rd_index
0002d0 e0f0      	LDI  R31,0
0002d1 0fae      	ADD  R26,R30
0002d2 1fbf      	ADC  R27,R31
0002d3 91ec      	LD   R30,X
0002d4 93ea      	ST   -Y,R30
0002d5 940c 00b1 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002d7 91a0 0378 	LDS  R26,_adc_rd_index
0002d9 5faf      	SUBI R26,-LOW(1)
0002da 93a0 0378 	STS  _adc_rd_index,R26
0002dc 32a8      	CPI  R26,LOW(0x28)
0002dd 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
0002de 0fea      	ADD  R30,R26
0002df 1ffb      	ADC  R31,R27
0002e0 1f68      	ADC  R22,R24
0002e1 1f79      	ADC  R23,R25
0002e2 9508      	RET
                 
                 __ANEGW1:
0002e3 95f1      	NEG  R31
0002e4 95e1      	NEG  R30
0002e5 40f0      	SBCI R31,0
0002e6 9508      	RET
                 
                 __LSLW2:
0002e7 0fee      	LSL  R30
0002e8 1fff      	ROL  R31
0002e9 0fee      	LSL  R30
0002ea 1fff      	ROL  R31
0002eb 9508      	RET
                 
                 __LSRW2:
0002ec 95f6      	LSR  R31
0002ed 95e7      	ROR  R30
0002ee 95f6      	LSR  R31
0002ef 95e7      	ROR  R30
0002f0 9508      	RET
                 
                 __CWD1:
0002f1 2f6f      	MOV  R22,R31
0002f2 0f66      	ADD  R22,R22
0002f3 0b66      	SBC  R22,R22
0002f4 2f76      	MOV  R23,R22
0002f5 9508      	RET
                 
                 __MULW12U:
0002f6 9ffa      	MUL  R31,R26
0002f7 2df0      	MOV  R31,R0
0002f8 9feb      	MUL  R30,R27
0002f9 0df0      	ADD  R31,R0
0002fa 9fea      	MUL  R30,R26
0002fb 2de0      	MOV  R30,R0
0002fc 0df1      	ADD  R31,R1
0002fd 9508      	RET
                 
                 __MULW12:
0002fe d029      	RCALL __CHKSIGNW
0002ff dff6      	RCALL __MULW12U
000300 f40e      	BRTC __MULW121
000301 dfe1      	RCALL __ANEGW1
                 __MULW121:
000302 9508      	RET
                 
                 __DIVD21U:
000303 933f      	PUSH R19
000304 934f      	PUSH R20
000305 935f      	PUSH R21
000306 2400      	CLR  R0
000307 2411      	CLR  R1
000308 2744      	CLR  R20
000309 2755      	CLR  R21
00030a e230      	LDI  R19,32
                 __DIVD21U1:
00030b 0faa      	LSL  R26
00030c 1fbb      	ROL  R27
00030d 1f88      	ROL  R24
00030e 1f99      	ROL  R25
00030f 1c00      	ROL  R0
000310 1c11      	ROL  R1
000311 1f44      	ROL  R20
000312 1f55      	ROL  R21
000313 1a0e      	SUB  R0,R30
000314 0a1f      	SBC  R1,R31
000315 0b46      	SBC  R20,R22
000316 0b57      	SBC  R21,R23
000317 f428      	BRCC __DIVD21U2
000318 0e0e      	ADD  R0,R30
000319 1e1f      	ADC  R1,R31
00031a 1f46      	ADC  R20,R22
00031b 1f57      	ADC  R21,R23
00031c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00031d 60a1      	SBR  R26,1
                 __DIVD21U3:
00031e 953a      	DEC  R19
00031f f759      	BRNE __DIVD21U1
000320 01fd      	MOVW R30,R26
000321 01bc      	MOVW R22,R24
000322 01d0      	MOVW R26,R0
000323 01ca      	MOVW R24,R20
000324 915f      	POP  R21
000325 914f      	POP  R20
000326 913f      	POP  R19
000327 9508      	RET
                 
                 __CHKSIGNW:
000328 94e8      	CLT
000329 fff7      	SBRS R31,7
00032a c002      	RJMP __CHKSW1
00032b dfb7      	RCALL __ANEGW1
00032c 9468      	SET
                 __CHKSW1:
00032d ffb7      	SBRS R27,7
00032e c006      	RJMP __CHKSW2
00032f 95a0      	COM  R26
000330 95b0      	COM  R27
000331 9611      	ADIW R26,1
000332 f800      	BLD  R0,0
000333 9403      	INC  R0
000334 fa00      	BST  R0,0
                 __CHKSW2:
000335 9508      	RET
                 
                 __GETD1P:
000336 91ed      	LD   R30,X+
000337 91fd      	LD   R31,X+
000338 916d      	LD   R22,X+
000339 917c      	LD   R23,X
00033a 9713      	SBIW R26,3
00033b 9508      	RET
                 
                 __PUTDP1:
00033c 93ed      	ST   X+,R30
00033d 93fd      	ST   X+,R31
00033e 936d      	ST   X+,R22
00033f 937c      	ST   X,R23
000340 9508      	RET
                 
                 __SWAPW12:
000341 2e1b      	MOV  R1,R27
000342 2fbf      	MOV  R27,R31
000343 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000344 2e1a      	MOV  R1,R26
000345 2fae      	MOV  R26,R30
000346 2de1      	MOV  R30,R1
000347 9508      	RET
                 
                 __SAVELOCR6:
000348 935a      	ST   -Y,R21
                 __SAVELOCR5:
000349 934a      	ST   -Y,R20
                 __SAVELOCR4:
00034a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00034b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00034c 931a      	ST   -Y,R17
00034d 930a      	ST   -Y,R16
00034e 9508      	RET
                 
                 __LOADLOCR6:
00034f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000350 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000351 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000352 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000353 8119      	LDD  R17,Y+1
000354 8108      	LD   R16,Y
000355 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  21 r1 :  12 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   6 
r8 :   5 r9 :   4 r10:   4 r11:   9 r12:   7 r13:  13 r14:   0 r15:   0 
r16:  15 r17:  28 r18:  11 r19:  13 r20:  12 r21:  10 r22:  19 r23:  10 
r24:  15 r25:   7 r26:  72 r27:  32 r28:   4 r29:   1 r30: 281 r31:  80 
x  :  18 y  :  73 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  12 
adiw  :   4 and   :   1 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   8 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  39 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  16 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  18 cpc   :   2 cpi   :   9 cpse  :   0 dec   :   4 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   9 jmp   :  24 ld    :  38 ldd   :   9 ldi   : 112 
lds   :   9 lpm   :   7 lsl   :   3 lsr   :   3 mov   :  36 movw  :  21 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   1 out   :  64 pop   :  11 push  :  11 rcall :  12 ret   :  25 
reti  :   4 rjmp  :  22 rol   :   9 ror   :   3 sbc   :   6 sbci  :  17 
sbi   :   1 sbic  :   2 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  50 std   :   7 sts   :   5 sub   :   3 subi  :  23 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ac   1680     28   1708   16384  10.4%
[.dseg] 0x000060 0x00038b      0    555    555    1119  49.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
