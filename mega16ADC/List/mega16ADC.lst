
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm Thu Jul 30 16:21:41 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1059): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1060): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1061): warning: Register r7 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1063): warning: Register r9 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1064): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1065): warning: Register r11 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1066): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1067): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _adc_temp=R6
                 	.DEF _adc_rd_input=R9
                 	.DEF _adc_wr_input=R8
                 	.DEF _adc_wr_index=R11
                 	.DEF _adc_rd_index=R10
                 	.DEF _isFregUpd=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00a5 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 009f 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0063 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 00ec 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 _0x4B:
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1103): warning: .cseg .db misalignment - padding zero byte
00002b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00002c 0001      	.DW  0x01
00002d 0002      	.DW  0x02
00002e 0054      	.DW  __REG_BIT_VARS*2
                 
00002f 0001      	.DW  0x01
000030 000d      	.DW  0x0D
000031 0056      	.DW  _0x4B*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003a e1f8      	LDI  R31,0x18
00003b bdf1      	OUT  WDTCR,R31
00003c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003d e08d      	LDI  R24,(14-2)+1
00003e e0a2      	LDI  R26,2
00003f 27bb      	CLR  R27
                 __CLEAR_REG:
000040 93ed      	ST   X+,R30
000041 958a      	DEC  R24
000042 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000043 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000044 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000045 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000046 93ed      	ST   X+,R30
000047 9701      	SBIW R24,1
000048 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000049 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004b 9185      	LPM  R24,Z+
00004c 9195      	LPM  R25,Z+
00004d 9700      	SBIW R24,0
00004e f061      	BREQ __GLOBAL_INI_END
00004f 91a5      	LPM  R26,Z+
000050 91b5      	LPM  R27,Z+
000051 9005      	LPM  R0,Z+
000052 9015      	LPM  R1,Z+
000053 01bf      	MOVW R22,R30
000054 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000055 9005      	LPM  R0,Z+
000056 920d      	ST   X+,R0
000057 9701      	SBIW R24,1
000058 f7e1      	BRNE __GLOBAL_INI_LOOP
000059 01fb      	MOVW R30,R22
00005a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005c bfed      	OUT  SPL,R30
00005d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000060 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000061 940c 029b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 28.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 4
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004D {
                 
                 	.CSEG
                 _usart_rx_isr:
000063 93ea      	ST   -Y,R30
000064 93fa      	ST   -Y,R31
000065 b7ef      	IN   R30,SREG
000066 93ea      	ST   -Y,R30
                 ; 0000 004E char status,data;
                 ; 0000 004F status=UCSRA;
000067 931a      	ST   -Y,R17
000068 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000069 b11b      	IN   R17,11
                 ; 0000 0050 data=UDR;
00006a b10c      	IN   R16,12
                 ; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00006b 2fe1      	MOV  R30,R17
00006c 71ec      	ANDI R30,LOW(0x1C)
00006d f489      	BRNE _0x3
                 ; 0000 0052    {
                 ; 0000 0053    rx_buffer[rx_wr_index++]=data;
00006e 2de5      	MOV  R30,R5
00006f 9453      	INC  R5
000070 e0f0      	LDI  R31,0
000071 5ae0      	SUBI R30,LOW(-_rx_buffer)
000072 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000073 8300      	ST   Z,R16
                 ; 0000 0054 #if RX_BUFFER_SIZE == 256
                 ; 0000 0055    // special case for receiver buffer size=256
                 ; 0000 0056    if (++rx_counter == 0)
                 ; 0000 0057       {
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000074 e0e4      	LDI  R30,LOW(4)
000075 15e5      	CP   R30,R5
000076 f409      	BRNE _0x4
000077 2455      	CLR  R5
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000078 9473      	INC  R7
000079 e0e4      	LDI  R30,LOW(4)
00007a 15e7      	CP   R30,R7
00007b f419      	BRNE _0x5
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
00007c 2477      	CLR  R7
                 ; 0000 005D #endif
                 ; 0000 005E       rx_buffer_overflow=1;
00007d 9468      	SET
00007e f820      	BLD  R2,0
                 ; 0000 005F       }
                 ; 0000 0060    }
                 _0x5:
                 ; 0000 0061 }
                 _0x3:
00007f 9109      	LD   R16,Y+
000080 9119      	LD   R17,Y+
000081 91e9      	LD   R30,Y+
000082 bfef      	OUT  SREG,R30
000083 91f9      	LD   R31,Y+
000084 91e9      	LD   R30,Y+
000085 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0068 {
                 _getchar:
                 ; 0000 0069 char data;
                 ; 0000 006A while (rx_counter==0);
000086 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000087 2077      	TST  R7
000088 f3f1      	BREQ _0x6
                 ; 0000 006B data=rx_buffer[rx_rd_index++];
000089 2de4      	MOV  R30,R4
00008a 9443      	INC  R4
00008b e0f0      	LDI  R31,0
00008c 5ae0      	SUBI R30,LOW(-_rx_buffer)
00008d 4ffe      	SBCI R31,HIGH(-_rx_buffer)
00008e 8110      	LD   R17,Z
                 ; 0000 006C #if RX_BUFFER_SIZE != 256
                 ; 0000 006D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
00008f e0e4      	LDI  R30,LOW(4)
000090 15e4      	CP   R30,R4
000091 f409      	BRNE _0x9
000092 2444      	CLR  R4
                 ; 0000 006E #endif
                 ; 0000 006F #asm("cli")
                 _0x9:
000093 94f8      	cli
                 ; 0000 0070 --rx_counter;
000094 947a      	DEC  R7
                 ; 0000 0071 #asm("sei")
000095 9478      	sei
                 ; 0000 0072 return data;
000096 2fe1      	MOV  R30,R17
000097 9119      	LD   R17,Y+
000098 9508      	RET
                 ; 0000 0073 }
                 ;#pragma used-
                 ;#endif
                 ;/*
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 128
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ;{
                 ;if (tx_counter)
                 ;   {
                 ;   --tx_counter;
                 ;   UDR=tx_buffer[tx_rd_index++];
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
                 ;#endif
                 ;   }
                 ;}
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while (tx_counter == TX_BUFFER_SIZE);
                 ;#asm("cli")
                 ;if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
                 ;   {
                 ;   tx_buffer[tx_wr_index++]=c;
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ;#endif
                 ;   ++tx_counter;
                 ;   }
                 ;else
                 ;   UDR=c;
                 ;#asm("sei")
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;*/
                 ;// Standard Input/Output functions
                 ;//#include <stdio.h>
                 ;
                 ;#define _ALTERNATE_PUTCHAR_
                 ;void putchar(char c)
                 ; 0000 00AA {
                 _putchar:
                 ; 0000 00AB     // Wait for empty transmit buffer
                 ; 0000 00AC     while ( !(UCSRA & DATA_REGISTER_EMPTY) );
                 ;	c -> Y+0
                 _0xA:
000099 9b5d      	SBIS 0xB,5
00009a cffe      	RJMP _0xA
                 ; 0000 00AD     // Start transmission
                 ; 0000 00AE     UDR = c;
00009b 81e8      	LD   R30,Y
00009c b9ec      	OUT  0xC,R30
                 ; 0000 00AF }
00009d 9621      	ADIW R28,1
00009e 9508      	RET
                 ;
                 ;#define MIGMIG PORTB.5
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00B6 {
                 _timer0_ovf_isr:
00009f 93ea      	ST   -Y,R30
                 ; 0000 00B7 // Reinitialize Timer 0 value
                 ; 0000 00B8 TCCR0=0x00;
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bfe3      	OUT  0x33,R30
                 ; 0000 00B9 TCNT0=0x00;
0000a2 bfe2      	OUT  0x32,R30
                 ; 0000 00BA }
0000a3 91e9      	LD   R30,Y+
0000a4 9518      	RETI
                 ;
                 ;#define FIRST_U_ADC_INPUT 5
                 ;#define FIRST_I_ADC_INPUT 1
                 ;#define ZU_ADC_INPUT 4
                 ;#define ZI_ADC_INPUT 0
                 ;#define FREQUENCY_ADC_INPUT 6
                 ;#define ADC_BUF_SIZE 62 //На 64 глючит
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;unsigned char adc_data[8][ADC_BUF_SIZE];
                 ;unsigned long adc_current[8], adc_real[8];
                 ;unsigned char adc_count[8], s_val[8];
                 ;unsigned char adc_temp;
                 ;unsigned char adc_rd_input, adc_wr_input, adc_wr_index, adc_rd_index;
                 ;unsigned char isRising[8] = {0,0,0,0,0,0,0,0}, isUpdate[8] = {0,0,0,0,0,0,0,0}, isFregUpd = 0;
                 ;unsigned char valClear[9] = {0,0,0,0,0,0,0,0,0};
                 ;unsigned int last_time = 0;
                 ;unsigned int freg = 0;
                 ;
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 00D1 {
                 _timer2_ovf_isr:
0000a5 93aa      	ST   -Y,R26
0000a6 93ea      	ST   -Y,R30
0000a7 b7ef      	IN   R30,SREG
0000a8 93ea      	ST   -Y,R30
                 ; 0000 00D2 // Reinitialize Timer2 value
                 ; 0000 00D3 TCNT2=0x06;
0000a9 e0e6      	LDI  R30,LOW(6)
0000aa bde4      	OUT  0x24,R30
                 ; 0000 00D4 // Очищаем значения, если ничего не происходит больше 250 мс
                 ; 0000 00D5 {
                 ; 0000 00D6 valClear[0]++;
0000ab 91e0 03b4 	LDS  R30,_valClear
0000ad 5fef      	SUBI R30,-LOW(1)
0000ae 93e0 03b4 	STS  _valClear,R30
                 ; 0000 00D7 valClear[1]++;
                +
0000b0 91e0 03b5+LDS R30 , _valClear + ( 1 )
                 	__GETB1MN _valClear,1
0000b2 5fef      	SUBI R30,-LOW(1)
                +
0000b3 93e0 03b5+STS _valClear + ( 1 ) , R30
                 	__PUTB1MN _valClear,1
                 ; 0000 00D8 valClear[2]++;
                +
0000b5 91e0 03b6+LDS R30 , _valClear + ( 2 )
                 	__GETB1MN _valClear,2
0000b7 5fef      	SUBI R30,-LOW(1)
                +
0000b8 93e0 03b6+STS _valClear + ( 2 ) , R30
                 	__PUTB1MN _valClear,2
                 ; 0000 00D9 valClear[3]++;
                +
0000ba 91e0 03b7+LDS R30 , _valClear + ( 3 )
                 	__GETB1MN _valClear,3
0000bc 5fef      	SUBI R30,-LOW(1)
                +
0000bd 93e0 03b7+STS _valClear + ( 3 ) , R30
                 	__PUTB1MN _valClear,3
                 ; 0000 00DA valClear[4]++;
                +
0000bf 91e0 03b8+LDS R30 , _valClear + ( 4 )
                 	__GETB1MN _valClear,4
0000c1 5fef      	SUBI R30,-LOW(1)
                +
0000c2 93e0 03b8+STS _valClear + ( 4 ) , R30
                 	__PUTB1MN _valClear,4
                 ; 0000 00DB valClear[5]++;
                +
0000c4 91e0 03b9+LDS R30 , _valClear + ( 5 )
                 	__GETB1MN _valClear,5
0000c6 5fef      	SUBI R30,-LOW(1)
                +
0000c7 93e0 03b9+STS _valClear + ( 5 ) , R30
                 	__PUTB1MN _valClear,5
                 ; 0000 00DC valClear[6]++;
                +
0000c9 91e0 03ba+LDS R30 , _valClear + ( 6 )
                 	__GETB1MN _valClear,6
0000cb 5fef      	SUBI R30,-LOW(1)
                +
0000cc 93e0 03ba+STS _valClear + ( 6 ) , R30
                 	__PUTB1MN _valClear,6
                 ; 0000 00DD valClear[7]++;
                +
0000ce 91e0 03bb+LDS R30 , _valClear + ( 7 )
                 	__GETB1MN _valClear,7
0000d0 5fef      	SUBI R30,-LOW(1)
                +
0000d1 93e0 03bb+STS _valClear + ( 7 ) , R30
                 	__PUTB1MN _valClear,7
                 ; 0000 00DE valClear[8]++;
                +
0000d3 91e0 03bc+LDS R30 , _valClear + ( 8 )
                 	__GETB1MN _valClear,8
0000d5 5fef      	SUBI R30,-LOW(1)
                +
0000d6 93e0 03bc+STS _valClear + ( 8 ) , R30
                 	__PUTB1MN _valClear,8
                 ; 0000 00DF }
                 ; 0000 00E0 
                 ; 0000 00E1 if(adc_rd_input == 0)
0000d8 2099      	TST  R9
0000d9 f469      	BRNE _0xD
                 ; 0000 00E2 {
                 ; 0000 00E3      TCNT0=0xEC; //10us
0000da eeec      	LDI  R30,LOW(236)
0000db bfe2      	OUT  0x32,R30
                 ; 0000 00E4      TCCR0=0x02;
0000dc e0e2      	LDI  R30,LOW(2)
0000dd bfe3      	OUT  0x33,R30
                 ; 0000 00E5      MIGMIG ^= 1;
0000de e0a0      	LDI  R26,0
0000df 99c5      	SBIC 0x18,5
0000e0 e0a1      	LDI  R26,1
0000e1 e0e1      	LDI  R30,LOW(1)
0000e2 27ea      	EOR  R30,R26
0000e3 f411      	BRNE _0xE
0000e4 98c5      	CBI  0x18,5
0000e5 c001      	RJMP _0xF
                 _0xE:
0000e6 9ac5      	SBI  0x18,5
                 _0xF:
                 ; 0000 00E6 }
                 ; 0000 00E7 }
                 _0xD:
0000e7 91e9      	LD   R30,Y+
0000e8 bfef      	OUT  SREG,R30
0000e9 91e9      	LD   R30,Y+
0000ea 91a9      	LD   R26,Y+
0000eb 9518      	RETI
                 ;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00ED {
                 _adc_isr:
0000ec 920a      	ST   -Y,R0
0000ed 921a      	ST   -Y,R1
0000ee 936a      	ST   -Y,R22
0000ef 937a      	ST   -Y,R23
0000f0 938a      	ST   -Y,R24
0000f1 939a      	ST   -Y,R25
0000f2 93aa      	ST   -Y,R26
0000f3 93ba      	ST   -Y,R27
0000f4 93ea      	ST   -Y,R30
0000f5 93fa      	ST   -Y,R31
0000f6 b7ef      	IN   R30,SREG
0000f7 93ea      	ST   -Y,R30
                 ; 0000 00EE // Read the AD conversion result
                 ; 0000 00EF     adc_temp = ADCW>>2;
0000f8 b1e4      	IN   R30,0x4
0000f9 b1f5      	IN   R31,0x4+1
0000fa 940e 0329 	CALL __LSRW2
0000fc 2e6e      	MOV  R6,R30
                 ; 0000 00F0 // Select next ADC input
                 ; 0000 00F1     adc_rd_input = adc_wr_input + 1;
0000fd 2de8      	MOV  R30,R8
0000fe 5fef      	SUBI R30,-LOW(1)
0000ff 2e9e      	MOV  R9,R30
                 ; 0000 00F2     if(adc_rd_input > 7) adc_rd_input = 0;
000100 e0e7      	LDI  R30,LOW(7)
000101 15e9      	CP   R30,R9
000102 f408      	BRSH _0x10
000103 2499      	CLR  R9
                 ; 0000 00F3     ADMUX=(ADC_VREF_TYPE & 0xff) | adc_rd_input;
                 _0x10:
000104 2de9      	MOV  R30,R9
000105 b9e7      	OUT  0x7,R30
                 ; 0000 00F4 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00F5     if(adc_rd_input)
000106 2099      	TST  R9
000107 f021      	BREQ _0x11
                 ; 0000 00F6     {
                 ; 0000 00F7       TCNT0=0xEC;  //10us
000108 eeec      	LDI  R30,LOW(236)
000109 bfe2      	OUT  0x32,R30
                 ; 0000 00F8       TCCR0=0x02;
00010a e0e2      	LDI  R30,LOW(2)
00010b bfe3      	OUT  0x33,R30
                 ; 0000 00F9     }
                 ; 0000 00FA 
                 ; 0000 00FB adc_data[adc_wr_input][adc_wr_index] = adc_temp;
                 _0x11:
00010c 2de8      	MOV  R30,R8
00010d e3ae      	LDI  R26,LOW(62)
00010e 9fea      	MUL  R30,R26
00010f 01f0      	MOVW R30,R0
000110 59ec      	SUBI R30,LOW(-_adc_data)
000111 4ffe      	SBCI R31,HIGH(-_adc_data)
000112 01df      	MOVW R26,R30
000113 2deb      	MOV  R30,R11
000114 e0f0      	LDI  R31,0
000115 0fea      	ADD  R30,R26
000116 1ffb      	ADC  R31,R27
000117 8260      	ST   Z,R6
                 ; 0000 00FC 
                 ; 0000 00FD if(adc_temp & 0x80)
000118 fe67      	SBRS R6,7
000119 c032      	RJMP _0x12
                 ; 0000 00FE {
                 ; 0000 00FF   if(!isRising[adc_wr_input])
00011a d1c4      	RCALL SUBOPT_0x0
00011b 81e0      	LD   R30,Z
00011c 30e0      	CPI  R30,0
00011d f569      	BRNE _0x13
                 ; 0000 0100   {
                 ; 0000 0101     //Нарастающий
                 ; 0000 0102     if(adc_wr_input == FREQUENCY_ADC_INPUT)
00011e e0e6      	LDI  R30,LOW(6)
00011f 15e8      	CP   R30,R8
000120 f459      	BRNE _0x14
                 ; 0000 0103     {
                 ; 0000 0104         last_time = TCNT1;
000121 b5ec      	IN   R30,0x2C
000122 b5fd      	IN   R31,0x2C+1
000123 93e0 03bd 	STS  _last_time,R30
000125 93f0 03be 	STS  _last_time+1,R31
                 ; 0000 0105         TCNT1H=0x00;
000127 e0e0      	LDI  R30,LOW(0)
000128 bded      	OUT  0x2D,R30
                 ; 0000 0106         TCNT1L=0x00;
000129 bdec      	OUT  0x2C,R30
                 ; 0000 0107         isFregUpd = 1;
00012a e0e1      	LDI  R30,LOW(1)
00012b 2ede      	MOV  R13,R30
                 ; 0000 0108     }
                 ; 0000 0109     adc_real[adc_wr_input] =  adc_current[adc_wr_input];
                 _0x14:
00012c 2de8      	MOV  R30,R8
00012d d1b6      	RCALL SUBOPT_0x1
00012e 0fea      	ADD  R30,R26
00012f 1ffb      	ADC  R31,R27
000130 010f      	MOVW R0,R30
000131 d1b8      	RCALL SUBOPT_0x2
000132 940e 0386 	CALL __GETD1P
000134 01d0      	MOVW R26,R0
000135 940e 038c 	CALL __PUTDP1
                 ; 0000 010A     adc_current[adc_wr_input] = 0;
000137 d1b2      	RCALL SUBOPT_0x2
                +
000138 e0e0     +LDI R30 , LOW ( 0x0 )
000139 e0f0     +LDI R31 , HIGH ( 0x0 )
00013a e060     +LDI R22 , BYTE3 ( 0x0 )
00013b e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00013c 940e 038c 	CALL __PUTDP1
                 ; 0000 010B     isRising[adc_wr_input] = 1;
00013e d1a0      	RCALL SUBOPT_0x0
00013f e0a1      	LDI  R26,LOW(1)
000140 83a0      	STD  Z+0,R26
                 ; 0000 010C     isUpdate[adc_wr_input] = adc_count[adc_wr_input];
000141 2da8      	MOV  R26,R8
000142 e0b0      	LDI  R27,0
000143 55a4      	SUBI R26,LOW(-_isUpdate)
000144 4fbc      	SBCI R27,HIGH(-_isUpdate)
000145 d1ad      	RCALL SUBOPT_0x3
000146 81e0      	LD   R30,Z
000147 93ec      	ST   X,R30
                 ; 0000 010D     adc_count[adc_wr_input] = 0;
000148 d1aa      	RCALL SUBOPT_0x3
000149 e0a0      	LDI  R26,LOW(0)
00014a 83a0      	STD  Z+0,R26
                 ; 0000 010E   }
                 ; 0000 010F }
                 _0x13:
                 ; 0000 0110 else
00014b c00f      	RJMP _0x15
                 _0x12:
                 ; 0000 0111 {
                 ; 0000 0112   if(adc_temp < 120) isRising[adc_wr_input] = 0;
00014c e7e8      	LDI  R30,LOW(120)
00014d 166e      	CP   R6,R30
00014e f418      	BRSH _0x16
00014f d18f      	RCALL SUBOPT_0x0
000150 e0a0      	LDI  R26,LOW(0)
000151 83a0      	STD  Z+0,R26
                 ; 0000 0113   adc_temp = 127 - adc_temp;
                 _0x16:
000152 2de6      	MOV  R30,R6
000153 e0f0      	LDI  R31,0
000154 e7af      	LDI  R26,LOW(127)
000155 e0b0      	LDI  R27,HIGH(127)
000156 940e 0391 	CALL __SWAPW12
000158 1bea      	SUB  R30,R26
000159 0bfb      	SBC  R31,R27
00015a 2e6e      	MOV  R6,R30
                 ; 0000 0114 }
                 _0x15:
                 ; 0000 0115 
                 ; 0000 0116 adc_temp &= 0x7F;
00015b e7ef      	LDI  R30,LOW(127)
00015c 226e      	AND  R6,R30
                 ; 0000 0117 adc_current[adc_wr_input] += adc_temp * adc_temp;
00015d 2de8      	MOV  R30,R8
00015e e5a4      	LDI  R26,LOW(_adc_current)
00015f e0b3      	LDI  R27,HIGH(_adc_current)
000160 e0f0      	LDI  R31,0
000161 940e 0324 	CALL __LSLW2
000163 0fea      	ADD  R30,R26
000164 1ffb      	ADC  R31,R27
000165 93ff      	PUSH R31
000166 93ef      	PUSH R30
000167 01df      	MOVW R26,R30
000168 940e 0386 	CALL __GETD1P
00016a 937f      	PUSH R23
00016b 936f      	PUSH R22
00016c 93ff      	PUSH R31
00016d 93ef      	PUSH R30
00016e 2da6      	MOV  R26,R6
00016f 27bb      	CLR  R27
000170 2de6      	MOV  R30,R6
000171 e0f0      	LDI  R31,0
000172 940e 033b 	CALL __MULW12
000174 91af      	POP  R26
000175 91bf      	POP  R27
000176 918f      	POP  R24
000177 919f      	POP  R25
000178 940e 032e 	CALL __CWD1
00017a 940e 031b 	CALL __ADDD12
00017c 91af      	POP  R26
00017d 91bf      	POP  R27
00017e 940e 038c 	CALL __PUTDP1
                 ; 0000 0118 adc_count[adc_wr_input]++;
000180 2da8      	MOV  R26,R8
000181 e0b0      	LDI  R27,0
000182 56ac      	SUBI R26,LOW(-_adc_count)
000183 4fbc      	SBCI R27,HIGH(-_adc_count)
000184 91ec      	LD   R30,X
000185 5fef      	SUBI R30,-LOW(1)
000186 93ec      	ST   X,R30
                 ; 0000 0119 
                 ; 0000 011A // Select next ADC input
                 ; 0000 011B if (++adc_wr_input > 7)
000187 9483      	INC  R8
000188 e0e7      	LDI  R30,LOW(7)
000189 15e8      	CP   R30,R8
00018a f468      	BRSH _0x17
                 ; 0000 011C {
                 ; 0000 011D     adc_wr_input = 0;
00018b 2488      	CLR  R8
                 ; 0000 011E     if(++adc_wr_index >= ADC_BUF_SIZE) adc_wr_index = 0;
00018c 94b3      	INC  R11
00018d e3ee      	LDI  R30,LOW(62)
00018e 16be      	CP   R11,R30
00018f f008      	BRLO _0x18
000190 24bb      	CLR  R11
                 ; 0000 011F 	if(adc_wr_index == adc_rd_index)
                 _0x18:
000191 14ab      	CP   R10,R11
000192 f429      	BRNE _0x19
                 ; 0000 0120 	{
                 ; 0000 0121 		if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000193 94a3      	INC  R10
000194 e3ee      	LDI  R30,LOW(62)
000195 16ae      	CP   R10,R30
000196 f008      	BRLO _0x1A
000197 24aa      	CLR  R10
                 ; 0000 0122 	}
                 _0x1A:
                 ; 0000 0123 }
                 _0x19:
                 ; 0000 0124 }
                 _0x17:
000198 91e9      	LD   R30,Y+
000199 bfef      	OUT  SREG,R30
00019a 91f9      	LD   R31,Y+
00019b 91e9      	LD   R30,Y+
00019c 91b9      	LD   R27,Y+
00019d 91a9      	LD   R26,Y+
00019e 9199      	LD   R25,Y+
00019f 9189      	LD   R24,Y+
0001a0 9179      	LD   R23,Y+
0001a1 9169      	LD   R22,Y+
0001a2 9019      	LD   R1,Y+
0001a3 9009      	LD   R0,Y+
0001a4 9518      	RETI
                 ;
                 ;unsigned char isqrt( unsigned int from)
                 ; 0000 0127 {
                 _isqrt:
                 ; 0000 0128      unsigned int mask = 0x4000, sqr = 0, temp;
                 ; 0000 0129      do
0001a5 940e 0398 	CALL __SAVELOCR6
                 ;	from -> Y+6
                 ;	mask -> R16,R17
                 ;	sqr -> R18,R19
                 ;	temp -> R20,R21
                +
0001a7 e000     +LDI R16 , LOW ( 16384 )
0001a8 e410     +LDI R17 , HIGH ( 16384 )
                 	__GETWRN 16,17,16384
                +
0001a9 e020     +LDI R18 , LOW ( 0 )
0001aa e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1C:
                 ; 0000 012A      {
                 ; 0000 012B          temp = sqr | mask;
0001ab 01f8      	MOVW R30,R16
0001ac 2be2      	OR   R30,R18
0001ad 2bf3      	OR   R31,R19
0001ae 01af      	MOVW R20,R30
                 ; 0000 012C          sqr >>= 1;
0001af 9536      	LSR  R19
0001b0 9527      	ROR  R18
                 ; 0000 012D          if( temp <= from ) {
0001b1 81ee      	LDD  R30,Y+6
0001b2 81ff      	LDD  R31,Y+6+1
0001b3 17e4      	CP   R30,R20
0001b4 07f5      	CPC  R31,R21
0001b5 f030      	BRLO _0x1E
                 ; 0000 012E              sqr |= mask;
                +
0001b6 2b20     +OR R18 , R16
0001b7 2b31     +OR R19 , R17
                 	__ORWRR 18,19,16,17
                 ; 0000 012F              from -= temp;
0001b8 1be4      	SUB  R30,R20
0001b9 0bf5      	SBC  R31,R21
0001ba 83ee      	STD  Y+6,R30
0001bb 83ff      	STD  Y+6+1,R31
                 ; 0000 0130          }
                 ; 0000 0131      } while( mask >>= 2 );
                 _0x1E:
0001bc 01f8      	MOVW R30,R16
0001bd 940e 0329 	CALL __LSRW2
0001bf 018f      	MOVW R16,R30
0001c0 9730      	SBIW R30,0
0001c1 f749      	BRNE _0x1C
                 ; 0000 0132      //округление
                 ; 0000 0133      if( sqr < from ) ++sqr;
0001c2 81ee      	LDD  R30,Y+6
0001c3 81ff      	LDD  R31,Y+6+1
0001c4 172e      	CP   R18,R30
0001c5 073f      	CPC  R19,R31
0001c6 f410      	BRSH _0x1F
                +
0001c7 5f2f     +SUBI R18 , LOW ( - 1 )
0001c8 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0134      return (unsigned char)sqr;
                 _0x1F:
0001c9 2fe2      	MOV  R30,R18
0001ca 940e 039f 	CALL __LOADLOCR6
0001cc 9628      	ADIW R28,8
0001cd 9508      	RET
                 ; 0000 0135 }
                 ;
                 ;inline void main_loop()
                 ; 0000 0138 {
                 _main_loop:
                 ; 0000 0139     char i, j;
                 ; 0000 013A     unsigned int s_tval;
                 ; 0000 013B     for(i=0; i<8; i++)
0001ce 940e 039a 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	j -> R16
                 ;	s_tval -> R18,R19
0001d0 e010      	LDI  R17,LOW(0)
                 _0x21:
0001d1 3018      	CPI  R17,8
0001d2 f010      	BRLO PC+3
0001d3 940c 0214 	JMP _0x22
                 ; 0000 013C     {
                 ; 0000 013D         if(isUpdate[i])
0001d5 d122      	RCALL SUBOPT_0x4
0001d6 55e4      	SUBI R30,LOW(-_isUpdate)
0001d7 4ffc      	SBCI R31,HIGH(-_isUpdate)
0001d8 81e0      	LD   R30,Z
0001d9 30e0      	CPI  R30,0
0001da f139      	BREQ _0x23
                 ; 0000 013E         {
                 ; 0000 013F             valClear[i] = 0;
0001db d11c      	RCALL SUBOPT_0x4
0001dc 54ec      	SUBI R30,LOW(-_valClear)
0001dd 4ffc      	SBCI R31,HIGH(-_valClear)
0001de e0a0      	LDI  R26,LOW(0)
0001df 83a0      	STD  Z+0,R26
                 ; 0000 0140             s_tval = adc_real[i]/isUpdate[i];
0001e0 2fe1      	MOV  R30,R17
0001e1 d102      	RCALL SUBOPT_0x1
0001e2 0fae      	ADD  R26,R30
0001e3 1fbf      	ADC  R27,R31
0001e4 940e 0386 	CALL __GETD1P
0001e6 01df      	MOVW R26,R30
0001e7 01cb      	MOVW R24,R22
0001e8 d10f      	RCALL SUBOPT_0x4
0001e9 55e4      	SUBI R30,LOW(-_isUpdate)
0001ea 4ffc      	SBCI R31,HIGH(-_isUpdate)
0001eb 81e0      	LD   R30,Z
0001ec e0f0      	LDI  R31,0
0001ed 940e 032e 	CALL __CWD1
0001ef 940e 0353 	CALL __DIVD21U
0001f1 019f      	MOVW R18,R30
                 ; 0000 0141             isUpdate[i] = 0;
0001f2 d105      	RCALL SUBOPT_0x4
0001f3 55e4      	SUBI R30,LOW(-_isUpdate)
0001f4 4ffc      	SBCI R31,HIGH(-_isUpdate)
0001f5 e0a0      	LDI  R26,LOW(0)
0001f6 83a0      	STD  Z+0,R26
                 ; 0000 0142             s_val[i] = isqrt(s_tval);
0001f7 d100      	RCALL SUBOPT_0x4
0001f8 56e4      	SUBI R30,LOW(-_s_val)
0001f9 4ffc      	SBCI R31,HIGH(-_s_val)
0001fa 93ff      	PUSH R31
0001fb 93ef      	PUSH R30
0001fc 933a      	ST   -Y,R19
0001fd 932a      	ST   -Y,R18
0001fe dfa6      	RCALL _isqrt
0001ff 91af      	POP  R26
000200 91bf      	POP  R27
000201 93ec      	ST   X,R30
                 ; 0000 0143         }
                 ; 0000 0144         if(valClear[i] > 250)
                 _0x23:
000202 d0f5      	RCALL SUBOPT_0x4
000203 54ec      	SUBI R30,LOW(-_valClear)
000204 4ffc      	SBCI R31,HIGH(-_valClear)
000205 81a0      	LD   R26,Z
000206 3fab      	CPI  R26,LOW(0xFB)
000207 f050      	BRLO _0x24
                 ; 0000 0145         {
                 ; 0000 0146             valClear[i] = 0;
000208 d0ef      	RCALL SUBOPT_0x4
000209 54ec      	SUBI R30,LOW(-_valClear)
00020a 4ffc      	SBCI R31,HIGH(-_valClear)
00020b e0a0      	LDI  R26,LOW(0)
00020c 83a0      	STD  Z+0,R26
                 ; 0000 0147             s_val[i] = 0;
00020d d0ea      	RCALL SUBOPT_0x4
00020e 56e4      	SUBI R30,LOW(-_s_val)
00020f 4ffc      	SBCI R31,HIGH(-_s_val)
000210 e0a0      	LDI  R26,LOW(0)
000211 83a0      	STD  Z+0,R26
                 ; 0000 0148         }
                 ; 0000 0149     }
                 _0x24:
000212 5f1f      	SUBI R17,-1
000213 cfbd      	RJMP _0x21
                 _0x22:
                 ; 0000 014A     if(isFregUpd)
000214 20dd      	TST  R13
000215 f081      	BREQ _0x25
                 ; 0000 014B     {
                 ; 0000 014C       valClear[8] = 0;
000216 e0e0      	LDI  R30,LOW(0)
                +
000217 93e0 03bc+STS _valClear + ( 8 ) , R30
                 	__PUTB1MN _valClear,8
                 ; 0000 014D       // Период в тиках 62,500 kHz
                 ; 0000 014E       freg = 62500 / last_time;
000219 91e0 03bd 	LDS  R30,_last_time
00021b 91f0 03be 	LDS  R31,_last_time+1
00021d e2a4      	LDI  R26,LOW(62500)
00021e efb4      	LDI  R27,HIGH(62500)
00021f 940e 0340 	CALL __DIVW21U
000221 93e0 03bf 	STS  _freg,R30
000223 93f0 03c0 	STS  _freg+1,R31
                 ; 0000 014F       isFregUpd = 0;
000225 24dd      	CLR  R13
                 ; 0000 0150     }
                 ; 0000 0151     if(valClear[8] > 250)
                 _0x25:
                +
000226 91a0 03bc+LDS R26 , _valClear + ( 8 )
                 	__GETB2MN _valClear,8
000228 3fab      	CPI  R26,LOW(0xFB)
000229 f038      	BRLO _0x26
                 ; 0000 0152     {
                 ; 0000 0153         valClear[8] = 0;
00022a e0e0      	LDI  R30,LOW(0)
                +
00022b 93e0 03bc+STS _valClear + ( 8 ) , R30
                 	__PUTB1MN _valClear,8
                 ; 0000 0154         freg = 0;
00022d 93e0 03bf 	STS  _freg,R30
00022f 93e0 03c0 	STS  _freg+1,R30
                 ; 0000 0155     }
                 ; 0000 0156 
                 ; 0000 0157     if(rx_counter)
                 _0x26:
000231 2077      	TST  R7
000232 f411      	BRNE PC+3
000233 940c 0297 	JMP _0x27
                 ; 0000 0158     {
                 ; 0000 0159         switch(getchar())
000235 de50      	RCALL _getchar
                 ; 0000 015A         {
                 ; 0000 015B             case 'U':
000236 35e5      	CPI  R30,LOW(0x55)
000237 f489      	BRNE _0x2B
                 ; 0000 015C                 j = FIRST_U_ADC_INPUT + 3;
000238 e008      	LDI  R16,LOW(8)
                 ; 0000 015D                 while(adc_rd_index != adc_wr_index)
                 _0x2C:
000239 14ba      	CP   R11,R10
00023a f069      	BREQ _0x2E
                 ; 0000 015E                 {
                 ; 0000 015F                         for(i=FIRST_U_ADC_INPUT; i<j; i++)
00023b e015      	LDI  R17,LOW(5)
                 _0x30:
00023c 1710      	CP   R17,R16
00023d f418      	BRSH _0x31
                 ; 0000 0160                         {
                 ; 0000 0161                             putchar(adc_data[i][adc_rd_index]);
00023e d0bc      	RCALL SUBOPT_0x5
                 ; 0000 0162                         }
00023f 5f1f      	SUBI R17,-1
000240 cffb      	RJMP _0x30
                 _0x31:
                 ; 0000 0163                         #asm("wdr")
000241 95a8      	wdr
                 ; 0000 0164                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000242 94a3      	INC  R10
000243 e3ee      	LDI  R30,LOW(62)
000244 16ae      	CP   R10,R30
000245 f008      	BRLO _0x32
000246 24aa      	CLR  R10
                 ; 0000 0165                 }
                 _0x32:
000247 cff1      	RJMP _0x2C
                 _0x2E:
                 ; 0000 0166             break;
000248 c04e      	RJMP _0x2A
                 ; 0000 0167             case 'I':
                 _0x2B:
000249 34e9      	CPI  R30,LOW(0x49)
00024a f489      	BRNE _0x33
                 ; 0000 0168                 j = FIRST_I_ADC_INPUT + 3;
00024b e004      	LDI  R16,LOW(4)
                 ; 0000 0169                 while(adc_rd_index != adc_wr_index)
                 _0x34:
00024c 14ba      	CP   R11,R10
00024d f069      	BREQ _0x36
                 ; 0000 016A                 {
                 ; 0000 016B                         for(i=FIRST_I_ADC_INPUT; i<j; i++)
00024e e011      	LDI  R17,LOW(1)
                 _0x38:
00024f 1710      	CP   R17,R16
000250 f418      	BRSH _0x39
                 ; 0000 016C                         {
                 ; 0000 016D                             putchar(adc_data[i][adc_rd_index]);
000251 d0a9      	RCALL SUBOPT_0x5
                 ; 0000 016E                         }
000252 5f1f      	SUBI R17,-1
000253 cffb      	RJMP _0x38
                 _0x39:
                 ; 0000 016F                         #asm("wdr")
000254 95a8      	wdr
                 ; 0000 0170                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000255 94a3      	INC  R10
000256 e3ee      	LDI  R30,LOW(62)
000257 16ae      	CP   R10,R30
000258 f008      	BRLO _0x3A
000259 24aa      	CLR  R10
                 ; 0000 0171                 }
                 _0x3A:
00025a cff1      	RJMP _0x34
                 _0x36:
                 ; 0000 0172             break;
00025b c03b      	RJMP _0x2A
                 ; 0000 0173             case 'Z':
                 _0x33:
00025c 35ea      	CPI  R30,LOW(0x5A)
00025d f4b9      	BRNE _0x3B
                 ; 0000 0174                 while(adc_rd_index != adc_wr_index)
                 _0x3C:
00025e 14ba      	CP   R11,R10
00025f f0a1      	BREQ _0x3E
                 ; 0000 0175                 {
                 ; 0000 0176                     putchar(adc_data[ZU_ADC_INPUT][adc_rd_index]);
                +
000260 e5ac     +LDI R26 , LOW ( _adc_data + ( 248 ) )
000261 e0b2     +LDI R27 , HIGH ( _adc_data + ( 248 ) )
                 	__POINTW2MN _adc_data,248
000262 27ee      	CLR  R30
000263 0daa      	ADD  R26,R10
000264 1fbe      	ADC  R27,R30
000265 91ec      	LD   R30,X
000266 93ea      	ST   -Y,R30
000267 de31      	RCALL _putchar
                 ; 0000 0177                     putchar(adc_data[ZI_ADC_INPUT][adc_rd_index]);
000268 2dea      	MOV  R30,R10
000269 e0f0      	LDI  R31,0
00026a 59ec      	SUBI R30,LOW(-_adc_data)
00026b 4ffe      	SBCI R31,HIGH(-_adc_data)
00026c d09a      	RCALL SUBOPT_0x6
                 ; 0000 0178                     #asm("wdr")
00026d 95a8      	wdr
                 ; 0000 0179                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
00026e 94a3      	INC  R10
00026f e3ee      	LDI  R30,LOW(62)
000270 16ae      	CP   R10,R30
000271 f008      	BRLO _0x3F
000272 24aa      	CLR  R10
                 ; 0000 017A                 }
                 _0x3F:
000273 cfea      	RJMP _0x3C
                 _0x3E:
                 ; 0000 017B             break;
000274 c022      	RJMP _0x2A
                 ; 0000 017C             case 'S':
                 _0x3B:
000275 35e3      	CPI  R30,LOW(0x53)
000276 f501      	BRNE _0x2A
                 ; 0000 017D                 // Частота Гц
                 ; 0000 017E                 putchar(freg & 0xFF);
000277 91e0 03bf 	LDS  R30,_freg
000279 93ea      	ST   -Y,R30
00027a de1e      	RCALL _putchar
                 ; 0000 017F                 // Среднеквадратичные U
                 ; 0000 0180 				        j = FIRST_U_ADC_INPUT + 3;
00027b e008      	LDI  R16,LOW(8)
                 ; 0000 0181                 for(i=FIRST_U_ADC_INPUT; i<j; i++)
00027c e015      	LDI  R17,LOW(5)
                 _0x42:
00027d 1710      	CP   R17,R16
00027e f430      	BRSH _0x43
                 ; 0000 0182                 {
                 ; 0000 0183                     putchar(s_val[i]);
00027f d078      	RCALL SUBOPT_0x4
000280 56e4      	SUBI R30,LOW(-_s_val)
000281 4ffc      	SBCI R31,HIGH(-_s_val)
000282 d084      	RCALL SUBOPT_0x6
                 ; 0000 0184                 }
000283 5f1f      	SUBI R17,-1
000284 cff8      	RJMP _0x42
                 _0x43:
                 ; 0000 0185                 // Среднеквадратичные I
                 ; 0000 0186 				        j = FIRST_I_ADC_INPUT + 3;
000285 e004      	LDI  R16,LOW(4)
                 ; 0000 0187                 for(i=FIRST_I_ADC_INPUT; i<j; i++)
000286 e011      	LDI  R17,LOW(1)
                 _0x45:
000287 1710      	CP   R17,R16
000288 f430      	BRSH _0x46
                 ; 0000 0188 				        {
                 ; 0000 0189 					          putchar(s_val[i]);
000289 d06e      	RCALL SUBOPT_0x4
00028a 56e4      	SUBI R30,LOW(-_s_val)
00028b 4ffc      	SBCI R31,HIGH(-_s_val)
00028c d07a      	RCALL SUBOPT_0x6
                 ; 0000 018A 				        }
00028d 5f1f      	SUBI R17,-1
00028e cff8      	RJMP _0x45
                 _0x46:
                 ; 0000 018B                 // Среднеквадратичные ZUI
                 ; 0000 018C 				        putchar(s_val[ZU_ADC_INPUT]);
                +
00028f 91e0 03a0+LDS R30 , _s_val + ( 4 )
                 	__GETB1MN _s_val,4
000291 93ea      	ST   -Y,R30
000292 de06      	RCALL _putchar
                 ; 0000 018D                 putchar(s_val[ZI_ADC_INPUT]);
000293 91e0 039c 	LDS  R30,_s_val
000295 93ea      	ST   -Y,R30
000296 de02      	RCALL _putchar
                 ; 0000 018E             break;
                 ; 0000 018F         }
                 _0x2A:
                 ; 0000 0190     }
                 ; 0000 0191 }
                 _0x27:
000297 940e 03a1 	CALL __LOADLOCR4
000299 9624      	ADIW R28,4
00029a 9508      	RET
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0197 {
                 _main:
                 ; 0000 0198 // Declare your local variables here
                 ; 0000 0199 
                 ; 0000 019A // Input/Output Ports initialization
                 ; 0000 019B // Port A initialization
                 ; 0000 019C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 019D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 019E PORTA=0x00;
00029b e0e0      	LDI  R30,LOW(0)
00029c bbeb      	OUT  0x1B,R30
                 ; 0000 019F DDRA=0x00;
00029d bbea      	OUT  0x1A,R30
                 ; 0000 01A0 
                 ; 0000 01A1 // Port B initialization
                 ; 0000 01A2 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01A3 // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01A4 PORTB=0x00;
00029e bbe8      	OUT  0x18,R30
                 ; 0000 01A5 DDRB=0x20;
00029f e2e0      	LDI  R30,LOW(32)
0002a0 bbe7      	OUT  0x17,R30
                 ; 0000 01A6 
                 ; 0000 01A7 // Port C initialization
                 ; 0000 01A8 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01A9 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01AA PORTC=0x00;
0002a1 e0e0      	LDI  R30,LOW(0)
0002a2 bbe5      	OUT  0x15,R30
                 ; 0000 01AB DDRC=0x00;
0002a3 bbe4      	OUT  0x14,R30
                 ; 0000 01AC 
                 ; 0000 01AD // Port D initialization
                 ; 0000 01AE // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01AF // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01B0 PORTD=0x00;
0002a4 bbe2      	OUT  0x12,R30
                 ; 0000 01B1 DDRD=0x00;
0002a5 bbe1      	OUT  0x11,R30
                 ; 0000 01B2 
                 ; 0000 01B3 // Timer/Counter 0 initialization
                 ; 0000 01B4 // Clock source: System Clock
                 ; 0000 01B5 // Clock value: 2000,000 kHz
                 ; 0000 01B6 // Mode: Normal top=0xFF
                 ; 0000 01B7 // OC0 output: Disconnected
                 ; 0000 01B8 //TCCR0=0x02;
                 ; 0000 01B9 TCNT0=0xE2;
0002a6 eee2      	LDI  R30,LOW(226)
0002a7 bfe2      	OUT  0x32,R30
                 ; 0000 01BA OCR0=0x00;
0002a8 e0e0      	LDI  R30,LOW(0)
0002a9 bfec      	OUT  0x3C,R30
                 ; 0000 01BB 
                 ; 0000 01BC // Timer/Counter 1 initialization
                 ; 0000 01BD // Clock source: System Clock
                 ; 0000 01BE // Clock value: 62,500 kHz
                 ; 0000 01BF // Mode: Normal top=0xFFFF
                 ; 0000 01C0 // OC1A output: Discon.
                 ; 0000 01C1 // OC1B output: Discon.
                 ; 0000 01C2 // Noise Canceler: Off
                 ; 0000 01C3 // Input Capture on Falling Edge
                 ; 0000 01C4 // Timer1 Overflow Interrupt: Off
                 ; 0000 01C5 // Input Capture Interrupt: Off
                 ; 0000 01C6 // Compare A Match Interrupt: Off
                 ; 0000 01C7 // Compare B Match Interrupt: Off
                 ; 0000 01C8 TCCR1A=0x00;
0002aa bdef      	OUT  0x2F,R30
                 ; 0000 01C9 TCCR1B=0x04;
0002ab e0e4      	LDI  R30,LOW(4)
0002ac bdee      	OUT  0x2E,R30
                 ; 0000 01CA TCNT1H=0x00;
0002ad e0e0      	LDI  R30,LOW(0)
0002ae bded      	OUT  0x2D,R30
                 ; 0000 01CB TCNT1L=0x00;
0002af bdec      	OUT  0x2C,R30
                 ; 0000 01CC ICR1H=0x00;
0002b0 bde7      	OUT  0x27,R30
                 ; 0000 01CD ICR1L=0x00;
0002b1 bde6      	OUT  0x26,R30
                 ; 0000 01CE OCR1AH=0x00;
0002b2 bdeb      	OUT  0x2B,R30
                 ; 0000 01CF OCR1AL=0x00;
0002b3 bdea      	OUT  0x2A,R30
                 ; 0000 01D0 OCR1BH=0x00;
0002b4 bde9      	OUT  0x29,R30
                 ; 0000 01D1 OCR1BL=0x00;
0002b5 bde8      	OUT  0x28,R30
                 ; 0000 01D2 
                 ; 0000 01D3 // Timer/Counter 2 initialization
                 ; 0000 01D4 // Clock source: System Clock
                 ; 0000 01D5 // Clock value: 250,000 kHz
                 ; 0000 01D6 // Mode: Normal top=0xFF
                 ; 0000 01D7 // OC2 output: Disconnected
                 ; 0000 01D8 ASSR=0x00;
0002b6 bde2      	OUT  0x22,R30
                 ; 0000 01D9 TCCR2=0x04;
0002b7 e0e4      	LDI  R30,LOW(4)
0002b8 bde5      	OUT  0x25,R30
                 ; 0000 01DA TCNT2=0x06;
0002b9 e0e6      	LDI  R30,LOW(6)
0002ba bde4      	OUT  0x24,R30
                 ; 0000 01DB OCR2=0x00;
0002bb e0e0      	LDI  R30,LOW(0)
0002bc bde3      	OUT  0x23,R30
                 ; 0000 01DC 
                 ; 0000 01DD // External Interrupt(s) initialization
                 ; 0000 01DE // INT0: Off
                 ; 0000 01DF // INT1: Off
                 ; 0000 01E0 // INT2: Off
                 ; 0000 01E1 MCUCR=0x00;
0002bd bfe5      	OUT  0x35,R30
                 ; 0000 01E2 MCUCSR=0x00;
0002be bfe4      	OUT  0x34,R30
                 ; 0000 01E3 
                 ; 0000 01E4 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01E5 TIMSK=0x41;
0002bf e4e1      	LDI  R30,LOW(65)
0002c0 bfe9      	OUT  0x39,R30
                 ; 0000 01E6 
                 ; 0000 01E7 // USART initialization
                 ; 0000 01E8 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01E9 // USART Receiver: On
                 ; 0000 01EA // USART Transmitter: On
                 ; 0000 01EB // USART Mode: Asynchronous
                 ; 0000 01EC // USART Baud Rate: 115200
                 ; 0000 01ED UCSRA=0x00;
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 b9eb      	OUT  0xB,R30
                 ; 0000 01EE UCSRB=0xD8;
0002c3 ede8      	LDI  R30,LOW(216)
0002c4 d045      	RCALL SUBOPT_0x7
                 ; 0000 01EF UCSRC=0x86;
                 ; 0000 01F0 UBRRH=0x00;
                 ; 0000 01F1 UBRRL=0x08;
                 ; 0000 01F2 
                 ; 0000 01F3 // USART initialization  // Без ТХ прерывания
                 ; 0000 01F4 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01F5 // USART Receiver: On
                 ; 0000 01F6 // USART Transmitter: On
                 ; 0000 01F7 // USART Mode: Asynchronous
                 ; 0000 01F8 // USART Baud Rate: 115200
                 ; 0000 01F9 UCSRA=0x00;
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 b9eb      	OUT  0xB,R30
                 ; 0000 01FA UCSRB=0x98;
0002c7 e9e8      	LDI  R30,LOW(152)
0002c8 d041      	RCALL SUBOPT_0x7
                 ; 0000 01FB UCSRC=0x86;
                 ; 0000 01FC UBRRH=0x00;
                 ; 0000 01FD UBRRL=0x08;
                 ; 0000 01FE 
                 ; 0000 01FF // Analog Comparator initialization
                 ; 0000 0200 // Analog Comparator: Off
                 ; 0000 0201 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0202 ACSR=0x80;
0002c9 e8e0      	LDI  R30,LOW(128)
0002ca b9e8      	OUT  0x8,R30
                 ; 0000 0203 SFIOR=0x00;
0002cb e0e0      	LDI  R30,LOW(0)
0002cc bfe0      	OUT  0x30,R30
                 ; 0000 0204 
                 ; 0000 0205 // ADC initialization
                 ; 0000 0206 // ADC Clock frequency: 250,000 kHz
                 ; 0000 0207 // ADC Voltage Reference: AREF pin
                 ; 0000 0208 // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 0209 ADMUX=(ADC_VREF_TYPE & 0xff);
0002cd b9e7      	OUT  0x7,R30
                 ; 0000 020A ADCSRA=0xAE;
0002ce eaee      	LDI  R30,LOW(174)
0002cf d042      	RCALL SUBOPT_0x8
                 ; 0000 020B SFIOR&=0x1F;
                 ; 0000 020C SFIOR|=0x80;
                 ; 0000 020D 
                 ; 0000 020E // ADC initialization // На штатной частоте
                 ; 0000 020F // ADC Clock frequency: 125,000 kHz
                 ; 0000 0210 // ADC Voltage Reference: AREF pin
                 ; 0000 0211 // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 0212 ADMUX= (ADC_VREF_TYPE & 0xff);
0002d0 b9e7      	OUT  0x7,R30
                 ; 0000 0213 ADCSRA=0xAF;
0002d1 eaef      	LDI  R30,LOW(175)
0002d2 d03f      	RCALL SUBOPT_0x8
                 ; 0000 0214 SFIOR&=0x1F;
                 ; 0000 0215 SFIOR|=0x80;
                 ; 0000 0216 
                 ; 0000 0217 // SPI initialization
                 ; 0000 0218 // SPI disabled
                 ; 0000 0219 SPCR=0x00;
0002d3 b9ed      	OUT  0xD,R30
                 ; 0000 021A 
                 ; 0000 021B // TWI initialization
                 ; 0000 021C // TWI disabled
                 ; 0000 021D TWCR=0x00;
0002d4 e0e0      	LDI  R30,LOW(0)
0002d5 bfe6      	OUT  0x36,R30
                 ; 0000 021E 
                 ; 0000 021F // Watchdog Timer initialization
                 ; 0000 0220 // Watchdog Timer Prescaler: OSC/256k
                 ; 0000 0221 #pragma optsize-
                 ; 0000 0222 WDTCR=0x1C;
0002d6 e1ec      	LDI  R30,LOW(28)
0002d7 bde1      	OUT  0x21,R30
                 ; 0000 0223 WDTCR=0x0C;
0002d8 e0ec      	LDI  R30,LOW(12)
0002d9 bde1      	OUT  0x21,R30
                 ; 0000 0224 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0225 #pragma optsize+
                 ; 0000 0226 #endif
                 ; 0000 0227 
                 ; 0000 0228 // Global enable interrupts
                 ; 0000 0229 #asm("sei")
0002da 9478      	sei
                 ; 0000 022A 
                 ; 0000 022B while (1)
                 _0x47:
                 ; 0000 022C       {
                 ; 0000 022D       #asm("wdr")
0002db 95a8      	wdr
                 ; 0000 022E       main_loop();
0002dc def1      	RCALL _main_loop
                 ; 0000 022F       }
0002dd cffd      	RJMP _0x47
                 ; 0000 0230 }
                 _0x4A:
0002de cfff      	RJMP _0x4A
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x4
                 _adc_data:
000164           	.BYTE 0x1F0
                 _adc_current:
000354           	.BYTE 0x20
                 _adc_real:
000374           	.BYTE 0x20
                 _adc_count:
000394           	.BYTE 0x8
                 _s_val:
00039c           	.BYTE 0x8
                 _isRising:
0003a4           	.BYTE 0x8
                 _isUpdate:
0003ac           	.BYTE 0x8
                 _valClear:
0003b4           	.BYTE 0x9
                 _last_time:
0003bd           	.BYTE 0x2
                 _freg:
0003bf           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0002df 2de8      	MOV  R30,R8
0002e0 e0f0      	LDI  R31,0
0002e1 55ec      	SUBI R30,LOW(-_isRising)
0002e2 4ffc      	SBCI R31,HIGH(-_isRising)
0002e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0002e4 e7a4      	LDI  R26,LOW(_adc_real)
0002e5 e0b3      	LDI  R27,HIGH(_adc_real)
0002e6 e0f0      	LDI  R31,0
0002e7 940e 0324 	CALL __LSLW2
0002e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0002ea 2de8      	MOV  R30,R8
0002eb e5a4      	LDI  R26,LOW(_adc_current)
0002ec e0b3      	LDI  R27,HIGH(_adc_current)
0002ed e0f0      	LDI  R31,0
0002ee 940e 0324 	CALL __LSLW2
0002f0 0fae      	ADD  R26,R30
0002f1 1fbf      	ADC  R27,R31
0002f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002f3 2de8      	MOV  R30,R8
0002f4 e0f0      	LDI  R31,0
0002f5 56ec      	SUBI R30,LOW(-_adc_count)
0002f6 4ffc      	SBCI R31,HIGH(-_adc_count)
0002f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
0002f8 2fe1      	MOV  R30,R17
0002f9 e0f0      	LDI  R31,0
0002fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
0002fb e3ae      	LDI  R26,LOW(62)
0002fc 9f1a      	MUL  R17,R26
0002fd 01f0      	MOVW R30,R0
0002fe 59ec      	SUBI R30,LOW(-_adc_data)
0002ff 4ffe      	SBCI R31,HIGH(-_adc_data)
000300 01df      	MOVW R26,R30
000301 27ee      	CLR  R30
000302 0daa      	ADD  R26,R10
000303 1fbe      	ADC  R27,R30
000304 91ec      	LD   R30,X
000305 93ea      	ST   -Y,R30
000306 cd92      	RJMP _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000307 81e0      	LD   R30,Z
000308 93ea      	ST   -Y,R30
000309 cd8f      	RJMP _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00030a b9ea      	OUT  0xA,R30
00030b e8e6      	LDI  R30,LOW(134)
00030c bde0      	OUT  0x20,R30
00030d e0e0      	LDI  R30,LOW(0)
00030e bde0      	OUT  0x20,R30
00030f e0e8      	LDI  R30,LOW(8)
000310 b9e9      	OUT  0x9,R30
000311 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000312 b9e6      	OUT  0x6,R30
000313 b7e0      	IN   R30,0x30
000314 71ef      	ANDI R30,LOW(0x1F)
000315 bfe0      	OUT  0x30,R30
000316 b7e0      	IN   R30,0x30
000317 68e0      	ORI  R30,0x80
000318 bfe0      	OUT  0x30,R30
000319 e0e0      	LDI  R30,LOW(0)
00031a 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
00031b 0fea      	ADD  R30,R26
00031c 1ffb      	ADC  R31,R27
00031d 1f68      	ADC  R22,R24
00031e 1f79      	ADC  R23,R25
00031f 9508      	RET
                 
                 __ANEGW1:
000320 95f1      	NEG  R31
000321 95e1      	NEG  R30
000322 40f0      	SBCI R31,0
000323 9508      	RET
                 
                 __LSLW2:
000324 0fee      	LSL  R30
000325 1fff      	ROL  R31
000326 0fee      	LSL  R30
000327 1fff      	ROL  R31
000328 9508      	RET
                 
                 __LSRW2:
000329 95f6      	LSR  R31
00032a 95e7      	ROR  R30
00032b 95f6      	LSR  R31
00032c 95e7      	ROR  R30
00032d 9508      	RET
                 
                 __CWD1:
00032e 2f6f      	MOV  R22,R31
00032f 0f66      	ADD  R22,R22
000330 0b66      	SBC  R22,R22
000331 2f76      	MOV  R23,R22
000332 9508      	RET
                 
                 __MULW12U:
000333 9ffa      	MUL  R31,R26
000334 2df0      	MOV  R31,R0
000335 9feb      	MUL  R30,R27
000336 0df0      	ADD  R31,R0
000337 9fea      	MUL  R30,R26
000338 2de0      	MOV  R30,R0
000339 0df1      	ADD  R31,R1
00033a 9508      	RET
                 
                 __MULW12:
00033b d03c      	RCALL __CHKSIGNW
00033c dff6      	RCALL __MULW12U
00033d f40e      	BRTC __MULW121
00033e dfe1      	RCALL __ANEGW1
                 __MULW121:
00033f 9508      	RET
                 
                 __DIVW21U:
000340 2400      	CLR  R0
000341 2411      	CLR  R1
000342 e190      	LDI  R25,16
                 __DIVW21U1:
000343 0faa      	LSL  R26
000344 1fbb      	ROL  R27
000345 1c00      	ROL  R0
000346 1c11      	ROL  R1
000347 1a0e      	SUB  R0,R30
000348 0a1f      	SBC  R1,R31
000349 f418      	BRCC __DIVW21U2
00034a 0e0e      	ADD  R0,R30
00034b 1e1f      	ADC  R1,R31
00034c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00034d 60a1      	SBR  R26,1
                 __DIVW21U3:
00034e 959a      	DEC  R25
00034f f799      	BRNE __DIVW21U1
000350 01fd      	MOVW R30,R26
000351 01d0      	MOVW R26,R0
000352 9508      	RET
                 
                 __DIVD21U:
000353 933f      	PUSH R19
000354 934f      	PUSH R20
000355 935f      	PUSH R21
000356 2400      	CLR  R0
000357 2411      	CLR  R1
000358 2744      	CLR  R20
000359 2755      	CLR  R21
00035a e230      	LDI  R19,32
                 __DIVD21U1:
00035b 0faa      	LSL  R26
00035c 1fbb      	ROL  R27
00035d 1f88      	ROL  R24
00035e 1f99      	ROL  R25
00035f 1c00      	ROL  R0
000360 1c11      	ROL  R1
000361 1f44      	ROL  R20
000362 1f55      	ROL  R21
000363 1a0e      	SUB  R0,R30
000364 0a1f      	SBC  R1,R31
000365 0b46      	SBC  R20,R22
000366 0b57      	SBC  R21,R23
000367 f428      	BRCC __DIVD21U2
000368 0e0e      	ADD  R0,R30
000369 1e1f      	ADC  R1,R31
00036a 1f46      	ADC  R20,R22
00036b 1f57      	ADC  R21,R23
00036c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00036d 60a1      	SBR  R26,1
                 __DIVD21U3:
00036e 953a      	DEC  R19
00036f f759      	BRNE __DIVD21U1
000370 01fd      	MOVW R30,R26
000371 01bc      	MOVW R22,R24
000372 01d0      	MOVW R26,R0
000373 01ca      	MOVW R24,R20
000374 915f      	POP  R21
000375 914f      	POP  R20
000376 913f      	POP  R19
000377 9508      	RET
                 
                 __CHKSIGNW:
000378 94e8      	CLT
000379 fff7      	SBRS R31,7
00037a c002      	RJMP __CHKSW1
00037b dfa4      	RCALL __ANEGW1
00037c 9468      	SET
                 __CHKSW1:
00037d ffb7      	SBRS R27,7
00037e c006      	RJMP __CHKSW2
00037f 95a0      	COM  R26
000380 95b0      	COM  R27
000381 9611      	ADIW R26,1
000382 f800      	BLD  R0,0
000383 9403      	INC  R0
000384 fa00      	BST  R0,0
                 __CHKSW2:
000385 9508      	RET
                 
                 __GETD1P:
000386 91ed      	LD   R30,X+
000387 91fd      	LD   R31,X+
000388 916d      	LD   R22,X+
000389 917c      	LD   R23,X
00038a 9713      	SBIW R26,3
00038b 9508      	RET
                 
                 __PUTDP1:
00038c 93ed      	ST   X+,R30
00038d 93fd      	ST   X+,R31
00038e 936d      	ST   X+,R22
00038f 937c      	ST   X,R23
000390 9508      	RET
                 
                 __SWAPW12:
000391 2e1b      	MOV  R1,R27
000392 2fbf      	MOV  R27,R31
000393 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000394 2e1a      	MOV  R1,R26
000395 2fae      	MOV  R26,R30
000396 2de1      	MOV  R30,R1
000397 9508      	RET
                 
                 __SAVELOCR6:
000398 935a      	ST   -Y,R21
                 __SAVELOCR5:
000399 934a      	ST   -Y,R20
                 __SAVELOCR4:
00039a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00039b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00039c 931a      	ST   -Y,R17
00039d 930a      	ST   -Y,R16
00039e 9508      	RET
                 
                 __LOADLOCR6:
00039f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003a0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003a1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003a2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003a3 8119      	LDD  R17,Y+1
0003a4 8108      	LD   R16,Y
0003a5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  26 r1 :  16 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   9 r7 :   6 
r8 :  13 r9 :   6 r10:  19 r11:   8 r12:   0 r13:   3 r14:   0 r15:   0 
r16:  19 r17:  30 r18:  11 r19:  13 r20:  12 r21:  10 r22:  19 r23:  10 
r24:  15 r25:   9 r26:  75 r27:  34 r28:   4 r29:   1 r30: 318 r31:  82 
x  :  17 y  :  69 z  :  23 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  13 
adiw  :   4 and   :   1 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   8 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  22 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  22 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  22 cpc   :   2 cpi   :   9 cpse  :   0 dec   :   4 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :  10 jmp   :  24 ld    :  37 ldd   :   9 ldi   : 120 
lds   :  15 lpm   :   7 lsl   :   4 lsr   :   3 mov   :  36 movw  :  23 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   1 out   :  66 pop   :  11 push  :  11 rcall :  39 ret   :  26 
reti  :   4 rjmp  :  24 rol   :  12 ror   :   3 sbc   :   7 sbci  :  21 
sbi   :   1 sbic  :   1 sbis  :   1 sbiw  :   5 sbr   :   2 sbrc  :   0 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  47 std   :   9 sts   :  17 sub   :   4 subi  :  36 swap  :   0 
tst   :   5 wdr   :   4 
Instructions used: 66 out of 116 (56.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00074c   1850     18   1868   16384  11.4%
[.dseg] 0x000060 0x0003c1      0    609    609    1119  54.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
