
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm Wed Jul 29 15:51:34 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1059): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1060): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1061): warning: Register r7 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1063): warning: Register r9 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1064): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1065): warning: Register r11 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1066): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1067): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _adc_temp=R6
                 	.DEF _adc_rd_input=R9
                 	.DEF _adc_wr_input=R8
                 	.DEF _adc_wr_index=R11
                 	.DEF _adc_rd_index=R10
                 	.DEF _last_time=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00a8 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00a2 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 006c 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 00c2 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x42:
000034 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000035 0001      	.DW  0x01
000036 0002      	.DW  0x02
000037 0066      	.DW  __REG_BIT_VARS*2
                 
000038 0002      	.DW  0x02
000039 000c      	.DW  0x0C
00003a 0068      	.DW  _0x42*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000043 e1f8      	LDI  R31,0x18
000044 bdf1      	OUT  WDTCR,R31
000045 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 0230 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 28.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 4
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004D {
                 
                 	.CSEG
                 _usart_rx_isr:
00006c 93ea      	ST   -Y,R30
00006d 93fa      	ST   -Y,R31
00006e b7ef      	IN   R30,SREG
00006f 93ea      	ST   -Y,R30
                 ; 0000 004E char status,data;
                 ; 0000 004F status=UCSRA;
000070 931a      	ST   -Y,R17
000071 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000072 b11b      	IN   R17,11
                 ; 0000 0050 data=UDR;
000073 b10c      	IN   R16,12
                 ; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000074 2fe1      	MOV  R30,R17
000075 71ec      	ANDI R30,LOW(0x1C)
000076 f489      	BRNE _0x3
                 ; 0000 0052    {
                 ; 0000 0053    rx_buffer[rx_wr_index++]=data;
000077 2de5      	MOV  R30,R5
000078 9453      	INC  R5
000079 e0f0      	LDI  R31,0
00007a 5ae0      	SUBI R30,LOW(-_rx_buffer)
00007b 4ffe      	SBCI R31,HIGH(-_rx_buffer)
00007c 8300      	ST   Z,R16
                 ; 0000 0054 #if RX_BUFFER_SIZE == 256
                 ; 0000 0055    // special case for receiver buffer size=256
                 ; 0000 0056    if (++rx_counter == 0)
                 ; 0000 0057       {
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00007d e0e4      	LDI  R30,LOW(4)
00007e 15e5      	CP   R30,R5
00007f f409      	BRNE _0x4
000080 2455      	CLR  R5
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000081 9473      	INC  R7
000082 e0e4      	LDI  R30,LOW(4)
000083 15e7      	CP   R30,R7
000084 f419      	BRNE _0x5
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
000085 2477      	CLR  R7
                 ; 0000 005D #endif
                 ; 0000 005E       rx_buffer_overflow=1;
000086 9468      	SET
000087 f820      	BLD  R2,0
                 ; 0000 005F       }
                 ; 0000 0060    }
                 _0x5:
                 ; 0000 0061 }
                 _0x3:
000088 9109      	LD   R16,Y+
000089 9119      	LD   R17,Y+
00008a 91e9      	LD   R30,Y+
00008b bfef      	OUT  SREG,R30
00008c 91f9      	LD   R31,Y+
00008d 91e9      	LD   R30,Y+
00008e 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0068 {
                 _getchar:
                 ; 0000 0069 char data;
                 ; 0000 006A while (rx_counter==0);
00008f 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000090 2077      	TST  R7
000091 f3f1      	BREQ _0x6
                 ; 0000 006B data=rx_buffer[rx_rd_index++];
000092 2de4      	MOV  R30,R4
000093 9443      	INC  R4
000094 e0f0      	LDI  R31,0
000095 5ae0      	SUBI R30,LOW(-_rx_buffer)
000096 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000097 8110      	LD   R17,Z
                 ; 0000 006C #if RX_BUFFER_SIZE != 256
                 ; 0000 006D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000098 e0e4      	LDI  R30,LOW(4)
000099 15e4      	CP   R30,R4
00009a f409      	BRNE _0x9
00009b 2444      	CLR  R4
                 ; 0000 006E #endif
                 ; 0000 006F #asm("cli")
                 _0x9:
00009c 94f8      	cli
                 ; 0000 0070 --rx_counter;
00009d 947a      	DEC  R7
                 ; 0000 0071 #asm("sei")
00009e 9478      	sei
                 ; 0000 0072 return data;
00009f 2fe1      	MOV  R30,R17
0000a0 9119      	LD   R17,Y+
0000a1 9508      	RET
                 ; 0000 0073 }
                 ;#pragma used-
                 ;#endif
                 ;/*
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 128
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ;{
                 ;if (tx_counter)
                 ;   {
                 ;   --tx_counter;
                 ;   UDR=tx_buffer[tx_rd_index++];
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
                 ;#endif
                 ;   }
                 ;}
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while (tx_counter == TX_BUFFER_SIZE);
                 ;#asm("cli")
                 ;if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
                 ;   {
                 ;   tx_buffer[tx_wr_index++]=c;
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ;#endif
                 ;   ++tx_counter;
                 ;   }
                 ;else
                 ;   UDR=c;
                 ;#asm("sei")
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;*/
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define MIGMIG PORTB.5
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00AD {
                 _timer0_ovf_isr:
0000a2 93ea      	ST   -Y,R30
                 ; 0000 00AE // Reinitialize Timer 0 value
                 ; 0000 00AF TCCR0=0x00;
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 bfe3      	OUT  0x33,R30
                 ; 0000 00B0 TCNT0=0x00;
0000a5 bfe2      	OUT  0x32,R30
                 ; 0000 00B1 }
0000a6 91e9      	LD   R30,Y+
0000a7 9518      	RETI
                 ;
                 ;#define FIRST_U_ADC_INPUT 5
                 ;#define FIRST_I_ADC_INPUT 1
                 ;#define ZU_ADC_INPUT 4
                 ;#define ZI_ADC_INPUT 0
                 ;#define FREQUENCY_ADC_INPUT 6
                 ;#define ADC_BUF_SIZE 80
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;unsigned char adc_data[8][ADC_BUF_SIZE];
                 ;unsigned long adc_current[8], adc_real[8];
                 ;unsigned char adc_count[8], s_val[8];
                 ;unsigned char adc_temp;
                 ;unsigned char adc_rd_input, adc_wr_input, adc_wr_index, adc_rd_index;
                 ;unsigned char isRising[8] = {0,0,0,0,0,0,0,0}, isUpdate[8] = {0,0,0,0,0,0,0,0};
                 ;unsigned int last_time = 0;
                 ;
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 00C6 {
                 _timer2_ovf_isr:
0000a8 93aa      	ST   -Y,R26
0000a9 93ea      	ST   -Y,R30
0000aa b7ef      	IN   R30,SREG
0000ab 93ea      	ST   -Y,R30
                 ; 0000 00C7 // Reinitialize Timer2 value
                 ; 0000 00C8 TCNT2=0x06;
0000ac e0e6      	LDI  R30,LOW(6)
0000ad bde4      	OUT  0x24,R30
                 ; 0000 00C9 // Place your code here
                 ; 0000 00CA 
                 ; 0000 00CB if(adc_rd_input == 0)
0000ae 2099      	TST  R9
0000af f469      	BRNE _0xA
                 ; 0000 00CC {
                 ; 0000 00CD      TCNT0=0xEA; //11us
0000b0 eeea      	LDI  R30,LOW(234)
0000b1 bfe2      	OUT  0x32,R30
                 ; 0000 00CE      TCCR0=0x02;
0000b2 e0e2      	LDI  R30,LOW(2)
0000b3 bfe3      	OUT  0x33,R30
                 ; 0000 00CF      MIGMIG ^= 1;
0000b4 e0a0      	LDI  R26,0
0000b5 99c5      	SBIC 0x18,5
0000b6 e0a1      	LDI  R26,1
0000b7 e0e1      	LDI  R30,LOW(1)
0000b8 27ea      	EOR  R30,R26
0000b9 f411      	BRNE _0xB
0000ba 98c5      	CBI  0x18,5
0000bb c001      	RJMP _0xC
                 _0xB:
0000bc 9ac5      	SBI  0x18,5
                 _0xC:
                 ; 0000 00D0 }
                 ; 0000 00D1 }
                 _0xA:
0000bd 91e9      	LD   R30,Y+
0000be bfef      	OUT  SREG,R30
0000bf 91e9      	LD   R30,Y+
0000c0 91a9      	LD   R26,Y+
0000c1 9518      	RETI
                 ;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00D7 {
                 _adc_isr:
0000c2 920a      	ST   -Y,R0
0000c3 921a      	ST   -Y,R1
0000c4 936a      	ST   -Y,R22
0000c5 937a      	ST   -Y,R23
0000c6 938a      	ST   -Y,R24
0000c7 939a      	ST   -Y,R25
0000c8 93aa      	ST   -Y,R26
0000c9 93ba      	ST   -Y,R27
0000ca 93ea      	ST   -Y,R30
0000cb 93fa      	ST   -Y,R31
0000cc b7ef      	IN   R30,SREG
0000cd 93ea      	ST   -Y,R30
                 ; 0000 00D8 // Read the AD conversion result
                 ; 0000 00D9     adc_temp = ADCW>>2;
0000ce b1e4      	IN   R30,0x4
0000cf b1f5      	IN   R31,0x4+1
0000d0 940e 02ce 	CALL __LSRW2
0000d2 2e6e      	MOV  R6,R30
                 ; 0000 00DA // Select next ADC input
                 ; 0000 00DB     adc_rd_input = adc_wr_input + 1;
0000d3 2de8      	MOV  R30,R8
0000d4 5fef      	SUBI R30,-LOW(1)
0000d5 2e9e      	MOV  R9,R30
                 ; 0000 00DC     if(adc_rd_input > 7) adc_rd_input = 0;
0000d6 e0e7      	LDI  R30,LOW(7)
0000d7 15e9      	CP   R30,R9
0000d8 f408      	BRSH _0xD
0000d9 2499      	CLR  R9
                 ; 0000 00DD     ADMUX=(ADC_VREF_TYPE & 0xff) | adc_rd_input;
                 _0xD:
0000da 2de9      	MOV  R30,R9
0000db b9e7      	OUT  0x7,R30
                 ; 0000 00DE // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00DF     if(adc_rd_input)
0000dc 2099      	TST  R9
0000dd f021      	BREQ _0xE
                 ; 0000 00E0     {
                 ; 0000 00E1       TCNT0=0xEA;  //11us
0000de eeea      	LDI  R30,LOW(234)
0000df bfe2      	OUT  0x32,R30
                 ; 0000 00E2       TCCR0=0x02;
0000e0 e0e2      	LDI  R30,LOW(2)
0000e1 bfe3      	OUT  0x33,R30
                 ; 0000 00E3     }
                 ; 0000 00E4 
                 ; 0000 00E5 adc_data[adc_wr_input][adc_wr_index] = adc_temp;
                 _0xE:
0000e2 2de8      	MOV  R30,R8
0000e3 e5a0      	LDI  R26,LOW(80)
0000e4 9fea      	MUL  R30,R26
0000e5 01f0      	MOVW R30,R0
0000e6 59ec      	SUBI R30,LOW(-_adc_data)
0000e7 4ffe      	SBCI R31,HIGH(-_adc_data)
0000e8 01df      	MOVW R26,R30
0000e9 2deb      	MOV  R30,R11
0000ea e0f0      	LDI  R31,0
0000eb 0fea      	ADD  R30,R26
0000ec 1ffb      	ADC  R31,R27
0000ed 8260      	ST   Z,R6
                 ; 0000 00E6 
                 ; 0000 00E7 if(adc_temp & 0x80)
0000ee fe67      	SBRS R6,7
0000ef c033      	RJMP _0xF
                 ; 0000 00E8 {
                 ; 0000 00E9   if(!isRising[adc_wr_input])
0000f0 940e 0280 	CALL SUBOPT_0x0
0000f2 81e0      	LD   R30,Z
0000f3 30e0      	CPI  R30,0
0000f4 f569      	BRNE _0x10
                 ; 0000 00EA   {
                 ; 0000 00EB     //Нарастающий
                 ; 0000 00EC     if(adc_wr_input == FREQUENCY_ADC_INPUT)
0000f5 e0e6      	LDI  R30,LOW(6)
0000f6 15e8      	CP   R30,R8
0000f7 f429      	BRNE _0x11
                 ; 0000 00ED     {
                 ; 0000 00EE         last_time = TCNT1;
                +
0000f8 b4cc     +IN R12 , 44
0000f9 b4dd     +IN R13 , 44 + 1
                 	__INWR 12,13,44
                 ; 0000 00EF         TCNT1H=0x00;
0000fa e0e0      	LDI  R30,LOW(0)
0000fb bded      	OUT  0x2D,R30
                 ; 0000 00F0         TCNT1L=0x00;
0000fc bdec      	OUT  0x2C,R30
                 ; 0000 00F1     }
                 ; 0000 00F2     adc_real[adc_wr_input] =  adc_current[adc_wr_input];
                 _0x11:
0000fd 2de8      	MOV  R30,R8
0000fe 940e 0285 	CALL SUBOPT_0x1
000100 0fea      	ADD  R30,R26
000101 1ffb      	ADC  R31,R27
000102 010f      	MOVW R0,R30
000103 940e 028b 	CALL SUBOPT_0x2
000105 940e 0318 	CALL __GETD1P
000107 01d0      	MOVW R26,R0
000108 940e 031e 	CALL __PUTDP1
                 ; 0000 00F3     adc_current[adc_wr_input] = 0;
00010a 940e 028b 	CALL SUBOPT_0x2
                +
00010c e0e0     +LDI R30 , LOW ( 0x0 )
00010d e0f0     +LDI R31 , HIGH ( 0x0 )
00010e e060     +LDI R22 , BYTE3 ( 0x0 )
00010f e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000110 940e 031e 	CALL __PUTDP1
                 ; 0000 00F4     isRising[adc_wr_input] = 1;
000112 940e 0280 	CALL SUBOPT_0x0
000114 e0a1      	LDI  R26,LOW(1)
000115 83a0      	STD  Z+0,R26
                 ; 0000 00F5     isUpdate[adc_wr_input] = adc_count[adc_wr_input];
000116 2da8      	MOV  R26,R8
000117 e0b0      	LDI  R27,0
000118 5ca4      	SUBI R26,LOW(-_isUpdate)
000119 4fbb      	SBCI R27,HIGH(-_isUpdate)
00011a 940e 0294 	CALL SUBOPT_0x3
00011c 81e0      	LD   R30,Z
00011d 93ec      	ST   X,R30
                 ; 0000 00F6     adc_count[adc_wr_input] = 0;
00011e 940e 0294 	CALL SUBOPT_0x3
000120 e0a0      	LDI  R26,LOW(0)
000121 83a0      	STD  Z+0,R26
                 ; 0000 00F7   }
                 ; 0000 00F8 }
                 _0x10:
                 ; 0000 00F9 else
000122 c010      	RJMP _0x12
                 _0xF:
                 ; 0000 00FA {
                 ; 0000 00FB   if(adc_temp < 120) isRising[adc_wr_input] = 0;
000123 e7e8      	LDI  R30,LOW(120)
000124 166e      	CP   R6,R30
000125 f420      	BRSH _0x13
000126 940e 0280 	CALL SUBOPT_0x0
000128 e0a0      	LDI  R26,LOW(0)
000129 83a0      	STD  Z+0,R26
                 ; 0000 00FC   adc_temp = 127 - adc_temp;
                 _0x13:
00012a 2de6      	MOV  R30,R6
00012b e0f0      	LDI  R31,0
00012c e7af      	LDI  R26,LOW(127)
00012d e0b0      	LDI  R27,HIGH(127)
00012e 940e 0323 	CALL __SWAPW12
000130 1bea      	SUB  R30,R26
000131 0bfb      	SBC  R31,R27
000132 2e6e      	MOV  R6,R30
                 ; 0000 00FD }
                 _0x12:
                 ; 0000 00FE 
                 ; 0000 00FF adc_temp &= 0x7F;
000133 e7ef      	LDI  R30,LOW(127)
000134 226e      	AND  R6,R30
                 ; 0000 0100 adc_current[adc_wr_input] += adc_temp * adc_temp;
000135 2de8      	MOV  R30,R8
000136 eea4      	LDI  R26,LOW(_adc_current)
000137 e0b3      	LDI  R27,HIGH(_adc_current)
000138 e0f0      	LDI  R31,0
000139 940e 02c9 	CALL __LSLW2
00013b 0fea      	ADD  R30,R26
00013c 1ffb      	ADC  R31,R27
00013d 93ff      	PUSH R31
00013e 93ef      	PUSH R30
00013f 01df      	MOVW R26,R30
000140 940e 0318 	CALL __GETD1P
000142 937f      	PUSH R23
000143 936f      	PUSH R22
000144 93ff      	PUSH R31
000145 93ef      	PUSH R30
000146 2da6      	MOV  R26,R6
000147 27bb      	CLR  R27
000148 2de6      	MOV  R30,R6
000149 e0f0      	LDI  R31,0
00014a 940e 02e0 	CALL __MULW12
00014c 91af      	POP  R26
00014d 91bf      	POP  R27
00014e 918f      	POP  R24
00014f 919f      	POP  R25
000150 940e 02d3 	CALL __CWD1
000152 940e 02c0 	CALL __ADDD12
000154 91af      	POP  R26
000155 91bf      	POP  R27
000156 940e 031e 	CALL __PUTDP1
                 ; 0000 0101 adc_count[adc_wr_input]++;
000158 2da8      	MOV  R26,R8
000159 e0b0      	LDI  R27,0
00015a 5dac      	SUBI R26,LOW(-_adc_count)
00015b 4fbb      	SBCI R27,HIGH(-_adc_count)
00015c 91ec      	LD   R30,X
00015d 5fef      	SUBI R30,-LOW(1)
00015e 93ec      	ST   X,R30
                 ; 0000 0102 
                 ; 0000 0103 // Select next ADC input
                 ; 0000 0104 if (++adc_wr_input > 7)
00015f 9483      	INC  R8
000160 e0e7      	LDI  R30,LOW(7)
000161 15e8      	CP   R30,R8
000162 f468      	BRSH _0x14
                 ; 0000 0105 {
                 ; 0000 0106     adc_wr_input = 0;
000163 2488      	CLR  R8
                 ; 0000 0107     if(++adc_wr_index >= ADC_BUF_SIZE) adc_wr_index = 0;
000164 94b3      	INC  R11
000165 e5e0      	LDI  R30,LOW(80)
000166 16be      	CP   R11,R30
000167 f008      	BRLO _0x15
000168 24bb      	CLR  R11
                 ; 0000 0108 	if(adc_wr_index == adc_rd_index)
                 _0x15:
000169 14ab      	CP   R10,R11
00016a f429      	BRNE _0x16
                 ; 0000 0109 	{
                 ; 0000 010A 		if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
00016b 94a3      	INC  R10
00016c e5e0      	LDI  R30,LOW(80)
00016d 16ae      	CP   R10,R30
00016e f008      	BRLO _0x17
00016f 24aa      	CLR  R10
                 ; 0000 010B 	}
                 _0x17:
                 ; 0000 010C }
                 _0x16:
                 ; 0000 010D }
                 _0x14:
000170 91e9      	LD   R30,Y+
000171 bfef      	OUT  SREG,R30
000172 91f9      	LD   R31,Y+
000173 91e9      	LD   R30,Y+
000174 91b9      	LD   R27,Y+
000175 91a9      	LD   R26,Y+
000176 9199      	LD   R25,Y+
000177 9189      	LD   R24,Y+
000178 9179      	LD   R23,Y+
000179 9169      	LD   R22,Y+
00017a 9019      	LD   R1,Y+
00017b 9009      	LD   R0,Y+
00017c 9518      	RETI
                 ;
                 ;unsigned char isqrt( unsigned int from)
                 ; 0000 0110 {
                 _isqrt:
                 ; 0000 0111      unsigned int mask = 0x4000, sqr = 0, temp;
                 ; 0000 0112      do
00017d 940e 032a 	CALL __SAVELOCR6
                 ;	from -> Y+6
                 ;	mask -> R16,R17
                 ;	sqr -> R18,R19
                 ;	temp -> R20,R21
                +
00017f e000     +LDI R16 , LOW ( 16384 )
000180 e410     +LDI R17 , HIGH ( 16384 )
                 	__GETWRN 16,17,16384
                +
000181 e020     +LDI R18 , LOW ( 0 )
000182 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x19:
                 ; 0000 0113      {
                 ; 0000 0114          temp = sqr | mask;
000183 01f8      	MOVW R30,R16
000184 2be2      	OR   R30,R18
000185 2bf3      	OR   R31,R19
000186 01af      	MOVW R20,R30
                 ; 0000 0115          sqr >>= 1;
000187 9536      	LSR  R19
000188 9527      	ROR  R18
                 ; 0000 0116          if( temp <= from ) {
000189 81ee      	LDD  R30,Y+6
00018a 81ff      	LDD  R31,Y+6+1
00018b 17e4      	CP   R30,R20
00018c 07f5      	CPC  R31,R21
00018d f030      	BRLO _0x1B
                 ; 0000 0117              sqr |= mask;
                +
00018e 2b20     +OR R18 , R16
00018f 2b31     +OR R19 , R17
                 	__ORWRR 18,19,16,17
                 ; 0000 0118              from -= temp;
000190 1be4      	SUB  R30,R20
000191 0bf5      	SBC  R31,R21
000192 83ee      	STD  Y+6,R30
000193 83ff      	STD  Y+6+1,R31
                 ; 0000 0119          }
                 ; 0000 011A      } while( mask >>= 2 );
                 _0x1B:
000194 01f8      	MOVW R30,R16
000195 940e 02ce 	CALL __LSRW2
000197 018f      	MOVW R16,R30
000198 9730      	SBIW R30,0
000199 f749      	BRNE _0x19
                 ; 0000 011B      //округление
                 ; 0000 011C      if( sqr < from ) ++sqr;
00019a 81ee      	LDD  R30,Y+6
00019b 81ff      	LDD  R31,Y+6+1
00019c 172e      	CP   R18,R30
00019d 073f      	CPC  R19,R31
00019e f410      	BRSH _0x1C
                +
00019f 5f2f     +SUBI R18 , LOW ( - 1 )
0001a0 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 011D      return (unsigned char)sqr;
                 _0x1C:
0001a1 2fe2      	MOV  R30,R18
0001a2 940e 0331 	CALL __LOADLOCR6
0001a4 9628      	ADIW R28,8
0001a5 9508      	RET
                 ; 0000 011E }
                 ;
                 ;inline void main_loop()
                 ; 0000 0121 {
                 _main_loop:
                 ; 0000 0122     char i, j;
                 ; 0000 0123     unsigned int s_tval;
                 ; 0000 0124     for(i=0; i<8; i++)
0001a6 940e 032c 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	j -> R16
                 ;	s_tval -> R18,R19
0001a8 e010      	LDI  R17,LOW(0)
                 _0x1E:
0001a9 3018      	CPI  R17,8
0001aa f548      	BRSH _0x1F
                 ; 0000 0125     {
                 ; 0000 0126         if(isUpdate[i])
0001ab 940e 0299 	CALL SUBOPT_0x4
0001ad 30e0      	CPI  R30,0
0001ae f119      	BREQ _0x20
                 ; 0000 0127         {
                 ; 0000 0128             s_tval = adc_real[i]/isUpdate[i];
0001af 2fe1      	MOV  R30,R17
0001b0 940e 0285 	CALL SUBOPT_0x1
0001b2 0fae      	ADD  R26,R30
0001b3 1fbf      	ADC  R27,R31
0001b4 940e 0318 	CALL __GETD1P
0001b6 01df      	MOVW R26,R30
0001b7 01cb      	MOVW R24,R22
0001b8 940e 0299 	CALL SUBOPT_0x4
0001ba e0f0      	LDI  R31,0
0001bb 940e 02d3 	CALL __CWD1
0001bd 940e 02e5 	CALL __DIVD21U
0001bf 019f      	MOVW R18,R30
                 ; 0000 0129             isUpdate[i] = 0;
0001c0 940e 029f 	CALL SUBOPT_0x5
0001c2 5ce4      	SUBI R30,LOW(-_isUpdate)
0001c3 4ffb      	SBCI R31,HIGH(-_isUpdate)
0001c4 e0a0      	LDI  R26,LOW(0)
0001c5 83a0      	STD  Z+0,R26
                 ; 0000 012A             s_val[i] = isqrt(s_tval);
0001c6 940e 029f 	CALL SUBOPT_0x5
0001c8 5de4      	SUBI R30,LOW(-_s_val)
0001c9 4ffb      	SBCI R31,HIGH(-_s_val)
0001ca 93ff      	PUSH R31
0001cb 93ef      	PUSH R30
0001cc 933a      	ST   -Y,R19
0001cd 932a      	ST   -Y,R18
0001ce dfae      	RCALL _isqrt
0001cf 91af      	POP  R26
0001d0 91bf      	POP  R27
0001d1 93ec      	ST   X,R30
                 ; 0000 012B         }
                 ; 0000 012C     }
                 _0x20:
0001d2 5f1f      	SUBI R17,-1
0001d3 cfd5      	RJMP _0x1E
                 _0x1F:
                 ; 0000 012D 
                 ; 0000 012E     if(rx_counter)
0001d4 2077      	TST  R7
0001d5 f411      	BRNE PC+3
0001d6 940c 022c 	JMP _0x21
                 ; 0000 012F     {
                 ; 0000 0130         switch(getchar())
0001d8 deb6      	RCALL _getchar
                 ; 0000 0131         {
                 ; 0000 0132             case 'U':
0001d9 35e5      	CPI  R30,LOW(0x55)
0001da f489      	BRNE _0x25
                 ; 0000 0133                 j = FIRST_U_ADC_INPUT + 3;
0001db e008      	LDI  R16,LOW(8)
                 ; 0000 0134                 while(adc_rd_index != adc_wr_index)
                 _0x26:
0001dc 14ba      	CP   R11,R10
0001dd f069      	BREQ _0x28
                 ; 0000 0135                 {
                 ; 0000 0136                         for(i=FIRST_U_ADC_INPUT; i<j; i++)
0001de e015      	LDI  R17,LOW(5)
                 _0x2A:
0001df 1710      	CP   R17,R16
0001e0 f420      	BRSH _0x2B
                 ; 0000 0137                         {
                 ; 0000 0138                             putchar(adc_data[i][adc_rd_index]);
0001e1 940e 02a2 	CALL SUBOPT_0x6
                 ; 0000 0139                         }
0001e3 5f1f      	SUBI R17,-1
0001e4 cffa      	RJMP _0x2A
                 _0x2B:
                 ; 0000 013A                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
0001e5 94a3      	INC  R10
0001e6 e5e0      	LDI  R30,LOW(80)
0001e7 16ae      	CP   R10,R30
0001e8 f008      	BRLO _0x2C
0001e9 24aa      	CLR  R10
                 ; 0000 013B                 }
                 _0x2C:
0001ea cff1      	RJMP _0x26
                 _0x28:
                 ; 0000 013C             break;
0001eb c040      	RJMP _0x24
                 ; 0000 013D             case 'I':
                 _0x25:
0001ec 34e9      	CPI  R30,LOW(0x49)
0001ed f489      	BRNE _0x2D
                 ; 0000 013E                 j = FIRST_I_ADC_INPUT + 3;
0001ee e004      	LDI  R16,LOW(4)
                 ; 0000 013F                 while(adc_rd_index != adc_wr_index)
                 _0x2E:
0001ef 14ba      	CP   R11,R10
0001f0 f069      	BREQ _0x30
                 ; 0000 0140                 {
                 ; 0000 0141                         for(i=FIRST_I_ADC_INPUT; i<j; i++)
0001f1 e011      	LDI  R17,LOW(1)
                 _0x32:
0001f2 1710      	CP   R17,R16
0001f3 f420      	BRSH _0x33
                 ; 0000 0142                         {
                 ; 0000 0143                             putchar(adc_data[i][adc_rd_index]);
0001f4 940e 02a2 	CALL SUBOPT_0x6
                 ; 0000 0144                         }
0001f6 5f1f      	SUBI R17,-1
0001f7 cffa      	RJMP _0x32
                 _0x33:
                 ; 0000 0145                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
0001f8 94a3      	INC  R10
0001f9 e5e0      	LDI  R30,LOW(80)
0001fa 16ae      	CP   R10,R30
0001fb f008      	BRLO _0x34
0001fc 24aa      	CLR  R10
                 ; 0000 0146                 }
                 _0x34:
0001fd cff1      	RJMP _0x2E
                 _0x30:
                 ; 0000 0147             break;
0001fe c02d      	RJMP _0x24
                 ; 0000 0148             case 'Z':
                 _0x2D:
0001ff 35ea      	CPI  R30,LOW(0x5A)
000200 f4c1      	BRNE _0x35
                 ; 0000 0149                 while(adc_rd_index != adc_wr_index)
                 _0x36:
000201 14ba      	CP   R11,R10
000202 f0a9      	BREQ _0x38
                 ; 0000 014A                 {
                 ; 0000 014B                     putchar(adc_data[ZU_ADC_INPUT][adc_rd_index]);
                +
000203 eaa4     +LDI R26 , LOW ( _adc_data + ( 320 ) )
000204 e0b2     +LDI R27 , HIGH ( _adc_data + ( 320 ) )
                 	__POINTW2MN _adc_data,320
000205 27ee      	CLR  R30
000206 0daa      	ADD  R26,R10
000207 1fbe      	ADC  R27,R30
000208 91ec      	LD   R30,X
000209 93ea      	ST   -Y,R30
00020a d06f      	RCALL _putchar
                 ; 0000 014C                     putchar(adc_data[ZI_ADC_INPUT][adc_rd_index]);
00020b 2dea      	MOV  R30,R10
00020c e0f0      	LDI  R31,0
00020d 59ec      	SUBI R30,LOW(-_adc_data)
00020e 4ffe      	SBCI R31,HIGH(-_adc_data)
00020f 81e0      	LD   R30,Z
000210 93ea      	ST   -Y,R30
000211 d068      	RCALL _putchar
                 ; 0000 014D 
                 ; 0000 014E                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000212 94a3      	INC  R10
000213 e5e0      	LDI  R30,LOW(80)
000214 16ae      	CP   R10,R30
000215 f008      	BRLO _0x39
000216 24aa      	CLR  R10
                 ; 0000 014F                 }
                 _0x39:
000217 cfe9      	RJMP _0x36
                 _0x38:
                 ; 0000 0150             break;
000218 c013      	RJMP _0x24
                 ; 0000 0151             case 'S':
                 _0x35:
000219 35e3      	CPI  R30,LOW(0x53)
00021a f489      	BRNE _0x24
                 ; 0000 0152                 // Период в тиках 250 КГц
                 ; 0000 0153                 putchar(last_time & 0xFF);
00021b 92ca      	ST   -Y,R12
00021c d05d      	RCALL _putchar
                 ; 0000 0154                 putchar(last_time >> 8);
00021d 2ded      	MOV  R30,R13
00021e 93ea      	ST   -Y,R30
00021f d05a      	RCALL _putchar
                 ; 0000 0155                 // Среднеквадратичные
                 ; 0000 0156                 for(i=0; i<8; i++)
000220 e010      	LDI  R17,LOW(0)
                 _0x3C:
000221 3018      	CPI  R17,8
000222 f448      	BRSH _0x3D
                 ; 0000 0157                 {
                 ; 0000 0158                     putchar(s_val[i]);
000223 940e 029f 	CALL SUBOPT_0x5
000225 5de4      	SUBI R30,LOW(-_s_val)
000226 4ffb      	SBCI R31,HIGH(-_s_val)
000227 81e0      	LD   R30,Z
000228 93ea      	ST   -Y,R30
000229 d050      	RCALL _putchar
                 ; 0000 0159                 }
00022a 5f1f      	SUBI R17,-1
00022b cff5      	RJMP _0x3C
                 _0x3D:
                 ; 0000 015A             break;
                 ; 0000 015B         }
                 _0x24:
                 ; 0000 015C     }
                 ; 0000 015D }
                 _0x21:
00022c 940e 0333 	CALL __LOADLOCR4
00022e 9624      	ADIW R28,4
00022f 9508      	RET
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0163 {
                 _main:
                 ; 0000 0164 // Declare your local variables here
                 ; 0000 0165 
                 ; 0000 0166 // Input/Output Ports initialization
                 ; 0000 0167 // Port A initialization
                 ; 0000 0168 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0169 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 016A PORTA=0x00;
000230 e0e0      	LDI  R30,LOW(0)
000231 bbeb      	OUT  0x1B,R30
                 ; 0000 016B DDRA=0x00;
000232 bbea      	OUT  0x1A,R30
                 ; 0000 016C 
                 ; 0000 016D // Port B initialization
                 ; 0000 016E // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 016F // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0170 PORTB=0x00;
000233 bbe8      	OUT  0x18,R30
                 ; 0000 0171 DDRB=0x20;
000234 e2e0      	LDI  R30,LOW(32)
000235 bbe7      	OUT  0x17,R30
                 ; 0000 0172 
                 ; 0000 0173 // Port C initialization
                 ; 0000 0174 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0175 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0176 PORTC=0x00;
000236 e0e0      	LDI  R30,LOW(0)
000237 bbe5      	OUT  0x15,R30
                 ; 0000 0177 DDRC=0x00;
000238 bbe4      	OUT  0x14,R30
                 ; 0000 0178 
                 ; 0000 0179 // Port D initialization
                 ; 0000 017A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 017B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 017C PORTD=0x00;
000239 bbe2      	OUT  0x12,R30
                 ; 0000 017D DDRD=0x00;
00023a bbe1      	OUT  0x11,R30
                 ; 0000 017E 
                 ; 0000 017F // Timer/Counter 0 initialization
                 ; 0000 0180 // Clock source: System Clock
                 ; 0000 0181 // Clock value: 2000,000 kHz
                 ; 0000 0182 // Mode: Normal top=0xFF
                 ; 0000 0183 // OC0 output: Disconnected
                 ; 0000 0184 //TCCR0=0x02;
                 ; 0000 0185 TCNT0=0xE2;
00023b eee2      	LDI  R30,LOW(226)
00023c bfe2      	OUT  0x32,R30
                 ; 0000 0186 OCR0=0x00;
00023d e0e0      	LDI  R30,LOW(0)
00023e bfec      	OUT  0x3C,R30
                 ; 0000 0187 
                 ; 0000 0188 // Timer/Counter 1 initialization
                 ; 0000 0189 // Clock source: System Clock
                 ; 0000 018A // Clock value: 250,000 kHz
                 ; 0000 018B // Mode: Normal top=0xFFFF
                 ; 0000 018C // OC1A output: Discon.
                 ; 0000 018D // OC1B output: Discon.
                 ; 0000 018E // Noise Canceler: Off
                 ; 0000 018F // Input Capture on Falling Edge
                 ; 0000 0190 // Timer1 Overflow Interrupt: Off
                 ; 0000 0191 // Input Capture Interrupt: Off
                 ; 0000 0192 // Compare A Match Interrupt: Off
                 ; 0000 0193 // Compare B Match Interrupt: Off
                 ; 0000 0194 TCCR1A=0x00;
00023f bdef      	OUT  0x2F,R30
                 ; 0000 0195 TCCR1B=0x03;
000240 e0e3      	LDI  R30,LOW(3)
000241 bdee      	OUT  0x2E,R30
                 ; 0000 0196 TCNT1H=0x00;
000242 e0e0      	LDI  R30,LOW(0)
000243 bded      	OUT  0x2D,R30
                 ; 0000 0197 TCNT1L=0x02;
000244 e0e2      	LDI  R30,LOW(2)
000245 bdec      	OUT  0x2C,R30
                 ; 0000 0198 ICR1H=0x00;
000246 e0e0      	LDI  R30,LOW(0)
000247 bde7      	OUT  0x27,R30
                 ; 0000 0199 ICR1L=0x00;
000248 bde6      	OUT  0x26,R30
                 ; 0000 019A OCR1AH=0x00;
000249 bdeb      	OUT  0x2B,R30
                 ; 0000 019B OCR1AL=0x00;
00024a bdea      	OUT  0x2A,R30
                 ; 0000 019C OCR1BH=0x00;
00024b bde9      	OUT  0x29,R30
                 ; 0000 019D OCR1BL=0x00;
00024c bde8      	OUT  0x28,R30
                 ; 0000 019E 
                 ; 0000 019F // Timer/Counter 2 initialization
                 ; 0000 01A0 // Clock source: System Clock
                 ; 0000 01A1 // Clock value: 250,000 kHz
                 ; 0000 01A2 // Mode: Normal top=0xFF
                 ; 0000 01A3 // OC2 output: Disconnected
                 ; 0000 01A4 ASSR=0x00;
00024d bde2      	OUT  0x22,R30
                 ; 0000 01A5 TCCR2=0x04;
00024e e0e4      	LDI  R30,LOW(4)
00024f bde5      	OUT  0x25,R30
                 ; 0000 01A6 TCNT2=0x06;
000250 e0e6      	LDI  R30,LOW(6)
000251 bde4      	OUT  0x24,R30
                 ; 0000 01A7 OCR2=0x00;
000252 e0e0      	LDI  R30,LOW(0)
000253 bde3      	OUT  0x23,R30
                 ; 0000 01A8 
                 ; 0000 01A9 // External Interrupt(s) initialization
                 ; 0000 01AA // INT0: Off
                 ; 0000 01AB // INT1: Off
                 ; 0000 01AC // INT2: Off
                 ; 0000 01AD MCUCR=0x00;
000254 bfe5      	OUT  0x35,R30
                 ; 0000 01AE MCUCSR=0x00;
000255 bfe4      	OUT  0x34,R30
                 ; 0000 01AF 
                 ; 0000 01B0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01B1 TIMSK=0x41;
000256 e4e1      	LDI  R30,LOW(65)
000257 bfe9      	OUT  0x39,R30
                 ; 0000 01B2 
                 ; 0000 01B3 // USART initialization
                 ; 0000 01B4 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01B5 // USART Receiver: On
                 ; 0000 01B6 // USART Transmitter: On
                 ; 0000 01B7 // USART Mode: Asynchronous
                 ; 0000 01B8 // USART Baud Rate: 115200
                 ; 0000 01B9 UCSRA=0x00;
000258 e0e0      	LDI  R30,LOW(0)
000259 b9eb      	OUT  0xB,R30
                 ; 0000 01BA UCSRB=0xD8;
00025a ede8      	LDI  R30,LOW(216)
00025b 940e 02af 	CALL SUBOPT_0x7
                 ; 0000 01BB UCSRC=0x86;
                 ; 0000 01BC UBRRH=0x00;
                 ; 0000 01BD UBRRL=0x08;
                 ; 0000 01BE 
                 ; 0000 01BF // USART initialization  // Без ТХ прерывания
                 ; 0000 01C0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01C1 // USART Receiver: On
                 ; 0000 01C2 // USART Transmitter: On
                 ; 0000 01C3 // USART Mode: Asynchronous
                 ; 0000 01C4 // USART Baud Rate: 115200
                 ; 0000 01C5 UCSRA=0x00;
00025d e0e0      	LDI  R30,LOW(0)
00025e b9eb      	OUT  0xB,R30
                 ; 0000 01C6 UCSRB=0x98;
00025f e9e8      	LDI  R30,LOW(152)
000260 940e 02af 	CALL SUBOPT_0x7
                 ; 0000 01C7 UCSRC=0x86;
                 ; 0000 01C8 UBRRH=0x00;
                 ; 0000 01C9 UBRRL=0x08;
                 ; 0000 01CA 
                 ; 0000 01CB // Analog Comparator initialization
                 ; 0000 01CC // Analog Comparator: Off
                 ; 0000 01CD // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01CE ACSR=0x80;
000262 e8e0      	LDI  R30,LOW(128)
000263 b9e8      	OUT  0x8,R30
                 ; 0000 01CF SFIOR=0x00;
000264 e0e0      	LDI  R30,LOW(0)
000265 bfe0      	OUT  0x30,R30
                 ; 0000 01D0 
                 ; 0000 01D1 // ADC initialization
                 ; 0000 01D2 // ADC Clock frequency: 250,000 kHz
                 ; 0000 01D3 // ADC Voltage Reference: AREF pin
                 ; 0000 01D4 // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 01D5 ADMUX=(ADC_VREF_TYPE & 0xff);
000266 b9e7      	OUT  0x7,R30
                 ; 0000 01D6 ADCSRA=0xAE;
000267 eaee      	LDI  R30,LOW(174)
000268 940e 02b7 	CALL SUBOPT_0x8
                 ; 0000 01D7 SFIOR&=0x1F;
                 ; 0000 01D8 SFIOR|=0x80;
                 ; 0000 01D9 
                 ; 0000 01DA // ADC initialization // На штатной частоте
                 ; 0000 01DB // ADC Clock frequency: 125,000 kHz
                 ; 0000 01DC // ADC Voltage Reference: AREF pin
                 ; 0000 01DD // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 01DE ADMUX= (ADC_VREF_TYPE & 0xff);
00026a b9e7      	OUT  0x7,R30
                 ; 0000 01DF ADCSRA=0xAF;
00026b eaef      	LDI  R30,LOW(175)
00026c 940e 02b7 	CALL SUBOPT_0x8
                 ; 0000 01E0 SFIOR&=0x1F;
                 ; 0000 01E1 SFIOR|=0x80;
                 ; 0000 01E2 
                 ; 0000 01E3 // SPI initialization
                 ; 0000 01E4 // SPI disabled
                 ; 0000 01E5 SPCR=0x00;
00026e b9ed      	OUT  0xD,R30
                 ; 0000 01E6 
                 ; 0000 01E7 // TWI initialization
                 ; 0000 01E8 // TWI disabled
                 ; 0000 01E9 TWCR=0x00;
00026f e0e0      	LDI  R30,LOW(0)
000270 bfe6      	OUT  0x36,R30
                 ; 0000 01EA 
                 ; 0000 01EB // Watchdog Timer initialization
                 ; 0000 01EC // Watchdog Timer Prescaler: OSC/256k
                 ; 0000 01ED #pragma optsize-
                 ; 0000 01EE WDTCR=0x1C;
000271 e1ec      	LDI  R30,LOW(28)
000272 bde1      	OUT  0x21,R30
                 ; 0000 01EF WDTCR=0x0C;
000273 e0ec      	LDI  R30,LOW(12)
000274 bde1      	OUT  0x21,R30
                 ; 0000 01F0 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 01F1 #pragma optsize+
                 ; 0000 01F2 #endif
                 ; 0000 01F3 
                 ; 0000 01F4 // Global enable interrupts
                 ; 0000 01F5 #asm("sei")
000275 9478      	sei
                 ; 0000 01F6 
                 ; 0000 01F7 while (1)
                 _0x3E:
                 ; 0000 01F8       {
                 ; 0000 01F9       #asm("wdr")
000276 95a8      	wdr
                 ; 0000 01FA       main_loop();
000277 df2e      	RCALL _main_loop
                 ; 0000 01FB       }
000278 cffd      	RJMP _0x3E
                 ; 0000 01FC }
                 _0x41:
000279 cfff      	RJMP _0x41
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
00027a 9b5d           sbis usr,udre
00027b cffe           rjmp putchar0
00027c 81e8           ld   r30,y
00027d b9ec           out  udr,r30
00027e 9621      	ADIW R28,1
00027f 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x4
                 _adc_data:
000164           	.BYTE 0x280
                 _adc_current:
0003e4           	.BYTE 0x20
                 _adc_real:
000404           	.BYTE 0x20
                 _adc_count:
000424           	.BYTE 0x8
                 _s_val:
00042c           	.BYTE 0x8
                 _isRising:
000434           	.BYTE 0x8
                 _isUpdate:
00043c           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000280 2de8      	MOV  R30,R8
000281 e0f0      	LDI  R31,0
000282 5cec      	SUBI R30,LOW(-_isRising)
000283 4ffb      	SBCI R31,HIGH(-_isRising)
000284 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000285 e0a4      	LDI  R26,LOW(_adc_real)
000286 e0b4      	LDI  R27,HIGH(_adc_real)
000287 e0f0      	LDI  R31,0
000288 940e 02c9 	CALL __LSLW2
00028a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00028b 2de8      	MOV  R30,R8
00028c eea4      	LDI  R26,LOW(_adc_current)
00028d e0b3      	LDI  R27,HIGH(_adc_current)
00028e e0f0      	LDI  R31,0
00028f 940e 02c9 	CALL __LSLW2
000291 0fae      	ADD  R26,R30
000292 1fbf      	ADC  R27,R31
000293 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000294 2de8      	MOV  R30,R8
000295 e0f0      	LDI  R31,0
000296 5dec      	SUBI R30,LOW(-_adc_count)
000297 4ffb      	SBCI R31,HIGH(-_adc_count)
000298 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000299 2fe1      	MOV  R30,R17
00029a e0f0      	LDI  R31,0
00029b 5ce4      	SUBI R30,LOW(-_isUpdate)
00029c 4ffb      	SBCI R31,HIGH(-_isUpdate)
00029d 81e0      	LD   R30,Z
00029e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00029f 2fe1      	MOV  R30,R17
0002a0 e0f0      	LDI  R31,0
0002a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
0002a2 e5a0      	LDI  R26,LOW(80)
0002a3 9f1a      	MUL  R17,R26
0002a4 01f0      	MOVW R30,R0
0002a5 59ec      	SUBI R30,LOW(-_adc_data)
0002a6 4ffe      	SBCI R31,HIGH(-_adc_data)
0002a7 01df      	MOVW R26,R30
0002a8 27ee      	CLR  R30
0002a9 0daa      	ADD  R26,R10
0002aa 1fbe      	ADC  R27,R30
0002ab 91ec      	LD   R30,X
0002ac 93ea      	ST   -Y,R30
0002ad 940c 027a 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0002af b9ea      	OUT  0xA,R30
0002b0 e8e6      	LDI  R30,LOW(134)
0002b1 bde0      	OUT  0x20,R30
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 bde0      	OUT  0x20,R30
0002b4 e0e8      	LDI  R30,LOW(8)
0002b5 b9e9      	OUT  0x9,R30
0002b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0002b7 b9e6      	OUT  0x6,R30
0002b8 b7e0      	IN   R30,0x30
0002b9 71ef      	ANDI R30,LOW(0x1F)
0002ba bfe0      	OUT  0x30,R30
0002bb b7e0      	IN   R30,0x30
0002bc 68e0      	ORI  R30,0x80
0002bd bfe0      	OUT  0x30,R30
0002be e0e0      	LDI  R30,LOW(0)
0002bf 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
0002c0 0fea      	ADD  R30,R26
0002c1 1ffb      	ADC  R31,R27
0002c2 1f68      	ADC  R22,R24
0002c3 1f79      	ADC  R23,R25
0002c4 9508      	RET
                 
                 __ANEGW1:
0002c5 95f1      	NEG  R31
0002c6 95e1      	NEG  R30
0002c7 40f0      	SBCI R31,0
0002c8 9508      	RET
                 
                 __LSLW2:
0002c9 0fee      	LSL  R30
0002ca 1fff      	ROL  R31
0002cb 0fee      	LSL  R30
0002cc 1fff      	ROL  R31
0002cd 9508      	RET
                 
                 __LSRW2:
0002ce 95f6      	LSR  R31
0002cf 95e7      	ROR  R30
0002d0 95f6      	LSR  R31
0002d1 95e7      	ROR  R30
0002d2 9508      	RET
                 
                 __CWD1:
0002d3 2f6f      	MOV  R22,R31
0002d4 0f66      	ADD  R22,R22
0002d5 0b66      	SBC  R22,R22
0002d6 2f76      	MOV  R23,R22
0002d7 9508      	RET
                 
                 __MULW12U:
0002d8 9ffa      	MUL  R31,R26
0002d9 2df0      	MOV  R31,R0
0002da 9feb      	MUL  R30,R27
0002db 0df0      	ADD  R31,R0
0002dc 9fea      	MUL  R30,R26
0002dd 2de0      	MOV  R30,R0
0002de 0df1      	ADD  R31,R1
0002df 9508      	RET
                 
                 __MULW12:
0002e0 d029      	RCALL __CHKSIGNW
0002e1 dff6      	RCALL __MULW12U
0002e2 f40e      	BRTC __MULW121
0002e3 dfe1      	RCALL __ANEGW1
                 __MULW121:
0002e4 9508      	RET
                 
                 __DIVD21U:
0002e5 933f      	PUSH R19
0002e6 934f      	PUSH R20
0002e7 935f      	PUSH R21
0002e8 2400      	CLR  R0
0002e9 2411      	CLR  R1
0002ea 2744      	CLR  R20
0002eb 2755      	CLR  R21
0002ec e230      	LDI  R19,32
                 __DIVD21U1:
0002ed 0faa      	LSL  R26
0002ee 1fbb      	ROL  R27
0002ef 1f88      	ROL  R24
0002f0 1f99      	ROL  R25
0002f1 1c00      	ROL  R0
0002f2 1c11      	ROL  R1
0002f3 1f44      	ROL  R20
0002f4 1f55      	ROL  R21
0002f5 1a0e      	SUB  R0,R30
0002f6 0a1f      	SBC  R1,R31
0002f7 0b46      	SBC  R20,R22
0002f8 0b57      	SBC  R21,R23
0002f9 f428      	BRCC __DIVD21U2
0002fa 0e0e      	ADD  R0,R30
0002fb 1e1f      	ADC  R1,R31
0002fc 1f46      	ADC  R20,R22
0002fd 1f57      	ADC  R21,R23
0002fe c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0002ff 60a1      	SBR  R26,1
                 __DIVD21U3:
000300 953a      	DEC  R19
000301 f759      	BRNE __DIVD21U1
000302 01fd      	MOVW R30,R26
000303 01bc      	MOVW R22,R24
000304 01d0      	MOVW R26,R0
000305 01ca      	MOVW R24,R20
000306 915f      	POP  R21
000307 914f      	POP  R20
000308 913f      	POP  R19
000309 9508      	RET
                 
                 __CHKSIGNW:
00030a 94e8      	CLT
00030b fff7      	SBRS R31,7
00030c c002      	RJMP __CHKSW1
00030d dfb7      	RCALL __ANEGW1
00030e 9468      	SET
                 __CHKSW1:
00030f ffb7      	SBRS R27,7
000310 c006      	RJMP __CHKSW2
000311 95a0      	COM  R26
000312 95b0      	COM  R27
000313 9611      	ADIW R26,1
000314 f800      	BLD  R0,0
000315 9403      	INC  R0
000316 fa00      	BST  R0,0
                 __CHKSW2:
000317 9508      	RET
                 
                 __GETD1P:
000318 91ed      	LD   R30,X+
000319 91fd      	LD   R31,X+
00031a 916d      	LD   R22,X+
00031b 917c      	LD   R23,X
00031c 9713      	SBIW R26,3
00031d 9508      	RET
                 
                 __PUTDP1:
00031e 93ed      	ST   X+,R30
00031f 93fd      	ST   X+,R31
000320 936d      	ST   X+,R22
000321 937c      	ST   X,R23
000322 9508      	RET
                 
                 __SWAPW12:
000323 2e1b      	MOV  R1,R27
000324 2fbf      	MOV  R27,R31
000325 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000326 2e1a      	MOV  R1,R26
000327 2fae      	MOV  R26,R30
000328 2de1      	MOV  R30,R1
000329 9508      	RET
                 
                 __SAVELOCR6:
00032a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00032b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00032c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00032d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00032e 931a      	ST   -Y,R17
00032f 930a      	ST   -Y,R16
000330 9508      	RET
                 
                 __LOADLOCR6:
000331 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000332 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000333 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000334 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000335 8119      	LDD  R17,Y+1
000336 8108      	LD   R16,Y
000337 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  21 r1 :  12 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   9 r7 :   6 
r8 :  13 r9 :   6 r10:  19 r11:   8 r12:   2 r13:   2 r14:   0 r15:   0 
r16:  15 r17:  28 r18:  11 r19:  13 r20:  12 r21:  10 r22:  19 r23:  10 
r24:  15 r25:   7 r26:  60 r27:  32 r28:   4 r29:   1 r30: 270 r31:  71 
x  :  17 y  :  69 z  :  19 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  12 
adiw  :   4 and   :   1 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  19 brpl  :   0 brsh  :   8 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  41 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  19 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  20 cpc   :   2 cpi   :   8 cpse  :   0 dec   :   3 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :  10 jmp   :  24 ld    :  36 ldd   :   9 ldi   : 111 
lds   :   0 lpm   :   7 lsl   :   3 lsr   :   3 mov   :  37 movw  :  21 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   1 out   :  66 pop   :  11 push  :  11 rcall :  12 ret   :  26 
reti  :   4 rjmp  :  20 rol   :   9 ror   :   3 sbc   :   6 sbci  :  15 
sbi   :   1 sbic  :   1 sbis  :   1 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  47 std   :   6 sts   :   0 sub   :   3 subi  :  20 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 64 out of 116 (55.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000670   1612     36   1648   16384  10.1%
[.dseg] 0x000060 0x000444      0    740    740    1119  66.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
