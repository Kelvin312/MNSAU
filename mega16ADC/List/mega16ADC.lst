
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm Sat Aug 01 13:49:29 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1059): warning: Register r5 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1060): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1061): warning: Register r7 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1063): warning: Register r9 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1064): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1065): warning: Register r11 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1066): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega16ADC\List\mega16ADC.asm(1067): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _adc_rd_input=R6
                 	.DEF _adc_wr_input=R9
                 	.DEF _adc_wr_index=R8
                 	.DEF _adc_rd_index=R11
                 	.DEF _adc_temp=R10
                 	.DEF _adc_sqr=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00aa 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00a4 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0068 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 00f2 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _adc_coef_def:
00002a 005f
00002b 005f
00002c 005f
00002d 005f      	.DB  0x5F,0x0,0x5F,0x0,0x5F,0x0,0x5F,0x0
00002e 005f
00002f 005f
000030 005f
000031 005f      	.DB  0x5F,0x0,0x5F,0x0,0x5F,0x0,0x5F,0x0
000032 0000      	.DB  0x0,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 
                 __GLOBAL_INI_TBL:
000034 0001      	.DW  0x01
000035 0002      	.DW  0x02
000036 0066      	.DW  __REG_BIT_VARS*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003f e1f8      	LDI  R31,0x18
000040 bdf1      	OUT  WDTCR,R31
000041 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 033c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 28.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************
                 ;ADC Operation amplitude : 0.15 - 2.6 V
                 ;ADC Operation frequency : 10 - 200 Hz
                 ;ADC Convert time        : 0.530 / 1.0 ms
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0051 {
                 
                 	.CSEG
                 _usart_rx_isr:
000068 93ea      	ST   -Y,R30
000069 93fa      	ST   -Y,R31
00006a b7ef      	IN   R30,SREG
00006b 93ea      	ST   -Y,R30
                 ; 0000 0052 char status,data;
                 ; 0000 0053 status=UCSRA;
00006c 931a      	ST   -Y,R17
00006d 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00006e b11b      	IN   R17,11
                 ; 0000 0054 data=UDR;
00006f b10c      	IN   R16,12
                 ; 0000 0055 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000070 2fe1      	MOV  R30,R17
000071 71ec      	ANDI R30,LOW(0x1C)
000072 f489      	BRNE _0x3
                 ; 0000 0056    {
                 ; 0000 0057    rx_buffer[rx_wr_index++]=data;
000073 2de5      	MOV  R30,R5
000074 9453      	INC  R5
000075 e0f0      	LDI  R31,0
000076 5ae0      	SUBI R30,LOW(-_rx_buffer)
000077 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000078 8300      	ST   Z,R16
                 ; 0000 0058 #if RX_BUFFER_SIZE == 256
                 ; 0000 0059    // special case for receiver buffer size=256
                 ; 0000 005A    if (++rx_counter == 0)
                 ; 0000 005B       {
                 ; 0000 005C #else
                 ; 0000 005D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000079 e0e8      	LDI  R30,LOW(8)
00007a 15e5      	CP   R30,R5
00007b f409      	BRNE _0x4
00007c 2455      	CLR  R5
                 ; 0000 005E    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00007d 9473      	INC  R7
00007e e0e8      	LDI  R30,LOW(8)
00007f 15e7      	CP   R30,R7
000080 f419      	BRNE _0x5
                 ; 0000 005F       {
                 ; 0000 0060       rx_counter=0;
000081 2477      	CLR  R7
                 ; 0000 0061 #endif
                 ; 0000 0062       rx_buffer_overflow=1;
000082 9468      	SET
000083 f820      	BLD  R2,0
                 ; 0000 0063       }
                 ; 0000 0064    }
                 _0x5:
                 ; 0000 0065 }
                 _0x3:
000084 9109      	LD   R16,Y+
000085 9119      	LD   R17,Y+
000086 91e9      	LD   R30,Y+
000087 bfef      	OUT  SREG,R30
000088 91f9      	LD   R31,Y+
000089 91e9      	LD   R30,Y+
00008a 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 006C {
                 _getchar:
                 ; 0000 006D char data;
                 ; 0000 006E while (rx_counter==0);
00008b 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
00008c 2077      	TST  R7
00008d f3f1      	BREQ _0x6
                 ; 0000 006F data=rx_buffer[rx_rd_index++];
00008e 2de4      	MOV  R30,R4
00008f 9443      	INC  R4
000090 e0f0      	LDI  R31,0
000091 5ae0      	SUBI R30,LOW(-_rx_buffer)
000092 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000093 8110      	LD   R17,Z
                 ; 0000 0070 #if RX_BUFFER_SIZE != 256
                 ; 0000 0071 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000094 e0e8      	LDI  R30,LOW(8)
000095 15e4      	CP   R30,R4
000096 f409      	BRNE _0x9
000097 2444      	CLR  R4
                 ; 0000 0072 #endif
                 ; 0000 0073 #asm("cli")
                 _0x9:
000098 94f8      	cli
                 ; 0000 0074 --rx_counter;
000099 947a      	DEC  R7
                 ; 0000 0075 #asm("sei")
00009a 9478      	sei
                 ; 0000 0076 return data;
00009b 2fe1      	MOV  R30,R17
00009c 9119      	LD   R17,Y+
00009d 9508      	RET
                 ; 0000 0077 }
                 ;#pragma used-
                 ;#endif
                 ;/*
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 128
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ;{
                 ;if (tx_counter)
                 ;   {
                 ;   --tx_counter;
                 ;   UDR=tx_buffer[tx_rd_index++];
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
                 ;#endif
                 ;   }
                 ;}
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while (tx_counter == TX_BUFFER_SIZE);
                 ;#asm("cli")
                 ;if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
                 ;   {
                 ;   tx_buffer[tx_wr_index++]=c;
                 ;#if TX_BUFFER_SIZE != 256
                 ;   if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
                 ;#endif
                 ;   ++tx_counter;
                 ;   }
                 ;else
                 ;   UDR=c;
                 ;#asm("sei")
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;*/
                 ;// Standard Input/Output functions
                 ;//#include <stdio.h>
                 ;
                 ;#define _ALTERNATE_PUTCHAR_
                 ;void putchar(char c)
                 ; 0000 00AE {
                 _putchar:
                 ; 0000 00AF     // Wait for empty transmit buffer
                 ; 0000 00B0     while ( !(UCSRA & DATA_REGISTER_EMPTY) );
                 ;	c -> Y+0
                 _0xA:
00009e 9b5d      	SBIS 0xB,5
00009f cffe      	RJMP _0xA
                 ; 0000 00B1     // Start transmission
                 ; 0000 00B2     UDR = c;
0000a0 81e8      	LD   R30,Y
0000a1 b9ec      	OUT  0xC,R30
                 ; 0000 00B3 }
0000a2 9621      	ADIW R28,1
0000a3 9508      	RET
                 ;
                 ;#define MIGMIG PORTB.5
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00BA {
                 _timer0_ovf_isr:
0000a4 93ea      	ST   -Y,R30
                 ; 0000 00BB // Reinitialize Timer 0 value
                 ; 0000 00BC TCCR0=0x00;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bfe3      	OUT  0x33,R30
                 ; 0000 00BD TCNT0=0x00;
0000a7 bfe2      	OUT  0x32,R30
                 ; 0000 00BE }
0000a8 91e9      	LD   R30,Y+
0000a9 9518      	RETI
                 ;
                 ;#define FIRST_U_ADC_INPUT 5
                 ;#define FIRST_I_ADC_INPUT 1
                 ;#define ZU_ADC_INPUT 4
                 ;#define ZI_ADC_INPUT 0
                 ;#define FREQUENCY_ADC_INPUT 6
                 ;#define ADC_BUF_SIZE 62 //На 64 глючит
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;unsigned char adc_data[8][ADC_BUF_SIZE];
                 ;unsigned char adc_rd_input, adc_wr_input, adc_wr_index, adc_rd_index;
                 ;unsigned char adc_temp;
                 ;unsigned int adc_sqr;
                 ;unsigned long adc_current[8], adc_real[8];
                 ;unsigned char adc_count[8] = {0,0,0,0,0,0,0,0}, isUpdate[8] = {0,0,0,0,0,0,0,0}, s_val[8];
                 ;unsigned char isRising[8] = {0,0,0,0,0,0,0,0}, valClear[8] = {0,0,0,0,0,0,0,0};
                 ;unsigned int freg = 0, last_time = 0;
                 ;unsigned char freg_count = 0, isFregUpd = 0;
                 ;
                 ;eeprom unsigned int adc_coef_mem[9];
                 ;flash unsigned int adc_coef_def[9] = {95, 95, 95, 95, 95, 95, 95, 95, 0}; //95 попугаев
                 ;unsigned int adc_coef[9];
                 ;
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 00D9 {
                 _timer2_ovf_isr:
0000aa 93aa      	ST   -Y,R26
0000ab 93ea      	ST   -Y,R30
0000ac 93fa      	ST   -Y,R31
0000ad b7ef      	IN   R30,SREG
0000ae 93ea      	ST   -Y,R30
                 ; 0000 00DA // Reinitialize Timer2 value
                 ; 0000 00DB TCNT2=0x06;
0000af e0e6      	LDI  R30,LOW(6)
0000b0 bde4      	OUT  0x24,R30
                 ; 0000 00DC // Очищаем значения, если ничего не происходит больше 250 мс
                 ; 0000 00DD {
                 ; 0000 00DE valClear[0]++;
0000b1 91e0 03b8 	LDS  R30,_valClear
0000b3 5fef      	SUBI R30,-LOW(1)
0000b4 93e0 03b8 	STS  _valClear,R30
                 ; 0000 00DF valClear[1]++;
                +
0000b6 91e0 03b9+LDS R30 , _valClear + ( 1 )
                 	__GETB1MN _valClear,1
0000b8 5fef      	SUBI R30,-LOW(1)
                +
0000b9 93e0 03b9+STS _valClear + ( 1 ) , R30
                 	__PUTB1MN _valClear,1
                 ; 0000 00E0 valClear[2]++;
                +
0000bb 91e0 03ba+LDS R30 , _valClear + ( 2 )
                 	__GETB1MN _valClear,2
0000bd 5fef      	SUBI R30,-LOW(1)
                +
0000be 93e0 03ba+STS _valClear + ( 2 ) , R30
                 	__PUTB1MN _valClear,2
                 ; 0000 00E1 valClear[3]++;
                +
0000c0 91e0 03bb+LDS R30 , _valClear + ( 3 )
                 	__GETB1MN _valClear,3
0000c2 5fef      	SUBI R30,-LOW(1)
                +
0000c3 93e0 03bb+STS _valClear + ( 3 ) , R30
                 	__PUTB1MN _valClear,3
                 ; 0000 00E2 valClear[4]++;
                +
0000c5 91e0 03bc+LDS R30 , _valClear + ( 4 )
                 	__GETB1MN _valClear,4
0000c7 5fef      	SUBI R30,-LOW(1)
                +
0000c8 93e0 03bc+STS _valClear + ( 4 ) , R30
                 	__PUTB1MN _valClear,4
                 ; 0000 00E3 valClear[5]++;
                +
0000ca 91e0 03bd+LDS R30 , _valClear + ( 5 )
                 	__GETB1MN _valClear,5
0000cc 5fef      	SUBI R30,-LOW(1)
                +
0000cd 93e0 03bd+STS _valClear + ( 5 ) , R30
                 	__PUTB1MN _valClear,5
                 ; 0000 00E4 valClear[6]++;
                +
0000cf 91e0 03be+LDS R30 , _valClear + ( 6 )
                 	__GETB1MN _valClear,6
0000d1 5fef      	SUBI R30,-LOW(1)
                +
0000d2 93e0 03be+STS _valClear + ( 6 ) , R30
                 	__PUTB1MN _valClear,6
                 ; 0000 00E5 valClear[7]++;
                +
0000d4 91e0 03bf+LDS R30 , _valClear + ( 7 )
                 	__GETB1MN _valClear,7
0000d6 5fef      	SUBI R30,-LOW(1)
                +
0000d7 93e0 03bf+STS _valClear + ( 7 ) , R30
                 	__PUTB1MN _valClear,7
                 ; 0000 00E6 }
                 ; 0000 00E7 
                 ; 0000 00E8 if(adc_rd_input == 0 && adc_coef[8] == 0)
0000d9 e0e0      	LDI  R30,LOW(0)
0000da 15e6      	CP   R30,R6
0000db f411      	BRNE _0xE
0000dc d2db      	RCALL SUBOPT_0x0
0000dd f009      	BREQ _0xF
                 _0xE:
0000de c00d      	RJMP _0xD
                 _0xF:
                 ; 0000 00E9 {
                 ; 0000 00EA      TCNT0=0xEC; //10us
0000df eeec      	LDI  R30,LOW(236)
0000e0 bfe2      	OUT  0x32,R30
                 ; 0000 00EB      TCCR0=0x02;
0000e1 e0e2      	LDI  R30,LOW(2)
0000e2 bfe3      	OUT  0x33,R30
                 ; 0000 00EC      MIGMIG ^= 1;
0000e3 e0a0      	LDI  R26,0
0000e4 99c5      	SBIC 0x18,5
0000e5 e0a1      	LDI  R26,1
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 27ea      	EOR  R30,R26
0000e8 f411      	BRNE _0x10
0000e9 98c5      	CBI  0x18,5
0000ea c001      	RJMP _0x11
                 _0x10:
0000eb 9ac5      	SBI  0x18,5
                 _0x11:
                 ; 0000 00ED }
                 ; 0000 00EE }
                 _0xD:
0000ec 91e9      	LD   R30,Y+
0000ed bfef      	OUT  SREG,R30
0000ee 91f9      	LD   R31,Y+
0000ef 91e9      	LD   R30,Y+
0000f0 91a9      	LD   R26,Y+
0000f1 9518      	RETI
                 ;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00F4 {
                 _adc_isr:
0000f2 920a      	ST   -Y,R0
0000f3 921a      	ST   -Y,R1
0000f4 936a      	ST   -Y,R22
0000f5 937a      	ST   -Y,R23
0000f6 938a      	ST   -Y,R24
0000f7 939a      	ST   -Y,R25
0000f8 93aa      	ST   -Y,R26
0000f9 93ba      	ST   -Y,R27
0000fa 93ea      	ST   -Y,R30
0000fb 93fa      	ST   -Y,R31
0000fc b7ef      	IN   R30,SREG
0000fd 93ea      	ST   -Y,R30
                 ; 0000 00F5 // Read the AD conversion result
                 ; 0000 00F6     adc_sqr = ADCW;
                +
0000fe b0c4     +IN R12 , 4
0000ff b0d5     +IN R13 , 4 + 1
                 	__INWR 12,13,4
                 ; 0000 00F7 // Select next ADC input
                 ; 0000 00F8     adc_rd_input = adc_wr_input + 1;
000100 2de9      	MOV  R30,R9
000101 5fef      	SUBI R30,-LOW(1)
000102 2e6e      	MOV  R6,R30
                 ; 0000 00F9     if(adc_rd_input > 7) adc_rd_input = 0;
000103 e0e7      	LDI  R30,LOW(7)
000104 15e6      	CP   R30,R6
000105 f408      	BRSH _0x12
000106 2466      	CLR  R6
                 ; 0000 00FA     ADMUX=(ADC_VREF_TYPE & 0xff) | adc_rd_input;
                 _0x12:
000107 2de6      	MOV  R30,R6
000108 b9e7      	OUT  0x7,R30
                 ; 0000 00FB // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00FC     if(adc_rd_input || adc_coef[8])
000109 2066      	TST  R6
00010a f411      	BRNE _0x14
00010b d2ac      	RCALL SUBOPT_0x0
00010c f079      	BREQ _0x13
                 _0x14:
                 ; 0000 00FD     {
                 ; 0000 00FE       TCNT0=0xEC;  //10us
00010d eeec      	LDI  R30,LOW(236)
00010e bfe2      	OUT  0x32,R30
                 ; 0000 00FF       TCCR0=0x02;
00010f e0e2      	LDI  R30,LOW(2)
000110 bfe3      	OUT  0x33,R30
                 ; 0000 0100       if(adc_rd_input == 0) MIGMIG ^= 1;
000111 2066      	TST  R6
000112 f449      	BRNE _0x16
000113 e0a0      	LDI  R26,0
000114 99c5      	SBIC 0x18,5
000115 e0a1      	LDI  R26,1
000116 e0e1      	LDI  R30,LOW(1)
000117 27ea      	EOR  R30,R26
000118 f411      	BRNE _0x17
000119 98c5      	CBI  0x18,5
00011a c001      	RJMP _0x18
                 _0x17:
00011b 9ac5      	SBI  0x18,5
                 _0x18:
                 ; 0000 0101     }
                 _0x16:
                 ; 0000 0102 // Save ADC point
                 ; 0000 0103 adc_temp = adc_sqr>>2;
                 _0x13:
00011c 01f6      	MOVW R30,R12
00011d 940e 043b 	CALL __LSRW2
00011f 2eae      	MOV  R10,R30
                 ; 0000 0104 adc_data[adc_wr_input][adc_wr_index] = adc_temp;
000120 2de9      	MOV  R30,R9
000121 e3ae      	LDI  R26,LOW(62)
000122 9fea      	MUL  R30,R26
000123 01f0      	MOVW R30,R0
000124 59e8      	SUBI R30,LOW(-_adc_data)
000125 4ffe      	SBCI R31,HIGH(-_adc_data)
000126 01df      	MOVW R26,R30
000127 2de8      	MOV  R30,R8
000128 e0f0      	LDI  R31,0
000129 0fea      	ADD  R30,R26
00012a 1ffb      	ADC  R31,R27
00012b 82a0      	ST   Z,R10
                 ; 0000 0105 
                 ; 0000 0106 if(adc_temp & 0x80) //Положительная полуволна
00012c fea7      	SBRS R10,7
00012d c04e      	RJMP _0x19
                 ; 0000 0107 {
                 ; 0000 0108   if(!isRising[adc_wr_input]) //Нарастающий
00012e d28f      	RCALL SUBOPT_0x1
00012f 55e0      	SUBI R30,LOW(-_isRising)
000130 4ffc      	SBCI R31,HIGH(-_isRising)
000131 81e0      	LD   R30,Z
000132 30e0      	CPI  R30,0
000133 f011      	BREQ PC+3
000134 940c 017b 	JMP _0x1A
                 ; 0000 0109   {
                 ; 0000 010A     if(adc_wr_input == FREQUENCY_ADC_INPUT)
000136 e0e6      	LDI  R30,LOW(6)
000137 15e9      	CP   R30,R9
000138 f4a9      	BRNE _0x1B
                 ; 0000 010B     {
                 ; 0000 010C       if(++freg_count > 9) //10 периодов
000139 91a0 03c4 	LDS  R26,_freg_count
00013b 5faf      	SUBI R26,-LOW(1)
00013c 93a0 03c4 	STS  _freg_count,R26
00013e 30aa      	CPI  R26,LOW(0xA)
00013f f070      	BRLO _0x1C
                 ; 0000 010D       {
                 ; 0000 010E         last_time = TCNT1;
000140 b5ec      	IN   R30,0x2C
000141 b5fd      	IN   R31,0x2C+1
000142 93e0 03c2 	STS  _last_time,R30
000144 93f0 03c3 	STS  _last_time+1,R31
                 ; 0000 010F         TCNT1H=0x00;
000146 e0e0      	LDI  R30,LOW(0)
000147 bded      	OUT  0x2D,R30
                 ; 0000 0110         TCNT1L=0x00;
000148 bdec      	OUT  0x2C,R30
                 ; 0000 0111         freg_count = 0;
000149 93e0 03c4 	STS  _freg_count,R30
                 ; 0000 0112         isFregUpd = 1;
00014b e0e1      	LDI  R30,LOW(1)
00014c 93e0 03c5 	STS  _isFregUpd,R30
                 ; 0000 0113       }
                 ; 0000 0114     }
                 _0x1C:
                 ; 0000 0115     if(adc_count[adc_wr_input] > 110) //Если намерили достаточно
                 _0x1B:
00014e d26f      	RCALL SUBOPT_0x1
00014f 56e8      	SUBI R30,LOW(-_adc_count)
000150 4ffc      	SBCI R31,HIGH(-_adc_count)
000151 81a0      	LD   R26,Z
000152 36af      	CPI  R26,LOW(0x6F)
000153 f0e8      	BRLO _0x1D
                 ; 0000 0116     {
                 ; 0000 0117         adc_real[adc_wr_input] =  adc_current[adc_wr_input];
000154 2de9      	MOV  R30,R9
000155 d26b      	RCALL SUBOPT_0x2
000156 0fea      	ADD  R30,R26
000157 1ffb      	ADC  R31,R27
000158 010f      	MOVW R0,R30
000159 d26d      	RCALL SUBOPT_0x3
00015a 940e 04ae 	CALL __GETD1P
00015c 01d0      	MOVW R26,R0
00015d 940e 04b4 	CALL __PUTDP1
                 ; 0000 0118         adc_current[adc_wr_input] = 0;
00015f d267      	RCALL SUBOPT_0x3
                +
000160 e0e0     +LDI R30 , LOW ( 0x0 )
000161 e0f0     +LDI R31 , HIGH ( 0x0 )
000162 e060     +LDI R22 , BYTE3 ( 0x0 )
000163 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000164 d26b      	RCALL SUBOPT_0x4
                 ; 0000 0119         isUpdate[adc_wr_input] = adc_count[adc_wr_input];
000165 56a0      	SUBI R26,LOW(-_isUpdate)
000166 4fbc      	SBCI R27,HIGH(-_isUpdate)
000167 d256      	RCALL SUBOPT_0x1
000168 56e8      	SUBI R30,LOW(-_adc_count)
000169 4ffc      	SBCI R31,HIGH(-_adc_count)
00016a 81e0      	LD   R30,Z
00016b 93ec      	ST   X,R30
                 ; 0000 011A         adc_count[adc_wr_input] = 0;
00016c d251      	RCALL SUBOPT_0x1
00016d 56e8      	SUBI R30,LOW(-_adc_count)
00016e 4ffc      	SBCI R31,HIGH(-_adc_count)
00016f e0a0      	LDI  R26,LOW(0)
000170 83a0      	STD  Z+0,R26
                 ; 0000 011B     }
                 ; 0000 011C 
                 ; 0000 011D     valClear[adc_wr_input] = 0;
                 _0x1D:
000171 d24c      	RCALL SUBOPT_0x1
000172 54e8      	SUBI R30,LOW(-_valClear)
000173 4ffc      	SBCI R31,HIGH(-_valClear)
000174 e0a0      	LDI  R26,LOW(0)
000175 83a0      	STD  Z+0,R26
                 ; 0000 011E     isRising[adc_wr_input] = 1;
000176 d247      	RCALL SUBOPT_0x1
000177 55e0      	SUBI R30,LOW(-_isRising)
000178 4ffc      	SBCI R31,HIGH(-_isRising)
000179 e0a1      	LDI  R26,LOW(1)
00017a 83a0      	STD  Z+0,R26
                 ; 0000 011F   }
                 ; 0000 0120 }
                 _0x1A:
                 ; 0000 0121 else //Отрицательная
00017b c00d      	RJMP _0x1E
                 _0x19:
                 ; 0000 0122 {
                 ; 0000 0123   if(adc_temp < 121) isRising[adc_wr_input] = 0;
00017c e7e9      	LDI  R30,LOW(121)
00017d 16ae      	CP   R10,R30
00017e f428      	BRSH _0x1F
00017f d23e      	RCALL SUBOPT_0x1
000180 55e0      	SUBI R30,LOW(-_isRising)
000181 4ffc      	SBCI R31,HIGH(-_isRising)
000182 e0a0      	LDI  R26,LOW(0)
000183 83a0      	STD  Z+0,R26
                 ; 0000 0124   adc_sqr = 0x1FF - adc_sqr;
                 _0x1F:
000184 efef      	LDI  R30,LOW(511)
000185 e0f1      	LDI  R31,HIGH(511)
000186 19ec      	SUB  R30,R12
000187 09fd      	SBC  R31,R13
000188 016f      	MOVW R12,R30
                 ; 0000 0125 }
                 _0x1E:
                 ; 0000 0126 // Считаем квадраты
                 ; 0000 0127 adc_sqr &= 0x1FF;
000189 e0e1      	LDI  R30,LOW(1)
00018a 22de      	AND  R13,R30
                 ; 0000 0128 adc_sqr >>= 1;
00018b 94d6      	LSR  R13
00018c 94c7      	ROR  R12
                 ; 0000 0129 //adc_temp = adc_sqr;
                 ; 0000 012A adc_current[adc_wr_input] += adc_sqr * adc_sqr;
00018d 2de9      	MOV  R30,R9
00018e e5a8      	LDI  R26,LOW(_adc_current)
00018f e0b3      	LDI  R27,HIGH(_adc_current)
000190 e0f0      	LDI  R31,0
000191 940e 0436 	CALL __LSLW2
000193 0fea      	ADD  R30,R26
000194 1ffb      	ADC  R31,R27
000195 93ff      	PUSH R31
000196 93ef      	PUSH R30
000197 01df      	MOVW R26,R30
000198 940e 04ae 	CALL __GETD1P
00019a 937f      	PUSH R23
00019b 936f      	PUSH R22
00019c 93ff      	PUSH R31
00019d 93ef      	PUSH R30
00019e 01f6      	MOVW R30,R12
00019f 01d6      	MOVW R26,R12
0001a0 940e 0445 	CALL __MULW12U
0001a2 91af      	POP  R26
0001a3 91bf      	POP  R27
0001a4 918f      	POP  R24
0001a5 919f      	POP  R25
0001a6 2766      	CLR  R22
0001a7 2777      	CLR  R23
0001a8 940e 0429 	CALL __ADDD12
0001aa 91af      	POP  R26
0001ab 91bf      	POP  R27
0001ac d223      	RCALL SUBOPT_0x4
                 ; 0000 012B adc_count[adc_wr_input]++;
0001ad 56a8      	SUBI R26,LOW(-_adc_count)
0001ae 4fbc      	SBCI R27,HIGH(-_adc_count)
0001af 91ec      	LD   R30,X
0001b0 5fef      	SUBI R30,-LOW(1)
0001b1 93ec      	ST   X,R30
                 ; 0000 012C 
                 ; 0000 012D // Select next ADC input
                 ; 0000 012E if (++adc_wr_input > 7)
0001b2 9493      	INC  R9
0001b3 e0e7      	LDI  R30,LOW(7)
0001b4 15e9      	CP   R30,R9
0001b5 f468      	BRSH _0x20
                 ; 0000 012F {
                 ; 0000 0130     adc_wr_input = 0;
0001b6 2499      	CLR  R9
                 ; 0000 0131     if(++adc_wr_index >= ADC_BUF_SIZE) adc_wr_index = 0;
0001b7 9483      	INC  R8
0001b8 e3ee      	LDI  R30,LOW(62)
0001b9 168e      	CP   R8,R30
0001ba f008      	BRLO _0x21
0001bb 2488      	CLR  R8
                 ; 0000 0132     //Чтоб буфер не переполнился
                 ; 0000 0133     if(adc_wr_index == adc_rd_index)
                 _0x21:
0001bc 14b8      	CP   R11,R8
0001bd f429      	BRNE _0x22
                 ; 0000 0134     {
                 ; 0000 0135 		    if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
0001be 94b3      	INC  R11
0001bf e3ee      	LDI  R30,LOW(62)
0001c0 16be      	CP   R11,R30
0001c1 f008      	BRLO _0x23
0001c2 24bb      	CLR  R11
                 ; 0000 0136     }
                 _0x23:
                 ; 0000 0137 }
                 _0x22:
                 ; 0000 0138 }
                 _0x20:
0001c3 91e9      	LD   R30,Y+
0001c4 bfef      	OUT  SREG,R30
0001c5 91f9      	LD   R31,Y+
0001c6 91e9      	LD   R30,Y+
0001c7 91b9      	LD   R27,Y+
0001c8 91a9      	LD   R26,Y+
0001c9 9199      	LD   R25,Y+
0001ca 9189      	LD   R24,Y+
0001cb 9179      	LD   R23,Y+
0001cc 9169      	LD   R22,Y+
0001cd 9019      	LD   R1,Y+
0001ce 9009      	LD   R0,Y+
0001cf 9518      	RETI
                 ;
                 ;unsigned char isqrt( unsigned int from) //Корняизвлекатель
                 ; 0000 013B {
                 _isqrt:
                 ; 0000 013C      unsigned int mask = 0x4000, sqr = 0, temp;
                 ; 0000 013D      do
0001d0 940e 04ed 	CALL __SAVELOCR6
                 ;	from -> Y+6
                 ;	mask -> R16,R17
                 ;	sqr -> R18,R19
                 ;	temp -> R20,R21
                +
0001d2 e000     +LDI R16 , LOW ( 16384 )
0001d3 e410     +LDI R17 , HIGH ( 16384 )
                 	__GETWRN 16,17,16384
                +
0001d4 e020     +LDI R18 , LOW ( 0 )
0001d5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x25:
                 ; 0000 013E      {
                 ; 0000 013F          temp = sqr | mask;
0001d6 01f8      	MOVW R30,R16
0001d7 2be2      	OR   R30,R18
0001d8 2bf3      	OR   R31,R19
0001d9 01af      	MOVW R20,R30
                 ; 0000 0140          sqr >>= 1;
0001da 9536      	LSR  R19
0001db 9527      	ROR  R18
                 ; 0000 0141          if( temp <= from ) {
0001dc 81ee      	LDD  R30,Y+6
0001dd 81ff      	LDD  R31,Y+6+1
0001de 17e4      	CP   R30,R20
0001df 07f5      	CPC  R31,R21
0001e0 f030      	BRLO _0x27
                 ; 0000 0142              sqr |= mask;
                +
0001e1 2b20     +OR R18 , R16
0001e2 2b31     +OR R19 , R17
                 	__ORWRR 18,19,16,17
                 ; 0000 0143              from -= temp;
0001e3 1be4      	SUB  R30,R20
0001e4 0bf5      	SBC  R31,R21
0001e5 83ee      	STD  Y+6,R30
0001e6 83ff      	STD  Y+6+1,R31
                 ; 0000 0144          }
                 ; 0000 0145      } while( mask >>= 2 );
                 _0x27:
0001e7 01f8      	MOVW R30,R16
0001e8 940e 043b 	CALL __LSRW2
0001ea 018f      	MOVW R16,R30
0001eb 9730      	SBIW R30,0
0001ec f749      	BRNE _0x25
                 ; 0000 0146      //округление
                 ; 0000 0147      if( sqr < from ) ++sqr;
0001ed 81ee      	LDD  R30,Y+6
0001ee 81ff      	LDD  R31,Y+6+1
0001ef 172e      	CP   R18,R30
0001f0 073f      	CPC  R19,R31
0001f1 f410      	BRSH _0x28
                +
0001f2 5f2f     +SUBI R18 , LOW ( - 1 )
0001f3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0148      return (unsigned char)sqr;
                 _0x28:
0001f4 2fe2      	MOV  R30,R18
0001f5 940e 04f4 	CALL __LOADLOCR6
0001f7 9628      	ADIW R28,8
0001f8 9508      	RET
                 ; 0000 0149 }
                 ;
                 ;inline void main_loop()
                 ; 0000 014C {
                 _main_loop:
                 ; 0000 014D     signed char i;
                 ; 0000 014E     unsigned int s_tval;
                 ; 0000 014F     for(i=0; i<8; i++)
0001f9 940e 04ef 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	s_tval -> R18,R19
0001fb e010      	LDI  R17,LOW(0)
                 _0x2A:
0001fc 3018      	CPI  R17,8
0001fd f014      	BRLT PC+3
0001fe 940c 024b 	JMP _0x2B
                 ; 0000 0150     {
                 ; 0000 0151         if(valClear[i] > 250) //Нет периодов
000200 d1d4      	RCALL SUBOPT_0x5
000201 81a0      	LD   R26,Z
000202 3fab      	CPI  R26,LOW(0xFB)
000203 f060      	BRLO _0x2C
                 ; 0000 0152         {
                 ; 0000 0153             valClear[i] = 0;
000204 d1d0      	RCALL SUBOPT_0x5
000205 d1d4      	RCALL SUBOPT_0x6
                 ; 0000 0154             s_val[i] = 0;
000206 e0a0      	LDI  R26,LOW(0)
000207 83a0      	STD  Z+0,R26
                 ; 0000 0155             if(i == FREQUENCY_ADC_INPUT) freg = 0;
000208 3016      	CPI  R17,6
000209 f429      	BRNE _0x2D
00020a e0e0      	LDI  R30,LOW(0)
00020b 93e0 03c0 	STS  _freg,R30
00020d 93e0 03c1 	STS  _freg+1,R30
                 ; 0000 0156         }
                 _0x2D:
                 ; 0000 0157         else
00020f c039      	RJMP _0x2E
                 _0x2C:
                 ; 0000 0158         if(isUpdate[i])
000210 d1d0      	RCALL SUBOPT_0x7
000211 30e0      	CPI  R30,0
000212 f1b1      	BREQ _0x2F
                 ; 0000 0159         {
                 ; 0000 015A             // sqrt( сумма(X^2) * coef / (count * 255) )
                 ; 0000 015B             s_tval = (adc_real[i]*adc_coef[i])/((unsigned long)isUpdate[i]*400);
000213 2fe1      	MOV  R30,R17
000214 d1ac      	RCALL SUBOPT_0x2
000215 0fae      	ADD  R26,R30
000216 1fbf      	ADC  R27,R31
000217 940e 04ae 	CALL __GETD1P
000219 937f      	PUSH R23
00021a 936f      	PUSH R22
00021b 93ff      	PUSH R31
00021c 93ef      	PUSH R30
00021d d1c9      	RCALL SUBOPT_0x8
00021e 940e 04aa 	CALL __GETW1P
000220 91af      	POP  R26
000221 91bf      	POP  R27
000222 918f      	POP  R24
000223 919f      	POP  R25
000224 2766      	CLR  R22
000225 2777      	CLR  R23
000226 940e 044d 	CALL __MULD12U
000228 937f      	PUSH R23
000229 936f      	PUSH R22
00022a 93ff      	PUSH R31
00022b 93ef      	PUSH R30
00022c d1b4      	RCALL SUBOPT_0x7
00022d e0f0      	LDI  R31,0
00022e 940e 0440 	CALL __CWD1
                +
000230 e9a0     +LDI R26 , LOW ( 0x190 )
000231 e0b1     +LDI R27 , HIGH ( 0x190 )
000232 e080     +LDI R24 , BYTE3 ( 0x190 )
000233 e090     +LDI R25 , BYTE4 ( 0x190 )
                 	__GETD2N 0x190
000234 940e 044d 	CALL __MULD12U
000236 91af      	POP  R26
000237 91bf      	POP  R27
000238 918f      	POP  R24
000239 919f      	POP  R25
00023a 940e 046d 	CALL __DIVD21U
00023c 019f      	MOVW R18,R30
                 ; 0000 015C             isUpdate[i] = 0;
00023d d1b2      	RCALL SUBOPT_0x9
00023e 56e0      	SUBI R30,LOW(-_isUpdate)
00023f 4ffc      	SBCI R31,HIGH(-_isUpdate)
000240 d199      	RCALL SUBOPT_0x6
                 ; 0000 015D             s_val[i] = isqrt(s_tval);
000241 93ff      	PUSH R31
000242 93ef      	PUSH R30
000243 933a      	ST   -Y,R19
000244 932a      	ST   -Y,R18
000245 df8a      	RCALL _isqrt
000246 91af      	POP  R26
000247 91bf      	POP  R27
000248 93ec      	ST   X,R30
                 ; 0000 015E         }
                 ; 0000 015F 
                 ; 0000 0160     }
                 _0x2F:
                 _0x2E:
000249 5f1f      	SUBI R17,-1
00024a cfb1      	RJMP _0x2A
                 _0x2B:
                 ; 0000 0161     if(isFregUpd)
00024b 91e0 03c5 	LDS  R30,_isFregUpd
00024d 30e0      	CPI  R30,0
00024e f099      	BREQ _0x30
                 ; 0000 0162     {
                 ; 0000 0163       // 10 периодов в тиках 62,500 kHz
                 ; 0000 0164       freg = 625000 / last_time;
00024f 91e0 03c2 	LDS  R30,_last_time
000251 91f0 03c3 	LDS  R31,_last_time+1
000253 2766      	CLR  R22
000254 2777      	CLR  R23
                +
000255 e6a8     +LDI R26 , LOW ( 0x98968 )
000256 e8b9     +LDI R27 , HIGH ( 0x98968 )
000257 e089     +LDI R24 , BYTE3 ( 0x98968 )
000258 e090     +LDI R25 , BYTE4 ( 0x98968 )
                 	__GETD2N 0x98968
000259 940e 0492 	CALL __DIVD21
00025b 93e0 03c0 	STS  _freg,R30
00025d 93f0 03c1 	STS  _freg+1,R31
                 ; 0000 0165       isFregUpd = 0;
00025f e0e0      	LDI  R30,LOW(0)
000260 93e0 03c5 	STS  _isFregUpd,R30
                 ; 0000 0166     }
                 ; 0000 0167 
                 ; 0000 0168     if(rx_counter)
                 _0x30:
000262 2077      	TST  R7
000263 f411      	BRNE PC+3
000264 940c 0338 	JMP _0x31
                 ; 0000 0169     {
                 ; 0000 016A         switch(getchar())
000266 de24      	RCALL _getchar
                 ; 0000 016B         {
                 ; 0000 016C             case 'U':
000267 35e5      	CPI  R30,LOW(0x55)
000268 f481      	BRNE _0x35
                 ; 0000 016D                 while(adc_rd_index != adc_wr_index)
                 _0x36:
000269 148b      	CP   R8,R11
00026a f069      	BREQ _0x38
                 ; 0000 016E                 {
                 ; 0000 016F                         for(i=FIRST_U_ADC_INPUT+2; i >= FIRST_U_ADC_INPUT; i--)
00026b e017      	LDI  R17,LOW(7)
                 _0x3A:
00026c 3015      	CPI  R17,5
00026d f01c      	BRLT _0x3B
                 ; 0000 0170                         {
                 ; 0000 0171                             putchar(adc_data[i][adc_rd_index]);
00026e d184      	RCALL SUBOPT_0xA
                 ; 0000 0172                         }
00026f 5011      	SUBI R17,1
000270 cffb      	RJMP _0x3A
                 _0x3B:
                 ; 0000 0173                         #asm("wdr")
000271 95a8      	wdr
                 ; 0000 0174                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000272 94b3      	INC  R11
000273 e3ee      	LDI  R30,LOW(62)
000274 16be      	CP   R11,R30
000275 f008      	BRLO _0x3C
000276 24bb      	CLR  R11
                 ; 0000 0175                 }
                 _0x3C:
000277 cff1      	RJMP _0x36
                 _0x38:
                 ; 0000 0176             break;
000278 c0bf      	RJMP _0x34
                 ; 0000 0177             case 'I':
                 _0x35:
000279 34e9      	CPI  R30,LOW(0x49)
00027a f481      	BRNE _0x3D
                 ; 0000 0178                 while(adc_rd_index != adc_wr_index)
                 _0x3E:
00027b 148b      	CP   R8,R11
00027c f069      	BREQ _0x40
                 ; 0000 0179                 {
                 ; 0000 017A                         for(i=FIRST_I_ADC_INPUT+2; i >= FIRST_I_ADC_INPUT; i--)
00027d e013      	LDI  R17,LOW(3)
                 _0x42:
00027e 3011      	CPI  R17,1
00027f f01c      	BRLT _0x43
                 ; 0000 017B                         {
                 ; 0000 017C                             putchar(adc_data[i][adc_rd_index]);
000280 d172      	RCALL SUBOPT_0xA
                 ; 0000 017D                         }
000281 5011      	SUBI R17,1
000282 cffb      	RJMP _0x42
                 _0x43:
                 ; 0000 017E                         #asm("wdr")
000283 95a8      	wdr
                 ; 0000 017F                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
000284 94b3      	INC  R11
000285 e3ee      	LDI  R30,LOW(62)
000286 16be      	CP   R11,R30
000287 f008      	BRLO _0x44
000288 24bb      	CLR  R11
                 ; 0000 0180                 }
                 _0x44:
000289 cff1      	RJMP _0x3E
                 _0x40:
                 ; 0000 0181             break;
00028a c0ad      	RJMP _0x34
                 ; 0000 0182             case 'Z':
                 _0x3D:
00028b 35ea      	CPI  R30,LOW(0x5A)
00028c f4b9      	BRNE _0x45
                 ; 0000 0183                 while(adc_rd_index != adc_wr_index)
                 _0x46:
00028d 148b      	CP   R8,R11
00028e f0a1      	BREQ _0x48
                 ; 0000 0184                 {
                 ; 0000 0185                     putchar(adc_data[ZU_ADC_INPUT][adc_rd_index]);
                +
00028f e6a0     +LDI R26 , LOW ( _adc_data + ( 248 ) )
000290 e0b2     +LDI R27 , HIGH ( _adc_data + ( 248 ) )
                 	__POINTW2MN _adc_data,248
000291 27ee      	CLR  R30
000292 0dab      	ADD  R26,R11
000293 1fbe      	ADC  R27,R30
000294 91ec      	LD   R30,X
000295 93ea      	ST   -Y,R30
000296 de07      	RCALL _putchar
                 ; 0000 0186                     putchar(adc_data[ZI_ADC_INPUT][adc_rd_index]);
000297 2deb      	MOV  R30,R11
000298 e0f0      	LDI  R31,0
000299 59e8      	SUBI R30,LOW(-_adc_data)
00029a 4ffe      	SBCI R31,HIGH(-_adc_data)
00029b d163      	RCALL SUBOPT_0xB
                 ; 0000 0187                     #asm("wdr")
00029c 95a8      	wdr
                 ; 0000 0188                     if(++adc_rd_index >= ADC_BUF_SIZE) adc_rd_index = 0;
00029d 94b3      	INC  R11
00029e e3ee      	LDI  R30,LOW(62)
00029f 16be      	CP   R11,R30
0002a0 f008      	BRLO _0x49
0002a1 24bb      	CLR  R11
                 ; 0000 0189                 }
                 _0x49:
0002a2 cfea      	RJMP _0x46
                 _0x48:
                 ; 0000 018A             break;
0002a3 c094      	RJMP _0x34
                 ; 0000 018B             case 'S':
                 _0x45:
0002a4 35e3      	CPI  R30,LOW(0x53)
0002a5 f4f9      	BRNE _0x4A
                 ; 0000 018C                 // Частота Гц
                 ; 0000 018D                 putchar(freg & 0xFF);
0002a6 91e0 03c0 	LDS  R30,_freg
0002a8 93ea      	ST   -Y,R30
0002a9 ddf4      	RCALL _putchar
                 ; 0000 018E                 // Среднеквадратичные U
                 ; 0000 018F 				        for(i=FIRST_U_ADC_INPUT+2; i >= FIRST_U_ADC_INPUT; i--)
0002aa e017      	LDI  R17,LOW(7)
                 _0x4C:
0002ab 3015      	CPI  R17,5
0002ac f034      	BRLT _0x4D
                 ; 0000 0190                 {
                 ; 0000 0191                     putchar(s_val[i]);
0002ad d142      	RCALL SUBOPT_0x9
0002ae 55e8      	SUBI R30,LOW(-_s_val)
0002af 4ffc      	SBCI R31,HIGH(-_s_val)
0002b0 d14e      	RCALL SUBOPT_0xB
                 ; 0000 0192                 }
0002b1 5011      	SUBI R17,1
0002b2 cff8      	RJMP _0x4C
                 _0x4D:
                 ; 0000 0193                 // Среднеквадратичные I
                 ; 0000 0194 				        for(i=FIRST_I_ADC_INPUT+2; i >= FIRST_I_ADC_INPUT; i--)
0002b3 e013      	LDI  R17,LOW(3)
                 _0x4F:
0002b4 3011      	CPI  R17,1
0002b5 f034      	BRLT _0x50
                 ; 0000 0195 				        {
                 ; 0000 0196 					          putchar(s_val[i]);
0002b6 d139      	RCALL SUBOPT_0x9
0002b7 55e8      	SUBI R30,LOW(-_s_val)
0002b8 4ffc      	SBCI R31,HIGH(-_s_val)
0002b9 d145      	RCALL SUBOPT_0xB
                 ; 0000 0197 				        }
0002ba 5011      	SUBI R17,1
0002bb cff8      	RJMP _0x4F
                 _0x50:
                 ; 0000 0198                 // Среднеквадратичные ZUI
                 ; 0000 0199 				        putchar(s_val[ZU_ADC_INPUT]);
                +
0002bc 91e0 03ac+LDS R30 , _s_val + ( 4 )
                 	__GETB1MN _s_val,4
0002be 93ea      	ST   -Y,R30
0002bf ddde      	RCALL _putchar
                 ; 0000 019A                 putchar(s_val[ZI_ADC_INPUT]);
0002c0 91e0 03a8 	LDS  R30,_s_val
0002c2 93ea      	ST   -Y,R30
0002c3 ddda      	RCALL _putchar
                 ; 0000 019B             break;
0002c4 c073      	RJMP _0x34
                 ; 0000 019C             case 'G': //Настройки
                 _0x4A:
0002c5 34e7      	CPI  R30,LOW(0x47)
0002c6 f4c9      	BRNE _0x51
                 ; 0000 019D                 for(i=FIRST_U_ADC_INPUT+2; i >= FIRST_U_ADC_INPUT; i--)
0002c7 e017      	LDI  R17,LOW(7)
                 _0x53:
0002c8 3015      	CPI  R17,5
0002c9 f02c      	BRLT _0x54
                 ; 0000 019E                 {
                 ; 0000 019F                     putchar(adc_coef[i] & 0xFF);
0002ca d11c      	RCALL SUBOPT_0x8
0002cb d136      	RCALL SUBOPT_0xC
                 ; 0000 01A0                     putchar(adc_coef[i] >> 8);
0002cc d139      	RCALL SUBOPT_0xD
                 ; 0000 01A1                 }
0002cd 5011      	SUBI R17,1
0002ce cff9      	RJMP _0x53
                 _0x54:
                 ; 0000 01A2                 for(i=FIRST_I_ADC_INPUT+2; i >= FIRST_I_ADC_INPUT; i--)
0002cf e013      	LDI  R17,LOW(3)
                 _0x56:
0002d0 3011      	CPI  R17,1
0002d1 f02c      	BRLT _0x57
                 ; 0000 01A3                 {
                 ; 0000 01A4                     putchar(adc_coef[i] & 0xFF);
0002d2 d114      	RCALL SUBOPT_0x8
0002d3 d12e      	RCALL SUBOPT_0xC
                 ; 0000 01A5                     putchar(adc_coef[i] >> 8);
0002d4 d131      	RCALL SUBOPT_0xD
                 ; 0000 01A6                 }
0002d5 5011      	SUBI R17,1
0002d6 cff9      	RJMP _0x56
                 _0x57:
                 ; 0000 01A7                 i = ZU_ADC_INPUT;
0002d7 e014      	LDI  R17,LOW(4)
                 ; 0000 01A8                     putchar(adc_coef[i] & 0xFF);
0002d8 d10e      	RCALL SUBOPT_0x8
0002d9 d128      	RCALL SUBOPT_0xC
                 ; 0000 01A9                     putchar(adc_coef[i] >> 8);
0002da d12b      	RCALL SUBOPT_0xD
                 ; 0000 01AA                 i = ZI_ADC_INPUT;
0002db e010      	LDI  R17,LOW(0)
                 ; 0000 01AB                     putchar(adc_coef[i] & 0xFF);
0002dc d10a      	RCALL SUBOPT_0x8
0002dd d124      	RCALL SUBOPT_0xC
                 ; 0000 01AC                     putchar(adc_coef[i] >> 8);
0002de d127      	RCALL SUBOPT_0xD
                 ; 0000 01AD             break;
0002df c058      	RJMP _0x34
                 ; 0000 01AE             case 'K': //Изменить настройки
                 _0x51:
0002e0 34eb      	CPI  R30,LOW(0x4B)
0002e1 f011      	BREQ PC+3
0002e2 940c 0338 	JMP _0x34
                 ; 0000 01AF                 if(rx_counter > 2)
0002e4 e0e2      	LDI  R30,LOW(2)
0002e5 15e7      	CP   R30,R7
0002e6 f010      	BRLO PC+3
0002e7 940c 0338 	JMP _0x59
                 ; 0000 01B0                 {
                 ; 0000 01B1                     i = getchar() & 0x0F;
0002e9 dda1      	RCALL _getchar
0002ea 70ef      	ANDI R30,LOW(0xF)
0002eb 2f1e      	MOV  R17,R30
                 ; 0000 01B2                     s_tval = getchar();
0002ec dd9e      	RCALL _getchar
0002ed 2f2e      	MOV  R18,R30
0002ee 2733      	CLR  R19
                 ; 0000 01B3                     s_tval |= (unsigned int)getchar()<<8;
0002ef dd9b      	RCALL _getchar
0002f0 2ffe      	MOV  R31,R30
0002f1 e0e0      	LDI  R30,0
                +
0002f2 2b2e     +OR R18 , R30
0002f3 2b3f     +OR R19 , R31
                 	__ORWRR 18,19,30,31
                 ; 0000 01B4                     switch(i)
0002f4 d117      	RCALL SUBOPT_0xE
                 ; 0000 01B5                     {
                 ; 0000 01B6                         case 0:
0002f5 9730      	SBIW R30,0
0002f6 f021      	BREQ _0x5E
                 ; 0000 01B7                         case 1:
0002f7 30e1      	CPI  R30,LOW(0x1)
0002f8 e0a0      	LDI  R26,HIGH(0x1)
0002f9 07fa      	CPC  R31,R26
0002fa f409      	BRNE _0x5F
                 _0x5E:
                 ; 0000 01B8                         case 2: i = FIRST_U_ADC_INPUT + 2 - i;
0002fb c004      	RJMP _0x60
                 _0x5F:
0002fc 30e2      	CPI  R30,LOW(0x2)
0002fd e0a0      	LDI  R26,HIGH(0x2)
0002fe 07fa      	CPC  R31,R26
0002ff f449      	BRNE _0x61
                 _0x60:
000300 d10b      	RCALL SUBOPT_0xE
000301 e0a7      	LDI  R26,LOW(7)
000302 e0b0      	LDI  R27,HIGH(7)
000303 940e 04bd 	CALL __SWAPW12
000305 1bea      	SUB  R30,R26
000306 0bfb      	SBC  R31,R27
000307 2f1e      	MOV  R17,R30
                 ; 0000 01B9                         break;
000308 c021      	RJMP _0x5C
                 ; 0000 01BA                         case 3:
                 _0x61:
000309 30e3      	CPI  R30,LOW(0x3)
00030a e0a0      	LDI  R26,HIGH(0x3)
00030b 07fa      	CPC  R31,R26
00030c f021      	BREQ _0x63
                 ; 0000 01BB                         case 4:
00030d 30e4      	CPI  R30,LOW(0x4)
00030e e0a0      	LDI  R26,HIGH(0x4)
00030f 07fa      	CPC  R31,R26
000310 f409      	BRNE _0x64
                 _0x63:
                 ; 0000 01BC                         case 5: i = FIRST_I_ADC_INPUT + 2 + 3 - i;
000311 c004      	RJMP _0x65
                 _0x64:
000312 30e5      	CPI  R30,LOW(0x5)
000313 e0a0      	LDI  R26,HIGH(0x5)
000314 07fa      	CPC  R31,R26
000315 f449      	BRNE _0x66
                 _0x65:
000316 d0f5      	RCALL SUBOPT_0xE
000317 e0a6      	LDI  R26,LOW(6)
000318 e0b0      	LDI  R27,HIGH(6)
000319 940e 04bd 	CALL __SWAPW12
00031b 1bea      	SUB  R30,R26
00031c 0bfb      	SBC  R31,R27
00031d 2f1e      	MOV  R17,R30
                 ; 0000 01BD                         break;
00031e c00b      	RJMP _0x5C
                 ; 0000 01BE                         case 6: i = ZU_ADC_INPUT;
                 _0x66:
00031f 30e6      	CPI  R30,LOW(0x6)
000320 e0a0      	LDI  R26,HIGH(0x6)
000321 07fa      	CPC  R31,R26
000322 f411      	BRNE _0x67
000323 e014      	LDI  R17,LOW(4)
                 ; 0000 01BF                         break;
000324 c005      	RJMP _0x5C
                 ; 0000 01C0                         case 7: i = ZI_ADC_INPUT;
                 _0x67:
000325 30e7      	CPI  R30,LOW(0x7)
000326 e0a0      	LDI  R26,HIGH(0x7)
000327 07fa      	CPC  R31,R26
000328 f409      	BRNE _0x5C
000329 e010      	LDI  R17,LOW(0)
                 ; 0000 01C1                         break;
                 ; 0000 01C2                     }
                 _0x5C:
                 ; 0000 01C3 
                 ; 0000 01C4                     if(i<8) adc_coef[i] = s_tval;
00032a 3018      	CPI  R17,8
00032b f41c      	BRGE _0x69
00032c d0e4      	RCALL SUBOPT_0xF
00032d 8320      	ST   Z,R18
00032e 8331      	STD  Z+1,R19
                 ; 0000 01C5                     #asm("wdr")
                 _0x69:
00032f 95a8      	wdr
                 ; 0000 01C6                     if(i<9) adc_coef_mem[i] = s_tval;
000330 3019      	CPI  R17,9
000331 f434      	BRGE _0x6A
000332 d0e7      	RCALL SUBOPT_0x10
000333 0fae      	ADD  R26,R30
000334 1fbf      	ADC  R27,R31
000335 01f9      	MOVW R30,R18
000336 940e 04d4 	CALL __EEPROMWRW
                 ; 0000 01C7                 }
                 _0x6A:
                 ; 0000 01C8             break;
                 _0x59:
                 ; 0000 01C9         }
                 _0x34:
                 ; 0000 01CA     }
                 ; 0000 01CB }
                 _0x31:
000338 940e 04f6 	CALL __LOADLOCR4
00033a 9624      	ADIW R28,4
00033b 9508      	RET
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 01D1 {
                 _main:
                 ; 0000 01D2 // Declare your local variables here
                 ; 0000 01D3 char i; //Загружаем настройки
                 ; 0000 01D4 for(i=0; i<9; i++)
                 ;	i -> R17
00033c e010      	LDI  R17,LOW(0)
                 _0x6C:
00033d 3019      	CPI  R17,9
00033e f520      	BRSH _0x6D
                 ; 0000 01D5 {
                 ; 0000 01D6     adc_coef[i] =  adc_coef_mem[i];
00033f d0d1      	RCALL SUBOPT_0xF
000340 010f      	MOVW R0,R30
000341 d0d8      	RCALL SUBOPT_0x10
000342 0fae      	ADD  R26,R30
000343 1fbf      	ADC  R27,R31
000344 940e 04c4 	CALL __EEPROMRDW
000346 01d0      	MOVW R26,R0
000347 93ed      	ST   X+,R30
000348 93fc      	ST   X,R31
                 ; 0000 01D7     if(adc_coef[i] > 600 || adc_coef[i] == 0)
000349 d09d      	RCALL SUBOPT_0x8
00034a 940e 04aa 	CALL __GETW1P
00034c 35e9      	CPI  R30,LOW(0x259)
00034d e0a2      	LDI  R26,HIGH(0x259)
00034e 07fa      	CPC  R31,R26
00034f f410      	BRSH _0x6F
000350 9730      	SBIW R30,0
000351 f479      	BRNE _0x6E
                 _0x6F:
                 ; 0000 01D8         adc_coef[i] = adc_coef_def[i];
000352 d0be      	RCALL SUBOPT_0xF
000353 01bf      	MOVW R22,R30
000354 2fe1      	MOV  R30,R17
000355 e5a4      	LDI  R26,LOW(_adc_coef_def*2)
000356 e0b0      	LDI  R27,HIGH(_adc_coef_def*2)
000357 e0f0      	LDI  R31,0
000358 0fee      	LSL  R30
000359 1fff      	ROL  R31
00035a 0fea      	ADD  R30,R26
00035b 1ffb      	ADC  R31,R27
00035c 940e 04b9 	CALL __GETW1PF
00035e 01db      	MOVW R26,R22
00035f 93ed      	ST   X+,R30
000360 93fc      	ST   X,R31
                 ; 0000 01D9 }
                 _0x6E:
000361 5f1f      	SUBI R17,-1
000362 cfda      	RJMP _0x6C
                 _0x6D:
                 ; 0000 01DA adc_coef[8] &= 1;
                +
000363 91e0 03d6+LDS R30 , _adc_coef + ( 16 )
000365 91f0 03d7+LDS R31 , _adc_coef + ( 16 ) + 1
                 	__GETW1MN _adc_coef,16
000367 70e1      	ANDI R30,LOW(0x1)
000368 70f0      	ANDI R31,HIGH(0x1)
                +
000369 93e0 03d6+STS _adc_coef + ( 16 ) , R30
00036b 93f0 03d7+STS _adc_coef + ( 16 ) + 1 , R31
                 	__PUTW1MN _adc_coef,16
                 ; 0000 01DB 
                 ; 0000 01DC // Input/Output Ports initialization
                 ; 0000 01DD // Port A initialization
                 ; 0000 01DE // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01DF // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01E0 PORTA=0x00;
00036d e0e0      	LDI  R30,LOW(0)
00036e bbeb      	OUT  0x1B,R30
                 ; 0000 01E1 DDRA=0x00;
00036f bbea      	OUT  0x1A,R30
                 ; 0000 01E2 
                 ; 0000 01E3 // Port B initialization
                 ; 0000 01E4 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01E5 // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01E6 PORTB=0x00;
000370 bbe8      	OUT  0x18,R30
                 ; 0000 01E7 DDRB=0x20;
000371 e2e0      	LDI  R30,LOW(32)
000372 bbe7      	OUT  0x17,R30
                 ; 0000 01E8 
                 ; 0000 01E9 // Port C initialization
                 ; 0000 01EA // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01EB // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01EC PORTC=0x00;
000373 e0e0      	LDI  R30,LOW(0)
000374 bbe5      	OUT  0x15,R30
                 ; 0000 01ED DDRC=0x00;
000375 bbe4      	OUT  0x14,R30
                 ; 0000 01EE 
                 ; 0000 01EF // Port D initialization
                 ; 0000 01F0 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01F1 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01F2 PORTD=0x00;
000376 bbe2      	OUT  0x12,R30
                 ; 0000 01F3 DDRD=0x00;
000377 bbe1      	OUT  0x11,R30
                 ; 0000 01F4 
                 ; 0000 01F5 // Timer/Counter 0 initialization
                 ; 0000 01F6 // Clock source: System Clock
                 ; 0000 01F7 // Clock value: 2000,000 kHz
                 ; 0000 01F8 // Mode: Normal top=0xFF
                 ; 0000 01F9 // OC0 output: Disconnected
                 ; 0000 01FA //TCCR0=0x02;
                 ; 0000 01FB TCNT0=0xE2;
000378 eee2      	LDI  R30,LOW(226)
000379 bfe2      	OUT  0x32,R30
                 ; 0000 01FC OCR0=0x00;
00037a e0e0      	LDI  R30,LOW(0)
00037b bfec      	OUT  0x3C,R30
                 ; 0000 01FD 
                 ; 0000 01FE // Timer/Counter 1 initialization
                 ; 0000 01FF // Clock source: System Clock
                 ; 0000 0200 // Clock value: 62,500 kHz
                 ; 0000 0201 // Mode: Normal top=0xFFFF
                 ; 0000 0202 // OC1A output: Discon.
                 ; 0000 0203 // OC1B output: Discon.
                 ; 0000 0204 // Noise Canceler: Off
                 ; 0000 0205 // Input Capture on Falling Edge
                 ; 0000 0206 // Timer1 Overflow Interrupt: Off
                 ; 0000 0207 // Input Capture Interrupt: Off
                 ; 0000 0208 // Compare A Match Interrupt: Off
                 ; 0000 0209 // Compare B Match Interrupt: Off
                 ; 0000 020A TCCR1A=0x00;
00037c bdef      	OUT  0x2F,R30
                 ; 0000 020B TCCR1B=0x04;
00037d e0e4      	LDI  R30,LOW(4)
00037e bdee      	OUT  0x2E,R30
                 ; 0000 020C TCNT1H=0x00;
00037f e0e0      	LDI  R30,LOW(0)
000380 bded      	OUT  0x2D,R30
                 ; 0000 020D TCNT1L=0x00;
000381 bdec      	OUT  0x2C,R30
                 ; 0000 020E ICR1H=0x00;
000382 bde7      	OUT  0x27,R30
                 ; 0000 020F ICR1L=0x00;
000383 bde6      	OUT  0x26,R30
                 ; 0000 0210 OCR1AH=0x00;
000384 bdeb      	OUT  0x2B,R30
                 ; 0000 0211 OCR1AL=0x00;
000385 bdea      	OUT  0x2A,R30
                 ; 0000 0212 OCR1BH=0x00;
000386 bde9      	OUT  0x29,R30
                 ; 0000 0213 OCR1BL=0x00;
000387 bde8      	OUT  0x28,R30
                 ; 0000 0214 
                 ; 0000 0215 // Timer/Counter 2 initialization
                 ; 0000 0216 // Clock source: System Clock
                 ; 0000 0217 // Clock value: 250,000 kHz
                 ; 0000 0218 // Mode: Normal top=0xFF
                 ; 0000 0219 // OC2 output: Disconnected
                 ; 0000 021A ASSR=0x00;
000388 bde2      	OUT  0x22,R30
                 ; 0000 021B TCCR2=0x04;
000389 e0e4      	LDI  R30,LOW(4)
00038a bde5      	OUT  0x25,R30
                 ; 0000 021C TCNT2=0x06;
00038b e0e6      	LDI  R30,LOW(6)
00038c bde4      	OUT  0x24,R30
                 ; 0000 021D OCR2=0x00;
00038d e0e0      	LDI  R30,LOW(0)
00038e bde3      	OUT  0x23,R30
                 ; 0000 021E 
                 ; 0000 021F // External Interrupt(s) initialization
                 ; 0000 0220 // INT0: Off
                 ; 0000 0221 // INT1: Off
                 ; 0000 0222 // INT2: Off
                 ; 0000 0223 MCUCR=0x00;
00038f bfe5      	OUT  0x35,R30
                 ; 0000 0224 MCUCSR=0x00;
000390 bfe4      	OUT  0x34,R30
                 ; 0000 0225 
                 ; 0000 0226 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0227 TIMSK=0x41;
000391 e4e1      	LDI  R30,LOW(65)
000392 bfe9      	OUT  0x39,R30
                 ; 0000 0228 
                 ; 0000 0229 // USART initialization
                 ; 0000 022A // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 022B // USART Receiver: On
                 ; 0000 022C // USART Transmitter: On
                 ; 0000 022D // USART Mode: Asynchronous
                 ; 0000 022E // USART Baud Rate: 115200
                 ; 0000 022F UCSRA=0x00;
000393 e0e0      	LDI  R30,LOW(0)
000394 b9eb      	OUT  0xB,R30
                 ; 0000 0230 UCSRB=0xD8;
000395 ede8      	LDI  R30,LOW(216)
000396 d08a      	RCALL SUBOPT_0x11
                 ; 0000 0231 UCSRC=0x86;
                 ; 0000 0232 UBRRH=0x00;
                 ; 0000 0233 UBRRL=0x08;
                 ; 0000 0234 
                 ; 0000 0235 // USART initialization  // Без ТХ прерывания
                 ; 0000 0236 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0237 // USART Receiver: On
                 ; 0000 0238 // USART Transmitter: On
                 ; 0000 0239 // USART Mode: Asynchronous
                 ; 0000 023A // USART Baud Rate: 115200
                 ; 0000 023B UCSRA=0x00;
000397 e0e0      	LDI  R30,LOW(0)
000398 b9eb      	OUT  0xB,R30
                 ; 0000 023C UCSRB=0x98;
000399 e9e8      	LDI  R30,LOW(152)
00039a d086      	RCALL SUBOPT_0x11
                 ; 0000 023D UCSRC=0x86;
                 ; 0000 023E UBRRH=0x00;
                 ; 0000 023F UBRRL=0x08;
                 ; 0000 0240 
                 ; 0000 0241 // Analog Comparator initialization
                 ; 0000 0242 // Analog Comparator: Off
                 ; 0000 0243 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0244 ACSR=0x80;
00039b e8e0      	LDI  R30,LOW(128)
00039c b9e8      	OUT  0x8,R30
                 ; 0000 0245 SFIOR=0x00;
00039d e0e0      	LDI  R30,LOW(0)
00039e bfe0      	OUT  0x30,R30
                 ; 0000 0246 
                 ; 0000 0247 
                 ; 0000 0248 // ADC initialization // На штатной частоте
                 ; 0000 0249 // ADC Clock frequency: 125,000 kHz
                 ; 0000 024A // ADC Voltage Reference: AREF pin
                 ; 0000 024B // ADC Auto Trigger Source: Timer0 Overflow
                 ; 0000 024C ADMUX= (ADC_VREF_TYPE & 0xff);
00039f b9e7      	OUT  0x7,R30
                 ; 0000 024D // FastADC 250,000 kHz / 125,000 kHz
                 ; 0000 024E ADCSRA= (adc_coef[8])?0xAE:0xAF;
0003a0 d017      	RCALL SUBOPT_0x0
0003a1 f011      	BREQ _0x71
0003a2 eaee      	LDI  R30,LOW(174)
0003a3 c001      	RJMP _0x72
                 _0x71:
0003a4 eaef      	LDI  R30,LOW(175)
                 _0x72:
0003a5 b9e6      	OUT  0x6,R30
                 ; 0000 024F SFIOR&=0x1F;
0003a6 b7e0      	IN   R30,0x30
0003a7 71ef      	ANDI R30,LOW(0x1F)
0003a8 bfe0      	OUT  0x30,R30
                 ; 0000 0250 SFIOR|=0x80;
0003a9 b7e0      	IN   R30,0x30
0003aa 68e0      	ORI  R30,0x80
0003ab bfe0      	OUT  0x30,R30
                 ; 0000 0251 
                 ; 0000 0252 // SPI initialization
                 ; 0000 0253 // SPI disabled
                 ; 0000 0254 SPCR=0x00;
0003ac e0e0      	LDI  R30,LOW(0)
0003ad b9ed      	OUT  0xD,R30
                 ; 0000 0255 
                 ; 0000 0256 // TWI initialization
                 ; 0000 0257 // TWI disabled
                 ; 0000 0258 TWCR=0x00;
0003ae bfe6      	OUT  0x36,R30
                 ; 0000 0259 
                 ; 0000 025A // Watchdog Timer initialization
                 ; 0000 025B // Watchdog Timer Prescaler: OSC/256k
                 ; 0000 025C #pragma optsize-
                 ; 0000 025D WDTCR=0x1C;
0003af e1ec      	LDI  R30,LOW(28)
0003b0 bde1      	OUT  0x21,R30
                 ; 0000 025E WDTCR=0x0C;
0003b1 e0ec      	LDI  R30,LOW(12)
0003b2 bde1      	OUT  0x21,R30
                 ; 0000 025F #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0260 #pragma optsize+
                 ; 0000 0261 #endif
                 ; 0000 0262 
                 ; 0000 0263 // Global enable interrupts
                 ; 0000 0264 #asm("sei")
0003b3 9478      	sei
                 ; 0000 0265 
                 ; 0000 0266 while (1)
                 _0x74:
                 ; 0000 0267       {
                 ; 0000 0268       #asm("wdr")
0003b4 95a8      	wdr
                 ; 0000 0269       main_loop();
0003b5 de43      	RCALL _main_loop
                 ; 0000 026A       }
0003b6 cffd      	RJMP _0x74
                 ; 0000 026B }
                 _0x77:
0003b7 cfff      	RJMP _0x77
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 _adc_data:
000168           	.BYTE 0x1F0
                 _adc_current:
000358           	.BYTE 0x20
                 _adc_real:
000378           	.BYTE 0x20
                 _adc_count:
000398           	.BYTE 0x8
                 _isUpdate:
0003a0           	.BYTE 0x8
                 _s_val:
0003a8           	.BYTE 0x8
                 _isRising:
0003b0           	.BYTE 0x8
                 _valClear:
0003b8           	.BYTE 0x8
                 _freg:
0003c0           	.BYTE 0x2
                 _last_time:
0003c2           	.BYTE 0x2
                 _freg_count:
0003c4           	.BYTE 0x1
                 _isFregUpd:
0003c5           	.BYTE 0x1
                 
                 	.ESEG
                 _adc_coef_mem:
000000           	.BYTE 0x12
                 
                 	.DSEG
                 _adc_coef:
0003c6           	.BYTE 0x12
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
                +
0003b8 91e0 03d6+LDS R30 , _adc_coef + ( 16 )
0003ba 91f0 03d7+LDS R31 , _adc_coef + ( 16 ) + 1
                 	__GETW1MN _adc_coef,16
0003bc 9730      	SBIW R30,0
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
0003be 2de9      	MOV  R30,R9
0003bf e0f0      	LDI  R31,0
0003c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0003c1 e7a8      	LDI  R26,LOW(_adc_real)
0003c2 e0b3      	LDI  R27,HIGH(_adc_real)
0003c3 e0f0      	LDI  R31,0
0003c4 940e 0436 	CALL __LSLW2
0003c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003c7 2de9      	MOV  R30,R9
0003c8 e5a8      	LDI  R26,LOW(_adc_current)
0003c9 e0b3      	LDI  R27,HIGH(_adc_current)
0003ca e0f0      	LDI  R31,0
0003cb 940e 0436 	CALL __LSLW2
0003cd 0fae      	ADD  R26,R30
0003ce 1fbf      	ADC  R27,R31
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0003d0 940e 04b4 	CALL __PUTDP1
0003d2 2da9      	MOV  R26,R9
0003d3 e0b0      	LDI  R27,0
0003d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003d5 2fe1      	MOV  R30,R17
0003d6 e0f0      	LDI  R31,0
0003d7 54e8      	SUBI R30,LOW(-_valClear)
0003d8 4ffc      	SBCI R31,HIGH(-_valClear)
0003d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003da e0a0      	LDI  R26,LOW(0)
0003db 83a0      	STD  Z+0,R26
0003dc 2fe1      	MOV  R30,R17
0003dd e0f0      	LDI  R31,0
0003de 55e8      	SUBI R30,LOW(-_s_val)
0003df 4ffc      	SBCI R31,HIGH(-_s_val)
0003e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0003e1 2fe1      	MOV  R30,R17
0003e2 e0f0      	LDI  R31,0
0003e3 56e0      	SUBI R30,LOW(-_isUpdate)
0003e4 4ffc      	SBCI R31,HIGH(-_isUpdate)
0003e5 81e0      	LD   R30,Z
0003e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x8:
0003e7 2fe1      	MOV  R30,R17
0003e8 eca6      	LDI  R26,LOW(_adc_coef)
0003e9 e0b3      	LDI  R27,HIGH(_adc_coef)
0003ea e0f0      	LDI  R31,0
0003eb 0fee      	LSL  R30
0003ec 1fff      	ROL  R31
0003ed 0fae      	ADD  R26,R30
0003ee 1fbf      	ADC  R27,R31
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003f0 2fe1      	MOV  R30,R17
0003f1 e0f0      	LDI  R31,0
0003f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
0003f3 e3ae      	LDI  R26,LOW(62)
0003f4 9f1a      	MUL  R17,R26
0003f5 01f0      	MOVW R30,R0
0003f6 59e8      	SUBI R30,LOW(-_adc_data)
0003f7 4ffe      	SBCI R31,HIGH(-_adc_data)
0003f8 01df      	MOVW R26,R30
0003f9 27ee      	CLR  R30
0003fa 0dab      	ADD  R26,R11
0003fb 1fbe      	ADC  R27,R30
0003fc 91ec      	LD   R30,X
0003fd 93ea      	ST   -Y,R30
0003fe cc9f      	RJMP _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0003ff 81e0      	LD   R30,Z
000400 93ea      	ST   -Y,R30
000401 cc9c      	RJMP _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
000402 91ec      	LD   R30,X
000403 93ea      	ST   -Y,R30
000404 dc99      	RCALL _putchar
000405 cfe1      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xD:
000406 940e 04aa 	CALL __GETW1P
000408 2fef      	MOV  R30,R31
000409 e0f0      	LDI  R31,0
00040a 93ea      	ST   -Y,R30
00040b cc92      	RJMP _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00040c 2fe1      	MOV  R30,R17
00040d e0f0      	LDI  R31,0
00040e fde7      	SBRC R30,7
00040f efff      	SER  R31
000410 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
000411 2fe1      	MOV  R30,R17
000412 eca6      	LDI  R26,LOW(_adc_coef)
000413 e0b3      	LDI  R27,HIGH(_adc_coef)
000414 e0f0      	LDI  R31,0
000415 0fee      	LSL  R30
000416 1fff      	ROL  R31
000417 0fea      	ADD  R30,R26
000418 1ffb      	ADC  R31,R27
000419 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
00041a 2fe1      	MOV  R30,R17
00041b e0a0      	LDI  R26,LOW(_adc_coef_mem)
00041c e0b0      	LDI  R27,HIGH(_adc_coef_mem)
00041d e0f0      	LDI  R31,0
00041e 0fee      	LSL  R30
00041f 1fff      	ROL  R31
000420 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
000421 b9ea      	OUT  0xA,R30
000422 e8e6      	LDI  R30,LOW(134)
000423 bde0      	OUT  0x20,R30
000424 e0e0      	LDI  R30,LOW(0)
000425 bde0      	OUT  0x20,R30
000426 e0e8      	LDI  R30,LOW(8)
000427 b9e9      	OUT  0x9,R30
000428 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
000429 0fea      	ADD  R30,R26
00042a 1ffb      	ADC  R31,R27
00042b 1f68      	ADC  R22,R24
00042c 1f79      	ADC  R23,R25
00042d 9508      	RET
                 
                 __ANEGD1:
00042e 95f0      	COM  R31
00042f 9560      	COM  R22
000430 9570      	COM  R23
000431 95e1      	NEG  R30
000432 4fff      	SBCI R31,-1
000433 4f6f      	SBCI R22,-1
000434 4f7f      	SBCI R23,-1
000435 9508      	RET
                 
                 __LSLW2:
000436 0fee      	LSL  R30
000437 1fff      	ROL  R31
000438 0fee      	LSL  R30
000439 1fff      	ROL  R31
00043a 9508      	RET
                 
                 __LSRW2:
00043b 95f6      	LSR  R31
00043c 95e7      	ROR  R30
00043d 95f6      	LSR  R31
00043e 95e7      	ROR  R30
00043f 9508      	RET
                 
                 __CWD1:
000440 2f6f      	MOV  R22,R31
000441 0f66      	ADD  R22,R22
000442 0b66      	SBC  R22,R22
000443 2f76      	MOV  R23,R22
000444 9508      	RET
                 
                 __MULW12U:
000445 9ffa      	MUL  R31,R26
000446 2df0      	MOV  R31,R0
000447 9feb      	MUL  R30,R27
000448 0df0      	ADD  R31,R0
000449 9fea      	MUL  R30,R26
00044a 2de0      	MOV  R30,R0
00044b 0df1      	ADD  R31,R1
00044c 9508      	RET
                 
                 __MULD12U:
00044d 9f7a      	MUL  R23,R26
00044e 2d70      	MOV  R23,R0
00044f 9f6b      	MUL  R22,R27
000450 0d70      	ADD  R23,R0
000451 9ff8      	MUL  R31,R24
000452 0d70      	ADD  R23,R0
000453 9fe9      	MUL  R30,R25
000454 0d70      	ADD  R23,R0
000455 9f6a      	MUL  R22,R26
000456 2d60      	MOV  R22,R0
000457 0d71      	ADD  R23,R1
000458 9ffb      	MUL  R31,R27
000459 0d60      	ADD  R22,R0
00045a 1d71      	ADC  R23,R1
00045b 9fe8      	MUL  R30,R24
00045c 0d60      	ADD  R22,R0
00045d 1d71      	ADC  R23,R1
00045e 2788      	CLR  R24
00045f 9ffa      	MUL  R31,R26
000460 2df0      	MOV  R31,R0
000461 0d61      	ADD  R22,R1
000462 1f78      	ADC  R23,R24
000463 9feb      	MUL  R30,R27
000464 0df0      	ADD  R31,R0
000465 1d61      	ADC  R22,R1
000466 1f78      	ADC  R23,R24
000467 9fea      	MUL  R30,R26
000468 2de0      	MOV  R30,R0
000469 0df1      	ADD  R31,R1
00046a 1f68      	ADC  R22,R24
00046b 1f78      	ADC  R23,R24
00046c 9508      	RET
                 
                 __DIVD21U:
00046d 933f      	PUSH R19
00046e 934f      	PUSH R20
00046f 935f      	PUSH R21
000470 2400      	CLR  R0
000471 2411      	CLR  R1
000472 2744      	CLR  R20
000473 2755      	CLR  R21
000474 e230      	LDI  R19,32
                 __DIVD21U1:
000475 0faa      	LSL  R26
000476 1fbb      	ROL  R27
000477 1f88      	ROL  R24
000478 1f99      	ROL  R25
000479 1c00      	ROL  R0
00047a 1c11      	ROL  R1
00047b 1f44      	ROL  R20
00047c 1f55      	ROL  R21
00047d 1a0e      	SUB  R0,R30
00047e 0a1f      	SBC  R1,R31
00047f 0b46      	SBC  R20,R22
000480 0b57      	SBC  R21,R23
000481 f428      	BRCC __DIVD21U2
000482 0e0e      	ADD  R0,R30
000483 1e1f      	ADC  R1,R31
000484 1f46      	ADC  R20,R22
000485 1f57      	ADC  R21,R23
000486 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000487 60a1      	SBR  R26,1
                 __DIVD21U3:
000488 953a      	DEC  R19
000489 f759      	BRNE __DIVD21U1
00048a 01fd      	MOVW R30,R26
00048b 01bc      	MOVW R22,R24
00048c 01d0      	MOVW R26,R0
00048d 01ca      	MOVW R24,R20
00048e 915f      	POP  R21
00048f 914f      	POP  R20
000490 913f      	POP  R19
000491 9508      	RET
                 
                 __DIVD21:
000492 d004      	RCALL __CHKSIGND
000493 dfd9      	RCALL __DIVD21U
000494 f40e      	BRTC __DIVD211
000495 df98      	RCALL __ANEGD1
                 __DIVD211:
000496 9508      	RET
                 
                 __CHKSIGND:
000497 94e8      	CLT
000498 ff77      	SBRS R23,7
000499 c002      	RJMP __CHKSD1
00049a df93      	RCALL __ANEGD1
00049b 9468      	SET
                 __CHKSD1:
00049c ff97      	SBRS R25,7
00049d c00b      	RJMP __CHKSD2
00049e 2400      	CLR  R0
00049f 95a0      	COM  R26
0004a0 95b0      	COM  R27
0004a1 9580      	COM  R24
0004a2 9590      	COM  R25
0004a3 9611      	ADIW R26,1
0004a4 1d80      	ADC  R24,R0
0004a5 1d90      	ADC  R25,R0
0004a6 f800      	BLD  R0,0
0004a7 9403      	INC  R0
0004a8 fa00      	BST  R0,0
                 __CHKSD2:
0004a9 9508      	RET
                 
                 __GETW1P:
0004aa 91ed      	LD   R30,X+
0004ab 91fc      	LD   R31,X
0004ac 9711      	SBIW R26,1
0004ad 9508      	RET
                 
                 __GETD1P:
0004ae 91ed      	LD   R30,X+
0004af 91fd      	LD   R31,X+
0004b0 916d      	LD   R22,X+
0004b1 917c      	LD   R23,X
0004b2 9713      	SBIW R26,3
0004b3 9508      	RET
                 
                 __PUTDP1:
0004b4 93ed      	ST   X+,R30
0004b5 93fd      	ST   X+,R31
0004b6 936d      	ST   X+,R22
0004b7 937c      	ST   X,R23
0004b8 9508      	RET
                 
                 __GETW1PF:
0004b9 9005      	LPM  R0,Z+
0004ba 91f4      	LPM  R31,Z
0004bb 2de0      	MOV  R30,R0
0004bc 9508      	RET
                 
                 __SWAPW12:
0004bd 2e1b      	MOV  R1,R27
0004be 2fbf      	MOV  R27,R31
0004bf 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004c0 2e1a      	MOV  R1,R26
0004c1 2fae      	MOV  R26,R30
0004c2 2de1      	MOV  R30,R1
0004c3 9508      	RET
                 
                 __EEPROMRDW:
0004c4 9611      	ADIW R26,1
0004c5 d002      	RCALL __EEPROMRDB
0004c6 2ffe      	MOV  R31,R30
0004c7 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0004c8 99e1      	SBIC EECR,EEWE
0004c9 cffe      	RJMP __EEPROMRDB
0004ca 93ff      	PUSH R31
0004cb b7ff      	IN   R31,SREG
0004cc 94f8      	CLI
0004cd bbae      	OUT  EEARL,R26
0004ce bbbf      	OUT  EEARH,R27
0004cf 9ae0      	SBI  EECR,EERE
0004d0 b3ed      	IN   R30,EEDR
0004d1 bfff      	OUT  SREG,R31
0004d2 91ff      	POP  R31
0004d3 9508      	RET
                 
                 __EEPROMWRW:
0004d4 d007      	RCALL __EEPROMWRB
0004d5 9611      	ADIW R26,1
0004d6 93ef      	PUSH R30
0004d7 2fef      	MOV  R30,R31
0004d8 d003      	RCALL __EEPROMWRB
0004d9 91ef      	POP  R30
0004da 9711      	SBIW R26,1
0004db 9508      	RET
                 
                 __EEPROMWRB:
0004dc 9be1      	SBIS EECR,EEWE
0004dd c002      	RJMP __EEPROMWRB1
0004de 95a8      	WDR
0004df cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0004e0 b79f      	IN   R25,SREG
0004e1 94f8      	CLI
0004e2 bbae      	OUT  EEARL,R26
0004e3 bbbf      	OUT  EEARH,R27
0004e4 9ae0      	SBI  EECR,EERE
0004e5 b38d      	IN   R24,EEDR
0004e6 17e8      	CP   R30,R24
0004e7 f019      	BREQ __EEPROMWRB0
0004e8 bbed      	OUT  EEDR,R30
0004e9 9ae2      	SBI  EECR,EEMWE
0004ea 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0004eb bf9f      	OUT  SREG,R25
0004ec 9508      	RET
                 
                 __SAVELOCR6:
0004ed 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004ee 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004ef 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004f0 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004f1 931a      	ST   -Y,R17
0004f2 930a      	ST   -Y,R16
0004f3 9508      	RET
                 
                 __LOADLOCR6:
0004f4 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004f5 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004f6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004f7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004f8 8119      	LDD  R17,Y+1
0004f9 8108      	LD   R16,Y
0004fa 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  38 r1 :  18 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   7 r7 :   7 
r8 :   8 r9 :  11 r10:   4 r11:  19 r12:   7 r13:   4 r14:   0 r15:   0 
r16:  11 r17:  57 r18:  15 r19:  16 r20:  12 r21:  10 r22:  35 r23:  29 
r24:  29 r25:  17 r26: 117 r27:  49 r28:   4 r29:   1 r30: 386 r31: 133 
x  :  24 y  :  73 z  :  26 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  27 add   :  26 
adiw  :   6 and   :   1 andi  :   5 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   7 brmi  :   0 brne  :  30 brpl  :   0 brsh  :   6 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  29 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   4 cln   :   0 
clr   :  27 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 
cp    :  21 cpc   :  10 cpi   :  31 cpse  :   0 dec   :   3 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  15 inc   :  10 jmp   :  27 ld    :  41 ldd   :   9 ldi   : 157 
lds   :  19 lpm   :  10 lsl   :   7 lsr   :   4 mov   :  50 movw  :  28 
mul   :  15 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   6 
ori   :   1 out   :  72 pop   :  21 push  :  21 rcall :  72 ret   :  38 
reti  :   4 rjmp  :  42 rol   :  13 ror   :   4 sbc   :   8 sbci  :  24 
sbi   :   6 sbic  :   3 sbis  :   2 sbiw  :  11 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   1 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  55 std   :   9 sts   :  20 sub   :   5 subi  :  40 swap  :   0 
tst   :   4 wdr   :   6 
Instructions used: 70 out of 116 (60.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009f6   2522     28   2550   16384  15.6%
[.dseg] 0x000060 0x0003d8      0    632    632    1119  56.5%
[.eseg] 0x000000 0x000012      0     18     18     512   3.5%

Assembly complete, 0 errors, 9 warnings
