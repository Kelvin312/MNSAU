;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 29.07.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "Font16x16.c"
;flash char blank_symb[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_46[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_UP[32] =
;{
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000011, 0b11000000,
;0b00000111, 0b11100000,
;0b00000110, 0b01100000,
;0b00001100, 0b00110000,
;0b00001100, 0b00110000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b01100000, 0b00000110,
;0b01100000, 0b00000110,
;0b01111111, 0b11111110,
;0b01111111, 0b11111110,
;0b00000000, 0b00000000,
;};
;
;flash char S_DOWN[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111110,
;0b01111111, 0b11111110,
;0b01100000, 0b00000110,
;0b01100000, 0b00000110,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00001100, 0b00110000,
;0b00001100, 0b00110000,
;0b00000110, 0b01100000,
;0b00000111, 0b11100000,
;0b00000011, 0b11000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;};
;
;// цифры
;flash char S_48[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00001100, 0b00110000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00001100, 0b00110000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_49[32] =
;{
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000011, 0b10000000,
;0b00000111, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000011, 0b11000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_50[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00001100, 0b00110000,
;0b00011000, 0b00011000,
;0b00010000, 0b00001000,
;0b00000000, 0b00011000,
;0b00000000, 0b00110000,
;0b00000000, 0b01100000,
;0b00000000, 0b11000000,
;0b00000001, 0b10000000,
;0b00000011, 0b00000000,
;0b00000110, 0b00000000,
;0b00001100, 0b00011000,
;0b00011111, 0b11111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_51[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00001000, 0b00010000,
;0b00010000, 0b00001000,
;0b00010000, 0b00001000,
;0b00000000, 0b00010000,
;0b00000000, 0b11100000,
;0b00000000, 0b00110000,
;0b00000000, 0b00011000,
;0b00000000, 0b00001000,
;0b00000000, 0b00001000,
;0b00011000, 0b00011000,
;0b00001100, 0b00110000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_52[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00110000,
;0b00000000, 0b01110000,
;0b00000000, 0b11110000,
;0b00000001, 0b10110000,
;0b00000011, 0b00110000,
;0b00000110, 0b00110000,
;0b00001100, 0b00110000,
;0b00011000, 0b00110000,
;0b00011111, 0b11111000,
;0b00000000, 0b00110000,
;0b00000000, 0b00110000,
;0b00000000, 0b00110000,
;0b00000000, 0b01111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_53[32] =
;{
;0b00000000, 0b00000000,
;0b00001111, 0b11111000,
;0b00001111, 0b11110000,
;0b00001000, 0b00000000,
;0b00010000, 0b00000000,
;0b00010000, 0b00000000,
;0b00011111, 0b11100000,
;0b00000000, 0b00110000,
;0b00000000, 0b00011000,
;0b00000000, 0b00011000,
;0b00000000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011100, 0b00110000,
;0b00001111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_54[32] =
;{
;0b00000000, 0b00000000,
;0b00000011, 0b11100000,
;0b00000110, 0b00010000,
;0b00001100, 0b00000000,
;0b00001000, 0b00000000,
;0b00011000, 0b00000000,
;0b00011111, 0b11100000,
;0b00011100, 0b00110000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00001100, 0b00110000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_55[32] =
;{
;0b00000000, 0b00000000,
;0b00011111, 0b11111000,
;0b00010000, 0b00011000,
;0b00000000, 0b00010000,
;0b00000000, 0b00100000,
;0b00000000, 0b00100000,
;0b00000000, 0b01000000,
;0b00000000, 0b01000000,
;0b00000000, 0b10000000,
;0b00000000, 0b10000000,
;0b00000001, 0b00000000,
;0b00000001, 0b00000000,
;0b00000010, 0b00000000,
;0b00000010, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_56[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00001100, 0b00110000,
;0b00001000, 0b00010000,
;0b00001000, 0b00010000,
;0b00001100, 0b00110000,
;0b00000111, 0b11100000,
;0b00001100, 0b00110000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00001100, 0b00110000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_57[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00001100, 0b00110000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00011000, 0b00011000,
;0b00001100, 0b00111000,
;0b00000111, 0b11111000,
;0b00000000, 0b00011000,
;0b00000000, 0b00010000,
;0b00000000, 0b00100000,
;0b00000000, 0b00100000,
;0b00000000, 0b11000000,
;0b00000011, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;// спец символы
;flash char S_32[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_33[32] =
;{
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_40[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b01100000,
;0b00000000, 0b10000000,
;0b00000001, 0b00000000,
;0b00000010, 0b00000000,
;0b00000010, 0b00000000,
;0b00000100, 0b00000000,
;0b00000100, 0b00000000,
;0b00000100, 0b00000000,
;0b00000010, 0b00000000,
;0b00000010, 0b00000000,
;0b00000001, 0b00000000,
;0b00000000, 0b10000000,
;0b00000000, 0b01100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_41[32] =
;{
;0b00000000, 0b00000000,
;0b00000110, 0b00000000,
;0b00000001, 0b00000000,
;0b00000000, 0b10000000,
;0b00000000, 0b01000000,
;0b00000000, 0b01000000,
;0b00000000, 0b00100000,
;0b00000000, 0b00100000,
;0b00000000, 0b00100000,
;0b00000000, 0b01000000,
;0b00000000, 0b01000000,
;0b00000000, 0b10000000,
;0b00000001, 0b00000000,
;0b00000110, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_47[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00001000,
;0b00000000, 0b00011000,
;0b00000000, 0b00110000,
;0b00000000, 0b01100000,
;0b00000000, 0b11000000,
;0b00000001, 0b10000000,
;0b00000011, 0b00000000,
;0b00000110, 0b00000000,
;0b00001100, 0b00000000,
;0b00011000, 0b00000000,
;0b00010000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_43[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00111111, 0b11111100,
;0b00111111, 0b11111100,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_45[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00111111, 0b11111100,
;0b00111111, 0b11111100,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_58[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_60[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00110000,
;0b00000000, 0b01100000,
;0b00000000, 0b11000000,
;0b00000001, 0b10000000,
;0b00000011, 0b00000000,
;0b00000110, 0b00000000,
;0b00001100, 0b00000000,
;0b00000110, 0b00000000,
;0b00000011, 0b00000000,
;0b00000001, 0b10000000,
;0b00000000, 0b11000000,
;0b00000000, 0b01100000,
;0b00000000, 0b00110000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_61[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00001111, 0b11110000,
;0b00001111, 0b11110000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00001111, 0b11110000,
;0b00001111, 0b11110000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_62[32] =
;{
;0b00000000, 0b00000000,
;0b00001100, 0b00000000,
;0b00000110, 0b00000000,
;0b00000011, 0b00000000,
;0b00000001, 0b10000000,
;0b00000000, 0b11000000,
;0b00000000, 0b01100000,
;0b00000000, 0b00110000,
;0b00000000, 0b01100000,
;0b00000000, 0b11000000,
;0b00000001, 0b10000000,
;0b00000011, 0b00000000,
;0b00000110, 0b00000000,
;0b00001100, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_63[32] =
;{
;0b00000000, 0b00000000,
;0b00000011, 0b11000000,
;0b00000110, 0b01100000,
;0b00001100, 0b00110000,
;0b00001100, 0b00110000,
;0b00000100, 0b00110000,
;0b00000000, 0b01100000,
;0b00000000, 0b11000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;// русские заглавные буквы
;flash char S_192[32] =
;{
;0b00000000, 0b00000000,
;0b00000000, 0b11100000,
;0b00000000, 0b11100000,
;0b00000001, 0b00100000,
;0b00000001, 0b00100000,
;0b00000010, 0b00110000,
;0b00000010, 0b00010000,
;0b00000100, 0b00010000,
;0b00000100, 0b00011000,
;0b00001111, 0b11111000,
;0b00011000, 0b00011000,
;0b00010000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_193[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111110,
;0b00110000, 0b00011110,
;0b00110000, 0b00000010,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00111111, 0b11111000,
;0b00111111, 0b11111100,
;0b00110000, 0b00001110,
;0b00110000, 0b00000110,
;0b00110000, 0b00000110,
;0b00110000, 0b00001110,
;0b00111111, 0b11111100,
;0b01111111, 0b11111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_194[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11110000,
;0b00110000, 0b00011000,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00011000,
;0b00111111, 0b11111000,
;0b00111111, 0b11111100,
;0b00110000, 0b00001110,
;0b00110000, 0b00000110,
;0b00110000, 0b00000110,
;0b00110000, 0b00001110,
;0b00111111, 0b11111100,
;0b01111111, 0b11111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_195[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111110,
;0b00110000, 0b00011110,
;0b00110000, 0b00000010,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b01111000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_196[32] =
;{
;0b00000000, 0b00000000,
;0b00000011, 0b11111100,
;0b00000001, 0b00011000,
;0b00000001, 0b00011000,
;0b00000001, 0b00011000,
;0b00000001, 0b00011000,
;0b00000001, 0b00011000,
;0b00000001, 0b00011000,
;0b00000010, 0b00011000,
;0b00000100, 0b00011000,
;0b00001000, 0b00011000,
;0b00111111, 0b11111100,
;0b00111000, 0b00111100,
;0b00110000, 0b00001100,
;0b00100000, 0b00000100,
;0b00000000, 0b00000000,
;};
;
;flash char S_197[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111100,
;0b00110000, 0b00011100,
;0b00110000, 0b00000100,
;0b00110000, 0b00000000,
;0b00110000, 0b10000000,
;0b00111111, 0b10000000,
;0b00111111, 0b10000000,
;0b00110000, 0b10000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000100,
;0b00110000, 0b00011100,
;0b01111111, 0b11111100,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_198[32] =
;{
;0b00000000, 0b00000000,
;0b01100011, 0b11000110,
;0b01010001, 0b10001010,
;0b00010001, 0b10001000,
;0b00001001, 0b10010000,
;0b00001001, 0b10010000,
;0b00000111, 0b11100000,
;0b00000111, 0b11100000,
;0b00001101, 0b10110000,
;0b00011001, 0b10011000,
;0b00010001, 0b10001000,
;0b00110001, 0b10001100,
;0b00100001, 0b10000100,
;0b01100011, 0b11000110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_199[32] =
;{
;0b00000000, 0b00000000,
;0b00001111, 0b11100000,
;0b00111000, 0b00111000,
;0b01100000, 0b00001100,
;0b00000000, 0b00000100,
;0b00000000, 0b00001100,
;0b00000011, 0b11111000,
;0b00000000, 0b00001000,
;0b00000000, 0b00000100,
;0b00000000, 0b00000110,
;0b00000000, 0b00000110,
;0b01100000, 0b00001100,
;0b00111111, 0b11111000,
;0b00001111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_200[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00011110,
;0b00110000, 0b00001100,
;0b00110000, 0b00011100,
;0b00110000, 0b00111100,
;0b00110000, 0b01101100,
;0b00110000, 0b11001100,
;0b00110001, 0b10001100,
;0b00110011, 0b00001100,
;0b00110110, 0b00001100,
;0b00111100, 0b00001100,
;0b00111000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_201[32] =
;{
;0b00000011, 0b11000000,
;0b01111001, 0b10011110,
;0b00110000, 0b00001100,
;0b00110000, 0b00011100,
;0b00110000, 0b00111100,
;0b00110000, 0b01101100,
;0b00110000, 0b11001100,
;0b00110001, 0b10001100,
;0b00110011, 0b00001100,
;0b00110110, 0b00001100,
;0b00111100, 0b00001100,
;0b00111000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_202[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00111100,
;0b00110000, 0b01101100,
;0b00110000, 0b11000000,
;0b00110001, 0b10000000,
;0b00110011, 0b00000000,
;0b00111111, 0b00000000,
;0b00111001, 0b10000000,
;0b00110000, 0b11000000,
;0b00110000, 0b01100000,
;0b00110000, 0b00110000,
;0b00110000, 0b00011000,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_203[32] =
;{
;0b00000000, 0b00000000,
;0b00000001, 0b11111110,
;0b00000000, 0b10001100,
;0b00000000, 0b10001100,
;0b00000000, 0b10001100,
;0b00000000, 0b10001100,
;0b00000001, 0b00001100,
;0b00000001, 0b00001100,
;0b00000001, 0b00001100,
;0b00000010, 0b00001100,
;0b00000010, 0b00001100,
;0b00000100, 0b00001100,
;0b01101000, 0b00001100,
;0b01110000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_204[32] =
;{
;0b00000000, 0b00000000,
;0b01110000, 0b00001110,
;0b00111000, 0b00011100,
;0b00111000, 0b00011100,
;0b00110100, 0b00101100,
;0b00110100, 0b00101100,
;0b00110100, 0b00101100,
;0b00110010, 0b01001100,
;0b00110010, 0b01001100,
;0b00110010, 0b01001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_205[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00011110,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00111111, 0b11111100,
;0b00111111, 0b11111100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_206[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00011110, 0b01111000,
;0b00111000, 0b00011100,
;0b00110000, 0b00001100,
;0b01110000, 0b00001110,
;0b01110000, 0b00001110,
;0b01110000, 0b00001110,
;0b01110000, 0b00001110,
;0b01110000, 0b00001110,
;0b00110000, 0b00001100,
;0b00111000, 0b00011100,
;0b00011110, 0b01111000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_207[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111110,
;0b00111111, 0b11111100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_208[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111000,
;0b00110000, 0b00001100,
;0b00110000, 0b00000110,
;0b00110000, 0b00000110,
;0b00110000, 0b00000110,
;0b00110000, 0b00001100,
;0b00111111, 0b11111000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b01111000, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_209[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00011110, 0b01111000,
;0b00111000, 0b00011100,
;0b00110000, 0b00000100,
;0b01110000, 0b00000000,
;0b01110000, 0b00000000,
;0b01110000, 0b00000000,
;0b01110000, 0b00000000,
;0b01110000, 0b00000000,
;0b00110000, 0b00000100,
;0b00111000, 0b00011100,
;0b00011110, 0b01111000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_210[32] =
;{
;0b00000000, 0b00000000,
;0b01111111, 0b11111110,
;0b01100001, 0b10000110,
;0b01000001, 0b10000010,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000011, 0b11000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_211[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00001110,
;0b00110000, 0b00000100,
;0b00011000, 0b00000100,
;0b00001100, 0b00001000,
;0b00000110, 0b00001000,
;0b00000011, 0b00010000,
;0b00000001, 0b10010000,
;0b00000000, 0b11100000,
;0b00000000, 0b01100000,
;0b00000000, 0b01000000,
;0b00001100, 0b01000000,
;0b00001100, 0b10000000,
;0b00000111, 0b00000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_212[32] =
;{
;0b00000000, 0b00000000,
;0b00000011, 0b11000000,
;0b00000001, 0b10000000,
;0b00001111, 0b11110000,
;0b00111001, 0b10011100,
;0b01100001, 0b10000110,
;0b01000001, 0b10000010,
;0b01000001, 0b10000010,
;0b01100001, 0b10000110,
;0b00111001, 0b10011100,
;0b00001111, 0b11110000,
;0b00000001, 0b10000000,
;0b00000001, 0b10000000,
;0b00000011, 0b11000000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_213[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00011110,
;0b00110000, 0b00000100,
;0b00011000, 0b00001000,
;0b00001100, 0b00010000,
;0b00000110, 0b00100000,
;0b00000011, 0b01000000,
;0b00000001, 0b10000000,
;0b00000010, 0b11000000,
;0b00000100, 0b01100000,
;0b00001000, 0b00110000,
;0b00010000, 0b00011000,
;0b00100000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_214[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00011110,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111111, 0b11111110,
;0b00000000, 0b00000110,
;0b00000000, 0b00000010,
;};
;
;flash char S_215[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00011110,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00111000, 0b00001100,
;0b00011111, 0b11111100,
;0b00000000, 0b00001100,
;0b00000000, 0b00001100,
;0b00000000, 0b00001100,
;0b00000000, 0b00001100,
;0b00000000, 0b00001100,
;0b00000000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_216[32] =
;{
;0b00000000, 0b00000000,
;0b01111011, 0b11011110,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b01111111, 0b11111110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_217[32] =
;{
;0b00000000, 0b00000000,
;0b01111011, 0b11011110,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b00110001, 0b10001100,
;0b01111111, 0b11111110,
;0b00000000, 0b00000110,
;0b00000000, 0b00000010,
;};
;
;flash char S_218[32] =
;{
;0b00000000, 0b00000000,
;0b01111100, 0b00000000,
;0b01011000, 0b00000000,
;0b01011000, 0b00000000,
;0b01011000, 0b00000000,
;0b00011000, 0b00000000,
;0b00011000, 0b00000000,
;0b00011111, 0b11111000,
;0b00011000, 0b00001100,
;0b00011000, 0b00000110,
;0b00011000, 0b00000110,
;0b00011000, 0b00000110,
;0b00011000, 0b00001100,
;0b00111111, 0b11111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_219[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00011110,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00110000, 0b00001100,
;0b00111111, 0b10001100,
;0b00110000, 0b01001100,
;0b00110000, 0b00101100,
;0b00110000, 0b00101100,
;0b00110000, 0b00101100,
;0b00110000, 0b01001100,
;0b01111111, 0b10011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_220[32] =
;{
;0b00000000, 0b00000000,
;0b01111000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00110000, 0b00000000,
;0b00111111, 0b11111000,
;0b00110000, 0b00001100,
;0b00110000, 0b00000110,
;0b00110000, 0b00000110,
;0b00110000, 0b00000110,
;0b00110000, 0b00001100,
;0b01111111, 0b11111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_221[32] =
;{
;0b00000000, 0b00000000,
;0b00000111, 0b11100000,
;0b00011110, 0b01111000,
;0b00111000, 0b00011100,
;0b00110000, 0b00001100,
;0b00000000, 0b00001110,
;0b00000000, 0b00001110,
;0b00000000, 0b11111110,
;0b00000000, 0b00001110,
;0b00000000, 0b00001110,
;0b00110000, 0b00001100,
;0b00111000, 0b00011100,
;0b00011110, 0b01111000,
;0b00000111, 0b11100000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_222[32] =
;{
;0b00000000, 0b00000000,
;0b01111001, 0b11111000,
;0b00110011, 0b00001100,
;0b00110010, 0b00000100,
;0b00110110, 0b00000110,
;0b00110110, 0b00000110,
;0b00110110, 0b00000110,
;0b00111110, 0b00000110,
;0b00110110, 0b00000110,
;0b00110110, 0b00000110,
;0b00110110, 0b00000110,
;0b00110010, 0b00000100,
;0b00110011, 0b00001100,
;0b01111001, 0b11111000,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;flash char S_223[32] =
;{
;0b00000000, 0b00000000,
;0b00000011, 0b11111110,
;0b00000110, 0b00001100,
;0b00001100, 0b00001100,
;0b00001100, 0b00001100,
;0b00001100, 0b00001100,
;0b00000110, 0b00001100,
;0b00000011, 0b11111100,
;0b00000011, 0b00001100,
;0b00000110, 0b00001100,
;0b00001100, 0b00001100,
;0b00011000, 0b00001100,
;0b00110000, 0b00001100,
;0b01111000, 0b00011110,
;0b00000000, 0b00000000,
;0b00000000, 0b00000000,
;};
;
;
;
;#include "SSD1963.c"
;#define flipState       0x03
;#define DISP_WIDTH      480
;#define DISP_HEIGHT     272
;
;#define HDP    (DISP_WIDTH - 1)
;#define HT     900
;#define HPS    90
;#define LPS    8
;#define HPW    10
;
;#define VDP    (DISP_HEIGHT - 1)
;#define VT     300
;#define VPS    12
;#define FPS    4
;#define VPW    10
;
;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
;#define SSD1963_SET_PAGE_ADDRESS 0x2B
;
;// цвет определяется по системе RGB565
;// у пульта лебёдчика идёт всё запутанно
;// вместо 0bRRRRRGGGGGGBBBBB
;// 0bGGGRRRRRBBBBBGGG
;
;// 0bRRRRR GGGGGG BBBBB
;// 0b01111 011111 01111
;
;// 0bGGGRRRRRBBBBBGGG
;// 0b0010000100001000
;#define   BLACK        0x0000
;#define   NAVY         0b111100000000000
;#define   DGREEN       0x03E0
;#define   DCYAN        0x03EF
;#define   MAROON       0x7800
;#define   PURPLE       0x780F
;#define   OLIVE        0x7BE0
;#define   GREY         0xF7DE
;#define   LGRAY        0xC618
;#define   DGRAY        0b0010000100001000
;#define   BLUE         0b0000000011111000
;#define   GREEN        0b1110000000000111
;#define   CYAN         0x07FF
;#define   RED          0b0001111100000000
;#define   MAGENTA      0xF81F
;#define   YELLOW       0b1111111100000111
;#define   WHITE        0xFFFF
;
;#define  SSD1963_RS     PORTD.7
;#define  SSD1963_WR     PORTD.6
;#define  SSD1963_RD     PORTD.5
;#define  SSD1963_CS     PORTE.7
;#define  SSD1963_RESET  PORTE.5
;#define  SSD1963_PORT1  PORTA
;#define  SSD1963_PORT2  PORTC
;
;#define  BACKGROUND_COLOR 0x0000
;#define  FONT_WIDTH 16
;#define  FONT_HEIGHT 16
;
;void SSD1963_PortInit(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    //SSD1963_PORT
;    DDRA = 0xFF;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;    DDRC = 0xFF;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;    //SSD1963 76543210
;    DDRD |= 0b11100000;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;    DDRE |= 0b10100000;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;}
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;#pragma used+
;
;unsigned char RotateByte(unsigned char Value)
;{
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;  //Value = RotationByte[Value];
;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
;	Value -> Y+0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;  return Value;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;}
;PCODE: $0000003E VOL: 0
;
;void SSD1963_Reset(void)
;{
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;  SSD1963_RD = 0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;  SSD1963_RESET = 1;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;  delay_ms(100);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;  SSD1963_RESET = 0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;  delay_ms(100);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;  SSD1963_RESET = 1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;  SSD1963_RD = 1;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;  delay_ms(100);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;}
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;// Запись команды в SSD1963
;inline void SSD1963_WriteCmd(unsigned char cmd)
;{
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;  SSD1963_RD = 1;
;	cmd -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;  SSD1963_RS = 0;                                                  //запись команды
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;  SSD1963_PORT1 = RotateByte(cmd);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;  SSD1963_PORT2 = 0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;  #asm("nop")
;PCODE: $00000062 VOL: 0
	nop
;PCODE: $00000063 VOL: 0
;  //delay_us(5);
;  SSD1963_CS = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;  SSD1963_WR = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;  #asm("nop")
;PCODE: $00000068 VOL: 0
	nop
;PCODE: $00000069 VOL: 0
;  //delay_us(5);
;  SSD1963_CS = 1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;  SSD1963_WR = 1;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;  #asm("nop")
;PCODE: $0000006E VOL: 0
	nop
;PCODE: $0000006F VOL: 0
;} // SSD1963_WriteCmd
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;// Запись данных в SSD1963
;inline void SSD1963_WriteData_b8(unsigned char data)
;{
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;  SSD1963_RD = 1;
;	data -> Y+0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;  SSD1963_PORT1 = RotateByte(data);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;  SSD1963_PORT2 = 0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;  #asm("nop")
;PCODE: $0000007F VOL: 0
	nop
;PCODE: $00000080 VOL: 0
;  //delay_us(5);
;  SSD1963_CS = 0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;  SSD1963_WR = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;  #asm("nop")
;PCODE: $00000085 VOL: 0
	nop
;PCODE: $00000086 VOL: 0
;  //delay_us(5);
;  SSD1963_CS = 1;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;  SSD1963_WR = 1;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;  #asm("nop")
;PCODE: $0000008B VOL: 0
	nop
;PCODE: $0000008C VOL: 0
;} // SSD1963_Writedata
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;// Запись данных в SSD1963
;inline void SSD1963_WriteData_b16(unsigned int data)
;{
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;  char a, b;
;  a = data;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;	data -> Y+2
;	a -> R17
;	b -> R16
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;  b = data >> 8;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;  SSD1963_RD = 1;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;  SSD1963_PORT1 = a;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;  SSD1963_PORT2 = b;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;  #asm("nop")
;PCODE: $000000A0 VOL: 0
	nop
;PCODE: $000000A1 VOL: 0
;  //delay_us(5);
;  SSD1963_CS = 0;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;  SSD1963_WR = 0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;  #asm("nop")
;PCODE: $000000A6 VOL: 0
	nop
;PCODE: $000000A7 VOL: 0
;  //delay_us(5);
;  SSD1963_CS = 1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;  SSD1963_WR = 1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;  #asm("nop")
;PCODE: $000000AC VOL: 0
	nop
;PCODE: $000000AD VOL: 0
;} // SSD1963_Writedata
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;// Инициализация дисплея
;void SSD1963_Init(void)
;{
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;  SSD1963_PortInit();
;PCODE: $000000B7 VOL: 0
;  SSD1963_Reset();
;PCODE: $000000B8 VOL: 0
;  // Soft reset
;  SSD1963_WriteCmd(0x01); //software reset
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;  SSD1963_WriteCmd(0x01); //software reset
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;  SSD1963_WriteCmd(0x01); //software reset
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;  delay_ms(200); //задержка
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;
;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
;  SSD1963_WriteCmd(0xE0); // запуск PLL
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;  delay_ms(1);//ожидание запуска PLL
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;  SSD1963_WriteData_b8(0x03);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;  SSD1963_WriteCmd(0x01); //software reset
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;
;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;  //PLL setting for PCLK, depends on resolution
;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;  SSD1963_WriteData_b8(0x73);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;
;  SSD1963_WriteCmd(0xB0); //Set LCD mode
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;  SSD1963_WriteData_b8(0x24); //24bit
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;  SSD1963_WriteData_b8(HDP&0xFF);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;  SSD1963_WriteData_b8(VDP&0xFF);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;  //00101101-G[5..3]=101
;  //G[2..0]=101-BGR
;
;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;  SSD1963_WriteData_b8(HT&0xFF);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;  SSD1963_WriteData_b8(HPS&0xFF);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;  SSD1963_WriteData_b8(HPW); //SetHPW
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;  SSD1963_WriteData_b8(LPS&0XFF);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;  SSD1963_WriteData_b8(0x00);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;
;  SSD1963_WriteCmd(0xB6); //Set vertical period
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;  SSD1963_WriteData_b8(VT&0xFF);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;  SSD1963_WriteData_b8(VPS&0xFF);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;  SSD1963_WriteData_b8(VPW); //SetVPW
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;  SSD1963_WriteData_b8(FPS&0xFF);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;
;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
;  SSD1963_WriteCmd(0xBA);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;  SSD1963_WriteCmd(0xB8);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;
;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;
;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;  SSD1963_WriteData_b8(0x50); //контраст
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;  SSD1963_WriteData_b8(0x90); //яркость
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;
;  SSD1963_WriteCmd(0xF0); //pixel data interface
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;  SSD1963_WriteData_b8(0x03); //03h - RGB565
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;
;  delay_ms(5);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;
;  SSD1963_WriteCmd(0x29); //display on
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;
;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;} // SSD1963_Init
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;
;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
;{
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
;	StartX -> Y+6
;	EndX -> Y+4
;	StartY -> Y+2
;	EndY -> Y+0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;  SSD1963_WriteData_b8(StartX >> 8);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;  SSD1963_WriteData_b8(StartX);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;  SSD1963_WriteData_b8((EndX >> 8));
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;  SSD1963_WriteData_b8(EndX);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;
;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;  SSD1963_WriteData_b8((StartY >> 8));
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;  SSD1963_WriteData_b8(StartY);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;  SSD1963_WriteData_b8((EndY >> 8));
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;  SSD1963_WriteData_b8(EndY);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;}
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;
;void SSD1963_ClearScreen(unsigned int color)
;{
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;  unsigned int x,y;
;  SSD1963_WriteCmd(0x28);
;PCODE: $0000019A VOL: 0
;	color -> Y+4
;	x -> R16,R17
;	y -> R18,R19
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;  SSD1963_SetArea(0, HDP , 0, VDP);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;  SSD1963_WriteCmd(0x2c);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;  x=0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;  while(x <= VDP)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;  {
;    y=0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;    while(y <= HDP)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;    {
;      SSD1963_WriteData_b16(color);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;      y++;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;    }
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;  x++;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;  }
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;  SSD1963_WriteCmd(0x29);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;}
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;
;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
;{
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;  char i, j;
;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;	X -> Y+8
;	Y -> Y+6
;	Color -> Y+4
;	BackColor -> Y+2
;	i -> R17
;	j -> R16
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;  SSD1963_WriteCmd(0x2c);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;  for (i = 0; i < 32; i++)
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;  {
;    for (j = 0; j < 8; j++)
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;    {
;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;      else SSD1963_WriteData_b16(BackColor);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;    }
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;  }
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;}
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;
;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
;{
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;  switch(Value)
;	Value -> Y+8
;	X -> Y+6
;	Y -> Y+4
;	Color -> Y+2
;	BackColor -> Y+0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;  {
;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;    break;
;PCODE: $00000224 VOL: 0
;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;    break;
;PCODE: $00000233 VOL: 0
;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;    break;
;PCODE: $00000242 VOL: 0
;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;    break;
;PCODE: $00000251 VOL: 0
;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;    break;
;PCODE: $00000260 VOL: 0
;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;    break;
;PCODE: $0000026F VOL: 0
;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;    break;
;PCODE: $0000027E VOL: 0
;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;    break;
;PCODE: $0000028D VOL: 0
;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;    break;
;PCODE: $0000029C VOL: 0
;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;    break;
;PCODE: $000002AB VOL: 0
;
;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;    break;
;PCODE: $000002BA VOL: 0
;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;    break;
;PCODE: $000002C9 VOL: 0
;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;    break;
;PCODE: $000002D8 VOL: 0
;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;    break;
;PCODE: $000002E7 VOL: 0
;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;    break;
;PCODE: $000002F6 VOL: 0
;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;    break;
;PCODE: $00000305 VOL: 0
;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;    break;
;PCODE: $00000314 VOL: 0
;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;    break;
;PCODE: $00000323 VOL: 0
;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;    break;
;PCODE: $00000332 VOL: 0
;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;    break;
;PCODE: $00000341 VOL: 0
;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;    break;
;PCODE: $00000350 VOL: 0
;
;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;    break;
;PCODE: $0000035F VOL: 0
;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;    break;
;PCODE: $0000036E VOL: 0
;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;    break;
;PCODE: $0000037D VOL: 0
;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;    break;
;PCODE: $0000038C VOL: 0
;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;    break;
;PCODE: $0000039B VOL: 0
;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;    break;
;PCODE: $000003AA VOL: 0
;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;    break;
;PCODE: $000003B9 VOL: 0
;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;    break;
;PCODE: $000003C8 VOL: 0
;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;    break;
;PCODE: $000003D7 VOL: 0
;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;    break;
;PCODE: $000003E6 VOL: 0
;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;    break;
;PCODE: $000003F5 VOL: 0
;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;    break;
;PCODE: $00000404 VOL: 0
;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;    break;
;PCODE: $00000413 VOL: 0
;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;    break;
;PCODE: $00000422 VOL: 0
;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;    break;
;PCODE: $00000431 VOL: 0
;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;    break;
;PCODE: $00000440 VOL: 0
;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;    break;
;PCODE: $0000044F VOL: 0
;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;    break;
;PCODE: $0000045E VOL: 0
;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;    break;
;PCODE: $0000046D VOL: 0
;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;    break;
;PCODE: $0000047C VOL: 0
;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;    break;
;PCODE: $0000048B VOL: 0
;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;    break;
;PCODE: $0000049A VOL: 0
;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;    break;
;PCODE: $000004A9 VOL: 0
;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;    break;
;PCODE: $000004B8 VOL: 0
;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;    break;
;PCODE: $000004C7 VOL: 0
;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;    break;
;PCODE: $000004D6 VOL: 0
;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;    break;
;PCODE: $000004E5 VOL: 0
;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;    break;
;PCODE: $000004F4 VOL: 0
;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;    break;
;PCODE: $00000503 VOL: 0
;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;    break;
;PCODE: $00000512 VOL: 0
;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;    break;
;PCODE: $00000521 VOL: 0
;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;    break;
;PCODE: $00000530 VOL: 0
;
;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;    break;
;PCODE: $0000053F VOL: 0
;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;    break;
;PCODE: $0000054E VOL: 0
;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;    break;
;PCODE: $0000055D VOL: 0
;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;    break;
;PCODE: $0000056C VOL: 0
;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;    break;
;PCODE: $0000057B VOL: 0
;  }
;PCODE: $0000057C VOL: 0
;}
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;
;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
;{
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
;	*string -> Y+8
;	X -> Y+6
;	Y -> Y+4
;	Color -> Y+2
;	BackColor -> Y+0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;}
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;
;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
;{
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;  switch(N)
;	Value -> Y+9
;	X -> Y+7
;	Y -> Y+5
;	N -> Y+4
;	Color -> Y+2
;	BackColor -> Y+0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;  {
;    case 5 :
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;      Value %= 10000;
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;      X += FONT_WIDTH;
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;    case 4 :
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;      Value %= 1000;
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;      X += FONT_WIDTH;
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;    case 3 :
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;      Value %= 100;
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;      X += FONT_WIDTH;
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;    case 2 :
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;      Value %= 10;
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;      X += FONT_WIDTH;
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;    case 1 :
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;    break;
;PCODE: $00000616 VOL: 0
;  }
;PCODE: $00000617 VOL: 0
;}
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;
;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
;{
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;  signed int j;
;  long i, k;
;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;	StartX -> Y+18
;	StopX -> Y+16
;	StartY -> Y+14
;	StopY -> Y+12
;	Color -> Y+10
;	j -> R16,R17
;	i -> Y+6
;	k -> Y+2
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;  SSD1963_WriteCmd(0x2c);
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;  j = StopX - StartX + 1;
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;  if (j < 0) j *= -1;
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;  k = StopY - StartY + 1;
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;  if (k < 0) k *= -1;
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;  k = k * j;
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;
;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
;{
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;	int i, k;
;  int deltaX, deltaY, signX, signY, error, error2;
;  deltaX = (StopX - StartX);
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;	StartX -> Y+25
;	StopX -> Y+23
;	StartY -> Y+21
;	StopY -> Y+19
;	Color -> Y+17
;	Width -> Y+16
;	i -> R16,R17
;	k -> R18,R19
;	deltaX -> R20,R21
;	deltaY -> Y+14
;	signX -> Y+12
;	signY -> Y+10
;	error -> Y+8
;	error2 -> Y+6
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;  if (deltaX < 0) deltaX *= -1;
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;	deltaY = (StopY - StartY);
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;  if (deltaY < 0) deltaY *= -1;
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;	signX = StartX < StopX ? 1 : -1;
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;	signY = StartY < StopY ? 1 : -1;
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;	error = deltaX - deltaY;
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;
;	while(1)
;PCODE: $0000069B VOL: 0
;	{
;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;    SSD1963_WriteCmd(0x2c);
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;    k = Width * Width;
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;		break;
;PCODE: $000006D1 VOL: 0
;
;		error2 = error * 2;
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;
;		if(error2 > -deltaY)
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;		{
;			error -= deltaY;
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;			StartX += signX;
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;		}
;
;		if(error2 < deltaX)
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;		{
;			error += deltaX;
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;			StartY += signY;
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;		}
;	}
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;}
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;
;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
;{
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
;	StartX -> Y+10
;	StopX -> Y+8
;	StartY -> Y+6
;	StopY -> Y+4
;	Width -> Y+2
;	Color -> Y+0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;}
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;
;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
;{
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;  signed int j;
;  long i, k;
;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;	StartX -> Y+18
;	StopX -> Y+16
;	StartY -> Y+14
;	StopY -> Y+12
;	Color -> Y+10
;	j -> R16,R17
;	i -> Y+6
;	k -> Y+2
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;  SSD1963_WriteCmd(0x2c);
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;  j = StopX - StartX + 1;
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;  if (j < 0) j *= -1;
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;  k = StopY - StartY + 1;
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;  if (k < 0) k *= -1;
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;  k = k * j;
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;
;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
;{
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
;	Value -> Y+8
;	X -> Y+6
;	Y -> Y+4
;	Color -> Y+2
;	BackColor -> Y+0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;  Value %= 10000;
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;  X += FONT_WIDTH;
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;  Value %= 1000;
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;  X += FONT_WIDTH;
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;  X += FONT_WIDTH;
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;  Value %= 100;
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;  X += FONT_WIDTH;
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;  Value %= 10;
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;  X += FONT_WIDTH;
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;}
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;
;#pragma used-
;
;#include "TSC2046.c"
;#include <spi.h>
;#include <delay.h>
;
;#define TOUCH_CS PORTE.2
;#define TOUCH_IRQ_PORT PORTE.3
;#define TOUCH_IRQ PINE.3
;
;#define ADC_X_MIN 1300
;#define ADC_Y_MIN 2100
;#define ADC_X_K 61.458333333333333333333333333333
;#define ADC_Y_K 103.30882352941176470588235294118
;
;#define TOUCH_Calc_Max 16
;
;void TSC2046_PortInit(void)
; 0000 001C {
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;  DDRE |= 0b00000100;
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;  DDRE &= 0b11110111;
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;}
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;
;#pragma used+
;long tempX, tempY;
;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
;
;unsigned int TSC2046_getADC_Bat(void)
;{
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;  unsigned int res;
;  TOUCH_CS = 0;
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;	res -> R16,R17
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;  delay_ms(1);
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;  spi(0b10100011);
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;  delay_us(100);
;PCODE: $00000801 VOL: 0
;  res = spi(0x00);
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;  res = res << 8;
;PCODE: $00000807 VOL: 0
;  res += spi(0x00);
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;  //res = res >> 3;
;  TOUCH_CS = 1;
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;  return res;
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;}
;PCODE: $00000813 VOL: 0
;
;unsigned int TSC2046_getADC_X(void)
;{
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;  unsigned int res;
;  TOUCH_CS = 0;
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;	res -> R16,R17
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;  delay_ms(1);
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;  spi(0b11010011);
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;  delay_us(100);
;PCODE: $00000820 VOL: 0
;  res = spi(0x00);
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;  res = res << 8;
;PCODE: $00000826 VOL: 0
;  res += spi(0x00);
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;  //res = res >> 3;
;  TOUCH_CS = 1;
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;  return res;
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;}
;PCODE: $00000832 VOL: 0
;
;unsigned int TSC2046_getADC_Y(void)
;{
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;  unsigned int res;
;  TOUCH_CS = 0;
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;	res -> R16,R17
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;  delay_ms(1);
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;  spi(0b10010011);
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;  delay_us(100);
;PCODE: $0000083F VOL: 0
;  res = spi(0x00);
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;  res = res << 8;
;PCODE: $00000845 VOL: 0
;  res += spi(0x00);
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;  //res = res >> 3;
;  TOUCH_CS = 1;
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;  return res;
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;}
;PCODE: $00000851 VOL: 0
;
;void TSC2046_Stop()
;{
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;  TOUCH_CS = 0;
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;  delay_ms(5);
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;  spi(0b10010000);
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;  delay_us(100);
;PCODE: $0000085C VOL: 0
;  spi(0x00);
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;  spi(0x00);
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;  TOUCH_CS = 1;
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;}
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;
;unsigned int TSC2046_getX(void)
;{
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;  signed int res;
;  res = TSC2046_getADC_X() - ADC_X_MIN;
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;	res -> R16,R17
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;  if (res < 0) res = 0;
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;  res = res / ADC_X_K;
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;  return res;
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;}
;PCODE: $0000087D VOL: 0
;
;unsigned int TSC2046_getY(void)
;{
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;  signed int res;
;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;	res -> R16,R17
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;  if (res < 0) res = 0;
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;  res = res / ADC_Y_K;
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;  return res;
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;}
;PCODE: $00000894 VOL: 0
;
;char TSC2046_GetCoordinates(void)
;{
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;  char res = 0, i;
;
;  if (TOUCH_IRQ < 1)
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;	res -> R17
;	i -> R16
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;  {
;    tempX = 0;
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;    tempY = 0;
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;    for (i = 0; i < TOUCH_Calc_Max; i++)
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;    {
;        tempX += TSC2046_getADC_X() - ADC_X_MIN;
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;        tempY += TSC2046_getADC_Y() - ADC_Y_MIN;
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;    }
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;    if (tempX < 0) tempX = 0;
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;    if (tempY < 0) tempY = 0;
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;
;    TOUCH_X = tempX / (TOUCH_Calc_Max * ADC_X_K);
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;    TOUCH_Y = tempY / (TOUCH_Calc_Max * ADC_Y_K);
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;
;    TSC2046_Stop();
;PCODE: $000008D7 VOL: 0
;    res = 1;
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
;  }
;
;  return res;
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;}
;PCODE: $000008DE VOL: 0
;
;void TSC2046_Init(void)
;{
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;  char i;
;  TSC2046_PortInit();
;PCODE: $000008E1 VOL: 0
;	i -> R17
;PCODE: $000008E2 VOL: 0
;  TOUCH_CS = 0;
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
;  TOUCH_IRQ_PORT = 0;
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;  delay_us(10);
;PCODE: $000008E7 VOL: 0
;  TOUCH_CS = 1;
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;  TOUCH_IRQ_PORT = 1;
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;  tempX = 0;
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;    tempY = 0;
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;    for (i = 0; i < TOUCH_Calc_Max; i++)
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;    {
;      tempX += TSC2046_getX();
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;      tempY += TSC2046_getY();
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;    }
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;    TOUCH_X = tempX / TOUCH_Calc_Max;
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;    TOUCH_Y = tempY / TOUCH_Calc_Max;
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;    TSC2046_Stop();
;PCODE: $00000910 VOL: 0
;}
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;
;#pragma used-
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 250
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 004F {
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
; 0000 0050 char status,data;
; 0000 0051 status=UCSR0A;
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
; 0000 0052 data=UDR0;
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
; 0000 0053 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
; 0000 0054    {
; 0000 0055    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
; 0000 0056 #if RX_BUFFER_SIZE0 == 256
; 0000 0057    // special case for receiver buffer size=256
; 0000 0058    if (++rx_counter0 == 0)
; 0000 0059       {
; 0000 005A #else
; 0000 005B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
; 0000 005C    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
; 0000 005D       {
; 0000 005E       rx_counter0=0;
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
; 0000 005F #endif
; 0000 0060       rx_buffer_overflow0=1;
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
; 0000 0061       }
; 0000 0062    }
;PCODE: $00000933 VOL: 0
; 0000 0063 }
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar0(void)
; 0000 006A {
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
; 0000 006B char data;
; 0000 006C while (rx_counter0==0);
;PCODE: $0000093B VOL: 0
;	data -> R17
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
; 0000 006D data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
; 0000 006E #if RX_BUFFER_SIZE0 != 256
; 0000 006F if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
; 0000 0070 #endif
; 0000 0071 #asm("cli")
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
	cli
;PCODE: $0000094D VOL: 0
; 0000 0072 --rx_counter0;
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
; 0000 0073 #asm("sei")
;PCODE: $00000951 VOL: 0
	sei
;PCODE: $00000952 VOL: 0
; 0000 0074 return data;
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
; 0000 0075 }
;PCODE: $00000956 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0085 {
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
; 0000 0086 if (tx_counter0)
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
; 0000 0087    {
; 0000 0088    --tx_counter0;
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
; 0000 0089    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
; 0000 008A #if TX_BUFFER_SIZE0 != 256
; 0000 008B    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
; 0000 008C #endif
; 0000 008D    }
;PCODE: $0000096C VOL: 0
; 0000 008E }
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar0(char c)
; 0000 0095 {
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
; 0000 0096 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
; 0000 0097 #asm("cli")
;PCODE: $00000979 VOL: 0
	cli
;PCODE: $0000097A VOL: 0
; 0000 0098 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
; 0000 0099    {
; 0000 009A    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
; 0000 009B #if TX_BUFFER_SIZE0 != 256
; 0000 009C    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
; 0000 009D #endif
; 0000 009E    ++tx_counter0;
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
; 0000 009F    }
; 0000 00A0 else
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
; 0000 00A1    UDR0=c;
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
; 0000 00A2 #asm("sei")
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
	sei
;PCODE: $0000099A VOL: 0
; 0000 00A3 }
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;#pragma used-
;#endif
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 32
;char rx_buffer1[RX_BUFFER_SIZE1];
;
;#if RX_BUFFER_SIZE1 <= 256
;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
;#else
;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
;#endif
;
;// This flag is set on USART1 Receiver buffer overflow
;bit rx_buffer_overflow1;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 00B6 {
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
; 0000 00B7 char status,data;
; 0000 00B8 status=UCSR1A;
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
; 0000 00B9 data=UDR1;
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
; 0000 00BA if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
; 0000 00BB    {
; 0000 00BC    rx_buffer1[rx_wr_index1++]=data;
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
; 0000 00BD #if RX_BUFFER_SIZE1 == 256
; 0000 00BE    // special case for receiver buffer size=256
; 0000 00BF    if (++rx_counter1 == 0)
; 0000 00C0       {
; 0000 00C1 #else
; 0000 00C2    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
; 0000 00C3    if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
; 0000 00C4       {
; 0000 00C5       rx_counter1=0;
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
; 0000 00C6 #endif
; 0000 00C7       rx_buffer_overflow1=1;
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
; 0000 00C8       }
; 0000 00C9    }
;PCODE: $000009C0 VOL: 0
; 0000 00CA }
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;char getchar(void)
; 0000 00CF {
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
; 0000 00D0 char data;
; 0000 00D1 while (rx_counter1==0);
;PCODE: $000009C8 VOL: 0
;	data -> R17
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
; 0000 00D2 data=rx_buffer1[rx_rd_index1++];
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
;PCODE: $000009D5 VOL: 0
; 0000 00D3 #if RX_BUFFER_SIZE1 != 256
; 0000 00D4 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
; 0000 00D5 #endif
; 0000 00D6 #asm("cli")
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
	cli
;PCODE: $000009DD VOL: 0
; 0000 00D7 --rx_counter1;
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
; 0000 00D8 #asm("sei")
;PCODE: $000009E1 VOL: 0
	sei
;PCODE: $000009E2 VOL: 0
; 0000 00D9 return data;
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
; 0000 00DA }
;PCODE: $000009E6 VOL: 0
;#pragma used-
;// USART1 Transmitter buffer
;#define TX_BUFFER_SIZE1 32
;char tx_buffer1[TX_BUFFER_SIZE1];
;
;#if TX_BUFFER_SIZE1 <= 256
;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
;#else
;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
;#endif
;
;// USART1 Transmitter interrupt service routine
;interrupt [USART1_TXC] void usart1_tx_isr(void)
; 0000 00E8 {
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
; 0000 00E9 if (tx_counter1)
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
; 0000 00EA    {
; 0000 00EB    --tx_counter1;
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
; 0000 00EC    UDR1=tx_buffer1[tx_rd_index1++];
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
; 0000 00ED #if TX_BUFFER_SIZE1 != 256
; 0000 00EE    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
; 0000 00EF #endif
; 0000 00F0    }
;PCODE: $000009FC VOL: 0
; 0000 00F1 }
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;
;// Write a character to the USART1 Transmitter buffer
;#pragma used+
;void putchar(char c)
; 0000 00F6 {
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
; 0000 00F7 while (tx_counter1 == TX_BUFFER_SIZE1);
;	c -> Y+0
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
; 0000 00F8 #asm("cli")
;PCODE: $00000A09 VOL: 0
	cli
;PCODE: $00000A0A VOL: 0
; 0000 00F9 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
; 0000 00FA    {
; 0000 00FB    tx_buffer1[tx_wr_index1++]=c;
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
; 0000 00FC #if TX_BUFFER_SIZE1 != 256
; 0000 00FD    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
; 0000 00FE #endif
; 0000 00FF    ++tx_counter1;
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
; 0000 0100    }
; 0000 0101 else
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
; 0000 0102    UDR1=c;
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
; 0000 0103 #asm("sei")
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
	sei
;PCODE: $00000A2A VOL: 0
; 0000 0104 }
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;/////////////////////////////////////////////////////////////////////////////////
;/////////////////////////////////////////////////////////////////////////////////
;#define RS485 PORTD.4
;#define BACKLIGHT PORTB.7
;
;#define Graph_X_Min 0
;#define Graph_X_Max 479
;#define Graph_Y_Min 52
;#define Graph_Y_Max 232
;
;#define Graph_X_Step ((Graph_X_Max-Graph_X_Min+1)/60)
;#define Graph_Y_Mid ((Graph_Y_Max-Graph_Y_Min)/2 + Graph_Y_Min)
;
;#define Text_StartX 30
;#define Text_StartY 16
;
;#define Value_StartX 290
;#define Value_StartY 16
;#define Value_Lenght (16*4)
;
;#define BTN_StartX 6
;#define BTN_StartY 240
;#define BTN_Width 100
;#define BTN_Height 30
;#define BTN_Between 20
;
;flash unsigned int BTN1_Y_Begin = BTN_StartY;
;flash unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
;flash unsigned int BTN1_X_Begin = BTN_StartX;
;flash unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
;
;flash unsigned int BTN2_Y_Begin = BTN_StartY;
;flash unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
;flash unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
;flash unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
;
;flash unsigned int BTN3_Y_Begin = BTN_StartY;
;flash unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
;flash unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
;flash unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
;
;flash unsigned int BTN4_Y_Begin = BTN_StartY;
;flash unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
;flash unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
;flash unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
;
;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
; 0000 013A {
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
; 0000 013B   switch(Number)
;	*String -> Y+5
;	Number -> Y+4
;	Color -> Y+2
;	BackColor -> Y+0
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
; 0000 013C   {
; 0000 013D     case 1 :
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
; 0000 013E       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
; 0000 013F       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
; 0000 0140     break;
;PCODE: $00000A4B VOL: 0
; 0000 0141     case 2 :
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
; 0000 0142       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
; 0000 0143       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
; 0000 0144     break;
;PCODE: $00000A66 VOL: 0
; 0000 0145     case 3 :
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
; 0000 0146       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
; 0000 0147       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
; 0000 0148     break;
;PCODE: $00000A81 VOL: 0
; 0000 0149     case 4 :
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
;PCODE: $00000A84 VOL: 0
; 0000 014A       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
;PCODE: $00000A90 VOL: 0
; 0000 014B       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
; 0000 014C     break;
;PCODE: $00000A9C VOL: 0
; 0000 014D   }
;PCODE: $00000A9D VOL: 0
; 0000 014E }
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0

	.DSEG
_0xF1:
	.BYTE 0x18
;
;void Prepare_Screen(void)
; 0000 0151 {

	.CSEG
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
; 0000 0152   // рисуем кнопки
; 0000 0153   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
; 0000 0154   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
; 0000 0155   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
; 0000 0156   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
;PCODE: $00000AC4 VOL: 0
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
; 0000 0157   // рисуем окантовку
; 0000 0158   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
; 0000 0159   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
; 0000 015A   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
; 0000 015B   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
; 0000 015C 
; 0000 015D   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
;PCODE: $00000B0B VOL: 0
;PCODE: $00000B0C VOL: 0
; 0000 015E   Repaint_Button("  +", 2, BLACK, WHITE);
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
;PCODE: $00000B13 VOL: 0
;PCODE: $00000B14 VOL: 0
;PCODE: $00000B15 VOL: 0
;PCODE: $00000B16 VOL: 0
; 0000 015F   Repaint_Button("  -", 3, BLACK, WHITE);
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
;PCODE: $00000B1E VOL: 0
;PCODE: $00000B1F VOL: 0
;PCODE: $00000B20 VOL: 0
; 0000 0160   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 0
; 0000 0161 }
;PCODE: $00000B2B VOL: 0
;PCODE: $00000B2C VOL: 0

	.DSEG
_0xF5:
	.BYTE 0x13
;
;char GetButton(void)
; 0000 0164 {

	.CSEG
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
; 0000 0165   char res = 0;
; 0000 0166   if (TSC2046_GetCoordinates())
;PCODE: $00000B2F VOL: 0
;	res -> R17
;PCODE: $00000B30 VOL: 0
;PCODE: $00000B31 VOL: 0
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
; 0000 0167   {
; 0000 0168     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
; 0000 0169     {
; 0000 016A       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
;PCODE: $00000B3F VOL: 0
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
; 0000 016B     }
;PCODE: $00000B4B VOL: 0
; 0000 016C     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
; 0000 016D     {
; 0000 016E       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
; 0000 016F     }
;PCODE: $00000B63 VOL: 0
; 0000 0170     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
; 0000 0171     {
; 0000 0172       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
; 0000 0173     }
;PCODE: $00000B7B VOL: 0
; 0000 0174     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
;PCODE: $00000B7C VOL: 0
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
; 0000 0175     {
; 0000 0176       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
; 0000 0177     }
;PCODE: $00000B93 VOL: 0
; 0000 0178 
; 0000 0179   }
;PCODE: $00000B94 VOL: 0
; 0000 017A   return res;
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
; 0000 017B }
;PCODE: $00000B99 VOL: 0
;
;void PutParameterText(char Number, unsigned int Color)
; 0000 017E {
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
; 0000 017F   int X = Text_StartX;
; 0000 0180   int Y = Text_StartY;
; 0000 0181 
; 0000 0182   SSD1963_PutString16("                ", X, Y, Color, BLACK);
;PCODE: $00000B9C VOL: 0
;	Number -> Y+6
;	Color -> Y+4
;	X -> R16,R17
;	Y -> R18,R19
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
; 0000 0183   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
; 0000 0184   switch (Number)
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
; 0000 0185   {
; 0000 0186     case 0 :
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
; 0000 0187       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
;PCODE: $00000BBE VOL: 0
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
; 0000 0188       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
; 0000 0189     break;
;PCODE: $00000BD1 VOL: 0
; 0000 018A     case 1 :
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
; 0000 018B       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
; 0000 018C       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
; 0000 018D     break;
;PCODE: $00000BEB VOL: 0
; 0000 018E     case 2 :
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
;PCODE: $00000BEE VOL: 0
; 0000 018F       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
;PCODE: $00000BF3 VOL: 0
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
; 0000 0190       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
; 0000 0191     break;
;PCODE: $00000C05 VOL: 0
; 0000 0192     /*
; 0000 0193     case 3 :
; 0000 0194       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
; 0000 0195       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
; 0000 0196     break;
; 0000 0197     case 4 :
; 0000 0198       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
; 0000 0199       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
; 0000 019A     break;
; 0000 019B    */
; 0000 019C   }
;PCODE: $00000C06 VOL: 0
; 0000 019D }
;PCODE: $00000C07 VOL: 0
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0

	.DSEG
_0x10F:
	.BYTE 0x56
;
;///////////////////////////////////////////////
;char State=0, ParameterState=0, ValueState=0;
;signed int Graph_X = -Graph_X_Step;
;signed int Amplitude[3] = {90, 90, 50};
;signed int ValueLast[3] = {0,0,0};
;unsigned int WaitADC_mSec = 0;
;
;
;//////////////////////////////////////////////
;
;//Функция вывода напряжения(тока) и частоты
;void PutParameterValue(char v1, char v2, char v3, char fHz)
; 0000 01AB {

	.CSEG
;PCODE: $00000C0B VOL: 0
;PCODE: $00000C0C VOL: 0
; 0000 01AC     int X = Value_StartX;
; 0000 01AD     int Y = Value_StartY ;
; 0000 01AE     unsigned int Color = BLUE;
; 0000 01AF 
; 0000 01B0     SSD1963_PutString16("            ", X, Y, Color, BLACK);
;PCODE: $00000C0D VOL: 0
;	v1 -> Y+9
;	v2 -> Y+8
;	v3 -> Y+7
;	fHz -> Y+6
;	X -> R16,R17
;	Y -> R18,R19
;	Color -> R20,R21
;PCODE: $00000C0E VOL: 0
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
; 0000 01B1     SSD1963_PutString16("            ", X, Y + FONT_HEIGHT, Color, BLACK);
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
;PCODE: $00000C24 VOL: 0
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
; 0000 01B2 
; 0000 01B3     if(ParameterState != 2)
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
; 0000 01B4     {
; 0000 01B5         SSD1963_PutValue16(v3, X, Y, 3, Color, BLACK);
;PCODE: $00000C2B VOL: 0
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
;PCODE: $00000C35 VOL: 0
; 0000 01B6         X += Value_Lenght;
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
; 0000 01B7         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
; 0000 01B8         X += Value_Lenght;
;PCODE: $00000C43 VOL: 0
;PCODE: $00000C44 VOL: 0
; 0000 01B9         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
;PCODE: $00000C45 VOL: 0
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
; 0000 01BA         X = Value_StartX + Value_Lenght;
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
; 0000 01BB         Y += FONT_HEIGHT;
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
; 0000 01BC         SSD1963_PutValue16(fHz, X, Y, 3, Color, BLACK);
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
;PCODE: $00000C58 VOL: 0
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
; 0000 01BD         X += Value_Lenght;
;PCODE: $00000C5F VOL: 0
;PCODE: $00000C60 VOL: 0
; 0000 01BE         SSD1963_PutString16("ГЦ", X, Y, Color, BLACK);
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
; 0000 01BF     }
; 0000 01C0     else
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
; 0000 01C1     {
; 0000 01C2         X += Value_Lenght;
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
; 0000 01C3         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
;PCODE: $00000C78 VOL: 0
; 0000 01C4         Y += FONT_HEIGHT;
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
; 0000 01C5         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
; 0000 01C6     }
;PCODE: $00000C86 VOL: 0
; 0000 01C7 }
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
;PCODE: $00000C8A VOL: 0

	.DSEG
_0x118:
	.BYTE 0x1D
;
;
;void StartPaint()
; 0000 01CB {

	.CSEG
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
; 0000 01CC     //Чтоб первая точка легла
; 0000 01CD     Graph_X = -Graph_X_Step;
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
; 0000 01CE }
;PCODE: $00000C8F VOL: 0
;PCODE: $00000C90 VOL: 0
;
;
;void Paint_3phase(char a, char b, char c)
; 0000 01D2 {
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
; 0000 01D3     signed int Value[3];
; 0000 01D4     unsigned int Color[] = {GREEN, YELLOW, RED};
; 0000 01D5     signed int Lenght = Graph_X + Graph_X_Step;
; 0000 01D6     signed int mid = Graph_Y_Mid;
; 0000 01D7     char i;
; 0000 01D8 
; 0000 01D9     if(Graph_X > Graph_X_Max) return; //Некуда дальше
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
;PCODE: $00000C9B VOL: 0
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;	a -> Y+20
;	b -> Y+19
;	c -> Y+18
;	Value -> Y+12
;	Color -> Y+6
;	Lenght -> R16,R17
;	mid -> R18,R19
;	i -> R21
;PCODE: $00000CA1 VOL: 0
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
;PCODE: $00000CA7 VOL: 0
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
; 0000 01DA     if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
;PCODE: $00000CAC VOL: 0
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
;PCODE: $00000CAF VOL: 0
;PCODE: $00000CB0 VOL: 0
;PCODE: $00000CB1 VOL: 0
; 0000 01DB     Value[0] = a;
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
; 0000 01DC     Value[1] = b;
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
;PCODE: $00000CB8 VOL: 0
; 0000 01DD     Value[2] = c;
;PCODE: $00000CB9 VOL: 0
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
; 0000 01DE 
; 0000 01DF     if(Graph_X >= Graph_X_Min)
;PCODE: $00000CBC VOL: 0
;PCODE: $00000CBD VOL: 0
;PCODE: $00000CBE VOL: 0
; 0000 01E0     {
; 0000 01E1     // очищаем перед собой столбец пикселей
; 0000 01E2     SSD1963_DrawFillRect(Graph_X, Lenght+2, Graph_Y_Min, Graph_Y_Max+1, BLACK);
;PCODE: $00000CBF VOL: 0
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
;PCODE: $00000CC2 VOL: 0
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
;PCODE: $00000CC5 VOL: 0
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
;PCODE: $00000CCA VOL: 0
; 0000 01E3     //Линия нуля
; 0000 01E4     SSD1963_DrawFastLine(Graph_X, Lenght, mid, mid, DGRAY);
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
;PCODE: $00000CCE VOL: 0
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
; 0000 01E5     SSD1963_DrawFastLine(Graph_X, Lenght, mid+45, mid+45, DGRAY);
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
;PCODE: $00000CD5 VOL: 0
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
;PCODE: $00000CD8 VOL: 0
;PCODE: $00000CD9 VOL: 0
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
; 0000 01E6     SSD1963_DrawFastLine(Graph_X, Lenght, mid-45, mid-45, DGRAY);
;PCODE: $00000CDF VOL: 0
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
;PCODE: $00000CE2 VOL: 0
;PCODE: $00000CE3 VOL: 0
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
;PCODE: $00000CE8 VOL: 0
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
; 0000 01E7     SSD1963_DrawFastLine(Graph_X, Lenght, mid+90, mid+90, DGRAY);
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
; 0000 01E8     SSD1963_DrawFastLine(Graph_X, Lenght, mid-90, mid-90, DGRAY);
;PCODE: $00000CF7 VOL: 0
;PCODE: $00000CF8 VOL: 0
;PCODE: $00000CF9 VOL: 0
;PCODE: $00000CFA VOL: 0
;PCODE: $00000CFB VOL: 0
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
; 0000 01E9     }
; 0000 01EA 
; 0000 01EB     for(i=0; i<3; i++)
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
;PCODE: $00000D07 VOL: 0
;PCODE: $00000D08 VOL: 0
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
;PCODE: $00000D0B VOL: 0
;PCODE: $00000D0C VOL: 0
; 0000 01EC     {
; 0000 01ED         Value[i] = 128 - Value[i];
;PCODE: $00000D0D VOL: 0
;PCODE: $00000D0E VOL: 0
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
;PCODE: $00000D12 VOL: 0
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
;PCODE: $00000D18 VOL: 0
;PCODE: $00000D19 VOL: 0
;PCODE: $00000D1A VOL: 0
;PCODE: $00000D1B VOL: 0
;PCODE: $00000D1C VOL: 0
;PCODE: $00000D1D VOL: 0
; 0000 01EE         Value[i] *= Amplitude[ParameterState];
;PCODE: $00000D1E VOL: 0
;PCODE: $00000D1F VOL: 0
;PCODE: $00000D20 VOL: 0
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
;PCODE: $00000D23 VOL: 0
;PCODE: $00000D24 VOL: 0
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
;PCODE: $00000D27 VOL: 0
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
;PCODE: $00000D2A VOL: 0
;PCODE: $00000D2B VOL: 0
;PCODE: $00000D2C VOL: 0
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
; 0000 01EF         Value[i] >>= 7;
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
;PCODE: $00000D34 VOL: 0
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
;PCODE: $00000D37 VOL: 0
; 0000 01F0         if(Value[i]&0x0100) Value[i] |= 0xFF00;
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
;PCODE: $00000D3A VOL: 0
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
;PCODE: $00000D3D VOL: 0
;PCODE: $00000D3E VOL: 0
;PCODE: $00000D3F VOL: 0
;PCODE: $00000D40 VOL: 0
;PCODE: $00000D41 VOL: 0
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
; 0000 01F1 
; 0000 01F2         Value[i] += mid;
;PCODE: $00000D48 VOL: 0
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
;PCODE: $00000D4E VOL: 0
;PCODE: $00000D4F VOL: 0
;PCODE: $00000D50 VOL: 0
; 0000 01F3         if(ParameterState==2)
;PCODE: $00000D51 VOL: 0
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
; 0000 01F4         {
; 0000 01F5             Value[i] += (i==1)?(45):(-45);
;PCODE: $00000D54 VOL: 0
;PCODE: $00000D55 VOL: 0
;PCODE: $00000D56 VOL: 0
;PCODE: $00000D57 VOL: 0
;PCODE: $00000D58 VOL: 0
;PCODE: $00000D59 VOL: 0
;PCODE: $00000D5A VOL: 0
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;PCODE: $00000D5D VOL: 0
;PCODE: $00000D5E VOL: 0
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
;PCODE: $00000D67 VOL: 0
; 0000 01F6         }
; 0000 01F7         if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
;PCODE: $00000D6D VOL: 0
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
;PCODE: $00000D70 VOL: 0
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
;PCODE: $00000D76 VOL: 0
;PCODE: $00000D77 VOL: 0
; 0000 01F8         if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
;PCODE: $00000D7E VOL: 0
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
;PCODE: $00000D81 VOL: 0
;PCODE: $00000D82 VOL: 0
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
;PCODE: $00000D85 VOL: 0
;PCODE: $00000D86 VOL: 0
;PCODE: $00000D87 VOL: 0
; 0000 01F9 
; 0000 01FA         if(Graph_X >= Graph_X_Min)
;PCODE: $00000D88 VOL: 0
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
;PCODE: $00000D8B VOL: 0
; 0000 01FB         {   // пишем точку в столбце
; 0000 01FC             SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
;PCODE: $00000D8C VOL: 0
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
;PCODE: $00000D91 VOL: 0
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
; 0000 01FD         }
; 0000 01FE         // определяем предыдущую точку диограммы
; 0000 01FF         ValueLast[i] = Value[i];
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
;PCODE: $00000DAF VOL: 0
;PCODE: $00000DB0 VOL: 0
;PCODE: $00000DB1 VOL: 0
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
;PCODE: $00000DB5 VOL: 0
; 0000 0200 
; 0000 0201         if(ParameterState==2 && i==1) break;
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
;PCODE: $00000DBF VOL: 0
;PCODE: $00000DC0 VOL: 0
; 0000 0202     }
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
; 0000 0203 
; 0000 0204     Graph_X += Graph_X_Step; // увеличеваем Х диограммы
;PCODE: $00000DC7 VOL: 0
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
; 0000 0205 }
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
;PCODE: $00000DCD VOL: 0
;
;inline void main_loop()  // основной рабочий режим
; 0000 0208 {
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
; 0000 0209     char fHz;
; 0000 020A 
; 0000 020B             if(ValueState == 0 && rx_counter0 > 8)
;PCODE: $00000DD0 VOL: 0
;	fHz -> R17
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
;PCODE: $00000DD5 VOL: 0
;PCODE: $00000DD6 VOL: 0
;PCODE: $00000DD7 VOL: 0
;PCODE: $00000DD8 VOL: 0
;PCODE: $00000DD9 VOL: 0
;PCODE: $00000DDA VOL: 0
; 0000 020C             {
; 0000 020D                   ValueState = 1;
;PCODE: $00000DDB VOL: 0
;PCODE: $00000DDC VOL: 0
; 0000 020E 
; 0000 020F                   fHz = getchar0();
;PCODE: $00000DDD VOL: 0
;PCODE: $00000DDE VOL: 0
; 0000 0210                   switch(ParameterState)
;PCODE: $00000DDF VOL: 0
;PCODE: $00000DE0 VOL: 0
; 0000 0211                   {
; 0000 0212                               case 2:
;PCODE: $00000DE1 VOL: 0
;PCODE: $00000DE2 VOL: 0
; 0000 0213                               {
; 0000 0214                               getchar0();
;PCODE: $00000DE3 VOL: 0
; 0000 0215                               getchar0();
;PCODE: $00000DE4 VOL: 0
; 0000 0216                               getchar0();
;PCODE: $00000DE5 VOL: 0
; 0000 0217                               getchar0();
;PCODE: $00000DE6 VOL: 0
; 0000 0218                               getchar0();
;PCODE: $00000DE7 VOL: 0
; 0000 0219                               getchar0();
;PCODE: $00000DE8 VOL: 0
; 0000 021A                               }
; 0000 021B                               PutParameterValue(getchar0(), getchar0(), 0, fHz);
;PCODE: $00000DE9 VOL: 0
;PCODE: $00000DEA VOL: 0
;PCODE: $00000DEB VOL: 0
;PCODE: $00000DEC VOL: 0
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
; 0000 021C                               break;
;PCODE: $00000DF1 VOL: 0
; 0000 021D                               case 1:
;PCODE: $00000DF2 VOL: 0
;PCODE: $00000DF3 VOL: 0
;PCODE: $00000DF4 VOL: 0
; 0000 021E                               {
; 0000 021F                               getchar0();
;PCODE: $00000DF5 VOL: 0
; 0000 0220                               getchar0();
;PCODE: $00000DF6 VOL: 0
; 0000 0221                               getchar0();
;PCODE: $00000DF7 VOL: 0
; 0000 0222                               }
; 0000 0223                               case 0:
;PCODE: $00000DF8 VOL: 0
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
;PCODE: $00000DFC VOL: 0
; 0000 0224                               PutParameterValue(getchar0(), getchar0(), getchar0(), fHz);
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
;PCODE: $00000E01 VOL: 0
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
;PCODE: $00000E04 VOL: 0
; 0000 0225                               break;
;PCODE: $00000E05 VOL: 0
; 0000 0226                   }
;PCODE: $00000E06 VOL: 0
; 0000 0227 
; 0000 0228                   StartPaint();
;PCODE: $00000E07 VOL: 0
; 0000 0229                   while(rx_counter0) getchar0();
;PCODE: $00000E08 VOL: 0
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;PCODE: $00000E0B VOL: 0
;PCODE: $00000E0C VOL: 0
;PCODE: $00000E0D VOL: 0
;PCODE: $00000E0E VOL: 0
; 0000 022A switch(ParameterState)
;PCODE: $00000E0F VOL: 0
;PCODE: $00000E10 VOL: 0
; 0000 022B                   {
; 0000 022C                       case 0: putchar0('U'); break;
;PCODE: $00000E11 VOL: 0
;PCODE: $00000E12 VOL: 0
;PCODE: $00000E13 VOL: 0
;PCODE: $00000E14 VOL: 0
;PCODE: $00000E15 VOL: 0
;PCODE: $00000E16 VOL: 0
; 0000 022D                       case 1: putchar0('I'); break;
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
;PCODE: $00000E19 VOL: 0
;PCODE: $00000E1A VOL: 0
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
;PCODE: $00000E1D VOL: 0
; 0000 022E                       case 2: putchar0('Z'); break;
;PCODE: $00000E1E VOL: 0
;PCODE: $00000E1F VOL: 0
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;PCODE: $00000E22 VOL: 0
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
; 0000 022F                   }
;PCODE: $00000E25 VOL: 0
; 0000 0230             }
; 0000 0231 
; 0000 0232             if(ValueState == 1)
;PCODE: $00000E26 VOL: 0
;PCODE: $00000E27 VOL: 0
;PCODE: $00000E28 VOL: 0
;PCODE: $00000E29 VOL: 0
; 0000 0233             {
; 0000 0234                 if(ParameterState<2 && rx_counter0>2)
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
;PCODE: $00000E2C VOL: 0
;PCODE: $00000E2D VOL: 0
;PCODE: $00000E2E VOL: 0
;PCODE: $00000E2F VOL: 0
;PCODE: $00000E30 VOL: 0
;PCODE: $00000E31 VOL: 0
;PCODE: $00000E32 VOL: 0
;PCODE: $00000E33 VOL: 0
; 0000 0235                 {
; 0000 0236                     Paint_3phase(getchar0(),getchar0(),getchar0());
;PCODE: $00000E34 VOL: 0
;PCODE: $00000E35 VOL: 0
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
;PCODE: $00000E38 VOL: 0
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
; 0000 0237                 }
; 0000 0238                 else if(ParameterState==2 && rx_counter0>1)
;PCODE: $00000E3B VOL: 0
;PCODE: $00000E3C VOL: 0
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
;PCODE: $00000E41 VOL: 0
;PCODE: $00000E42 VOL: 0
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
;PCODE: $00000E45 VOL: 0
;PCODE: $00000E46 VOL: 0
; 0000 0239                 {
; 0000 023A                     Paint_3phase(getchar0(),getchar0(),0);
;PCODE: $00000E47 VOL: 0
;PCODE: $00000E48 VOL: 0
;PCODE: $00000E49 VOL: 0
;PCODE: $00000E4A VOL: 0
;PCODE: $00000E4B VOL: 0
;PCODE: $00000E4C VOL: 0
;PCODE: $00000E4D VOL: 0
; 0000 023B                 }
; 0000 023C             }
;PCODE: $00000E4E VOL: 0
;PCODE: $00000E4F VOL: 0
; 0000 023D 
; 0000 023E             if(WaitADC_mSec > 1500)
;PCODE: $00000E50 VOL: 0
;PCODE: $00000E51 VOL: 0
;PCODE: $00000E52 VOL: 0
;PCODE: $00000E53 VOL: 0
; 0000 023F             {
; 0000 0240                 WaitADC_mSec = 0;
;PCODE: $00000E54 VOL: 0
;PCODE: $00000E55 VOL: 0
; 0000 0241                 ValueState = 0;
;PCODE: $00000E56 VOL: 0
;PCODE: $00000E57 VOL: 0
; 0000 0242                 while(rx_counter0) getchar0();
;PCODE: $00000E58 VOL: 0
;PCODE: $00000E59 VOL: 0
;PCODE: $00000E5A VOL: 0
;PCODE: $00000E5B VOL: 0
;PCODE: $00000E5C VOL: 0
;PCODE: $00000E5D VOL: 0
;PCODE: $00000E5E VOL: 0
; 0000 0243 putchar0('S');
;PCODE: $00000E5F VOL: 0
;PCODE: $00000E60 VOL: 0
;PCODE: $00000E61 VOL: 0
; 0000 0244             }
; 0000 0245 }
;PCODE: $00000E62 VOL: 0
;PCODE: $00000E63 VOL: 0
;PCODE: $00000E64 VOL: 0
;PCODE: $00000E65 VOL: 0
;
;// Timer 0 overflow interrupt 1 ms
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0249 {
;PCODE: $00000E66 VOL: 0
;PCODE: $00000E67 VOL: 0
; 0000 024A // Reinitialize Timer 0 value
; 0000 024B TCNT0=0x06;
;PCODE: $00000E68 VOL: 0
;PCODE: $00000E69 VOL: 0
; 0000 024C // Place your code here
; 0000 024D WaitADC_mSec++;
;PCODE: $00000E6A VOL: 0
;PCODE: $00000E6B VOL: 0
;PCODE: $00000E6C VOL: 0
;PCODE: $00000E6D VOL: 0
; 0000 024E }
;PCODE: $00000E6E VOL: 0
;PCODE: $00000E6F VOL: 0
;PCODE: $00000E70 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0253 {
;PCODE: $00000E71 VOL: 0
; 0000 0254 // Declare your local variables here
; 0000 0255 {
; 0000 0256 // Input/Output Ports initialization
; 0000 0257 // Port A initialization
; 0000 0258 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0259 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 025A PORTA=0x00;
;PCODE: $00000E72 VOL: 0
;PCODE: $00000E73 VOL: 0
; 0000 025B DDRA=0x00;
;PCODE: $00000E74 VOL: 0
;PCODE: $00000E75 VOL: 0
; 0000 025C 
; 0000 025D // Port B initialization
; 0000 025E // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 025F // State7=1 State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
; 0000 0260 PORTB=0x80;
;PCODE: $00000E76 VOL: 0
;PCODE: $00000E77 VOL: 0
; 0000 0261 DDRB=0x87;
;PCODE: $00000E78 VOL: 0
;PCODE: $00000E79 VOL: 0
; 0000 0262 
; 0000 0263 // Port C initialization
; 0000 0264 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0265 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0266 PORTC=0x00;
;PCODE: $00000E7A VOL: 0
;PCODE: $00000E7B VOL: 0
; 0000 0267 DDRC=0x00;
;PCODE: $00000E7C VOL: 0
;PCODE: $00000E7D VOL: 0
; 0000 0268 
; 0000 0269 // Port D initialization
; 0000 026A // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 026B // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 026C PORTD=0x00;
;PCODE: $00000E7E VOL: 0
;PCODE: $00000E7F VOL: 0
; 0000 026D DDRD=0x10;
;PCODE: $00000E80 VOL: 0
;PCODE: $00000E81 VOL: 0
; 0000 026E 
; 0000 026F // Port E initialization
; 0000 0270 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0271 // State7=T State6=T State5=T State4=1 State3=T State2=T State1=T State0=T
; 0000 0272 PORTE=0x10;
;PCODE: $00000E82 VOL: 0
;PCODE: $00000E83 VOL: 0
; 0000 0273 DDRE=0x10;  //PE4 - CD off
;PCODE: $00000E84 VOL: 0
;PCODE: $00000E85 VOL: 0
; 0000 0274 
; 0000 0275 // Port F initialization
; 0000 0276 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0277 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0278 PORTF=0x00;
;PCODE: $00000E86 VOL: 0
;PCODE: $00000E87 VOL: 0
; 0000 0279 DDRF=0x00;
;PCODE: $00000E88 VOL: 0
;PCODE: $00000E89 VOL: 0
; 0000 027A 
; 0000 027B // Port G initialization
; 0000 027C // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 027D // State4=T State3=T State2=T State1=T State0=T
; 0000 027E PORTG=0x00;
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
; 0000 027F DDRG=0x00;
;PCODE: $00000E8C VOL: 0
;PCODE: $00000E8D VOL: 0
; 0000 0280 
; 0000 0281 // Timer/Counter 0 initialization
; 0000 0282 // Clock source: System Clock
; 0000 0283 // Clock value: 250,000 kHz
; 0000 0284 // Mode: Normal top=0xFF
; 0000 0285 // OC0 output: Disconnected
; 0000 0286 ASSR=0x00;
;PCODE: $00000E8E VOL: 0
;PCODE: $00000E8F VOL: 0
; 0000 0287 TCCR0=0x04;
;PCODE: $00000E90 VOL: 0
;PCODE: $00000E91 VOL: 0
; 0000 0288 TCNT0=0x06;
;PCODE: $00000E92 VOL: 0
;PCODE: $00000E93 VOL: 0
; 0000 0289 OCR0=0x00;
;PCODE: $00000E94 VOL: 0
;PCODE: $00000E95 VOL: 0
; 0000 028A 
; 0000 028B // Timer/Counter 1 initialization
; 0000 028C // Clock source: System Clock
; 0000 028D // Clock value: Timer1 Stopped
; 0000 028E // Mode: Normal top=0xFFFF
; 0000 028F // OC1A output: Discon.
; 0000 0290 // OC1B output: Discon.
; 0000 0291 // OC1C output: Discon.
; 0000 0292 // Noise Canceler: Off
; 0000 0293 // Input Capture on Falling Edge
; 0000 0294 // Timer1 Overflow Interrupt: Off
; 0000 0295 // Input Capture Interrupt: Off
; 0000 0296 // Compare A Match Interrupt: Off
; 0000 0297 // Compare B Match Interrupt: Off
; 0000 0298 // Compare C Match Interrupt: Off
; 0000 0299 TCCR1A=0x00;
;PCODE: $00000E96 VOL: 0
;PCODE: $00000E97 VOL: 0
; 0000 029A TCCR1B=0x00;
;PCODE: $00000E98 VOL: 0
;PCODE: $00000E99 VOL: 0
; 0000 029B TCNT1H=0x00;
;PCODE: $00000E9A VOL: 0
;PCODE: $00000E9B VOL: 0
; 0000 029C TCNT1L=0x00;
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
; 0000 029D ICR1H=0x00;
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
; 0000 029E ICR1L=0x00;
;PCODE: $00000EA0 VOL: 0
;PCODE: $00000EA1 VOL: 0
; 0000 029F OCR1AH=0x00;
;PCODE: $00000EA2 VOL: 0
;PCODE: $00000EA3 VOL: 0
; 0000 02A0 OCR1AL=0x00;
;PCODE: $00000EA4 VOL: 0
;PCODE: $00000EA5 VOL: 0
; 0000 02A1 OCR1BH=0x00;
;PCODE: $00000EA6 VOL: 0
;PCODE: $00000EA7 VOL: 0
; 0000 02A2 OCR1BL=0x00;
;PCODE: $00000EA8 VOL: 0
;PCODE: $00000EA9 VOL: 0
; 0000 02A3 OCR1CH=0x00;
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
; 0000 02A4 OCR1CL=0x00;
;PCODE: $00000EAC VOL: 0
;PCODE: $00000EAD VOL: 0
; 0000 02A5 
; 0000 02A6 // Timer/Counter 2 initialization
; 0000 02A7 // Clock source: System Clock
; 0000 02A8 // Clock value: Timer2 Stopped
; 0000 02A9 // Mode: Normal top=0xFF
; 0000 02AA // OC2 output: Disconnected
; 0000 02AB TCCR2=0x00;
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
; 0000 02AC TCNT2=0x00;
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
; 0000 02AD OCR2=0x00;
;PCODE: $00000EB2 VOL: 0
;PCODE: $00000EB3 VOL: 0
; 0000 02AE 
; 0000 02AF // Timer/Counter 3 initialization
; 0000 02B0 // Clock source: System Clock
; 0000 02B1 // Clock value: Timer3 Stopped
; 0000 02B2 // Mode: Normal top=0xFFFF
; 0000 02B3 // OC3A output: Discon.
; 0000 02B4 // OC3B output: Discon.
; 0000 02B5 // OC3C output: Discon.
; 0000 02B6 // Noise Canceler: Off
; 0000 02B7 // Input Capture on Falling Edge
; 0000 02B8 // Timer3 Overflow Interrupt: Off
; 0000 02B9 // Input Capture Interrupt: Off
; 0000 02BA // Compare A Match Interrupt: Off
; 0000 02BB // Compare B Match Interrupt: Off
; 0000 02BC // Compare C Match Interrupt: Off
; 0000 02BD TCCR3A=0x00;
;PCODE: $00000EB4 VOL: 0
;PCODE: $00000EB5 VOL: 0
; 0000 02BE TCCR3B=0x00;
;PCODE: $00000EB6 VOL: 0
;PCODE: $00000EB7 VOL: 0
; 0000 02BF TCNT3H=0x00;
;PCODE: $00000EB8 VOL: 0
;PCODE: $00000EB9 VOL: 0
; 0000 02C0 TCNT3L=0x00;
;PCODE: $00000EBA VOL: 0
;PCODE: $00000EBB VOL: 0
; 0000 02C1 ICR3H=0x00;
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
; 0000 02C2 ICR3L=0x00;
;PCODE: $00000EBE VOL: 0
;PCODE: $00000EBF VOL: 0
; 0000 02C3 OCR3AH=0x00;
;PCODE: $00000EC0 VOL: 0
;PCODE: $00000EC1 VOL: 0
; 0000 02C4 OCR3AL=0x00;
;PCODE: $00000EC2 VOL: 0
;PCODE: $00000EC3 VOL: 0
; 0000 02C5 OCR3BH=0x00;
;PCODE: $00000EC4 VOL: 0
;PCODE: $00000EC5 VOL: 0
; 0000 02C6 OCR3BL=0x00;
;PCODE: $00000EC6 VOL: 0
;PCODE: $00000EC7 VOL: 0
; 0000 02C7 OCR3CH=0x00;
;PCODE: $00000EC8 VOL: 0
;PCODE: $00000EC9 VOL: 0
; 0000 02C8 OCR3CL=0x00;
;PCODE: $00000ECA VOL: 0
;PCODE: $00000ECB VOL: 0
; 0000 02C9 
; 0000 02CA // External Interrupt(s) initialization
; 0000 02CB // INT0: Off
; 0000 02CC // INT1: Off
; 0000 02CD // INT2: Off
; 0000 02CE // INT3: Off
; 0000 02CF // INT4: Off
; 0000 02D0 // INT5: Off
; 0000 02D1 // INT6: Off
; 0000 02D2 // INT7: Off
; 0000 02D3 EICRA=0x00;
;PCODE: $00000ECC VOL: 0
;PCODE: $00000ECD VOL: 0
; 0000 02D4 EICRB=0x00;
;PCODE: $00000ECE VOL: 0
;PCODE: $00000ECF VOL: 0
; 0000 02D5 EIMSK=0x00;
;PCODE: $00000ED0 VOL: 0
;PCODE: $00000ED1 VOL: 0
; 0000 02D6 
; 0000 02D7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 02D8 TIMSK=0x01;
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
; 0000 02D9 
; 0000 02DA ETIMSK=0x00;
;PCODE: $00000ED4 VOL: 0
;PCODE: $00000ED5 VOL: 0
; 0000 02DB 
; 0000 02DC // USART0 initialization
; 0000 02DD // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 02DE // USART0 Receiver: On
; 0000 02DF // USART0 Transmitter: On
; 0000 02E0 // USART0 Mode: Asynchronous
; 0000 02E1 // USART0 Baud Rate: 115200
; 0000 02E2 UCSR0A=0x00;
;PCODE: $00000ED6 VOL: 0
;PCODE: $00000ED7 VOL: 0
; 0000 02E3 UCSR0B=0xD8;
;PCODE: $00000ED8 VOL: 0
;PCODE: $00000ED9 VOL: 0
; 0000 02E4 UCSR0C=0x06;
;PCODE: $00000EDA VOL: 0
;PCODE: $00000EDB VOL: 0
; 0000 02E5 UBRR0H=0x00;
;PCODE: $00000EDC VOL: 0
;PCODE: $00000EDD VOL: 0
; 0000 02E6 UBRR0L=0x08;
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
; 0000 02E7 
; 0000 02E8 // USART1 initialization
; 0000 02E9 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 02EA // USART1 Receiver: On
; 0000 02EB // USART1 Transmitter: On
; 0000 02EC // USART1 Mode: Asynchronous
; 0000 02ED // USART1 Baud Rate: 9600
; 0000 02EE UCSR1A=0x00;
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
; 0000 02EF UCSR1B=0xD8;
;PCODE: $00000EE2 VOL: 0
;PCODE: $00000EE3 VOL: 0
; 0000 02F0 UCSR1C=0x06;
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
; 0000 02F1 UBRR1H=0x00;
;PCODE: $00000EE6 VOL: 0
;PCODE: $00000EE7 VOL: 0
; 0000 02F2 UBRR1L=0x67;
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
; 0000 02F3 
; 0000 02F4 // Analog Comparator initialization
; 0000 02F5 // Analog Comparator: Off
; 0000 02F6 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 02F7 ACSR=0x80;
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
; 0000 02F8 SFIOR=0x00;
;PCODE: $00000EEC VOL: 0
;PCODE: $00000EED VOL: 0
; 0000 02F9 
; 0000 02FA // ADC initialization
; 0000 02FB // ADC disabled
; 0000 02FC ADCSRA=0x00;
;PCODE: $00000EEE VOL: 0
;PCODE: $00000EEF VOL: 0
; 0000 02FD 
; 0000 02FE // SPI initialization
; 0000 02FF // SPI Type: Master
; 0000 0300 // SPI Clock Rate: 2*250,000 kHz
; 0000 0301 // SPI Clock Phase: Cycle Start
; 0000 0302 // SPI Clock Polarity: Low
; 0000 0303 // SPI Data Order: MSB First
; 0000 0304 SPCR=0x52;
;PCODE: $00000EF0 VOL: 0
;PCODE: $00000EF1 VOL: 0
; 0000 0305 SPSR=0x00;
;PCODE: $00000EF2 VOL: 0
;PCODE: $00000EF3 VOL: 0
; 0000 0306 
; 0000 0307 // TWI initialization
; 0000 0308 // TWI disabled
; 0000 0309 TWCR=0x00;
;PCODE: $00000EF4 VOL: 0
;PCODE: $00000EF5 VOL: 0
; 0000 030A }
; 0000 030B {
; 0000 030C // Global enable interrupts
; 0000 030D #asm("sei")
;PCODE: $00000EF6 VOL: 0
	sei
;PCODE: $00000EF7 VOL: 0
; 0000 030E 
; 0000 030F SSD1963_Init();
;PCODE: $00000EF8 VOL: 0
; 0000 0310 TSC2046_Init();
;PCODE: $00000EF9 VOL: 0
; 0000 0311 SSD1963_ClearScreen(BLACK);
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
;PCODE: $00000EFC VOL: 0
; 0000 0312 
; 0000 0313   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLUE, BLACK);
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
;PCODE: $00000F01 VOL: 0
;PCODE: $00000F02 VOL: 0
;PCODE: $00000F03 VOL: 0
;PCODE: $00000F04 VOL: 0
;PCODE: $00000F05 VOL: 0
;PCODE: $00000F06 VOL: 0
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
; 0000 0314   BACKLIGHT = 0; //On
;PCODE: $00000F09 VOL: 0
;PCODE: $00000F0A VOL: 0
; 0000 0315   delay_ms(200);
;PCODE: $00000F0B VOL: 0
;PCODE: $00000F0C VOL: 0
;PCODE: $00000F0D VOL: 0
; 0000 0316   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), RED, BLACK);
;PCODE: $00000F0E VOL: 0
;PCODE: $00000F0F VOL: 0
;PCODE: $00000F10 VOL: 0
;PCODE: $00000F11 VOL: 0
;PCODE: $00000F12 VOL: 0
;PCODE: $00000F13 VOL: 0
;PCODE: $00000F14 VOL: 0
;PCODE: $00000F15 VOL: 0
;PCODE: $00000F16 VOL: 0
;PCODE: $00000F17 VOL: 0
;PCODE: $00000F18 VOL: 0
;PCODE: $00000F19 VOL: 0
; 0000 0317   delay_ms(200);
;PCODE: $00000F1A VOL: 0
;PCODE: $00000F1B VOL: 0
;PCODE: $00000F1C VOL: 0
; 0000 0318   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, GREEN, BLACK);
;PCODE: $00000F1D VOL: 0
;PCODE: $00000F1E VOL: 0
;PCODE: $00000F1F VOL: 0
;PCODE: $00000F20 VOL: 0
;PCODE: $00000F21 VOL: 0
;PCODE: $00000F22 VOL: 0
;PCODE: $00000F23 VOL: 0
;PCODE: $00000F24 VOL: 0
;PCODE: $00000F25 VOL: 0
;PCODE: $00000F26 VOL: 0
;PCODE: $00000F27 VOL: 0
;PCODE: $00000F28 VOL: 0
; 0000 0319   delay_ms(200);
;PCODE: $00000F29 VOL: 0
;PCODE: $00000F2A VOL: 0
;PCODE: $00000F2B VOL: 0
; 0000 031A   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
;PCODE: $00000F2C VOL: 0
;PCODE: $00000F2D VOL: 0
;PCODE: $00000F2E VOL: 0
;PCODE: $00000F2F VOL: 0
;PCODE: $00000F30 VOL: 0
;PCODE: $00000F31 VOL: 0
;PCODE: $00000F32 VOL: 0
;PCODE: $00000F33 VOL: 0
;PCODE: $00000F34 VOL: 0
;PCODE: $00000F35 VOL: 0
;PCODE: $00000F36 VOL: 0
;PCODE: $00000F37 VOL: 0
; 0000 031B   delay_ms(200);
;PCODE: $00000F38 VOL: 0
;PCODE: $00000F39 VOL: 0
;PCODE: $00000F3A VOL: 0
; 0000 031C   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
;PCODE: $00000F3B VOL: 0
;PCODE: $00000F3C VOL: 0
;PCODE: $00000F3D VOL: 0
;PCODE: $00000F3E VOL: 0
;PCODE: $00000F3F VOL: 0
;PCODE: $00000F40 VOL: 0
;PCODE: $00000F41 VOL: 0
;PCODE: $00000F42 VOL: 0
;PCODE: $00000F43 VOL: 0
;PCODE: $00000F44 VOL: 0
;PCODE: $00000F45 VOL: 0
;PCODE: $00000F46 VOL: 0
; 0000 031D   delay_ms(200);
;PCODE: $00000F47 VOL: 0
;PCODE: $00000F48 VOL: 0
;PCODE: $00000F49 VOL: 0
; 0000 031E   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
;PCODE: $00000F4A VOL: 0
;PCODE: $00000F4B VOL: 0
;PCODE: $00000F4C VOL: 0
;PCODE: $00000F4D VOL: 0
;PCODE: $00000F4E VOL: 0
;PCODE: $00000F4F VOL: 0
;PCODE: $00000F50 VOL: 0
;PCODE: $00000F51 VOL: 0
;PCODE: $00000F52 VOL: 0
;PCODE: $00000F53 VOL: 0
;PCODE: $00000F54 VOL: 0
;PCODE: $00000F55 VOL: 0
; 0000 031F 
; 0000 0320 Prepare_Screen();
;PCODE: $00000F56 VOL: 0
; 0000 0321 
; 0000 0322 // Watchdog Timer initialization
; 0000 0323 // Watchdog Timer Prescaler: OSC/2048k
; 0000 0324 #pragma optsize-
; 0000 0325 #asm("wdr")
;PCODE: $00000F57 VOL: 0
	wdr
;PCODE: $00000F58 VOL: 0
; 0000 0326 //WDTCR=0x1F;
; 0000 0327 //WDTCR=0x0F;
; 0000 0328 #ifdef _OPTIMIZE_SIZE_
; 0000 0329 #pragma optsize+
; 0000 032A #endif
; 0000 032B }
; 0000 032C 
; 0000 032D PutParameterText(ParameterState, BLUE);
;PCODE: $00000F59 VOL: 0
;PCODE: $00000F5A VOL: 0
;PCODE: $00000F5B VOL: 0
;PCODE: $00000F5C VOL: 0
;PCODE: $00000F5D VOL: 0
; 0000 032E while (1)
;PCODE: $00000F5E VOL: 0
; 0000 032F       {
; 0000 0330       #asm("wdr")
;PCODE: $00000F5F VOL: 0
	wdr
;PCODE: $00000F60 VOL: 0
; 0000 0331       switch(State)
;PCODE: $00000F61 VOL: 0
;PCODE: $00000F62 VOL: 0
; 0000 0332         {
; 0000 0333           case 0: // основной рабочий режим
;PCODE: $00000F63 VOL: 0
;PCODE: $00000F64 VOL: 0
; 0000 0334           {
; 0000 0335               main_loop();
;PCODE: $00000F65 VOL: 0
; 0000 0336 
; 0000 0337               switch (GetButton())
;PCODE: $00000F66 VOL: 0
; 0000 0338               {
; 0000 0339               case 1 :
;PCODE: $00000F67 VOL: 0
;PCODE: $00000F68 VOL: 0
; 0000 033A                   if(++ParameterState > 2) ParameterState = 0;
;PCODE: $00000F69 VOL: 0
;PCODE: $00000F6A VOL: 0
;PCODE: $00000F6B VOL: 0
;PCODE: $00000F6C VOL: 0
;PCODE: $00000F6D VOL: 0
;PCODE: $00000F6E VOL: 0
;PCODE: $00000F6F VOL: 0
; 0000 033B                   PutParameterText(ParameterState, BLUE);
;PCODE: $00000F70 VOL: 0
;PCODE: $00000F71 VOL: 0
;PCODE: $00000F72 VOL: 0
;PCODE: $00000F73 VOL: 0
;PCODE: $00000F74 VOL: 0
;PCODE: $00000F75 VOL: 0
; 0000 033C                   delay_ms(250);
;PCODE: $00000F76 VOL: 0
;PCODE: $00000F77 VOL: 0
;PCODE: $00000F78 VOL: 0
; 0000 033D               break;
;PCODE: $00000F79 VOL: 0
; 0000 033E               case 2 :
;PCODE: $00000F7A VOL: 0
;PCODE: $00000F7B VOL: 0
;PCODE: $00000F7C VOL: 0
; 0000 033F                   if(Amplitude[ParameterState] < 200)
;PCODE: $00000F7D VOL: 0
;PCODE: $00000F7E VOL: 0
;PCODE: $00000F7F VOL: 0
;PCODE: $00000F80 VOL: 0
;PCODE: $00000F81 VOL: 0
;PCODE: $00000F82 VOL: 0
;PCODE: $00000F83 VOL: 0
;PCODE: $00000F84 VOL: 0
; 0000 0340                   {
; 0000 0341                       Amplitude[ParameterState] += 10;
;PCODE: $00000F85 VOL: 0
;PCODE: $00000F86 VOL: 0
;PCODE: $00000F87 VOL: 0
;PCODE: $00000F88 VOL: 0
;PCODE: $00000F89 VOL: 0
;PCODE: $00000F8A VOL: 0
;PCODE: $00000F8B VOL: 0
;PCODE: $00000F8C VOL: 0
; 0000 0342                       delay_ms(100);
;PCODE: $00000F8D VOL: 0
;PCODE: $00000F8E VOL: 0
;PCODE: $00000F8F VOL: 0
; 0000 0343                   }
; 0000 0344               break;
;PCODE: $00000F90 VOL: 0
;PCODE: $00000F91 VOL: 0
; 0000 0345               case 3 :
;PCODE: $00000F92 VOL: 0
;PCODE: $00000F93 VOL: 0
;PCODE: $00000F94 VOL: 0
; 0000 0346                   if(Amplitude[ParameterState] > 20)
;PCODE: $00000F95 VOL: 0
;PCODE: $00000F96 VOL: 0
;PCODE: $00000F97 VOL: 0
;PCODE: $00000F98 VOL: 0
;PCODE: $00000F99 VOL: 0
;PCODE: $00000F9A VOL: 0
;PCODE: $00000F9B VOL: 0
;PCODE: $00000F9C VOL: 0
; 0000 0347                   {
; 0000 0348                       Amplitude[ParameterState] -= 10;
;PCODE: $00000F9D VOL: 0
;PCODE: $00000F9E VOL: 0
;PCODE: $00000F9F VOL: 0
;PCODE: $00000FA0 VOL: 0
;PCODE: $00000FA1 VOL: 0
;PCODE: $00000FA2 VOL: 0
;PCODE: $00000FA3 VOL: 0
;PCODE: $00000FA4 VOL: 0
; 0000 0349                       delay_ms(100);
;PCODE: $00000FA5 VOL: 0
;PCODE: $00000FA6 VOL: 0
;PCODE: $00000FA7 VOL: 0
; 0000 034A                   }
; 0000 034B               break;
;PCODE: $00000FA8 VOL: 0
;PCODE: $00000FA9 VOL: 0
; 0000 034C               case 4 :
;PCODE: $00000FAA VOL: 0
;PCODE: $00000FAB VOL: 0
;PCODE: $00000FAC VOL: 0
; 0000 034D                 State = 200;
;PCODE: $00000FAD VOL: 0
;PCODE: $00000FAE VOL: 0
; 0000 034E                 Repaint_Button("СТАРТ", 4, BLACK, WHITE);
;PCODE: $00000FAF VOL: 0
;PCODE: $00000FB0 VOL: 0
;PCODE: $00000FB1 VOL: 0
;PCODE: $00000FB2 VOL: 0
;PCODE: $00000FB3 VOL: 0
;PCODE: $00000FB4 VOL: 0
;PCODE: $00000FB5 VOL: 0
;PCODE: $00000FB6 VOL: 0
;PCODE: $00000FB7 VOL: 0
;PCODE: $00000FB8 VOL: 0
; 0000 034F                 delay_ms(250);
;PCODE: $00000FB9 VOL: 0
;PCODE: $00000FBA VOL: 0
;PCODE: $00000FBB VOL: 0
; 0000 0350               break;
;PCODE: $00000FBC VOL: 0
; 0000 0351               }
;PCODE: $00000FBD VOL: 0
; 0000 0352           }
; 0000 0353           break;
;PCODE: $00000FBE VOL: 0
; 0000 0354           case 3: // настройки
;PCODE: $00000FBF VOL: 0
;PCODE: $00000FC0 VOL: 0
;PCODE: $00000FC1 VOL: 0
; 0000 0355           {
; 0000 0356           }
; 0000 0357           break;
;PCODE: $00000FC2 VOL: 0
; 0000 0358           case 200 : // пауза
;PCODE: $00000FC3 VOL: 0
;PCODE: $00000FC4 VOL: 0
;PCODE: $00000FC5 VOL: 0
; 0000 0359             //Sleep_mSec = 0;
; 0000 035A             switch (GetButton())
;PCODE: $00000FC6 VOL: 0
; 0000 035B             {
; 0000 035C               case 1 :
;PCODE: $00000FC7 VOL: 0
;PCODE: $00000FC8 VOL: 0
; 0000 035D               break;
;PCODE: $00000FC9 VOL: 0
; 0000 035E               case 2 :
;PCODE: $00000FCA VOL: 0
;PCODE: $00000FCB VOL: 0
;PCODE: $00000FCC VOL: 0
; 0000 035F               break;
;PCODE: $00000FCD VOL: 0
; 0000 0360               case 3 :
;PCODE: $00000FCE VOL: 0
;PCODE: $00000FCF VOL: 0
;PCODE: $00000FD0 VOL: 0
; 0000 0361               break;
;PCODE: $00000FD1 VOL: 0
; 0000 0362               case 4 :
;PCODE: $00000FD2 VOL: 0
;PCODE: $00000FD3 VOL: 0
;PCODE: $00000FD4 VOL: 0
; 0000 0363                 State = 0;
;PCODE: $00000FD5 VOL: 0
;PCODE: $00000FD6 VOL: 0
; 0000 0364                 Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
;PCODE: $00000FD7 VOL: 0
;PCODE: $00000FD8 VOL: 0
;PCODE: $00000FD9 VOL: 0
;PCODE: $00000FDA VOL: 0
;PCODE: $00000FDB VOL: 0
;PCODE: $00000FDC VOL: 0
;PCODE: $00000FDD VOL: 0
;PCODE: $00000FDE VOL: 0
;PCODE: $00000FDF VOL: 0
;PCODE: $00000FE0 VOL: 0
; 0000 0365                 delay_ms(250);
;PCODE: $00000FE1 VOL: 0
;PCODE: $00000FE2 VOL: 0
;PCODE: $00000FE3 VOL: 0
; 0000 0366               break;
;PCODE: $00000FE4 VOL: 0
; 0000 0367             }
;PCODE: $00000FE5 VOL: 0
; 0000 0368 
; 0000 0369           break;
;PCODE: $00000FE6 VOL: 0
; 0000 036A           case 250 : // сп¤щий режим
;PCODE: $00000FE7 VOL: 0
;PCODE: $00000FE8 VOL: 0
;PCODE: $00000FE9 VOL: 0
; 0000 036B           {
; 0000 036C             if (TSC2046_GetCoordinates() > 0)
;PCODE: $00000FEA VOL: 0
;PCODE: $00000FEB VOL: 0
;PCODE: $00000FEC VOL: 0
; 0000 036D             {
; 0000 036E               State = 0;
;PCODE: $00000FED VOL: 0
;PCODE: $00000FEE VOL: 0
; 0000 036F               BACKLIGHT = 0; //On
;PCODE: $00000FEF VOL: 0
;PCODE: $00000FF0 VOL: 0
; 0000 0370             }
; 0000 0371           }
;PCODE: $00000FF1 VOL: 0
; 0000 0372           break;
;PCODE: $00000FF2 VOL: 0
; 0000 0373         }
;PCODE: $00000FF3 VOL: 0
; 0000 0374 
; 0000 0375       }
;PCODE: $00000FF4 VOL: 0
;PCODE: $00000FF5 VOL: 0
; 0000 0376 }
;PCODE: $00000FF6 VOL: 0
;PCODE: $00000FF7 VOL: 0
;PCODE: $00000FF8 VOL: 0

	.DSEG
_0x14B:
	.BYTE 0x36
