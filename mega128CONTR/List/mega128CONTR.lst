
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm Thu Jul 30 17:20:36 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1061): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1065): warning: Register r13 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TOUCH_X=R4
                 	.DEF _TOUCH_Y=R6
                 	.DEF _TOUCH_X_LAST=R8
                 	.DEF _TOUCH_Y_LAST=R10
                 	.DEF _rx_wr_index0=R13
                 	.DEF _rx_rd_index0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0484 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0e92 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0a50 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0a8a 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0aca 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0af5 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _tbl10_G101:
0003e6 2710
0003e7 03e8
0003e8 0064
0003e9 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
0003ea 0001      	.DB  0x1,0x0
                 _tbl16_G101:
0003eb 1000
0003ec 0100
0003ed 0010
0003ee 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0003ef 0000      	.DW  0x0000
                 
                 _0x116:
0003f0 fff8      	.DB  0xF8,0xFF
                 _0x117:
0003f1 005a
0003f2 005a
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1414): warning: .cseg .db misalignment - padding zero byte
0003f3 0032      	.DB  0x5A,0x0,0x5A,0x0,0x32
                 _0x0:
0003f4 2020
0003f5 2020
0003f6 0020
0003f7 c5cc      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xCC,0xC5
0003f8 decd
0003f9 2000
0003fa 2b20
0003fb 2000      	.DB  0xCD,0xDE,0x0,0x20,0x20,0x2B,0x0,0x20
0003fc 2d20
0003fd cf00
0003fe d3c0
0003ff c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
000400 2000
000401 2020
000402 2020
000403 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000404 2020
000405 2020
000406 2020
000407 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000408 0020
000409 c0cd
00040a d0cf
00040b c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
00040c cdc5
00040d c5c8
00040e d400
00040f c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
000410 d200
000411 cace
000412 cd00
000413 cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
000414 dfd0
000415 c5c6
000416 c8cd
000417 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000418 20c8
000419 ced2
00041a 00ca
00041b cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
00041c c1c7
00041d c6d3
00041e c5c4
00041f c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
000420 00df
000421 d6c3
000422 c400
000423 d1c5      	.DB  0xDF,0x0,0xC3,0xD6,0x0,0xC4,0xC5,0xD1
000424 ceca
000425 00cc
000426 d2d1
000427 d0c0      	.DB  0xCA,0xCE,0xCC,0x0,0xD1,0xD2,0xC0,0xD0
000428 00d2      	.DB  0xD2,0x0
                 
                 __GLOBAL_INI_TBL:
000429 0001      	.DW  0x01
00042a 0002      	.DW  0x02
00042b 07de      	.DW  __REG_BIT_VARS*2
                 
00042c 0006      	.DW  0x06
00042d 0500      	.DW  _0xF1
00042e 07e8      	.DW  _0x0*2
                 
00042f 0006      	.DW  0x06
000430 0506      	.DW  _0xF1+6
000431 07e8      	.DW  _0x0*2
                 
000432 0006      	.DW  0x06
000433 050c      	.DW  _0xF1+12
000434 07e8      	.DW  _0x0*2
                 
000435 0006      	.DW  0x06
000436 0512      	.DW  _0xF1+18
000437 07e8      	.DW  _0x0*2
                 
000438 0005      	.DW  0x05
000439 0518      	.DW  _0xF5
00043a 07ee      	.DW  _0x0*2+6
                 
00043b 0004      	.DW  0x04
00043c 051d      	.DW  _0xF5+5
00043d 07f3      	.DW  _0x0*2+11
                 
00043e 0004      	.DW  0x04
00043f 0521      	.DW  _0xF5+9
000440 07f7      	.DW  _0x0*2+15
                 
000441 0006      	.DW  0x06
000442 0525      	.DW  _0xF5+13
000443 07fb      	.DW  _0x0*2+19
                 
000444 0011      	.DW  0x11
000445 052b      	.DW  _0x10F
000446 0801      	.DW  _0x0*2+25
                 
000447 0011      	.DW  0x11
000448 053c      	.DW  _0x10F+17
000449 0801      	.DW  _0x0*2+25
                 
00044a 000b      	.DW  0x0B
00044b 054d      	.DW  _0x10F+34
00044c 0812      	.DW  _0x0*2+42
                 
00044d 0004      	.DW  0x04
00044e 0558      	.DW  _0x10F+45
00044f 081d      	.DW  _0x0*2+53
                 
000450 0004      	.DW  0x04
000451 055c      	.DW  _0x10F+49
000452 0821      	.DW  _0x0*2+57
                 
000453 0004      	.DW  0x04
000454 0560      	.DW  _0x10F+53
000455 081d      	.DW  _0x0*2+53
                 
000456 0011      	.DW  0x11
000457 0564      	.DW  _0x10F+57
000458 0825      	.DW  _0x0*2+61
                 
000459 000c      	.DW  0x0C
00045a 0575      	.DW  _0x10F+74
00045b 0836      	.DW  _0x0*2+78
                 
00045c 0002      	.DW  0x02
00045d 072b      	.DW  _Graph_X
00045e 07e0      	.DW  _0x116*2
                 
00045f 0005      	.DW  0x05
000460 072d      	.DW  _Amplitude
000461 07e2      	.DW  _0x117*2
                 
000462 000d      	.DW  0x0D
000463 0581      	.DW  _0x118
000464 0805      	.DW  _0x0*2+29
                 
000465 000d      	.DW  0x0D
000466 058e      	.DW  _0x118+13
000467 0805      	.DW  _0x0*2+29
                 
000468 0003      	.DW  0x03
000469 059b      	.DW  _0x118+26
00046a 0842      	.DW  _0x0*2+90
                 
00046b 0007      	.DW  0x07
00046c 059e      	.DW  _0x14B
00046d 0845      	.DW  _0x0*2+93
                 
00046e 0007      	.DW  0x07
00046f 05a5      	.DW  _0x14B+7
000470 0845      	.DW  _0x0*2+93
                 
000471 0007      	.DW  0x07
000472 05ac      	.DW  _0x14B+14
000473 0845      	.DW  _0x0*2+93
                 
000474 0007      	.DW  0x07
000475 05b3      	.DW  _0x14B+21
000476 080b      	.DW  _0x0*2+35
                 
000477 0007      	.DW  0x07
000478 05ba      	.DW  _0x14B+28
000479 080b      	.DW  _0x0*2+35
                 
00047a 0007      	.DW  0x07
00047b 05c1      	.DW  _0x14B+35
00047c 080b      	.DW  _0x0*2+35
                 
00047d 0006      	.DW  0x06
00047e 05c8      	.DW  _0x14B+42
00047f 084c      	.DW  _0x0*2+100
                 
000480 0006      	.DW  0x06
000481 05ce      	.DW  _0x14B+48
000482 07fb      	.DW  _0x0*2+19
                 
                 _0xFFFFFFFF:
000483 0000      	.DW  0
                 
                 __RESET:
000484 94f8      	CLI
000485 27ee      	CLR  R30
000486 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000487 e0f1      	LDI  R31,1
000488 bff5      	OUT  MCUCR,R31
000489 bfe5      	OUT  MCUCR,R30
00048a 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00048c e1f8      	LDI  R31,0x18
00048d bdf1      	OUT  WDTCR,R31
00048e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00048f e08d      	LDI  R24,(14-2)+1
000490 e0a2      	LDI  R26,2
000491 27bb      	CLR  R27
                 __CLEAR_REG:
000492 93ed      	ST   X+,R30
000493 958a      	DEC  R24
000494 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000495 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000496 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000497 e0a0      	LDI  R26,LOW(__SRAM_START)
000498 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000499 93ed      	ST   X+,R30
00049a 9701      	SBIW R24,1
00049b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00049c e5e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00049d e0f8      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00049e 9185      	LPM  R24,Z+
00049f 9195      	LPM  R25,Z+
0004a0 9700      	SBIW R24,0
0004a1 f061      	BREQ __GLOBAL_INI_END
0004a2 91a5      	LPM  R26,Z+
0004a3 91b5      	LPM  R27,Z+
0004a4 9005      	LPM  R0,Z+
0004a5 9015      	LPM  R1,Z+
0004a6 01bf      	MOVW R22,R30
0004a7 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0004a8 9005      	LPM  R0,Z+
0004a9 920d      	ST   X+,R0
0004aa 9701      	SBIW R24,1
0004ab f7e1      	BRNE __GLOBAL_INI_LOOP
0004ac 01fb      	MOVW R30,R22
0004ad cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0004ae bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0004af efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0004b0 bfed      	OUT  SPL,R30
0004b1 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0004b2 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0004b3 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0004b4 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0004b5 940c 0ea8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;void SSD1963_PortInit(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _SSD1963_PortInit:
                 ;    //SSD1963_PORT
                 ;    DDRA = 0xFF;
0004b7 efef      	LDI  R30,LOW(255)
0004b8 bbea      	OUT  0x1A,R30
                 ;    DDRC = 0xFF;
0004b9 bbe4      	OUT  0x14,R30
                 ;    //SSD1963 76543210
                 ;    DDRD |= 0b11100000;
0004ba b3e1      	IN   R30,0x11
0004bb 6ee0      	ORI  R30,LOW(0xE0)
0004bc bbe1      	OUT  0x11,R30
                 ;    DDRE |= 0b10100000;
0004bd b1e2      	IN   R30,0x2
0004be 6ae0      	ORI  R30,LOW(0xA0)
0004bf b9e2      	OUT  0x2,R30
                 ;}
0004c0 9508      	RET
                 ;
                 ;#pragma used+
                 ;
                 ;unsigned char RotateByte(unsigned char Value)
                 ;{
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
0004c1 940e 0ff7 	CALL SUBOPT_0x0
0004c3 95f5      	ASR  R31
0004c4 95e7      	ROR  R30
0004c5 75e5      	ANDI R30,LOW(0x55)
0004c6 2fae      	MOV  R26,R30
0004c7 81e8      	LD   R30,Y
0004c8 0fee      	LSL  R30
0004c9 7aea      	ANDI R30,LOW(0xAA)
0004ca 2bea      	OR   R30,R26
0004cb 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
0004cc 940e 0ff7 	CALL SUBOPT_0x0
0004ce 940e 1337 	CALL __ASRW2
0004d0 73e3      	ANDI R30,LOW(0x33)
0004d1 2fae      	MOV  R26,R30
0004d2 81e8      	LD   R30,Y
0004d3 0fee      	LSL  R30
0004d4 0fee      	LSL  R30
0004d5 7cec      	ANDI R30,LOW(0xCC)
0004d6 2bea      	OR   R30,R26
0004d7 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
0004d8 940e 0ff7 	CALL SUBOPT_0x0
0004da 940e 1333 	CALL __ASRW4
0004dc 70ef      	ANDI R30,LOW(0xF)
0004dd 2fae      	MOV  R26,R30
0004de 81e8      	LD   R30,Y
0004df 95e2      	SWAP R30
0004e0 7fe0      	ANDI R30,LOW(0xF0)
0004e1 2bea      	OR   R30,R26
0004e2 83e8      	ST   Y,R30
                 ;  return Value;
0004e3 c023      	RJMP _0x2080008
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
0004e4 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
0004e5 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
0004e6 940e 0ffa 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
0004e8 981d      	CBI  0x3,5
                 ;  delay_ms(100);
0004e9 940e 0ffa 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
0004eb 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
0004ec 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
0004ed 940e 0ffa 	CALL SUBOPT_0x1
                 ;}
0004ef 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
0004f0 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
0004f1 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
0004f2 940e 1000 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
0004f4 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
0004f5 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
0004f6 9896      	CBI  0x12,6
                 ;  #asm("nop")
0004f7 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
0004f8 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
0004f9 9a96      	SBI  0x12,6
                 ;  #asm("nop")
0004fa 0000      	nop
0004fb c00b      	RJMP _0x2080007
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
0004fc 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
0004fd 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
0004fe 940e 1000 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
000500 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000501 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000502 9896      	CBI  0x12,6
                 ;  #asm("nop")
000503 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000504 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000505 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000506 0000      	nop
                 _0x2080007:
                 ;} // SSD1963_Writedata
                 _0x2080008:
000507 9621      	ADIW R28,1
000508 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000509 931a      	ST   -Y,R17
00050a 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
00050b 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
00050c 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
00050d 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
00050e 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
00050f bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
000510 bb05      	OUT  0x15,R16
                 ;  #asm("nop")
000511 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000512 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000513 9896      	CBI  0x12,6
                 ;  #asm("nop")
000514 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000515 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000516 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000517 0000      	nop
                 ;} // SSD1963_Writedata
000518 8119      	LDD  R17,Y+1
000519 8108      	LDD  R16,Y+0
00051a 9624      	ADIW R28,4
00051b 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_PortInit();
00051c df9a      	RCALL _SSD1963_PortInit
                 ;  SSD1963_Reset();
00051d dfc6      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
00051e 940e 1008 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000520 940e 1008 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000522 940e 1008 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
000524 940e 100c 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
000526 eee2      	LDI  R30,LOW(226)
000527 93ea      	ST   -Y,R30
000528 dfc7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
000529 e2e3      	LDI  R30,LOW(35)
00052a 93ea      	ST   -Y,R30
00052b dfd0      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
00052c e0e2      	LDI  R30,LOW(2)
00052d 940e 1012 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
00052f eee0      	LDI  R30,LOW(224)
000530 940e 1019 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
000532 940e 1020 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
000534 eee0      	LDI  R30,LOW(224)
000535 940e 1026 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
000537 940e 1008 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
000539 e7e8      	LDI  R30,LOW(120)
00053a e0f0      	LDI  R31,HIGH(120)
00053b 940e 102d 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
00053d eee6      	LDI  R30,LOW(230)
00053e 940e 1019 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
000540 edea      	LDI  R30,LOW(218)
000541 93ea      	ST   -Y,R30
000542 dfb9      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
000543 e7e3      	LDI  R30,LOW(115)
000544 93ea      	ST   -Y,R30
000545 dfb6      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
000546 ebe0      	LDI  R30,LOW(176)
000547 93ea      	ST   -Y,R30
000548 dfa7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
000549 e2e4      	LDI  R30,LOW(36)
00054a 940e 1031 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
00054c 940e 1038 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
00054e edef      	LDI  R30,LOW(223)
00054f 940e 103c 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
000551 e0ef      	LDI  R30,LOW(15)
000552 940e 1031 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
000554 ebe4      	LDI  R30,LOW(180)
000555 940e 1026 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
000557 e8e4      	LDI  R30,LOW(132)
000558 940e 1031 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
00055a e5ea      	LDI  R30,LOW(90)
00055b 93ea      	ST   -Y,R30
00055c df9f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
00055d e0ea      	LDI  R30,LOW(10)
00055e 940e 1031 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
000560 e0e8      	LDI  R30,LOW(8)
000561 940e 1031 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
000563 ebe6      	LDI  R30,LOW(182)
000564 940e 1019 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
000566 e2ec      	LDI  R30,LOW(44)
000567 940e 1031 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
000569 e0ec      	LDI  R30,LOW(12)
00056a 93ea      	ST   -Y,R30
00056b df90      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
00056c e0ea      	LDI  R30,LOW(10)
00056d 93ea      	ST   -Y,R30
00056e df8d      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
00056f e0e0      	LDI  R30,LOW(0)
000570 940e 1012 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
000572 ebea      	LDI  R30,LOW(186)
000573 93ea      	ST   -Y,R30
000574 df7b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
000575 e0ef      	LDI  R30,LOW(15)
000576 93ea      	ST   -Y,R30
000577 df84      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
000578 ebe8      	LDI  R30,LOW(184)
000579 93ea      	ST   -Y,R30
00057a df75      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
00057b e0e7      	LDI  R30,LOW(7)
00057c 940e 103c 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
00057e e3e6      	LDI  R30,LOW(54)
00057f 940e 1026 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
000581 ebec      	LDI  R30,LOW(188)
000582 93ea      	ST   -Y,R30
000583 df6c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
000584 e5e0      	LDI  R30,LOW(80)
000585 93ea      	ST   -Y,R30
000586 df75      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
000587 e9e0      	LDI  R30,LOW(144)
000588 93ea      	ST   -Y,R30
000589 df72      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
00058a e5e0      	LDI  R30,LOW(80)
00058b 940e 103c 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
00058d efe0      	LDI  R30,LOW(240)
00058e 940e 1026 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
000590 e0e5      	LDI  R30,LOW(5)
000591 e0f0      	LDI  R31,HIGH(5)
000592 940e 102d 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
000594 e2e9      	LDI  R30,LOW(41)
000595 93ea      	ST   -Y,R30
000596 df59      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
000597 ede0      	LDI  R30,LOW(208)
000598 93ea      	ST   -Y,R30
000599 df56      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
00059a e0ed      	LDI  R30,LOW(13)
00059b 93ea      	ST   -Y,R30
00059c df5f      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
00059d 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
00059e e2ea      	LDI  R30,LOW(42)
00059f 93ea      	ST   -Y,R30
0005a0 df4f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
0005a1 81ef      	LDD  R30,Y+7
0005a2 93ea      	ST   -Y,R30
0005a3 df58      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
0005a4 81ee      	LDD  R30,Y+6
0005a5 93ea      	ST   -Y,R30
0005a6 df55      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
0005a7 81ed      	LDD  R30,Y+5
0005a8 93ea      	ST   -Y,R30
0005a9 df52      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
0005aa 81ec      	LDD  R30,Y+4
0005ab 93ea      	ST   -Y,R30
0005ac df4f      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
0005ad e2eb      	LDI  R30,LOW(43)
0005ae 93ea      	ST   -Y,R30
0005af df40      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
0005b0 81eb      	LDD  R30,Y+3
0005b1 93ea      	ST   -Y,R30
0005b2 df49      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
0005b3 81ea      	LDD  R30,Y+2
0005b4 93ea      	ST   -Y,R30
0005b5 df46      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
0005b6 81e9      	LDD  R30,Y+1
0005b7 93ea      	ST   -Y,R30
0005b8 df43      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
0005b9 81e8      	LD   R30,Y
0005ba 93ea      	ST   -Y,R30
0005bb df40      	RCALL _SSD1963_WriteData_b8
                 ;}
0005bc 9628      	ADIW R28,8
0005bd 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
0005be 940e 13e6 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
0005c0 e2e8      	LDI  R30,LOW(40)
0005c1 93ea      	ST   -Y,R30
0005c2 df2d      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
0005c3 940e 1040 	CALL SUBOPT_0xD
0005c5 edef      	LDI  R30,LOW(479)
0005c6 e0f1      	LDI  R31,HIGH(479)
0005c7 940e 1045 	CALL SUBOPT_0xE
0005c9 e0ef      	LDI  R30,LOW(271)
0005ca e0f1      	LDI  R31,HIGH(271)
0005cb 940e 1048 	CALL SUBOPT_0xF
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
0005cd e000     +LDI R16 , LOW ( 0 )
0005ce e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x31:
                +
0005cf 3100     +CPI R16 , LOW ( 272 )
0005d0 e0e1     +LDI R30 , HIGH ( 272 )
0005d1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
0005d2 f480      	BRSH _0x33
                 ;  {
                 ;    y=0;
                +
0005d3 e020     +LDI R18 , LOW ( 0 )
0005d4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x34:
                +
0005d5 3e20     +CPI R18 , LOW ( 480 )
0005d6 e0e1     +LDI R30 , HIGH ( 480 )
0005d7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
0005d8 f438      	BRSH _0x36
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
0005d9 81ec      	LDD  R30,Y+4
0005da 81fd      	LDD  R31,Y+4+1
0005db 940e 1050 	CALL SUBOPT_0x10
                 ;      y++;
                +
0005dd 5f2f     +SUBI R18 , LOW ( - 1 )
0005de 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
0005df cff5      	RJMP _0x34
                 _0x36:
                 ;  x++;
                +
0005e0 5f0f     +SUBI R16 , LOW ( - 1 )
0005e1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
0005e2 cfec      	RJMP _0x31
                 _0x33:
                 ;  SSD1963_WriteCmd(0x29);
0005e3 e2e9      	LDI  R30,LOW(41)
0005e4 93ea      	ST   -Y,R30
0005e5 df0a      	RCALL _SSD1963_WriteCmd
                 ;}
0005e6 940e 13ed 	CALL __LOADLOCR4
0005e8 9626      	ADIW R28,6
0005e9 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
0005ea 931a      	ST   -Y,R17
0005eb 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
0005ec 940e 1054 	CALL SUBOPT_0x11
0005ee 85aa      	LDD  R26,Y+10
0005ef 85bb      	LDD  R27,Y+10+1
0005f0 9650      	ADIW R26,16
0005f1 9711      	SBIW R26,1
0005f2 93ba      	ST   -Y,R27
0005f3 93aa      	ST   -Y,R26
0005f4 940e 1059 	CALL SUBOPT_0x12
0005f6 85ac      	LDD  R26,Y+12
0005f7 85bd      	LDD  R27,Y+12+1
0005f8 9650      	ADIW R26,16
0005f9 9711      	SBIW R26,1
0005fa 93ba      	ST   -Y,R27
0005fb 93aa      	ST   -Y,R26
0005fc dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
0005fd e2ec      	LDI  R30,LOW(44)
0005fe 93ea      	ST   -Y,R30
0005ff def0      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
000600 e010      	LDI  R17,LOW(0)
                 _0x38:
000601 3210      	CPI  R17,32
000602 f4e8      	BRSH _0x39
                 ;  {
                 ;    for (j = 0; j < 8; j++)
000603 e000      	LDI  R16,LOW(0)
                 _0x3B:
000604 3008      	CPI  R16,8
000605 f4c0      	BRSH _0x3C
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
000606 2fe1      	MOV  R30,R17
000607 85aa      	LDD  R26,Y+10
000608 85bb      	LDD  R27,Y+10+1
000609 e0f0      	LDI  R31,0
00060a 0fea      	ADD  R30,R26
00060b 1ffb      	ADC  R31,R27
00060c 9014      	LPM  R1,Z
00060d 2fe0      	MOV  R30,R16
00060e e8a0      	LDI  R26,LOW(128)
00060f 940e 132b 	CALL __LSRB12
000611 21e1      	AND  R30,R1
000612 30e1      	CPI  R30,LOW(0x1)
000613 f018      	BRLO _0x3D
000614 81ec      	LDD  R30,Y+4
000615 81fd      	LDD  R31,Y+4+1
000616 c002      	RJMP _0x16D
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3D:
000617 81ea      	LDD  R30,Y+2
000618 81fb      	LDD  R31,Y+2+1
                 _0x16D:
000619 93fa      	ST   -Y,R31
00061a 93ea      	ST   -Y,R30
00061b deed      	RCALL _SSD1963_WriteData_b16
                 ;    }
00061c 5f0f      	SUBI R16,-1
00061d cfe6      	RJMP _0x3B
                 _0x3C:
                 ;  }
00061e 5f1f      	SUBI R17,-1
00061f cfe1      	RJMP _0x38
                 _0x39:
                 ;}
000620 8119      	LDD  R17,Y+1
000621 8108      	LDD  R16,Y+0
000622 c332      	RJMP _0x2080006
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000623 940e 105e 	CALL SUBOPT_0x13
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
000625 33e0      	CPI  R30,LOW(0x30)
000626 e0a0      	LDI  R26,HIGH(0x30)
000627 07fa      	CPC  R31,R26
000628 f419      	BRNE _0x42
000629 e0ec      	LDI  R30,LOW(_S_48*2)
00062a e0f1      	LDI  R31,HIGH(_S_48*2)
00062b c18e      	RJMP _0x16E
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x42:
00062c 33e1      	CPI  R30,LOW(0x31)
00062d e0a0      	LDI  R26,HIGH(0x31)
00062e 07fa      	CPC  R31,R26
00062f f419      	BRNE _0x43
000630 e2ec      	LDI  R30,LOW(_S_49*2)
000631 e0f1      	LDI  R31,HIGH(_S_49*2)
000632 c187      	RJMP _0x16E
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x43:
000633 33e2      	CPI  R30,LOW(0x32)
000634 e0a0      	LDI  R26,HIGH(0x32)
000635 07fa      	CPC  R31,R26
000636 f419      	BRNE _0x44
000637 e4ec      	LDI  R30,LOW(_S_50*2)
000638 e0f1      	LDI  R31,HIGH(_S_50*2)
000639 c180      	RJMP _0x16E
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x44:
00063a 33e3      	CPI  R30,LOW(0x33)
00063b e0a0      	LDI  R26,HIGH(0x33)
00063c 07fa      	CPC  R31,R26
00063d f419      	BRNE _0x45
00063e e6ec      	LDI  R30,LOW(_S_51*2)
00063f e0f1      	LDI  R31,HIGH(_S_51*2)
000640 c179      	RJMP _0x16E
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x45:
000641 33e4      	CPI  R30,LOW(0x34)
000642 e0a0      	LDI  R26,HIGH(0x34)
000643 07fa      	CPC  R31,R26
000644 f419      	BRNE _0x46
000645 e8ec      	LDI  R30,LOW(_S_52*2)
000646 e0f1      	LDI  R31,HIGH(_S_52*2)
000647 c172      	RJMP _0x16E
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x46:
000648 33e5      	CPI  R30,LOW(0x35)
000649 e0a0      	LDI  R26,HIGH(0x35)
00064a 07fa      	CPC  R31,R26
00064b f419      	BRNE _0x47
00064c eaec      	LDI  R30,LOW(_S_53*2)
00064d e0f1      	LDI  R31,HIGH(_S_53*2)
00064e c16b      	RJMP _0x16E
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x47:
00064f 33e6      	CPI  R30,LOW(0x36)
000650 e0a0      	LDI  R26,HIGH(0x36)
000651 07fa      	CPC  R31,R26
000652 f419      	BRNE _0x48
000653 ecec      	LDI  R30,LOW(_S_54*2)
000654 e0f1      	LDI  R31,HIGH(_S_54*2)
000655 c164      	RJMP _0x16E
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x48:
000656 33e7      	CPI  R30,LOW(0x37)
000657 e0a0      	LDI  R26,HIGH(0x37)
000658 07fa      	CPC  R31,R26
000659 f419      	BRNE _0x49
00065a eeec      	LDI  R30,LOW(_S_55*2)
00065b e0f1      	LDI  R31,HIGH(_S_55*2)
00065c c15d      	RJMP _0x16E
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x49:
00065d 33e8      	CPI  R30,LOW(0x38)
00065e e0a0      	LDI  R26,HIGH(0x38)
00065f 07fa      	CPC  R31,R26
000660 f419      	BRNE _0x4A
000661 e0ec      	LDI  R30,LOW(_S_56*2)
000662 e0f2      	LDI  R31,HIGH(_S_56*2)
000663 c156      	RJMP _0x16E
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4A:
000664 33e9      	CPI  R30,LOW(0x39)
000665 e0a0      	LDI  R26,HIGH(0x39)
000666 07fa      	CPC  R31,R26
000667 f419      	BRNE _0x4B
000668 e2ec      	LDI  R30,LOW(_S_57*2)
000669 e0f2      	LDI  R31,HIGH(_S_57*2)
00066a c14f      	RJMP _0x16E
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4B:
00066b 32e1      	CPI  R30,LOW(0x21)
00066c e0a0      	LDI  R26,HIGH(0x21)
00066d 07fa      	CPC  R31,R26
00066e f419      	BRNE _0x4C
00066f e6ec      	LDI  R30,LOW(_S_33*2)
000670 e0f2      	LDI  R31,HIGH(_S_33*2)
000671 c148      	RJMP _0x16E
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4C:
000672 32e8      	CPI  R30,LOW(0x28)
000673 e0a0      	LDI  R26,HIGH(0x28)
000674 07fa      	CPC  R31,R26
000675 f419      	BRNE _0x4D
000676 e8ec      	LDI  R30,LOW(_S_40*2)
000677 e0f2      	LDI  R31,HIGH(_S_40*2)
000678 c141      	RJMP _0x16E
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4D:
000679 32e9      	CPI  R30,LOW(0x29)
00067a e0a0      	LDI  R26,HIGH(0x29)
00067b 07fa      	CPC  R31,R26
00067c f419      	BRNE _0x4E
00067d eaec      	LDI  R30,LOW(_S_41*2)
00067e e0f2      	LDI  R31,HIGH(_S_41*2)
00067f c13a      	RJMP _0x16E
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x4E:
000680 32ef      	CPI  R30,LOW(0x2F)
000681 e0a0      	LDI  R26,HIGH(0x2F)
000682 07fa      	CPC  R31,R26
000683 f419      	BRNE _0x4F
000684 ecec      	LDI  R30,LOW(_S_47*2)
000685 e0f2      	LDI  R31,HIGH(_S_47*2)
000686 c133      	RJMP _0x16E
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x4F:
000687 33ea      	CPI  R30,LOW(0x3A)
000688 e0a0      	LDI  R26,HIGH(0x3A)
000689 07fa      	CPC  R31,R26
00068a f419      	BRNE _0x50
00068b e2ec      	LDI  R30,LOW(_S_58*2)
00068c e0f3      	LDI  R31,HIGH(_S_58*2)
00068d c12c      	RJMP _0x16E
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x50:
00068e 33ec      	CPI  R30,LOW(0x3C)
00068f e0a0      	LDI  R26,HIGH(0x3C)
000690 07fa      	CPC  R31,R26
000691 f419      	BRNE _0x51
000692 e4ec      	LDI  R30,LOW(_S_60*2)
000693 e0f3      	LDI  R31,HIGH(_S_60*2)
000694 c125      	RJMP _0x16E
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x51:
000695 33ed      	CPI  R30,LOW(0x3D)
000696 e0a0      	LDI  R26,HIGH(0x3D)
000697 07fa      	CPC  R31,R26
000698 f419      	BRNE _0x52
000699 e6ec      	LDI  R30,LOW(_S_61*2)
00069a e0f3      	LDI  R31,HIGH(_S_61*2)
00069b c11e      	RJMP _0x16E
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x52:
00069c 33ee      	CPI  R30,LOW(0x3E)
00069d e0a0      	LDI  R26,HIGH(0x3E)
00069e 07fa      	CPC  R31,R26
00069f f419      	BRNE _0x53
0006a0 e8ec      	LDI  R30,LOW(_S_62*2)
0006a1 e0f3      	LDI  R31,HIGH(_S_62*2)
0006a2 c117      	RJMP _0x16E
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x53:
0006a3 33ef      	CPI  R30,LOW(0x3F)
0006a4 e0a0      	LDI  R26,HIGH(0x3F)
0006a5 07fa      	CPC  R31,R26
0006a6 f419      	BRNE _0x54
0006a7 eaec      	LDI  R30,LOW(_S_63*2)
0006a8 e0f3      	LDI  R31,HIGH(_S_63*2)
0006a9 c110      	RJMP _0x16E
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x54:
0006aa 32eb      	CPI  R30,LOW(0x2B)
0006ab e0a0      	LDI  R26,HIGH(0x2B)
0006ac 07fa      	CPC  R31,R26
0006ad f419      	BRNE _0x55
0006ae eeec      	LDI  R30,LOW(_S_43*2)
0006af e0f2      	LDI  R31,HIGH(_S_43*2)
0006b0 c109      	RJMP _0x16E
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x55:
0006b1 32ed      	CPI  R30,LOW(0x2D)
0006b2 e0a0      	LDI  R26,HIGH(0x2D)
0006b3 07fa      	CPC  R31,R26
0006b4 f419      	BRNE _0x56
0006b5 e0ec      	LDI  R30,LOW(_S_45*2)
0006b6 e0f3      	LDI  R31,HIGH(_S_45*2)
0006b7 c102      	RJMP _0x16E
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x56:
0006b8 3ce0      	CPI  R30,LOW(0xC0)
0006b9 e0a0      	LDI  R26,HIGH(0xC0)
0006ba 07fa      	CPC  R31,R26
0006bb f419      	BRNE _0x57
0006bc ecec      	LDI  R30,LOW(_S_192*2)
0006bd e0f3      	LDI  R31,HIGH(_S_192*2)
0006be c0fb      	RJMP _0x16E
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x57:
0006bf 3ce1      	CPI  R30,LOW(0xC1)
0006c0 e0a0      	LDI  R26,HIGH(0xC1)
0006c1 07fa      	CPC  R31,R26
0006c2 f419      	BRNE _0x58
0006c3 eeec      	LDI  R30,LOW(_S_193*2)
0006c4 e0f3      	LDI  R31,HIGH(_S_193*2)
0006c5 c0f4      	RJMP _0x16E
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x58:
0006c6 3ce2      	CPI  R30,LOW(0xC2)
0006c7 e0a0      	LDI  R26,HIGH(0xC2)
0006c8 07fa      	CPC  R31,R26
0006c9 f419      	BRNE _0x59
0006ca e0ec      	LDI  R30,LOW(_S_194*2)
0006cb e0f4      	LDI  R31,HIGH(_S_194*2)
0006cc c0ed      	RJMP _0x16E
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x59:
0006cd 3ce3      	CPI  R30,LOW(0xC3)
0006ce e0a0      	LDI  R26,HIGH(0xC3)
0006cf 07fa      	CPC  R31,R26
0006d0 f419      	BRNE _0x5A
0006d1 e2ec      	LDI  R30,LOW(_S_195*2)
0006d2 e0f4      	LDI  R31,HIGH(_S_195*2)
0006d3 c0e6      	RJMP _0x16E
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5A:
0006d4 3ce4      	CPI  R30,LOW(0xC4)
0006d5 e0a0      	LDI  R26,HIGH(0xC4)
0006d6 07fa      	CPC  R31,R26
0006d7 f419      	BRNE _0x5B
0006d8 e4ec      	LDI  R30,LOW(_S_196*2)
0006d9 e0f4      	LDI  R31,HIGH(_S_196*2)
0006da c0df      	RJMP _0x16E
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5B:
0006db 3ce5      	CPI  R30,LOW(0xC5)
0006dc e0a0      	LDI  R26,HIGH(0xC5)
0006dd 07fa      	CPC  R31,R26
0006de f419      	BRNE _0x5C
0006df e6ec      	LDI  R30,LOW(_S_197*2)
0006e0 e0f4      	LDI  R31,HIGH(_S_197*2)
0006e1 c0d8      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5C:
0006e2 3ce6      	CPI  R30,LOW(0xC6)
0006e3 e0a0      	LDI  R26,HIGH(0xC6)
0006e4 07fa      	CPC  R31,R26
0006e5 f419      	BRNE _0x5D
0006e6 e8ec      	LDI  R30,LOW(_S_198*2)
0006e7 e0f4      	LDI  R31,HIGH(_S_198*2)
0006e8 c0d1      	RJMP _0x16E
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5D:
0006e9 3ce7      	CPI  R30,LOW(0xC7)
0006ea e0a0      	LDI  R26,HIGH(0xC7)
0006eb 07fa      	CPC  R31,R26
0006ec f419      	BRNE _0x5E
0006ed eaec      	LDI  R30,LOW(_S_199*2)
0006ee e0f4      	LDI  R31,HIGH(_S_199*2)
0006ef c0ca      	RJMP _0x16E
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x5E:
0006f0 3ce8      	CPI  R30,LOW(0xC8)
0006f1 e0a0      	LDI  R26,HIGH(0xC8)
0006f2 07fa      	CPC  R31,R26
0006f3 f419      	BRNE _0x5F
0006f4 ecec      	LDI  R30,LOW(_S_200*2)
0006f5 e0f4      	LDI  R31,HIGH(_S_200*2)
0006f6 c0c3      	RJMP _0x16E
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x5F:
0006f7 3ce9      	CPI  R30,LOW(0xC9)
0006f8 e0a0      	LDI  R26,HIGH(0xC9)
0006f9 07fa      	CPC  R31,R26
0006fa f419      	BRNE _0x60
0006fb eeec      	LDI  R30,LOW(_S_201*2)
0006fc e0f4      	LDI  R31,HIGH(_S_201*2)
0006fd c0bc      	RJMP _0x16E
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x60:
0006fe 3cea      	CPI  R30,LOW(0xCA)
0006ff e0a0      	LDI  R26,HIGH(0xCA)
000700 07fa      	CPC  R31,R26
000701 f419      	BRNE _0x61
000702 e0ec      	LDI  R30,LOW(_S_202*2)
000703 e0f5      	LDI  R31,HIGH(_S_202*2)
000704 c0b5      	RJMP _0x16E
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x61:
000705 3ceb      	CPI  R30,LOW(0xCB)
000706 e0a0      	LDI  R26,HIGH(0xCB)
000707 07fa      	CPC  R31,R26
000708 f419      	BRNE _0x62
000709 e2ec      	LDI  R30,LOW(_S_203*2)
00070a e0f5      	LDI  R31,HIGH(_S_203*2)
00070b c0ae      	RJMP _0x16E
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x62:
00070c 3cec      	CPI  R30,LOW(0xCC)
00070d e0a0      	LDI  R26,HIGH(0xCC)
00070e 07fa      	CPC  R31,R26
00070f f419      	BRNE _0x63
000710 e4ec      	LDI  R30,LOW(_S_204*2)
000711 e0f5      	LDI  R31,HIGH(_S_204*2)
000712 c0a7      	RJMP _0x16E
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x63:
000713 3ced      	CPI  R30,LOW(0xCD)
000714 e0a0      	LDI  R26,HIGH(0xCD)
000715 07fa      	CPC  R31,R26
000716 f419      	BRNE _0x64
000717 e6ec      	LDI  R30,LOW(_S_205*2)
000718 e0f5      	LDI  R31,HIGH(_S_205*2)
000719 c0a0      	RJMP _0x16E
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x64:
00071a 3cee      	CPI  R30,LOW(0xCE)
00071b e0a0      	LDI  R26,HIGH(0xCE)
00071c 07fa      	CPC  R31,R26
00071d f419      	BRNE _0x65
00071e e8ec      	LDI  R30,LOW(_S_206*2)
00071f e0f5      	LDI  R31,HIGH(_S_206*2)
000720 c099      	RJMP _0x16E
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x65:
000721 3cef      	CPI  R30,LOW(0xCF)
000722 e0a0      	LDI  R26,HIGH(0xCF)
000723 07fa      	CPC  R31,R26
000724 f419      	BRNE _0x66
000725 eaec      	LDI  R30,LOW(_S_207*2)
000726 e0f5      	LDI  R31,HIGH(_S_207*2)
000727 c092      	RJMP _0x16E
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x66:
000728 3de0      	CPI  R30,LOW(0xD0)
000729 e0a0      	LDI  R26,HIGH(0xD0)
00072a 07fa      	CPC  R31,R26
00072b f419      	BRNE _0x67
00072c ecec      	LDI  R30,LOW(_S_208*2)
00072d e0f5      	LDI  R31,HIGH(_S_208*2)
00072e c08b      	RJMP _0x16E
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x67:
00072f 3de1      	CPI  R30,LOW(0xD1)
000730 e0a0      	LDI  R26,HIGH(0xD1)
000731 07fa      	CPC  R31,R26
000732 f419      	BRNE _0x68
000733 eeec      	LDI  R30,LOW(_S_209*2)
000734 e0f5      	LDI  R31,HIGH(_S_209*2)
000735 c084      	RJMP _0x16E
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x68:
000736 3de2      	CPI  R30,LOW(0xD2)
000737 e0a0      	LDI  R26,HIGH(0xD2)
000738 07fa      	CPC  R31,R26
000739 f419      	BRNE _0x69
00073a e0ec      	LDI  R30,LOW(_S_210*2)
00073b e0f6      	LDI  R31,HIGH(_S_210*2)
00073c c07d      	RJMP _0x16E
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x69:
00073d 3de3      	CPI  R30,LOW(0xD3)
00073e e0a0      	LDI  R26,HIGH(0xD3)
00073f 07fa      	CPC  R31,R26
000740 f419      	BRNE _0x6A
000741 e2ec      	LDI  R30,LOW(_S_211*2)
000742 e0f6      	LDI  R31,HIGH(_S_211*2)
000743 c076      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6A:
000744 3de4      	CPI  R30,LOW(0xD4)
000745 e0a0      	LDI  R26,HIGH(0xD4)
000746 07fa      	CPC  R31,R26
000747 f419      	BRNE _0x6B
000748 e4ec      	LDI  R30,LOW(_S_212*2)
000749 e0f6      	LDI  R31,HIGH(_S_212*2)
00074a c06f      	RJMP _0x16E
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6B:
00074b 3de5      	CPI  R30,LOW(0xD5)
00074c e0a0      	LDI  R26,HIGH(0xD5)
00074d 07fa      	CPC  R31,R26
00074e f419      	BRNE _0x6C
00074f e6ec      	LDI  R30,LOW(_S_213*2)
000750 e0f6      	LDI  R31,HIGH(_S_213*2)
000751 c068      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6C:
000752 3de6      	CPI  R30,LOW(0xD6)
000753 e0a0      	LDI  R26,HIGH(0xD6)
000754 07fa      	CPC  R31,R26
000755 f419      	BRNE _0x6D
000756 e8ec      	LDI  R30,LOW(_S_214*2)
000757 e0f6      	LDI  R31,HIGH(_S_214*2)
000758 c061      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6D:
000759 3de7      	CPI  R30,LOW(0xD7)
00075a e0a0      	LDI  R26,HIGH(0xD7)
00075b 07fa      	CPC  R31,R26
00075c f419      	BRNE _0x6E
00075d eaec      	LDI  R30,LOW(_S_215*2)
00075e e0f6      	LDI  R31,HIGH(_S_215*2)
00075f c05a      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x6E:
000760 3de8      	CPI  R30,LOW(0xD8)
000761 e0a0      	LDI  R26,HIGH(0xD8)
000762 07fa      	CPC  R31,R26
000763 f419      	BRNE _0x6F
000764 ecec      	LDI  R30,LOW(_S_216*2)
000765 e0f6      	LDI  R31,HIGH(_S_216*2)
000766 c053      	RJMP _0x16E
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x6F:
000767 3de9      	CPI  R30,LOW(0xD9)
000768 e0a0      	LDI  R26,HIGH(0xD9)
000769 07fa      	CPC  R31,R26
00076a f419      	BRNE _0x70
00076b eeec      	LDI  R30,LOW(_S_217*2)
00076c e0f6      	LDI  R31,HIGH(_S_217*2)
00076d c04c      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x70:
00076e 3dea      	CPI  R30,LOW(0xDA)
00076f e0a0      	LDI  R26,HIGH(0xDA)
000770 07fa      	CPC  R31,R26
000771 f419      	BRNE _0x71
000772 e0ec      	LDI  R30,LOW(_S_218*2)
000773 e0f7      	LDI  R31,HIGH(_S_218*2)
000774 c045      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x71:
000775 3deb      	CPI  R30,LOW(0xDB)
000776 e0a0      	LDI  R26,HIGH(0xDB)
000777 07fa      	CPC  R31,R26
000778 f419      	BRNE _0x72
000779 e2ec      	LDI  R30,LOW(_S_219*2)
00077a e0f7      	LDI  R31,HIGH(_S_219*2)
00077b c03e      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x72:
00077c 3dec      	CPI  R30,LOW(0xDC)
00077d e0a0      	LDI  R26,HIGH(0xDC)
00077e 07fa      	CPC  R31,R26
00077f f419      	BRNE _0x73
000780 e4ec      	LDI  R30,LOW(_S_220*2)
000781 e0f7      	LDI  R31,HIGH(_S_220*2)
000782 c037      	RJMP _0x16E
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x73:
000783 3ded      	CPI  R30,LOW(0xDD)
000784 e0a0      	LDI  R26,HIGH(0xDD)
000785 07fa      	CPC  R31,R26
000786 f419      	BRNE _0x74
000787 e6ec      	LDI  R30,LOW(_S_221*2)
000788 e0f7      	LDI  R31,HIGH(_S_221*2)
000789 c030      	RJMP _0x16E
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x74:
00078a 3dee      	CPI  R30,LOW(0xDE)
00078b e0a0      	LDI  R26,HIGH(0xDE)
00078c 07fa      	CPC  R31,R26
00078d f419      	BRNE _0x75
00078e e8ec      	LDI  R30,LOW(_S_222*2)
00078f e0f7      	LDI  R31,HIGH(_S_222*2)
000790 c029      	RJMP _0x16E
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x75:
000791 3def      	CPI  R30,LOW(0xDF)
000792 e0a0      	LDI  R26,HIGH(0xDF)
000793 07fa      	CPC  R31,R26
000794 f419      	BRNE _0x76
000795 eaec      	LDI  R30,LOW(_S_223*2)
000796 e0f7      	LDI  R31,HIGH(_S_223*2)
000797 c022      	RJMP _0x16E
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x76:
000798 32ee      	CPI  R30,LOW(0x2E)
000799 e0a0      	LDI  R26,HIGH(0x2E)
00079a 07fa      	CPC  R31,R26
00079b f419      	BRNE _0x77
00079c eaec      	LDI  R30,LOW(_S_46*2)
00079d e0f0      	LDI  R31,HIGH(_S_46*2)
00079e c01b      	RJMP _0x16E
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x77:
00079f 32e0      	CPI  R30,LOW(0x20)
0007a0 e0a0      	LDI  R26,HIGH(0x20)
0007a1 07fa      	CPC  R31,R26
0007a2 f419      	BRNE _0x78
0007a3 e4ec      	LDI  R30,LOW(_S_32*2)
0007a4 e0f2      	LDI  R31,HIGH(_S_32*2)
0007a5 c014      	RJMP _0x16E
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x78:
0007a6 30e1      	CPI  R30,LOW(0x1)
0007a7 e0a0      	LDI  R26,HIGH(0x1)
0007a8 07fa      	CPC  R31,R26
0007a9 f419      	BRNE _0x79
0007aa ecec      	LDI  R30,LOW(_S_UP*2)
0007ab e0f0      	LDI  R31,HIGH(_S_UP*2)
0007ac c00d      	RJMP _0x16E
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x79:
0007ad 30e2      	CPI  R30,LOW(0x2)
0007ae e0a0      	LDI  R26,HIGH(0x2)
0007af 07fa      	CPC  R31,R26
0007b0 f419      	BRNE _0x7A
0007b1 eeec      	LDI  R30,LOW(_S_DOWN*2)
0007b2 e0f0      	LDI  R31,HIGH(_S_DOWN*2)
0007b3 c006      	RJMP _0x16E
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7A:
0007b4 30e3      	CPI  R30,LOW(0x3)
0007b5 e0a0      	LDI  R26,HIGH(0x3)
0007b6 07fa      	CPC  R31,R26
0007b7 f469      	BRNE _0x41
0007b8 e8ec      	LDI  R30,LOW(_blank_symb*2)
0007b9 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x16E:
0007ba 93fa      	ST   -Y,R31
0007bb 93ea      	ST   -Y,R30
0007bc 940e 1054 	CALL SUBOPT_0x11
0007be 940e 1054 	CALL SUBOPT_0x11
0007c0 940e 1054 	CALL SUBOPT_0x11
0007c2 940e 1054 	CALL SUBOPT_0x11
0007c4 de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x41:
                 ;}
0007c5 9629      	ADIW R28,9
0007c6 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7C:
0007c7 85a8      	LDD  R26,Y+8
0007c8 85b9      	LDD  R27,Y+8+1
0007c9 91ec      	LD   R30,X
0007ca 30e0      	CPI  R30,0
0007cb f099      	BREQ _0x7E
0007cc 91ed      	LD   R30,X+
0007cd 87a8      	STD  Y+8,R26
0007ce 87b9      	STD  Y+8+1,R27
0007cf 93ea      	ST   -Y,R30
0007d0 940e 1061 	CALL SUBOPT_0x14
0007d2 940e 1061 	CALL SUBOPT_0x14
0007d4 940e 1061 	CALL SUBOPT_0x14
0007d6 940e 1061 	CALL SUBOPT_0x14
0007d8 de4a      	RCALL _SSD1963_PutChar16
0007d9 81ee      	LDD  R30,Y+6
0007da 81ff      	LDD  R31,Y+6+1
0007db 9670      	ADIW R30,16
0007dc 83ee      	STD  Y+6,R30
0007dd 83ff      	STD  Y+6+1,R31
0007de cfe8      	RJMP _0x7C
                 _0x7E:
                 ;}
0007df 962a      	ADIW R28,10
0007e0 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutValue16:
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
0007e1 81ec      	LDD  R30,Y+4
0007e2 e0f0      	LDI  R31,0
                 ;  {
                 ;    case 5 :
0007e3 30e5      	CPI  R30,LOW(0x5)
0007e4 e0a0      	LDI  R26,HIGH(0x5)
0007e5 07fa      	CPC  R31,R26
0007e6 f499      	BRNE _0x82
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
0007e7 85a9      	LDD  R26,Y+9
0007e8 85ba      	LDD  R27,Y+9+1
0007e9 e1e0      	LDI  R30,LOW(10000)
0007ea e2f7      	LDI  R31,HIGH(10000)
0007eb 940e 1066 	CALL SUBOPT_0x15
0007ed 940e 1054 	CALL SUBOPT_0x11
0007ef 940e 1061 	CALL SUBOPT_0x14
0007f1 940e 1061 	CALL SUBOPT_0x14
0007f3 940e 106b 	CALL SUBOPT_0x16
                 ;      Value %= 10000;
0007f5 e1e0      	LDI  R30,LOW(10000)
0007f6 e2f7      	LDI  R31,HIGH(10000)
0007f7 940e 1070 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
0007f9 c004      	RJMP _0x83
                 _0x82:
0007fa 30e4      	CPI  R30,LOW(0x4)
0007fb e0a0      	LDI  R26,HIGH(0x4)
0007fc 07fa      	CPC  R31,R26
0007fd f499      	BRNE _0x84
                 _0x83:
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
0007fe 85a9      	LDD  R26,Y+9
0007ff 85ba      	LDD  R27,Y+9+1
000800 eee8      	LDI  R30,LOW(1000)
000801 e0f3      	LDI  R31,HIGH(1000)
000802 940e 1066 	CALL SUBOPT_0x15
000804 940e 1054 	CALL SUBOPT_0x11
000806 940e 1061 	CALL SUBOPT_0x14
000808 940e 1061 	CALL SUBOPT_0x14
00080a 940e 106b 	CALL SUBOPT_0x16
                 ;      Value %= 1000;
00080c eee8      	LDI  R30,LOW(1000)
00080d e0f3      	LDI  R31,HIGH(1000)
00080e 940e 1070 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
000810 c004      	RJMP _0x85
                 _0x84:
000811 30e3      	CPI  R30,LOW(0x3)
000812 e0a0      	LDI  R26,HIGH(0x3)
000813 07fa      	CPC  R31,R26
000814 f499      	BRNE _0x86
                 _0x85:
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
000815 85a9      	LDD  R26,Y+9
000816 85ba      	LDD  R27,Y+9+1
000817 e6e4      	LDI  R30,LOW(100)
000818 e0f0      	LDI  R31,HIGH(100)
000819 940e 1066 	CALL SUBOPT_0x15
00081b 940e 1054 	CALL SUBOPT_0x11
00081d 940e 1061 	CALL SUBOPT_0x14
00081f 940e 1061 	CALL SUBOPT_0x14
000821 940e 106b 	CALL SUBOPT_0x16
                 ;      Value %= 100;
000823 e6e4      	LDI  R30,LOW(100)
000824 e0f0      	LDI  R31,HIGH(100)
000825 940e 1070 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
000827 c004      	RJMP _0x87
                 _0x86:
000828 30e2      	CPI  R30,LOW(0x2)
000829 e0a0      	LDI  R26,HIGH(0x2)
00082a 07fa      	CPC  R31,R26
00082b f499      	BRNE _0x88
                 _0x87:
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
00082c 85a9      	LDD  R26,Y+9
00082d 85ba      	LDD  R27,Y+9+1
00082e e0ea      	LDI  R30,LOW(10)
00082f e0f0      	LDI  R31,HIGH(10)
000830 940e 1066 	CALL SUBOPT_0x15
000832 940e 1054 	CALL SUBOPT_0x11
000834 940e 1061 	CALL SUBOPT_0x14
000836 940e 1061 	CALL SUBOPT_0x14
000838 940e 106b 	CALL SUBOPT_0x16
                 ;      Value %= 10;
00083a e0ea      	LDI  R30,LOW(10)
00083b e0f0      	LDI  R31,HIGH(10)
00083c 940e 1070 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
00083e c004      	RJMP _0x89
                 _0x88:
00083f 30e1      	CPI  R30,LOW(0x1)
000840 e0a0      	LDI  R26,HIGH(0x1)
000841 07fa      	CPC  R31,R26
000842 f461      	BRNE _0x81
                 _0x89:
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
000843 85e9      	LDD  R30,Y+9
000844 5de0      	SUBI R30,-LOW(48)
000845 93ea      	ST   -Y,R30
000846 940e 1054 	CALL SUBOPT_0x11
000848 940e 1054 	CALL SUBOPT_0x11
00084a 940e 1061 	CALL SUBOPT_0x14
00084c 940e 1061 	CALL SUBOPT_0x14
00084e ddd4      	RCALL _SSD1963_PutChar16
                 ;    break;
                 ;  }
                 _0x81:
                 ;}
00084f 962b      	ADIW R28,11
000850 9508      	RET
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000851 940e 107a 	CALL SUBOPT_0x18
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
000853 940e 108c 	CALL SUBOPT_0x19
                 ;  if (j < 0) j *= -1;
000855 f412      	BRPL _0x8B
000856 940e 1096 	CALL SUBOPT_0x1A
                 ;  k = StopY - StartY + 1;
                 _0x8B:
000858 940e 109d 	CALL SUBOPT_0x1B
                 ;  if (k < 0) k *= -1;
00085a f422      	BRPL _0x8C
00085b 940e 10ad 	CALL SUBOPT_0x1C
00085d 940e 10b2 	CALL SUBOPT_0x1D
                 ;  k = k * j;
                 _0x8C:
00085f 940e 10bd 	CALL SUBOPT_0x1E
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x8E:
000861 940e 10d0 	CALL SUBOPT_0x1F
000863 f43c      	BRGE _0x8F
000864 85ea      	LDD  R30,Y+10
000865 85fb      	LDD  R31,Y+10+1
000866 940e 1050 	CALL SUBOPT_0x10
000868 940e 10d8 	CALL SUBOPT_0x20
00086a cff6      	RJMP _0x8E
                 _0x8F:
00086b c105      	RJMP _0x2080005
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
00086c 972a      	SBIW R28,10
00086d 940e 13e4 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
00086f 8da9      	LDD  R26,Y+25
000870 8dba      	LDD  R27,Y+25+1
000871 89ef      	LDD  R30,Y+23
000872 8df8      	LDD  R31,Y+23+1
000873 1bea      	SUB  R30,R26
000874 0bfb      	SBC  R31,R27
000875 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
000876 2355      	TST  R21
000877 f432      	BRPL _0x90
000878 01fa      	MOVW R30,R20
000879 efaf      	LDI  R26,LOW(65535)
00087a efbf      	LDI  R27,HIGH(65535)
00087b 940e 1369 	CALL __MULW12
00087d 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x90:
00087e 89ad      	LDD  R26,Y+21
00087f 89be      	LDD  R27,Y+21+1
000880 89eb      	LDD  R30,Y+19
000881 89fc      	LDD  R31,Y+19+1
000882 1bea      	SUB  R30,R26
000883 0bfb      	SBC  R31,R27
000884 87ee      	STD  Y+14,R30
000885 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
000886 85af      	LDD  R26,Y+15
000887 23aa      	TST  R26
000888 f432      	BRPL _0x91
000889 efaf      	LDI  R26,LOW(65535)
00088a efbf      	LDI  R27,HIGH(65535)
00088b 940e 1369 	CALL __MULW12
00088d 87ee      	STD  Y+14,R30
00088e 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x91:
00088f 89ef      	LDD  R30,Y+23
000890 8df8      	LDD  R31,Y+23+1
000891 8da9      	LDD  R26,Y+25
000892 8dba      	LDD  R27,Y+25+1
000893 17ae      	CP   R26,R30
000894 07bf      	CPC  R27,R31
000895 f418      	BRSH _0x92
000896 e0e1      	LDI  R30,LOW(1)
000897 e0f0      	LDI  R31,HIGH(1)
000898 c002      	RJMP _0x93
                 _0x92:
000899 efef      	LDI  R30,LOW(65535)
00089a efff      	LDI  R31,HIGH(65535)
                 _0x93:
00089b 87ec      	STD  Y+12,R30
00089c 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
00089d 89eb      	LDD  R30,Y+19
00089e 89fc      	LDD  R31,Y+19+1
00089f 89ad      	LDD  R26,Y+21
0008a0 89be      	LDD  R27,Y+21+1
0008a1 17ae      	CP   R26,R30
0008a2 07bf      	CPC  R27,R31
0008a3 f418      	BRSH _0x95
0008a4 e0e1      	LDI  R30,LOW(1)
0008a5 e0f0      	LDI  R31,HIGH(1)
0008a6 c002      	RJMP _0x96
                 _0x95:
0008a7 efef      	LDI  R30,LOW(65535)
0008a8 efff      	LDI  R31,HIGH(65535)
                 _0x96:
0008a9 87ea      	STD  Y+10,R30
0008aa 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
0008ab 85ae      	LDD  R26,Y+14
0008ac 85bf      	LDD  R27,Y+14+1
0008ad 01fa      	MOVW R30,R20
0008ae 1bea      	SUB  R30,R26
0008af 0bfb      	SBC  R31,R27
0008b0 87e8      	STD  Y+8,R30
0008b1 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x98:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
0008b2 8de9      	LDD  R30,Y+25
0008b3 8dfa      	LDD  R31,Y+25+1
0008b4 93fa      	ST   -Y,R31
0008b5 93ea      	ST   -Y,R30
0008b6 89ea      	LDD  R30,Y+18
0008b7 940e 10e5 	CALL SUBOPT_0x21
0008b9 93fa      	ST   -Y,R31
0008ba 93ea      	ST   -Y,R30
0008bb 8de9      	LDD  R30,Y+25
0008bc 8dfa      	LDD  R31,Y+25+1
0008bd 93fa      	ST   -Y,R31
0008be 93ea      	ST   -Y,R30
0008bf 89ee      	LDD  R30,Y+22
0008c0 940e 10e5 	CALL SUBOPT_0x21
0008c2 940e 1048 	CALL SUBOPT_0xF
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
0008c4 89a8      	LDD  R26,Y+16
0008c5 27bb      	CLR  R27
0008c6 89e8      	LDD  R30,Y+16
0008c7 e0f0      	LDI  R31,0
0008c8 940e 1369 	CALL __MULW12
0008ca 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
0008cb e000     +LDI R16 , LOW ( 0 )
0008cc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9C:
                +
0008cd 1720     +CP R18 , R16
0008ce 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0008cf f03c      	BRLT _0x9D
0008d0 89e9      	LDD  R30,Y+17
0008d1 89fa      	LDD  R31,Y+17+1
0008d2 940e 1050 	CALL SUBOPT_0x10
                +
0008d4 5f0f     +SUBI R16 , LOW ( - 1 )
0008d5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0008d6 cff6      	RJMP _0x9C
                 _0x9D:
0008d7 89ef      	LDD  R30,Y+23
0008d8 8df8      	LDD  R31,Y+23+1
0008d9 8da9      	LDD  R26,Y+25
0008da 8dba      	LDD  R27,Y+25+1
0008db 17ea      	CP   R30,R26
0008dc 07fb      	CPC  R31,R27
0008dd f439      	BRNE _0x9F
0008de 89eb      	LDD  R30,Y+19
0008df 89fc      	LDD  R31,Y+19+1
0008e0 89ad      	LDD  R26,Y+21
0008e1 89be      	LDD  R27,Y+21+1
0008e2 17ea      	CP   R30,R26
0008e3 07fb      	CPC  R31,R27
0008e4 f009      	BREQ _0xA0
                 _0x9F:
0008e5 c001      	RJMP _0x9E
                 _0xA0:
                 ;		break;
0008e6 c032      	RJMP _0x9A
                 ;
                 ;		error2 = error * 2;
                 _0x9E:
0008e7 85e8      	LDD  R30,Y+8
0008e8 85f9      	LDD  R31,Y+8+1
0008e9 0fee      	LSL  R30
0008ea 1fff      	ROL  R31
0008eb 83ee      	STD  Y+6,R30
0008ec 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
0008ed 85ee      	LDD  R30,Y+14
0008ee 85ff      	LDD  R31,Y+14+1
0008ef 940e 131f 	CALL __ANEGW1
0008f1 81ae      	LDD  R26,Y+6
0008f2 81bf      	LDD  R27,Y+6+1
0008f3 17ea      	CP   R30,R26
0008f4 07fb      	CPC  R31,R27
0008f5 f474      	BRGE _0xA1
                 ;		{
                 ;			error -= deltaY;
0008f6 85ae      	LDD  R26,Y+14
0008f7 85bf      	LDD  R27,Y+14+1
0008f8 940e 10eb 	CALL SUBOPT_0x22
0008fa 87e8      	STD  Y+8,R30
0008fb 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
0008fc 85ec      	LDD  R30,Y+12
0008fd 85fd      	LDD  R31,Y+12+1
0008fe 8da9      	LDD  R26,Y+25
0008ff 8dba      	LDD  R27,Y+25+1
000900 0fea      	ADD  R30,R26
000901 1ffb      	ADC  R31,R27
000902 8fe9      	STD  Y+25,R30
000903 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA1:
000904 81ae      	LDD  R26,Y+6
000905 81bf      	LDD  R27,Y+6+1
000906 17a4      	CP   R26,R20
000907 07b5      	CPC  R27,R21
000908 f47c      	BRGE _0xA2
                 ;		{
                 ;			error += deltaX;
000909 01fa      	MOVW R30,R20
00090a 85a8      	LDD  R26,Y+8
00090b 85b9      	LDD  R27,Y+8+1
00090c 0fea      	ADD  R30,R26
00090d 1ffb      	ADC  R31,R27
00090e 87e8      	STD  Y+8,R30
00090f 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
000910 85ea      	LDD  R30,Y+10
000911 85fb      	LDD  R31,Y+10+1
000912 89ad      	LDD  R26,Y+21
000913 89be      	LDD  R27,Y+21+1
000914 0fea      	ADD  R30,R26
000915 1ffb      	ADC  R31,R27
000916 8bed      	STD  Y+21,R30
000917 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA2:
000918 cf99      	RJMP _0x98
                 _0x9A:
                 ;}
000919 940e 13eb 	CALL __LOADLOCR6
00091b 966b      	ADIW R28,27
00091c 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
00091d 940e 1059 	CALL SUBOPT_0x12
00091f 940e 1059 	CALL SUBOPT_0x12
000921 940e 1059 	CALL SUBOPT_0x12
000923 85e8      	LDD  R30,Y+8
000924 85f9      	LDD  R31,Y+8+1
000925 940e 10f0 	CALL SUBOPT_0x23
000927 940e 1054 	CALL SUBOPT_0x11
000929 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
00092a 940e 1059 	CALL SUBOPT_0x12
00092c 81ec      	LDD  R30,Y+4
00092d 81fd      	LDD  R31,Y+4+1
00092e 940e 10f0 	CALL SUBOPT_0x23
000930 940e 1059 	CALL SUBOPT_0x12
000932 940e 1059 	CALL SUBOPT_0x12
000934 940e 1054 	CALL SUBOPT_0x11
000936 df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
000937 940e 1059 	CALL SUBOPT_0x12
000939 940e 1059 	CALL SUBOPT_0x12
00093b 81ae      	LDD  R26,Y+6
00093c 81bf      	LDD  R27,Y+6+1
00093d 940e 10eb 	CALL SUBOPT_0x22
00093f 93fa      	ST   -Y,R31
000940 93ea      	ST   -Y,R30
000941 940e 1059 	CALL SUBOPT_0x12
000943 940e 1054 	CALL SUBOPT_0x11
000945 df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
000946 81aa      	LDD  R26,Y+2
000947 81bb      	LDD  R27,Y+2+1
000948 940e 10eb 	CALL SUBOPT_0x22
00094a 93fa      	ST   -Y,R31
00094b 93ea      	ST   -Y,R30
00094c 940e 1059 	CALL SUBOPT_0x12
00094e 940e 1059 	CALL SUBOPT_0x12
000950 940e 1059 	CALL SUBOPT_0x12
000952 940e 1054 	CALL SUBOPT_0x11
000954 defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x2080006:
000955 962c      	ADIW R28,12
000956 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000957 940e 107a 	CALL SUBOPT_0x18
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
000959 940e 108c 	CALL SUBOPT_0x19
                 ;  if (j < 0) j *= -1;
00095b f412      	BRPL _0xA3
00095c 940e 1096 	CALL SUBOPT_0x1A
                 ;  k = StopY - StartY + 1;
                 _0xA3:
00095e 940e 109d 	CALL SUBOPT_0x1B
                 ;  if (k < 0) k *= -1;
000960 f422      	BRPL _0xA4
000961 940e 10ad 	CALL SUBOPT_0x1C
000963 940e 10b2 	CALL SUBOPT_0x1D
                 ;  k = k * j;
                 _0xA4:
000965 940e 10bd 	CALL SUBOPT_0x1E
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA6:
000967 940e 10d0 	CALL SUBOPT_0x1F
000969 f43c      	BRGE _0xA7
00096a 85ea      	LDD  R30,Y+10
00096b 85fb      	LDD  R31,Y+10+1
00096c 940e 1050 	CALL SUBOPT_0x10
00096e 940e 10d8 	CALL SUBOPT_0x20
000970 cff6      	RJMP _0xA6
                 _0xA7:
                 _0x2080005:
000971 8119      	LDD  R17,Y+1
000972 8108      	LDD  R16,Y+0
000973 9664      	ADIW R28,20
000974 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#pragma used-
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;void TSC2046_PortInit(void)
                 ; 0000 001C {
                 _TSC2046_PortInit:
                 ;  DDRE |= 0b00000100;
000975 9a12      	SBI  0x2,2
                 ;  DDRE &= 0b11110111;
000976 9813      	CBI  0x2,3
                 ;}
000977 9508      	RET
                 ;
                 ;#pragma used+
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ;{
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000978 931a      	ST   -Y,R17
000979 930a      	ST   -Y,R16
                 ;	res -> R16,R17
00097a 981a      	CBI  0x3,2
                 ;  delay_ms(1);
00097b 940e 1020 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
00097d ede3      	LDI  R30,LOW(211)
00097e 940e 10f7 	CALL SUBOPT_0x24
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000980 c09c      	RJMP _0x2080004
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000981 931a      	ST   -Y,R17
000982 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000983 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000984 940e 1020 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
000986 e9e3      	LDI  R30,LOW(147)
000987 940e 10f7 	CALL SUBOPT_0x24
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000989 c093      	RJMP _0x2080004
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
00098a 981a      	CBI  0x3,2
                 ;  delay_ms(5);
00098b e0e5      	LDI  R30,LOW(5)
00098c e0f0      	LDI  R31,HIGH(5)
00098d 940e 102d 	CALL SUBOPT_0x9
                 ;  spi(0b10010000);
00098f e9e0      	LDI  R30,LOW(144)
000990 93ea      	ST   -Y,R30
000991 940e 0ff0 	CALL _spi
                 ;  delay_us(100);
                +
000993 e980     +LDI R24 , LOW ( 400 )
000994 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000995 9701     +SBIW R24 , 1
000996 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
000997 e0e0      	LDI  R30,LOW(0)
000998 93ea      	ST   -Y,R30
000999 940e 0ff0 	CALL _spi
                 ;  spi(0x00);
00099b e0e0      	LDI  R30,LOW(0)
00099c 93ea      	ST   -Y,R30
00099d 940e 0ff0 	CALL _spi
                 ;  TOUCH_CS = 1;
00099f 9a1a      	SBI  0x3,2
                 ;}
0009a0 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
0009a1 931a      	ST   -Y,R17
0009a2 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0009a3 dfd4      	RCALL _TSC2046_getADC_X
0009a4 51e4      	SUBI R30,LOW(1300)
0009a5 40f5      	SBCI R31,HIGH(1300)
0009a6 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
0009a7 2311      	TST  R17
0009a8 f412      	BRPL _0xB8
                +
0009a9 e000     +LDI R16 , LOW ( 0 )
0009aa e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xB8:
0009ab 940e 1110 	CALL SUBOPT_0x25
                +
0009ad e5e5     +LDI R30 , LOW ( 0x4275D555 )
0009ae edf5     +LDI R31 , HIGH ( 0x4275D555 )
0009af e765     +LDI R22 , BYTE3 ( 0x4275D555 )
0009b0 e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
0009b1 940e 1118 	CALL SUBOPT_0x26
                 ;  return res;
0009b3 c069      	RJMP _0x2080004
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
0009b4 931a      	ST   -Y,R17
0009b5 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0009b6 dfca      	RCALL _TSC2046_getADC_Y
0009b7 53e4      	SUBI R30,LOW(2100)
0009b8 40f8      	SBCI R31,HIGH(2100)
0009b9 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
0009ba 2311      	TST  R17
0009bb f412      	BRPL _0xB9
                +
0009bc e000     +LDI R16 , LOW ( 0 )
0009bd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xB9:
0009be 940e 1110 	CALL SUBOPT_0x25
                +
0009c0 e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
0009c1 e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
0009c2 ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
0009c3 e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
0009c4 940e 1118 	CALL SUBOPT_0x26
                 ;  return res;
0009c6 c056      	RJMP _0x2080004
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;
                 ;  if (TOUCH_IRQ < 1)
0009c7 931a      	ST   -Y,R17
0009c8 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
0009c9 e010      	LDI  R17,0
0009ca e0a0      	LDI  R26,0
0009cb 990b      	SBIC 0x1,3
0009cc e0a1      	LDI  R26,1
0009cd 30a1      	CPI  R26,LOW(0x1)
0009ce f010      	BRLO PC+3
0009cf 940c 0a1c 	JMP _0xBA
                 ;  {
                 ;    tempX = 0;
0009d1 940e 111f 	CALL SUBOPT_0x27
                 ;    tempY = 0;
0009d3 940e 1129 	CALL SUBOPT_0x28
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
0009d5 e000      	LDI  R16,LOW(0)
                 _0xBC:
0009d6 3100      	CPI  R16,16
0009d7 f460      	BRSH _0xBD
                 ;    {
                 ;        tempX += TSC2046_getADC_X() - ADC_X_MIN;
0009d8 df9f      	RCALL _TSC2046_getADC_X
0009d9 51e4      	SUBI R30,LOW(1300)
0009da 40f5      	SBCI R31,HIGH(1300)
0009db 940e 1133 	CALL SUBOPT_0x29
                 ;        tempY += TSC2046_getADC_Y() - ADC_Y_MIN;
0009dd dfa3      	RCALL _TSC2046_getADC_Y
0009de 53e4      	SUBI R30,LOW(2100)
0009df 40f8      	SBCI R31,HIGH(2100)
0009e0 940e 1148 	CALL SUBOPT_0x2A
                 ;    }
0009e2 5f0f      	SUBI R16,-1
0009e3 cff2      	RJMP _0xBC
                 _0xBD:
                 ;    if (tempX < 0) tempX = 0;
0009e4 91a0 05d7 	LDS  R26,_tempX+3
0009e6 23aa      	TST  R26
0009e7 f412      	BRPL _0xBE
0009e8 940e 111f 	CALL SUBOPT_0x27
                 ;    if (tempY < 0) tempY = 0;
                 _0xBE:
0009ea 91a0 05db 	LDS  R26,_tempY+3
0009ec 23aa      	TST  R26
0009ed f412      	BRPL _0xBF
0009ee 940e 1129 	CALL SUBOPT_0x28
                 ;
                 ;    TOUCH_X = tempX / (TOUCH_Calc_Max * ADC_X_K);
                 _0xBF:
0009f0 91e0 05d4 	LDS  R30,_tempX
0009f2 91f0 05d5 	LDS  R31,_tempX+1
0009f4 9160 05d6 	LDS  R22,_tempX+2
0009f6 9170 05d7 	LDS  R23,_tempX+3
0009f8 940e 12a7 	CALL __CDF1
0009fa 01df      	MOVW R26,R30
0009fb 01cb      	MOVW R24,R22
                +
0009fc e5e5     +LDI R30 , LOW ( 0x4475D555 )
0009fd edf5     +LDI R31 , HIGH ( 0x4475D555 )
0009fe e765     +LDI R22 , BYTE3 ( 0x4475D555 )
0009ff e474     +LDI R23 , BYTE4 ( 0x4475D555 )
                 	__GETD1N 0x4475D555
000a00 940e 12d5 	CALL __DIVF21
000a02 940e 126e 	CALL __CFD1U
000a04 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / (TOUCH_Calc_Max * ADC_Y_K);
000a05 91e0 05d8 	LDS  R30,_tempY
000a07 91f0 05d9 	LDS  R31,_tempY+1
000a09 9160 05da 	LDS  R22,_tempY+2
000a0b 9170 05db 	LDS  R23,_tempY+3
000a0d 940e 12a7 	CALL __CDF1
000a0f 01df      	MOVW R26,R30
000a10 01cb      	MOVW R24,R22
                +
000a11 e1ee     +LDI R30 , LOW ( 0x44CE9E1E )
000a12 e9fe     +LDI R31 , HIGH ( 0x44CE9E1E )
000a13 ec6e     +LDI R22 , BYTE3 ( 0x44CE9E1E )
000a14 e474     +LDI R23 , BYTE4 ( 0x44CE9E1E )
                 	__GETD1N 0x44CE9E1E
000a15 940e 12d5 	CALL __DIVF21
000a17 940e 126e 	CALL __CFD1U
000a19 013f      	MOVW R6,R30
                 ;
                 ;    TSC2046_Stop();
000a1a df6f      	RCALL _TSC2046_Stop
                 ;    res = 1;
000a1b e011      	LDI  R17,LOW(1)
                 ;  }
                 ;
                 ;  return res;
                 _0xBA:
000a1c 2fe1      	MOV  R30,R17
                 _0x2080004:
000a1d 9109      	LD   R16,Y+
000a1e 9119      	LD   R17,Y+
000a1f 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  char i;
                 ;  TSC2046_PortInit();
000a20 931a      	ST   -Y,R17
                 ;	i -> R17
000a21 df53      	RCALL _TSC2046_PortInit
                 ;  TOUCH_CS = 0;
000a22 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
000a23 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
000a24 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000a25 958a     +DEC R24
000a26 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
000a27 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
000a28 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
000a29 940e 111f 	CALL SUBOPT_0x27
                 ;    tempY = 0;
000a2b 940e 1129 	CALL SUBOPT_0x28
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000a2d e010      	LDI  R17,LOW(0)
                 _0xC9:
000a2e 3110      	CPI  R17,16
000a2f f440      	BRSH _0xCA
                 ;    {
                 ;      tempX += TSC2046_getX();
000a30 df70      	RCALL _TSC2046_getX
000a31 940e 1133 	CALL SUBOPT_0x29
                 ;      tempY += TSC2046_getY();
000a33 df80      	RCALL _TSC2046_getY
000a34 940e 1148 	CALL SUBOPT_0x2A
                 ;    }
000a36 5f1f      	SUBI R17,-1
000a37 cff6      	RJMP _0xC9
                 _0xCA:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
000a38 91a0 05d4 	LDS  R26,_tempX
000a3a 91b0 05d5 	LDS  R27,_tempX+1
000a3c 9180 05d6 	LDS  R24,_tempX+2
000a3e 9190 05d7 	LDS  R25,_tempX+3
000a40 940e 115d 	CALL SUBOPT_0x2B
000a42 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
000a43 91a0 05d8 	LDS  R26,_tempY
000a45 91b0 05d9 	LDS  R27,_tempY+1
000a47 9180 05da 	LDS  R24,_tempY+2
000a49 9190 05db 	LDS  R25,_tempY+3
000a4b 940e 115d 	CALL SUBOPT_0x2B
000a4d 013f      	MOVW R6,R30
                 ;    TSC2046_Stop();
000a4e df3b      	RCALL _TSC2046_Stop
                 ;}
000a4f c440      	RJMP _0x2080001
                 ;
                 ;#pragma used-
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 250
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 004F {
                 _usart0_rx_isr:
000a50 940e 1164 	CALL SUBOPT_0x2C
                 ; 0000 0050 char status,data;
                 ; 0000 0051 status=UCSR0A;
000a52 931a      	ST   -Y,R17
000a53 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000a54 b11b      	IN   R17,11
                 ; 0000 0052 data=UDR0;
000a55 b10c      	IN   R16,12
                 ; 0000 0053 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000a56 2fe1      	MOV  R30,R17
000a57 71ec      	ANDI R30,LOW(0x1C)
000a58 f4b1      	BRNE _0xCB
                 ; 0000 0054    {
                 ; 0000 0055    rx_buffer0[rx_wr_index0++]=data;
000a59 2ded      	MOV  R30,R13
000a5a 94d3      	INC  R13
000a5b e0f0      	LDI  R31,0
000a5c 52e4      	SUBI R30,LOW(-_rx_buffer0)
000a5d 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
000a5e 8300      	ST   Z,R16
                 ; 0000 0056 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0057    // special case for receiver buffer size=256
                 ; 0000 0058    if (++rx_counter0 == 0)
                 ; 0000 0059       {
                 ; 0000 005A #else
                 ; 0000 005B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000a5f efea      	LDI  R30,LOW(250)
000a60 15ed      	CP   R30,R13
000a61 f409      	BRNE _0xCC
000a62 24dd      	CLR  R13
                 ; 0000 005C    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0xCC:
000a63 91a0 06d6 	LDS  R26,_rx_counter0
000a65 5faf      	SUBI R26,-LOW(1)
000a66 93a0 06d6 	STS  _rx_counter0,R26
000a68 3faa      	CPI  R26,LOW(0xFA)
000a69 f429      	BRNE _0xCD
                 ; 0000 005D       {
                 ; 0000 005E       rx_counter0=0;
000a6a e0e0      	LDI  R30,LOW(0)
000a6b 93e0 06d6 	STS  _rx_counter0,R30
                 ; 0000 005F #endif
                 ; 0000 0060       rx_buffer_overflow0=1;
000a6d 9468      	SET
000a6e f820      	BLD  R2,0
                 ; 0000 0061       }
                 ; 0000 0062    }
                 _0xCD:
                 ; 0000 0063 }
                 _0xCB:
000a6f 9109      	LD   R16,Y+
000a70 9119      	LD   R17,Y+
000a71 c09f      	RJMP _0x175
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 006A {
                 _getchar0:
                 ; 0000 006B char data;
                 ; 0000 006C while (rx_counter0==0);
000a72 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xCE:
000a73 91e0 06d6 	LDS  R30,_rx_counter0
000a75 30e0      	CPI  R30,0
000a76 f3e1      	BREQ _0xCE
                 ; 0000 006D data=rx_buffer0[rx_rd_index0++];
000a77 2dec      	MOV  R30,R12
000a78 94c3      	INC  R12
000a79 e0f0      	LDI  R31,0
000a7a 52e4      	SUBI R30,LOW(-_rx_buffer0)
000a7b 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
000a7c 8110      	LD   R17,Z
                 ; 0000 006E #if RX_BUFFER_SIZE0 != 256
                 ; 0000 006F if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
000a7d efea      	LDI  R30,LOW(250)
000a7e 15ec      	CP   R30,R12
000a7f f409      	BRNE _0xD1
000a80 24cc      	CLR  R12
                 ; 0000 0070 #endif
                 ; 0000 0071 #asm("cli")
                 _0xD1:
000a81 94f8      	cli
                 ; 0000 0072 --rx_counter0;
000a82 91e0 06d6 	LDS  R30,_rx_counter0
000a84 50e1      	SUBI R30,LOW(1)
000a85 93e0 06d6 	STS  _rx_counter0,R30
                 ; 0000 0073 #asm("sei")
000a87 9478      	sei
                 ; 0000 0074 return data;
000a88 2fe1      	MOV  R30,R17
000a89 c406      	RJMP _0x2080001
                 ; 0000 0075 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0085 {
                 _usart0_tx_isr:
000a8a 940e 1164 	CALL SUBOPT_0x2C
                 ; 0000 0086 if (tx_counter0)
000a8c 91e0 06e1 	LDS  R30,_tx_counter0
000a8e 30e0      	CPI  R30,0
000a8f f099      	BREQ _0xD2
                 ; 0000 0087    {
                 ; 0000 0088    --tx_counter0;
000a90 50e1      	SUBI R30,LOW(1)
000a91 93e0 06e1 	STS  _tx_counter0,R30
                 ; 0000 0089    UDR0=tx_buffer0[tx_rd_index0++];
000a93 91e0 06e0 	LDS  R30,_tx_rd_index0
000a95 5fef      	SUBI R30,-LOW(1)
000a96 93e0 06e0 	STS  _tx_rd_index0,R30
000a98 940e 116a 	CALL SUBOPT_0x2D
000a9a 81e0      	LD   R30,Z
000a9b b9ec      	OUT  0xC,R30
                 ; 0000 008A #if TX_BUFFER_SIZE0 != 256
                 ; 0000 008B    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000a9c 91a0 06e0 	LDS  R26,_tx_rd_index0
000a9e 30a8      	CPI  R26,LOW(0x8)
000a9f f419      	BRNE _0xD3
000aa0 e0e0      	LDI  R30,LOW(0)
000aa1 93e0 06e0 	STS  _tx_rd_index0,R30
                 ; 0000 008C #endif
                 ; 0000 008D    }
                 _0xD3:
                 ; 0000 008E }
                 _0xD2:
000aa3 c06d      	RJMP _0x175
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar0(char c)
                 ; 0000 0095 {
                 _putchar0:
                 ; 0000 0096 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xD4:
000aa4 91a0 06e1 	LDS  R26,_tx_counter0
000aa6 30a8      	CPI  R26,LOW(0x8)
000aa7 f3e1      	BREQ _0xD4
                 ; 0000 0097 #asm("cli")
000aa8 94f8      	cli
                 ; 0000 0098 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000aa9 91e0 06e1 	LDS  R30,_tx_counter0
000aab 30e0      	CPI  R30,0
000aac f411      	BRNE _0xD8
000aad 995d      	SBIC 0xB,5
000aae c016      	RJMP _0xD7
                 _0xD8:
                 ; 0000 0099    {
                 ; 0000 009A    tx_buffer0[tx_wr_index0++]=c;
000aaf 91e0 06df 	LDS  R30,_tx_wr_index0
000ab1 5fef      	SUBI R30,-LOW(1)
000ab2 93e0 06df 	STS  _tx_wr_index0,R30
000ab4 940e 116a 	CALL SUBOPT_0x2D
000ab6 81a8      	LD   R26,Y
000ab7 83a0      	STD  Z+0,R26
                 ; 0000 009B #if TX_BUFFER_SIZE0 != 256
                 ; 0000 009C    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000ab8 91a0 06df 	LDS  R26,_tx_wr_index0
000aba 30a8      	CPI  R26,LOW(0x8)
000abb f419      	BRNE _0xDA
000abc e0e0      	LDI  R30,LOW(0)
000abd 93e0 06df 	STS  _tx_wr_index0,R30
                 ; 0000 009D #endif
                 ; 0000 009E    ++tx_counter0;
                 _0xDA:
000abf 91e0 06e1 	LDS  R30,_tx_counter0
000ac1 5fef      	SUBI R30,-LOW(1)
000ac2 93e0 06e1 	STS  _tx_counter0,R30
                 ; 0000 009F    }
                 ; 0000 00A0 else
000ac4 c002      	RJMP _0xDB
                 _0xD7:
                 ; 0000 00A1    UDR0=c;
000ac5 81e8      	LD   R30,Y
000ac6 b9ec      	OUT  0xC,R30
                 ; 0000 00A2 #asm("sei")
                 _0xDB:
000ac7 9478      	sei
                 ; 0000 00A3 }
000ac8 9621      	ADIW R28,1
000ac9 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00B6 {
                 _usart1_rx_isr:
000aca 940e 1164 	CALL SUBOPT_0x2C
                 ; 0000 00B7 char status,data;
                 ; 0000 00B8 status=UCSR1A;
000acc 931a      	ST   -Y,R17
000acd 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000ace 9110 009b 	LDS  R17,155
                 ; 0000 00B9 data=UDR1;
000ad0 9100 009c 	LDS  R16,156
                 ; 0000 00BA if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000ad2 2fe1      	MOV  R30,R17
000ad3 71ec      	ANDI R30,LOW(0x1C)
000ad4 f4e9      	BRNE _0xDC
                 ; 0000 00BB    {
                 ; 0000 00BC    rx_buffer1[rx_wr_index1++]=data;
000ad5 91e0 0702 	LDS  R30,_rx_wr_index1
000ad7 5fef      	SUBI R30,-LOW(1)
000ad8 93e0 0702 	STS  _rx_wr_index1,R30
000ada 50e1      	SUBI R30,LOW(1)
000adb e0f0      	LDI  R31,0
000adc 51ee      	SUBI R30,LOW(-_rx_buffer1)
000add 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000ade 8300      	ST   Z,R16
                 ; 0000 00BD #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00BE    // special case for receiver buffer size=256
                 ; 0000 00BF    if (++rx_counter1 == 0)
                 ; 0000 00C0       {
                 ; 0000 00C1 #else
                 ; 0000 00C2    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000adf 91a0 0702 	LDS  R26,_rx_wr_index1
000ae1 32a0      	CPI  R26,LOW(0x20)
000ae2 f419      	BRNE _0xDD
000ae3 e0e0      	LDI  R30,LOW(0)
000ae4 93e0 0702 	STS  _rx_wr_index1,R30
                 ; 0000 00C3    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0xDD:
000ae6 91a0 0704 	LDS  R26,_rx_counter1
000ae8 5faf      	SUBI R26,-LOW(1)
000ae9 93a0 0704 	STS  _rx_counter1,R26
000aeb 32a0      	CPI  R26,LOW(0x20)
000aec f429      	BRNE _0xDE
                 ; 0000 00C4       {
                 ; 0000 00C5       rx_counter1=0;
000aed e0e0      	LDI  R30,LOW(0)
000aee 93e0 0704 	STS  _rx_counter1,R30
                 ; 0000 00C6 #endif
                 ; 0000 00C7       rx_buffer_overflow1=1;
000af0 9468      	SET
000af1 f821      	BLD  R2,1
                 ; 0000 00C8       }
                 ; 0000 00C9    }
                 _0xDE:
                 ; 0000 00CA }
                 _0xDC:
000af2 9109      	LD   R16,Y+
000af3 9119      	LD   R17,Y+
000af4 c01c      	RJMP _0x175
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 00CF {
                 ; 0000 00D0 char data;
                 ; 0000 00D1 while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 00D2 data=rx_buffer1[rx_rd_index1++];
                 ; 0000 00D3 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00D4 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 00D5 #endif
                 ; 0000 00D6 #asm("cli")
                 ; 0000 00D7 --rx_counter1;
                 ; 0000 00D8 #asm("sei")
                 ; 0000 00D9 return data;
                 ; 0000 00DA }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 32
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 00E8 {
                 _usart1_tx_isr:
000af5 940e 1164 	CALL SUBOPT_0x2C
                 ; 0000 00E9 if (tx_counter1)
000af7 91e0 0727 	LDS  R30,_tx_counter1
000af9 30e0      	CPI  R30,0
000afa f0b1      	BREQ _0xE3
                 ; 0000 00EA    {
                 ; 0000 00EB    --tx_counter1;
000afb 50e1      	SUBI R30,LOW(1)
000afc 93e0 0727 	STS  _tx_counter1,R30
                 ; 0000 00EC    UDR1=tx_buffer1[tx_rd_index1++];
000afe 91e0 0726 	LDS  R30,_tx_rd_index1
000b00 5fef      	SUBI R30,-LOW(1)
000b01 93e0 0726 	STS  _tx_rd_index1,R30
000b03 50e1      	SUBI R30,LOW(1)
000b04 e0f0      	LDI  R31,0
000b05 5feb      	SUBI R30,LOW(-_tx_buffer1)
000b06 4ff8      	SBCI R31,HIGH(-_tx_buffer1)
000b07 81e0      	LD   R30,Z
000b08 93e0 009c 	STS  156,R30
                 ; 0000 00ED #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00EE    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000b0a 91a0 0726 	LDS  R26,_tx_rd_index1
000b0c 32a0      	CPI  R26,LOW(0x20)
000b0d f419      	BRNE _0xE4
000b0e e0e0      	LDI  R30,LOW(0)
000b0f 93e0 0726 	STS  _tx_rd_index1,R30
                 ; 0000 00EF #endif
                 ; 0000 00F0    }
                 _0xE4:
                 ; 0000 00F1 }
                 _0xE3:
                 _0x175:
000b11 91e9      	LD   R30,Y+
000b12 bfef      	OUT  SREG,R30
000b13 91f9      	LD   R31,Y+
000b14 91e9      	LD   R30,Y+
000b15 91a9      	LD   R26,Y+
000b16 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00F6 {
                 ; 0000 00F7 while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 ; 0000 00F8 #asm("cli")
                 ; 0000 00F9 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 00FA    {
                 ; 0000 00FB    tx_buffer1[tx_wr_index1++]=c;
                 ; 0000 00FC #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00FD    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
                 ; 0000 00FE #endif
                 ; 0000 00FF    ++tx_counter1;
                 ; 0000 0100    }
                 ; 0000 0101 else
                 ; 0000 0102    UDR1=c;
                 ; 0000 0103 #asm("sei")
                 ; 0000 0104 }
                 ;#pragma used-
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;#define RS485 PORTD.4
                 ;#define BACKLIGHT PORTB.7
                 ;
                 ;#define Graph_X_Min 0
                 ;#define Graph_X_Max 479
                 ;#define Graph_Y_Min 52
                 ;#define Graph_Y_Max 232
                 ;
                 ;#define Graph_X_Step ((Graph_X_Max-Graph_X_Min+1)/60)
                 ;#define Graph_Y_Mid ((Graph_Y_Max-Graph_Y_Min)/2 + Graph_Y_Min)
                 ;
                 ;#define Text_StartX 30
                 ;#define Text_StartY 16
                 ;
                 ;#define Value_StartX 290
                 ;#define Value_StartY 16
                 ;#define Value_Lenght (16*4)
                 ;
                 ;#define BTN_StartX 6
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;flash unsigned int BTN1_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN1_X_Begin = BTN_StartX;
                 ;flash unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;flash unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;flash unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;flash unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;flash unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;flash unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;flash unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 013A {
                 _Repaint_Button:
                 ; 0000 013B   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000b17 81ec      	LDD  R30,Y+4
000b18 e0f0      	LDI  R31,0
                 ; 0000 013C   {
                 ; 0000 013D     case 1 :
000b19 30e1      	CPI  R30,LOW(0x1)
000b1a e0a0      	LDI  R26,HIGH(0x1)
000b1b 07fa      	CPC  R31,R26
000b1c f479      	BRNE _0xF0
                 ; 0000 013E       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000b1d e0e0     +LDI R30 , LOW ( _0xF1 + ( 0 ) )
000b1e e0f5     +LDI R31 , HIGH ( _0xF1 + ( 0 ) )
                 	__POINTW1MN _0xF1,0
000b1f 93fa      	ST   -Y,R31
000b20 93ea      	ST   -Y,R30
000b21 e1e0      	LDI  R30,LOW(16)
000b22 e0f0      	LDI  R31,HIGH(16)
000b23 940e 116f 	CALL SUBOPT_0x2E
000b25 940e 1054 	CALL SUBOPT_0x11
000b27 940e 1176 	CALL SUBOPT_0x2F
                 ; 0000 013F       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000b29 e1e0      	LDI  R30,LOW(16)
000b2a e0f0      	LDI  R31,HIGH(16)
000b2b c038      	RJMP _0x16F
                 ; 0000 0140     break;
                 ; 0000 0141     case 2 :
                 _0xF0:
000b2c 30e2      	CPI  R30,LOW(0x2)
000b2d e0a0      	LDI  R26,HIGH(0x2)
000b2e 07fa      	CPC  R31,R26
000b2f f479      	BRNE _0xF2
                 ; 0000 0142       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000b30 e0e6     +LDI R30 , LOW ( _0xF1 + ( 6 ) )
000b31 e0f5     +LDI R31 , HIGH ( _0xF1 + ( 6 ) )
                 	__POINTW1MN _0xF1,6
000b32 93fa      	ST   -Y,R31
000b33 93ea      	ST   -Y,R30
000b34 e8e8      	LDI  R30,LOW(136)
000b35 e0f0      	LDI  R31,HIGH(136)
000b36 940e 116f 	CALL SUBOPT_0x2E
000b38 940e 1054 	CALL SUBOPT_0x11
000b3a 940e 1176 	CALL SUBOPT_0x2F
                 ; 0000 0143       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000b3c e8e8      	LDI  R30,LOW(136)
000b3d e0f0      	LDI  R31,HIGH(136)
000b3e c025      	RJMP _0x16F
                 ; 0000 0144     break;
                 ; 0000 0145     case 3 :
                 _0xF2:
000b3f 30e3      	CPI  R30,LOW(0x3)
000b40 e0a0      	LDI  R26,HIGH(0x3)
000b41 07fa      	CPC  R31,R26
000b42 f479      	BRNE _0xF3
                 ; 0000 0146       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000b43 e0ec     +LDI R30 , LOW ( _0xF1 + ( 12 ) )
000b44 e0f5     +LDI R31 , HIGH ( _0xF1 + ( 12 ) )
                 	__POINTW1MN _0xF1,12
000b45 93fa      	ST   -Y,R31
000b46 93ea      	ST   -Y,R30
000b47 e0e0      	LDI  R30,LOW(256)
000b48 e0f1      	LDI  R31,HIGH(256)
000b49 940e 116f 	CALL SUBOPT_0x2E
000b4b 940e 1054 	CALL SUBOPT_0x11
000b4d 940e 1176 	CALL SUBOPT_0x2F
                 ; 0000 0147       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000b4f e0e0      	LDI  R30,LOW(256)
000b50 e0f1      	LDI  R31,HIGH(256)
000b51 c012      	RJMP _0x16F
                 ; 0000 0148     break;
                 ; 0000 0149     case 4 :
                 _0xF3:
000b52 30e4      	CPI  R30,LOW(0x4)
000b53 e0a0      	LDI  R26,HIGH(0x4)
000b54 07fa      	CPC  R31,R26
000b55 f4c9      	BRNE _0xEF
                 ; 0000 014A       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000b56 e1e2     +LDI R30 , LOW ( _0xF1 + ( 18 ) )
000b57 e0f5     +LDI R31 , HIGH ( _0xF1 + ( 18 ) )
                 	__POINTW1MN _0xF1,18
000b58 93fa      	ST   -Y,R31
000b59 93ea      	ST   -Y,R30
000b5a e7e8      	LDI  R30,LOW(376)
000b5b e0f1      	LDI  R31,HIGH(376)
000b5c 940e 116f 	CALL SUBOPT_0x2E
000b5e 940e 1054 	CALL SUBOPT_0x11
000b60 940e 1176 	CALL SUBOPT_0x2F
                 ; 0000 014B       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000b62 e7e8      	LDI  R30,LOW(376)
000b63 e0f1      	LDI  R31,HIGH(376)
                 _0x16F:
000b64 93fa      	ST   -Y,R31
000b65 93ea      	ST   -Y,R30
000b66 efe7      	LDI  R30,LOW(247)
000b67 e0f0      	LDI  R31,HIGH(247)
000b68 93fa      	ST   -Y,R31
000b69 93ea      	ST   -Y,R30
000b6a 940e 1054 	CALL SUBOPT_0x11
000b6c 940e 1054 	CALL SUBOPT_0x11
000b6e dc58      	RCALL _SSD1963_PutString16
                 ; 0000 014C     break;
                 ; 0000 014D   }
                 _0xEF:
                 ; 0000 014E }
000b6f c104      	RJMP _0x2080003
                 
                 	.DSEG
                 _0xF1:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0151 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0152   // рисуем кнопки
                 ; 0000 0153   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000b70 e0e6      	LDI  R30,LOW(6)
000b71 e0f0      	LDI  R31,HIGH(6)
000b72 93fa      	ST   -Y,R31
000b73 93ea      	ST   -Y,R30
000b74 e6ea      	LDI  R30,LOW(106)
000b75 e0f0      	LDI  R31,HIGH(106)
000b76 940e 117d 	CALL SUBOPT_0x30
                 ; 0000 0154   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000b78 e7ee      	LDI  R30,LOW(126)
000b79 e0f0      	LDI  R31,HIGH(126)
000b7a 93fa      	ST   -Y,R31
000b7b 93ea      	ST   -Y,R30
000b7c eee2      	LDI  R30,LOW(226)
000b7d e0f0      	LDI  R31,HIGH(226)
000b7e 940e 117d 	CALL SUBOPT_0x30
                 ; 0000 0155   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000b80 efe6      	LDI  R30,LOW(246)
000b81 e0f0      	LDI  R31,HIGH(246)
000b82 93fa      	ST   -Y,R31
000b83 93ea      	ST   -Y,R30
000b84 e5ea      	LDI  R30,LOW(346)
000b85 e0f1      	LDI  R31,HIGH(346)
000b86 940e 117d 	CALL SUBOPT_0x30
                 ; 0000 0156   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000b88 e6ee      	LDI  R30,LOW(366)
000b89 e0f1      	LDI  R31,HIGH(366)
000b8a 93fa      	ST   -Y,R31
000b8b 93ea      	ST   -Y,R30
000b8c ede2      	LDI  R30,LOW(466)
000b8d e0f1      	LDI  R31,HIGH(466)
000b8e 940e 117d 	CALL SUBOPT_0x30
                 ; 0000 0157   // рисуем окантовку
                 ; 0000 0158   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000b90 e0e7      	LDI  R30,LOW(7)
000b91 e0f0      	LDI  R31,HIGH(7)
000b92 93fa      	ST   -Y,R31
000b93 93ea      	ST   -Y,R30
000b94 e6e9      	LDI  R30,LOW(105)
000b95 e0f0      	LDI  R31,HIGH(105)
000b96 940e 118d 	CALL SUBOPT_0x31
000b98 dd84      	RCALL _SSD1963_DrawRect
                 ; 0000 0159   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000b99 e7ef      	LDI  R30,LOW(127)
000b9a e0f0      	LDI  R31,HIGH(127)
000b9b 93fa      	ST   -Y,R31
000b9c 93ea      	ST   -Y,R30
000b9d eee1      	LDI  R30,LOW(225)
000b9e e0f0      	LDI  R31,HIGH(225)
000b9f 940e 118d 	CALL SUBOPT_0x31
000ba1 dd7b      	RCALL _SSD1963_DrawRect
                 ; 0000 015A   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000ba2 efe7      	LDI  R30,LOW(247)
000ba3 e0f0      	LDI  R31,HIGH(247)
000ba4 93fa      	ST   -Y,R31
000ba5 93ea      	ST   -Y,R30
000ba6 e5e9      	LDI  R30,LOW(345)
000ba7 e0f1      	LDI  R31,HIGH(345)
000ba8 940e 118d 	CALL SUBOPT_0x31
000baa dd72      	RCALL _SSD1963_DrawRect
                 ; 0000 015B   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000bab e6ef      	LDI  R30,LOW(367)
000bac e0f1      	LDI  R31,HIGH(367)
000bad 93fa      	ST   -Y,R31
000bae 93ea      	ST   -Y,R30
000baf ede1      	LDI  R30,LOW(465)
000bb0 e0f1      	LDI  R31,HIGH(465)
000bb1 940e 118d 	CALL SUBOPT_0x31
000bb3 dd69      	RCALL _SSD1963_DrawRect
                 ; 0000 015C 
                 ; 0000 015D   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
                +
000bb4 e1e8     +LDI R30 , LOW ( _0xF5 + ( 0 ) )
000bb5 e0f5     +LDI R31 , HIGH ( _0xF5 + ( 0 ) )
                 	__POINTW1MN _0xF5,0
000bb6 93fa      	ST   -Y,R31
000bb7 93ea      	ST   -Y,R30
000bb8 e0e1      	LDI  R30,LOW(1)
000bb9 93ea      	ST   -Y,R30
000bba 940e 1040 	CALL SUBOPT_0xD
000bbc 940e 119a 	CALL SUBOPT_0x32
                 ; 0000 015E   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000bbe e1ed     +LDI R30 , LOW ( _0xF5 + ( 5 ) )
000bbf e0f5     +LDI R31 , HIGH ( _0xF5 + ( 5 ) )
                 	__POINTW1MN _0xF5,5
000bc0 93fa      	ST   -Y,R31
000bc1 93ea      	ST   -Y,R30
000bc2 e0e2      	LDI  R30,LOW(2)
000bc3 93ea      	ST   -Y,R30
000bc4 940e 1040 	CALL SUBOPT_0xD
000bc6 940e 119a 	CALL SUBOPT_0x32
                 ; 0000 015F   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000bc8 e2e1     +LDI R30 , LOW ( _0xF5 + ( 9 ) )
000bc9 e0f5     +LDI R31 , HIGH ( _0xF5 + ( 9 ) )
                 	__POINTW1MN _0xF5,9
000bca 93fa      	ST   -Y,R31
000bcb 93ea      	ST   -Y,R30
000bcc e0e3      	LDI  R30,LOW(3)
000bcd 93ea      	ST   -Y,R30
000bce 940e 1040 	CALL SUBOPT_0xD
000bd0 940e 119a 	CALL SUBOPT_0x32
                 ; 0000 0160   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000bd2 e2e5     +LDI R30 , LOW ( _0xF5 + ( 13 ) )
000bd3 e0f5     +LDI R31 , HIGH ( _0xF5 + ( 13 ) )
                 	__POINTW1MN _0xF5,13
000bd4 940e 11a0 	CALL SUBOPT_0x33
000bd6 940e 119a 	CALL SUBOPT_0x32
                 ; 0000 0161 }
000bd8 9508      	RET
                 
                 	.DSEG
                 _0xF5:
000518           	.BYTE 0x13
                 ;
                 ;char GetButton(void)
                 ; 0000 0164 {
                 
                 	.CSEG
                 _GetButton:
                 ; 0000 0165   char res = 0;
                 ; 0000 0166   if (TSC2046_GetCoordinates())
000bd9 931a      	ST   -Y,R17
                 ;	res -> R17
000bda e010      	LDI  R17,0
000bdb ddeb      	RCALL _TSC2046_GetCoordinates
000bdc 30e0      	CPI  R30,0
000bdd f411      	BRNE PC+3
000bde 940c 0c2c 	JMP _0xF6
                 ; 0000 0167   {
                 ; 0000 0168     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000be0 e0e6      	LDI  R30,LOW(6)
000be1 e0f0      	LDI  R31,HIGH(6)
000be2 15e4      	CP   R30,R4
000be3 05f5      	CPC  R31,R5
000be4 f428      	BRSH _0xF8
000be5 e6ea      	LDI  R30,LOW(106)
000be6 e0f0      	LDI  R31,HIGH(106)
000be7 164e      	CP   R4,R30
000be8 065f      	CPC  R5,R31
000be9 f008      	BRLO _0xF9
                 _0xF8:
000bea c008      	RJMP _0xF7
                 _0xF9:
                 ; 0000 0169     {
                 ; 0000 016A       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
000beb 940e 11a5 	CALL SUBOPT_0x34
000bed f418      	BRSH _0xFB
000bee 940e 11aa 	CALL SUBOPT_0x35
000bf0 f008      	BRLO _0xFC
                 _0xFB:
000bf1 c001      	RJMP _0xFA
                 _0xFC:
000bf2 e011      	LDI  R17,LOW(1)
                 ; 0000 016B     }
                 _0xFA:
                 ; 0000 016C     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0xF7:
000bf3 e7ee      	LDI  R30,LOW(126)
000bf4 e0f0      	LDI  R31,HIGH(126)
000bf5 15e4      	CP   R30,R4
000bf6 05f5      	CPC  R31,R5
000bf7 f428      	BRSH _0xFE
000bf8 eee2      	LDI  R30,LOW(226)
000bf9 e0f0      	LDI  R31,HIGH(226)
000bfa 164e      	CP   R4,R30
000bfb 065f      	CPC  R5,R31
000bfc f008      	BRLO _0xFF
                 _0xFE:
000bfd c008      	RJMP _0xFD
                 _0xFF:
                 ; 0000 016D     {
                 ; 0000 016E       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000bfe 940e 11a5 	CALL SUBOPT_0x34
000c00 f418      	BRSH _0x101
000c01 940e 11aa 	CALL SUBOPT_0x35
000c03 f008      	BRLO _0x102
                 _0x101:
000c04 c001      	RJMP _0x100
                 _0x102:
000c05 e012      	LDI  R17,LOW(2)
                 ; 0000 016F     }
                 _0x100:
                 ; 0000 0170     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0xFD:
000c06 efe6      	LDI  R30,LOW(246)
000c07 e0f0      	LDI  R31,HIGH(246)
000c08 15e4      	CP   R30,R4
000c09 05f5      	CPC  R31,R5
000c0a f428      	BRSH _0x104
000c0b e5ea      	LDI  R30,LOW(346)
000c0c e0f1      	LDI  R31,HIGH(346)
000c0d 164e      	CP   R4,R30
000c0e 065f      	CPC  R5,R31
000c0f f008      	BRLO _0x105
                 _0x104:
000c10 c008      	RJMP _0x103
                 _0x105:
                 ; 0000 0171     {
                 ; 0000 0172       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000c11 940e 11a5 	CALL SUBOPT_0x34
000c13 f418      	BRSH _0x107
000c14 940e 11aa 	CALL SUBOPT_0x35
000c16 f008      	BRLO _0x108
                 _0x107:
000c17 c001      	RJMP _0x106
                 _0x108:
000c18 e013      	LDI  R17,LOW(3)
                 ; 0000 0173     }
                 _0x106:
                 ; 0000 0174     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x103:
000c19 e6ee      	LDI  R30,LOW(366)
000c1a e0f1      	LDI  R31,HIGH(366)
000c1b 15e4      	CP   R30,R4
000c1c 05f5      	CPC  R31,R5
000c1d f428      	BRSH _0x10A
000c1e ede2      	LDI  R30,LOW(466)
000c1f e0f1      	LDI  R31,HIGH(466)
000c20 164e      	CP   R4,R30
000c21 065f      	CPC  R5,R31
000c22 f008      	BRLO _0x10B
                 _0x10A:
000c23 c008      	RJMP _0x109
                 _0x10B:
                 ; 0000 0175     {
                 ; 0000 0176       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
000c24 940e 11a5 	CALL SUBOPT_0x34
000c26 f418      	BRSH _0x10D
000c27 940e 11aa 	CALL SUBOPT_0x35
000c29 f008      	BRLO _0x10E
                 _0x10D:
000c2a c001      	RJMP _0x10C
                 _0x10E:
000c2b e014      	LDI  R17,LOW(4)
                 ; 0000 0177     }
                 _0x10C:
                 ; 0000 0178 
                 ; 0000 0179   }
                 _0x109:
                 ; 0000 017A   return res;
                 _0xF6:
000c2c 2fe1      	MOV  R30,R17
000c2d c262      	RJMP _0x2080001
                 ; 0000 017B }
                 ;
                 ;void PutParameterText(char Number, unsigned int Color)
                 ; 0000 017E {
                 _PutParameterText:
                 ; 0000 017F   int X = Text_StartX;
                 ; 0000 0180   int Y = Text_StartY;
                 ; 0000 0181 
                 ; 0000 0182   SSD1963_PutString16("                ", X, Y, Color, BLACK);
000c2e 940e 13e6 	CALL __SAVELOCR4
                 ;	Number -> Y+6
                 ;	Color -> Y+4
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                +
000c30 e10e     +LDI R16 , LOW ( 30 )
000c31 e010     +LDI R17 , HIGH ( 30 )
                 	__GETWRN 16,17,30
                +
000c32 e120     +LDI R18 , LOW ( 16 )
000c33 e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
                +
000c34 e2eb     +LDI R30 , LOW ( _0x10F + ( 0 ) )
000c35 e0f5     +LDI R31 , HIGH ( _0x10F + ( 0 ) )
                 	__POINTW1MN _0x10F,0
000c36 940e 11af 	CALL SUBOPT_0x36
000c38 940e 11b4 	CALL SUBOPT_0x37
000c3a db8c      	RCALL _SSD1963_PutString16
                 ; 0000 0183   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000c3b e3ec     +LDI R30 , LOW ( _0x10F + ( 17 ) )
000c3c e0f5     +LDI R31 , HIGH ( _0x10F + ( 17 ) )
                 	__POINTW1MN _0x10F,17
000c3d 940e 11af 	CALL SUBOPT_0x36
000c3f 940e 11b9 	CALL SUBOPT_0x38
000c41 db85      	RCALL _SSD1963_PutString16
                 ; 0000 0184   switch (Number)
000c42 81ee      	LDD  R30,Y+6
000c43 940e 11c0 	CALL SUBOPT_0x39
                 ; 0000 0185   {
                 ; 0000 0186     case 0 :
000c45 f451      	BRNE _0x113
                 ; 0000 0187       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000c46 e4ed     +LDI R30 , LOW ( _0x10F + ( 34 ) )
000c47 e0f5     +LDI R31 , HIGH ( _0x10F + ( 34 ) )
                 	__POINTW1MN _0x10F,34
000c48 940e 11af 	CALL SUBOPT_0x36
000c4a 940e 11b4 	CALL SUBOPT_0x37
000c4c db7a      	RCALL _SSD1963_PutString16
                 ; 0000 0188       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000c4d e5e8     +LDI R30 , LOW ( _0x10F + ( 45 ) )
000c4e e0f5     +LDI R31 , HIGH ( _0x10F + ( 45 ) )
                 	__POINTW1MN _0x10F,45
000c4f c01b      	RJMP _0x170
                 ; 0000 0189     break;
                 ; 0000 018A     case 1 :
                 _0x113:
000c50 30e1      	CPI  R30,LOW(0x1)
000c51 e0a0      	LDI  R26,HIGH(0x1)
000c52 07fa      	CPC  R31,R26
000c53 f451      	BRNE _0x114
                 ; 0000 018B       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000c54 e5ec     +LDI R30 , LOW ( _0x10F + ( 49 ) )
000c55 e0f5     +LDI R31 , HIGH ( _0x10F + ( 49 ) )
                 	__POINTW1MN _0x10F,49
000c56 940e 11af 	CALL SUBOPT_0x36
000c58 940e 11b4 	CALL SUBOPT_0x37
000c5a db6c      	RCALL _SSD1963_PutString16
                 ; 0000 018C       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000c5b e6e0     +LDI R30 , LOW ( _0x10F + ( 53 ) )
000c5c e0f5     +LDI R31 , HIGH ( _0x10F + ( 53 ) )
                 	__POINTW1MN _0x10F,53
000c5d c00d      	RJMP _0x170
                 ; 0000 018D     break;
                 ; 0000 018E     case 2 :
                 _0x114:
000c5e 30e2      	CPI  R30,LOW(0x2)
000c5f e0a0      	LDI  R26,HIGH(0x2)
000c60 07fa      	CPC  R31,R26
000c61 f481      	BRNE _0x112
                 ; 0000 018F       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000c62 e6e4     +LDI R30 , LOW ( _0x10F + ( 57 ) )
000c63 e0f5     +LDI R31 , HIGH ( _0x10F + ( 57 ) )
                 	__POINTW1MN _0x10F,57
000c64 940e 11af 	CALL SUBOPT_0x36
000c66 940e 11b4 	CALL SUBOPT_0x37
000c68 db5e      	RCALL _SSD1963_PutString16
                 ; 0000 0190       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000c69 e7e5     +LDI R30 , LOW ( _0x10F + ( 74 ) )
000c6a e0f5     +LDI R31 , HIGH ( _0x10F + ( 74 ) )
                 	__POINTW1MN _0x10F,74
                 _0x170:
000c6b 93fa      	ST   -Y,R31
000c6c 93ea      	ST   -Y,R30
000c6d 931a      	ST   -Y,R17
000c6e 930a      	ST   -Y,R16
000c6f 940e 11b9 	CALL SUBOPT_0x38
000c71 db55      	RCALL _SSD1963_PutString16
                 ; 0000 0191     break;
                 ; 0000 0192     /*
                 ; 0000 0193     case 3 :
                 ; 0000 0194       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 0195       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0196     break;
                 ; 0000 0197     case 4 :
                 ; 0000 0198       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 0199       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 019A     break;
                 ; 0000 019B    */
                 ; 0000 019C   }
                 _0x112:
                 ; 0000 019D }
000c72 940e 13ed 	CALL __LOADLOCR4
                 _0x2080003:
000c74 9627      	ADIW R28,7
000c75 9508      	RET
                 
                 	.DSEG
                 _0x10F:
00052b           	.BYTE 0x56
                 ;
                 ;///////////////////////////////////////////////
                 ;char State=0, ParameterState=0, ValueState=0;
                 ;signed int Graph_X = -Graph_X_Step;
                 ;signed int Amplitude[3] = {90, 90, 50};
                 ;signed int ValueLast[3] = {0,0,0};
                 ;unsigned int WaitADC_mSec = 0;
                 ;
                 ;
                 ;//////////////////////////////////////////////
                 ;
                 ;//Функция вывода напряжения(тока) и частоты
                 ;void PutParameterValue(char v1, char v2, char v3, char fHz)
                 ; 0000 01AB {
                 
                 	.CSEG
                 _PutParameterValue:
                 ; 0000 01AC     int X = Value_StartX;
                 ; 0000 01AD     int Y = Value_StartY ;
                 ; 0000 01AE     unsigned int Color = BLUE;
                 ; 0000 01AF 
                 ; 0000 01B0     SSD1963_PutString16("            ", X, Y, Color, BLACK);
000c76 940e 13e4 	CALL __SAVELOCR6
                 ;	v1 -> Y+9
                 ;	v2 -> Y+8
                 ;	v3 -> Y+7
                 ;	fHz -> Y+6
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                 ;	Color -> R20,R21
                +
000c78 e202     +LDI R16 , LOW ( 290 )
000c79 e011     +LDI R17 , HIGH ( 290 )
                 	__GETWRN 16,17,290
                +
000c7a e120     +LDI R18 , LOW ( 16 )
000c7b e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
                +
000c7c ef48     +LDI R20 , LOW ( 248 )
000c7d e050     +LDI R21 , HIGH ( 248 )
                 	__GETWRN 20,21,248
                +
000c7e e8e1     +LDI R30 , LOW ( _0x118 + ( 0 ) )
000c7f e0f5     +LDI R31 , HIGH ( _0x118 + ( 0 ) )
                 	__POINTW1MN _0x118,0
000c80 940e 11af 	CALL SUBOPT_0x36
000c82 940e 11c3 	CALL SUBOPT_0x3A
000c84 db42      	RCALL _SSD1963_PutString16
                 ; 0000 01B1     SSD1963_PutString16("            ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000c85 e8ee     +LDI R30 , LOW ( _0x118 + ( 13 ) )
000c86 e0f5     +LDI R31 , HIGH ( _0x118 + ( 13 ) )
                 	__POINTW1MN _0x118,13
000c87 940e 11af 	CALL SUBOPT_0x36
000c89 01f9      	MOVW R30,R18
000c8a 9670      	ADIW R30,16
000c8b 93fa      	ST   -Y,R31
000c8c 93ea      	ST   -Y,R30
000c8d 940e 11c8 	CALL SUBOPT_0x3B
000c8f db37      	RCALL _SSD1963_PutString16
                 ; 0000 01B2 
                 ; 0000 01B3     if(ParameterState != 2)
000c90 91a0 0729 	LDS  R26,_ParameterState
000c92 30a2      	CPI  R26,LOW(0x2)
000c93 f149      	BREQ _0x119
                 ; 0000 01B4     {
                 ; 0000 01B5         SSD1963_PutValue16(v3, X, Y, 3, Color, BLACK);
000c94 81ef      	LDD  R30,Y+7
000c95 940e 11cb 	CALL SUBOPT_0x3C
000c97 940e 11cd 	CALL SUBOPT_0x3D
000c99 940e 11d2 	CALL SUBOPT_0x3E
                 ; 0000 01B6         X += Value_Lenght;
                 ; 0000 01B7         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
000c9b 940e 105e 	CALL SUBOPT_0x13
000c9d 940e 11af 	CALL SUBOPT_0x36
000c9f 940e 11cd 	CALL SUBOPT_0x3D
000ca1 940e 11d2 	CALL SUBOPT_0x3E
                 ; 0000 01B8         X += Value_Lenght;
                 ; 0000 01B9         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
000ca3 85e9      	LDD  R30,Y+9
000ca4 940e 11cb 	CALL SUBOPT_0x3C
000ca6 940e 11cd 	CALL SUBOPT_0x3D
000ca8 db38      	RCALL _SSD1963_PutValue16
                 ; 0000 01BA         X = Value_StartX + Value_Lenght;
                +
000ca9 e602     +LDI R16 , LOW ( 354 )
000caa e011     +LDI R17 , HIGH ( 354 )
                 	__GETWRN 16,17,354
                 ; 0000 01BB         Y += FONT_HEIGHT;
                +
000cab 5f20     +SUBI R18 , LOW ( - 16 )
000cac 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 01BC         SSD1963_PutValue16(fHz, X, Y, 3, Color, BLACK);
000cad 81ee      	LDD  R30,Y+6
000cae 940e 11cb 	CALL SUBOPT_0x3C
000cb0 940e 11cd 	CALL SUBOPT_0x3D
000cb2 940e 11d2 	CALL SUBOPT_0x3E
                 ; 0000 01BD         X += Value_Lenght;
                 ; 0000 01BE         SSD1963_PutString16("ГЦ", X, Y, Color, BLACK);
                +
000cb4 e9eb     +LDI R30 , LOW ( _0x118 + ( 26 ) )
000cb5 e0f5     +LDI R31 , HIGH ( _0x118 + ( 26 ) )
                 	__POINTW1MN _0x118,26
000cb6 940e 11af 	CALL SUBOPT_0x36
000cb8 940e 11c3 	CALL SUBOPT_0x3A
000cba 940e 07c7 	CALL _SSD1963_PutString16
                 ; 0000 01BF     }
                 ; 0000 01C0     else
000cbc c013      	RJMP _0x11A
                 _0x119:
                 ; 0000 01C1     {
                 ; 0000 01C2         X += Value_Lenght;
                +
000cbd 5c00     +SUBI R16 , LOW ( - 64 )
000cbe 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01C3         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
000cbf 85e9      	LDD  R30,Y+9
000cc0 940e 11cb 	CALL SUBOPT_0x3C
000cc2 940e 11cd 	CALL SUBOPT_0x3D
000cc4 940e 07e1 	CALL _SSD1963_PutValue16
                 ; 0000 01C4         Y += FONT_HEIGHT;
                +
000cc6 5f20     +SUBI R18 , LOW ( - 16 )
000cc7 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 01C5         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
000cc8 940e 105e 	CALL SUBOPT_0x13
000cca 940e 11af 	CALL SUBOPT_0x36
000ccc 940e 11cd 	CALL SUBOPT_0x3D
000cce 940e 07e1 	CALL _SSD1963_PutValue16
                 ; 0000 01C6     }
                 _0x11A:
                 ; 0000 01C7 }
000cd0 940e 13eb 	CALL __LOADLOCR6
000cd2 962a      	ADIW R28,10
000cd3 9508      	RET
                 
                 	.DSEG
                 _0x118:
000581           	.BYTE 0x1D
                 ;
                 ;
                 ;void StartPaint()
                 ; 0000 01CB {
                 
                 	.CSEG
                 _StartPaint:
                 ; 0000 01CC     //Чтоб первая точка легла
                 ; 0000 01CD     Graph_X = -Graph_X_Step;
000cd4 efe8      	LDI  R30,LOW(65528)
000cd5 efff      	LDI  R31,HIGH(65528)
000cd6 93e0 072b 	STS  _Graph_X,R30
000cd8 93f0 072c 	STS  _Graph_X+1,R31
                 ; 0000 01CE }
000cda 9508      	RET
                 ;
                 ;
                 ;void Paint_3phase(char a, char b, char c)
                 ; 0000 01D2 {
                 _Paint_3phase:
                 ; 0000 01D3     signed int Value[3];
                 ; 0000 01D4     unsigned int Color[] = {GREEN, YELLOW, RED};
                 ; 0000 01D5     signed int Lenght = Graph_X + Graph_X_Step;
                 ; 0000 01D6     signed int mid = Graph_Y_Mid;
                 ; 0000 01D7     char i;
                 ; 0000 01D8 
                 ; 0000 01D9     if(Graph_X > Graph_X_Max) return; //Некуда дальше
000cdb 972c      	SBIW R28,12
000cdc e0e7      	LDI  R30,LOW(7)
000cdd 83e8      	ST   Y,R30
000cde eee0      	LDI  R30,LOW(224)
000cdf 83e9      	STD  Y+1,R30
000ce0 e0e7      	LDI  R30,LOW(7)
000ce1 83ea      	STD  Y+2,R30
000ce2 efef      	LDI  R30,LOW(255)
000ce3 83eb      	STD  Y+3,R30
000ce4 e0e0      	LDI  R30,LOW(0)
000ce5 83ec      	STD  Y+4,R30
000ce6 e1ef      	LDI  R30,LOW(31)
000ce7 83ed      	STD  Y+5,R30
000ce8 940e 13e4 	CALL __SAVELOCR6
                 ;	a -> Y+20
                 ;	b -> Y+19
                 ;	c -> Y+18
                 ;	Value -> Y+12
                 ;	Color -> Y+6
                 ;	Lenght -> R16,R17
                 ;	mid -> R18,R19
                 ;	i -> R21
000cea 940e 11d7 	CALL SUBOPT_0x3F
000cec 9638      	ADIW R30,8
000ced 018f      	MOVW R16,R30
                +
000cee e82e     +LDI R18 , LOW ( 142 )
000cef e030     +LDI R19 , HIGH ( 142 )
                 	__GETWRN 18,19,142
000cf0 91a0 072b 	LDS  R26,_Graph_X
000cf2 91b0 072c 	LDS  R27,_Graph_X+1
000cf4 3ea0      	CPI  R26,LOW(0x1E0)
000cf5 e0e1      	LDI  R30,HIGH(0x1E0)
000cf6 07be      	CPC  R27,R30
000cf7 f00c      	BRLT _0x11B
000cf8 c114      	RJMP _0x2080002
                 ; 0000 01DA     if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
                 _0x11B:
                +
000cf9 3e00     +CPI R16 , LOW ( 480 )
000cfa e0e1     +LDI R30 , HIGH ( 480 )
000cfb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,480
000cfc f014      	BRLT _0x11C
                +
000cfd ed0f     +LDI R16 , LOW ( 479 )
000cfe e011     +LDI R17 , HIGH ( 479 )
                 	__GETWRN 16,17,479
                 ; 0000 01DB     Value[0] = a;
                 _0x11C:
000cff 89ec      	LDD  R30,Y+20
000d00 e0f0      	LDI  R31,0
000d01 87ec      	STD  Y+12,R30
000d02 87fd      	STD  Y+12+1,R31
                 ; 0000 01DC     Value[1] = b;
000d03 89eb      	LDD  R30,Y+19
000d04 e0f0      	LDI  R31,0
000d05 87ee      	STD  Y+14,R30
000d06 87ff      	STD  Y+14+1,R31
                 ; 0000 01DD     Value[2] = c;
000d07 89ea      	LDD  R30,Y+18
000d08 e0f0      	LDI  R31,0
000d09 8be8      	STD  Y+16,R30
000d0a 8bf9      	STD  Y+16+1,R31
                 ; 0000 01DE 
                 ; 0000 01DF     if(Graph_X >= Graph_X_Min)
000d0b 91a0 072c 	LDS  R26,_Graph_X+1
000d0d 23aa      	TST  R26
000d0e f412      	BRPL PC+3
000d0f 940c 0d54 	JMP _0x11D
                 ; 0000 01E0     {
                 ; 0000 01E1     // очищаем перед собой столбец пикселей
                 ; 0000 01E2     SSD1963_DrawFillRect(Graph_X, Lenght+2, Graph_Y_Min, Graph_Y_Max+1, BLACK);
000d11 940e 11d7 	CALL SUBOPT_0x3F
000d13 93fa      	ST   -Y,R31
000d14 93ea      	ST   -Y,R30
000d15 01f8      	MOVW R30,R16
000d16 9632      	ADIW R30,2
000d17 93fa      	ST   -Y,R31
000d18 93ea      	ST   -Y,R30
000d19 e3e4      	LDI  R30,LOW(52)
000d1a e0f0      	LDI  R31,HIGH(52)
000d1b 93fa      	ST   -Y,R31
000d1c 93ea      	ST   -Y,R30
000d1d eee9      	LDI  R30,LOW(233)
000d1e e0f0      	LDI  R31,HIGH(233)
000d1f 940e 1045 	CALL SUBOPT_0xE
000d21 dc35      	RCALL _SSD1963_DrawFillRect
                 ; 0000 01E3     //Линия нуля
                 ; 0000 01E4     SSD1963_DrawFastLine(Graph_X, Lenght, mid, mid, DGRAY);
000d22 940e 11dc 	CALL SUBOPT_0x40
000d24 933a      	ST   -Y,R19
000d25 932a      	ST   -Y,R18
000d26 933a      	ST   -Y,R19
000d27 932a      	ST   -Y,R18
000d28 940e 11de 	CALL SUBOPT_0x41
                 ; 0000 01E5     SSD1963_DrawFastLine(Graph_X, Lenght, mid+45, mid+45, DGRAY);
000d2a 01f9      	MOVW R30,R18
000d2b 96bd      	ADIW R30,45
000d2c 93fa      	ST   -Y,R31
000d2d 93ea      	ST   -Y,R30
000d2e 01f9      	MOVW R30,R18
000d2f 96bd      	ADIW R30,45
000d30 940e 11e5 	CALL SUBOPT_0x42
                 ; 0000 01E6     SSD1963_DrawFastLine(Graph_X, Lenght, mid-45, mid-45, DGRAY);
000d32 01f9      	MOVW R30,R18
000d33 97bd      	SBIW R30,45
000d34 93fa      	ST   -Y,R31
000d35 93ea      	ST   -Y,R30
000d36 01f9      	MOVW R30,R18
000d37 97bd      	SBIW R30,45
000d38 940e 11e5 	CALL SUBOPT_0x42
                 ; 0000 01E7     SSD1963_DrawFastLine(Graph_X, Lenght, mid+90, mid+90, DGRAY);
000d3a 01f9      	MOVW R30,R18
000d3b 5ae6      	SUBI R30,LOW(-90)
000d3c 4fff      	SBCI R31,HIGH(-90)
000d3d 93fa      	ST   -Y,R31
000d3e 93ea      	ST   -Y,R30
000d3f 01f9      	MOVW R30,R18
000d40 5ae6      	SUBI R30,LOW(-90)
000d41 4fff      	SBCI R31,HIGH(-90)
000d42 940e 11e5 	CALL SUBOPT_0x42
                 ; 0000 01E8     SSD1963_DrawFastLine(Graph_X, Lenght, mid-90, mid-90, DGRAY);
000d44 01f9      	MOVW R30,R18
000d45 55ea      	SUBI R30,LOW(90)
000d46 40f0      	SBCI R31,HIGH(90)
000d47 93fa      	ST   -Y,R31
000d48 93ea      	ST   -Y,R30
000d49 01f9      	MOVW R30,R18
000d4a 55ea      	SUBI R30,LOW(90)
000d4b 40f0      	SBCI R31,HIGH(90)
000d4c 93fa      	ST   -Y,R31
000d4d 93ea      	ST   -Y,R30
000d4e e0e8      	LDI  R30,LOW(8456)
000d4f e2f1      	LDI  R31,HIGH(8456)
000d50 93fa      	ST   -Y,R31
000d51 93ea      	ST   -Y,R30
000d52 940e 0851 	CALL _SSD1963_DrawFastLine
                 ; 0000 01E9     }
                 ; 0000 01EA 
                 ; 0000 01EB     for(i=0; i<3; i++)
                 _0x11D:
000d54 e050      	LDI  R21,LOW(0)
                 _0x11F:
000d55 3053      	CPI  R21,3
000d56 f010      	BRLO PC+3
000d57 940c 0e06 	JMP _0x120
                 ; 0000 01EC     {
                 ; 0000 01ED         Value[i] = 128 - Value[i];
000d59 940e 11e8 	CALL SUBOPT_0x43
000d5b 0fea      	ADD  R30,R26
000d5c 1ffb      	ADC  R31,R27
000d5d 01bf      	MOVW R22,R30
000d5e 940e 11e8 	CALL SUBOPT_0x43
000d60 940e 11ef 	CALL SUBOPT_0x44
000d62 e8a0      	LDI  R26,LOW(128)
000d63 e0b0      	LDI  R27,HIGH(128)
000d64 940e 13d8 	CALL __SWAPW12
000d66 1bea      	SUB  R30,R26
000d67 0bfb      	SBC  R31,R27
000d68 01db      	MOVW R26,R22
000d69 93ed      	ST   X+,R30
000d6a 93fc      	ST   X,R31
                 ; 0000 01EE         Value[i] *= Amplitude[ParameterState];
000d6b 940e 11e8 	CALL SUBOPT_0x43
000d6d 0fea      	ADD  R30,R26
000d6e 1ffb      	ADC  R31,R27
000d6f 01bf      	MOVW R22,R30
000d70 8000      	LD   R0,Z
000d71 8011      	LDD  R1,Z+1
000d72 940e 11f4 	CALL SUBOPT_0x45
000d74 01d0      	MOVW R26,R0
000d75 940e 1369 	CALL __MULW12
000d77 01db      	MOVW R26,R22
000d78 93ed      	ST   X+,R30
000d79 93fc      	ST   X,R31
                 ; 0000 01EF         Value[i] >>= 7;
000d7a 940e 11e8 	CALL SUBOPT_0x43
000d7c 940e 11fc 	CALL SUBOPT_0x46
000d7e 940e 1335 	CALL __ASRW3
000d80 940e 1333 	CALL __ASRW4
000d82 93fe      	ST   -X,R31
000d83 93ee      	ST   -X,R30
                 ; 0000 01F0         if(Value[i]&0x0100) Value[i] |= 0xFF00;
000d84 940e 11e8 	CALL SUBOPT_0x43
000d86 940e 11ef 	CALL SUBOPT_0x44
000d88 70f1      	ANDI R31,HIGH(0x100)
000d89 f039      	BREQ _0x121
000d8a 940e 11e8 	CALL SUBOPT_0x43
000d8c 940e 11fc 	CALL SUBOPT_0x46
000d8e 6fff      	ORI  R31,HIGH(0xFF00)
000d8f 93fe      	ST   -X,R31
000d90 93ee      	ST   -X,R30
                 ; 0000 01F1 
                 ; 0000 01F2         Value[i] += mid;
                 _0x121:
000d91 940e 11e8 	CALL SUBOPT_0x43
000d93 940e 11fc 	CALL SUBOPT_0x46
000d95 0fe2      	ADD  R30,R18
000d96 1ff3      	ADC  R31,R19
000d97 93fe      	ST   -X,R31
000d98 93ee      	ST   -X,R30
                 ; 0000 01F3         if(ParameterState==2)
000d99 91a0 0729 	LDS  R26,_ParameterState
000d9b 30a2      	CPI  R26,LOW(0x2)
000d9c f4a9      	BRNE _0x122
                 ; 0000 01F4         {
                 ; 0000 01F5             Value[i] += (i==1)?(45):(-45);
000d9d 940e 11e8 	CALL SUBOPT_0x43
000d9f 0fea      	ADD  R30,R26
000da0 1ffb      	ADC  R31,R27
000da1 01bf      	MOVW R22,R30
000da2 8000      	LD   R0,Z
000da3 8011      	LDD  R1,Z+1
000da4 2fa5      	MOV  R26,R21
000da5 e0b0      	LDI  R27,0
000da6 9711      	SBIW R26,1
000da7 f419      	BRNE _0x123
000da8 e2ed      	LDI  R30,LOW(45)
000da9 e0f0      	LDI  R31,HIGH(45)
000daa c002      	RJMP _0x124
                 _0x123:
000dab ede3      	LDI  R30,LOW(65491)
000dac efff      	LDI  R31,HIGH(65491)
                 _0x124:
000dad 0de0      	ADD  R30,R0
000dae 1df1      	ADC  R31,R1
000daf 01db      	MOVW R26,R22
000db0 93ed      	ST   X+,R30
000db1 93fc      	ST   X,R31
                 ; 0000 01F6         }
                 ; 0000 01F7         if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
                 _0x122:
000db2 940e 11e8 	CALL SUBOPT_0x43
000db4 940e 11ef 	CALL SUBOPT_0x44
000db6 3ee9      	CPI  R30,LOW(0xE9)
000db7 e0a0      	LDI  R26,HIGH(0xE9)
000db8 07fa      	CPC  R31,R26
000db9 f044      	BRLT _0x126
000dba 940e 11e8 	CALL SUBOPT_0x43
000dbc 0fae      	ADD  R26,R30
000dbd 1fbf      	ADC  R27,R31
000dbe eee8      	LDI  R30,LOW(232)
000dbf e0f0      	LDI  R31,HIGH(232)
000dc0 93ed      	ST   X+,R30
000dc1 93fc      	ST   X,R31
                 ; 0000 01F8         if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x126:
000dc2 940e 11e8 	CALL SUBOPT_0x43
000dc4 940e 11ef 	CALL SUBOPT_0x44
000dc6 97f4      	SBIW R30,52
000dc7 f444      	BRGE _0x127
000dc8 940e 11e8 	CALL SUBOPT_0x43
000dca 0fae      	ADD  R26,R30
000dcb 1fbf      	ADC  R27,R31
000dcc e3e4      	LDI  R30,LOW(52)
000dcd e0f0      	LDI  R31,HIGH(52)
000dce 93ed      	ST   X+,R30
000dcf 93fc      	ST   X,R31
                 ; 0000 01F9 
                 ; 0000 01FA         if(Graph_X >= Graph_X_Min)
                 _0x127:
000dd0 91a0 072c 	LDS  R26,_Graph_X+1
000dd2 23aa      	TST  R26
000dd3 f0e2      	BRMI _0x128
                 ; 0000 01FB         {   // пишем точку в столбце
                 ; 0000 01FC             SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
000dd4 940e 11dc 	CALL SUBOPT_0x40
000dd6 940e 1201 	CALL SUBOPT_0x47
000dd8 940e 11ef 	CALL SUBOPT_0x44
000dda 940e 1208 	CALL SUBOPT_0x48
000ddc 01de      	MOVW R26,R28
000ddd 9652      	ADIW R26,18
000dde 0fee      	LSL  R30
000ddf 1fff      	ROL  R31
000de0 940e 11ef 	CALL SUBOPT_0x44
000de2 940e 1208 	CALL SUBOPT_0x48
000de4 01de      	MOVW R26,R28
000de5 961e      	ADIW R26,14
000de6 0fee      	LSL  R30
000de7 1fff      	ROL  R31
000de8 940e 11ef 	CALL SUBOPT_0x44
000dea 93fa      	ST   -Y,R31
000deb 93ea      	ST   -Y,R30
000dec e0e2      	LDI  R30,LOW(2)
000ded 93ea      	ST   -Y,R30
000dee 940e 086c 	CALL _SSD1963_DrawLine
                 ; 0000 01FD         }
                 ; 0000 01FE         // определяем предыдущую точку диограммы
                 ; 0000 01FF         ValueLast[i] = Value[i];
                 _0x128:
000df0 940e 1201 	CALL SUBOPT_0x47
000df2 0fea      	ADD  R30,R26
000df3 1ffb      	ADC  R31,R27
000df4 010f      	MOVW R0,R30
000df5 940e 11e8 	CALL SUBOPT_0x43
000df7 940e 11ef 	CALL SUBOPT_0x44
000df9 01d0      	MOVW R26,R0
000dfa 93ed      	ST   X+,R30
000dfb 93fc      	ST   X,R31
                 ; 0000 0200 
                 ; 0000 0201         if(ParameterState==2 && i==1) break;
000dfc 91a0 0729 	LDS  R26,_ParameterState
000dfe 30a2      	CPI  R26,LOW(0x2)
000dff f411      	BRNE _0x12A
000e00 3051      	CPI  R21,1
000e01 f009      	BREQ _0x12B
                 _0x12A:
000e02 c001      	RJMP _0x129
                 _0x12B:
000e03 c002      	RJMP _0x120
                 ; 0000 0202     }
                 _0x129:
000e04 5f5f      	SUBI R21,-1
000e05 cf4f      	RJMP _0x11F
                 _0x120:
                 ; 0000 0203 
                 ; 0000 0204     Graph_X += Graph_X_Step; // увеличеваем Х диограммы
000e06 940e 11d7 	CALL SUBOPT_0x3F
000e08 9638      	ADIW R30,8
000e09 93e0 072b 	STS  _Graph_X,R30
000e0b 93f0 072c 	STS  _Graph_X+1,R31
                 ; 0000 0205 }
                 _0x2080002:
000e0d 940e 13eb 	CALL __LOADLOCR6
000e0f 9665      	ADIW R28,21
000e10 9508      	RET
                 ;
                 ;inline void main_loop()  // основной рабочий режим
                 ; 0000 0208 {
                 _main_loop:
                 ; 0000 0209     char fHz;
                 ; 0000 020A 
                 ; 0000 020B             if(ValueState == 0 && rx_counter0 > 8)
000e11 931a      	ST   -Y,R17
                 ;	fHz -> R17
000e12 91a0 072a 	LDS  R26,_ValueState
000e14 30a0      	CPI  R26,LOW(0x0)
000e15 f421      	BRNE _0x12D
000e16 91a0 06d6 	LDS  R26,_rx_counter0
000e18 30a9      	CPI  R26,LOW(0x9)
000e19 f408      	BRSH _0x12E
                 _0x12D:
000e1a c03e      	RJMP _0x12C
                 _0x12E:
                 ; 0000 020C             {
                 ; 0000 020D                   ValueState = 1;
000e1b e0e1      	LDI  R30,LOW(1)
000e1c 93e0 072a 	STS  _ValueState,R30
                 ; 0000 020E 
                 ; 0000 020F                   fHz = getchar0();
000e1e dc53      	RCALL _getchar0
000e1f 2f1e      	MOV  R17,R30
                 ; 0000 0210                   switch(ParameterState)
000e20 91e0 0729 	LDS  R30,_ParameterState
000e22 e0f0      	LDI  R31,0
                 ; 0000 0211                   {
                 ; 0000 0212                               case 2:
000e23 30e2      	CPI  R30,LOW(0x2)
000e24 e0a0      	LDI  R26,HIGH(0x2)
000e25 07fa      	CPC  R31,R26
000e26 f441      	BRNE _0x132
                 ; 0000 0213                               {
                 ; 0000 0214                               getchar0();
000e27 940e 120d 	CALL SUBOPT_0x49
                 ; 0000 0215                               getchar0();
                 ; 0000 0216                               getchar0();
                 ; 0000 0217                               getchar0();
000e29 940e 120d 	CALL SUBOPT_0x49
                 ; 0000 0218                               getchar0();
                 ; 0000 0219                               getchar0();
                 ; 0000 021A                               }
                 ; 0000 021B                               PutParameterValue(getchar0(), getchar0(), 0, fHz);
000e2b 940e 1213 	CALL SUBOPT_0x4A
000e2d e0e0      	LDI  R30,LOW(0)
000e2e c00c      	RJMP _0x171
                 ; 0000 021C                               break;
                 ; 0000 021D                               case 1:
                 _0x132:
000e2f 30e1      	CPI  R30,LOW(0x1)
000e30 e0a0      	LDI  R26,HIGH(0x1)
000e31 07fa      	CPC  R31,R26
000e32 f419      	BRNE _0x133
                 ; 0000 021E                               {
                 ; 0000 021F                               getchar0();
000e33 940e 120d 	CALL SUBOPT_0x49
                 ; 0000 0220                               getchar0();
                 ; 0000 0221                               getchar0();
                 ; 0000 0222                               }
                 ; 0000 0223                               case 0:
000e35 c002      	RJMP _0x134
                 _0x133:
000e36 9730      	SBIW R30,0
000e37 f431      	BRNE _0x131
                 _0x134:
                 ; 0000 0224                               PutParameterValue(getchar0(), getchar0(), getchar0(), fHz);
000e38 940e 1213 	CALL SUBOPT_0x4A
000e3a dc37      	RCALL _getchar0
                 _0x171:
000e3b 93ea      	ST   -Y,R30
000e3c 931a      	ST   -Y,R17
000e3d de38      	RCALL _PutParameterValue
                 ; 0000 0225                               break;
                 ; 0000 0226                   }
                 _0x131:
                 ; 0000 0227 
                 ; 0000 0228                   StartPaint();
000e3e de95      	RCALL _StartPaint
                 ; 0000 0229                   while(rx_counter0) getchar0();
                 _0x136:
000e3f 91e0 06d6 	LDS  R30,_rx_counter0
000e41 30e0      	CPI  R30,0
000e42 f011      	BREQ _0x138
000e43 dc2e      	RCALL _getchar0
000e44 cffa      	RJMP _0x136
                 _0x138:
                 ; 0000 022A switch(ParameterState)
000e45 91e0 0729 	LDS  R30,_ParameterState
000e47 940e 11c0 	CALL SUBOPT_0x39
                 ; 0000 022B                   {
                 ; 0000 022C                       case 0: putchar0('U'); break;
000e49 f411      	BRNE _0x13C
000e4a e5e5      	LDI  R30,LOW(85)
000e4b c00b      	RJMP _0x172
                 ; 0000 022D                       case 1: putchar0('I'); break;
                 _0x13C:
000e4c 30e1      	CPI  R30,LOW(0x1)
000e4d e0a0      	LDI  R26,HIGH(0x1)
000e4e 07fa      	CPC  R31,R26
000e4f f411      	BRNE _0x13D
000e50 e4e9      	LDI  R30,LOW(73)
000e51 c005      	RJMP _0x172
                 ; 0000 022E                       case 2: putchar0('Z'); break;
                 _0x13D:
000e52 30e2      	CPI  R30,LOW(0x2)
000e53 e0a0      	LDI  R26,HIGH(0x2)
000e54 07fa      	CPC  R31,R26
000e55 f419      	BRNE _0x13B
000e56 e5ea      	LDI  R30,LOW(90)
                 _0x172:
000e57 93ea      	ST   -Y,R30
000e58 dc4b      	RCALL _putchar0
                 ; 0000 022F                   }
                 _0x13B:
                 ; 0000 0230             }
                 ; 0000 0231 
                 ; 0000 0232             if(ValueState == 1)
                 _0x12C:
000e59 91a0 072a 	LDS  R26,_ValueState
000e5b 30a1      	CPI  R26,LOW(0x1)
000e5c f4d9      	BRNE _0x13F
                 ; 0000 0233             {
                 ; 0000 0234                 if(ParameterState<2 && rx_counter0>2)
000e5d 91a0 0729 	LDS  R26,_ParameterState
000e5f 30a2      	CPI  R26,LOW(0x2)
000e60 f420      	BRSH _0x141
000e61 91a0 06d6 	LDS  R26,_rx_counter0
000e63 30a3      	CPI  R26,LOW(0x3)
000e64 f408      	BRSH _0x142
                 _0x141:
000e65 c004      	RJMP _0x140
                 _0x142:
                 ; 0000 0235                 {
                 ; 0000 0236                     Paint_3phase(getchar0(),getchar0(),getchar0());
000e66 940e 1213 	CALL SUBOPT_0x4A
000e68 dc09      	RCALL _getchar0
000e69 c00c      	RJMP _0x173
                 ; 0000 0237                 }
                 ; 0000 0238                 else if(ParameterState==2 && rx_counter0>1)
                 _0x140:
000e6a 91a0 0729 	LDS  R26,_ParameterState
000e6c 30a2      	CPI  R26,LOW(0x2)
000e6d f421      	BRNE _0x145
000e6e 91a0 06d6 	LDS  R26,_rx_counter0
000e70 30a2      	CPI  R26,LOW(0x2)
000e71 f408      	BRSH _0x146
                 _0x145:
000e72 c005      	RJMP _0x144
                 _0x146:
                 ; 0000 0239                 {
                 ; 0000 023A                     Paint_3phase(getchar0(),getchar0(),0);
000e73 940e 1213 	CALL SUBOPT_0x4A
000e75 e0e0      	LDI  R30,LOW(0)
                 _0x173:
000e76 93ea      	ST   -Y,R30
000e77 de63      	RCALL _Paint_3phase
                 ; 0000 023B                 }
                 ; 0000 023C             }
                 _0x144:
                 ; 0000 023D 
                 ; 0000 023E             if(WaitADC_mSec > 1500)
                 _0x13F:
000e78 91a0 0739 	LDS  R26,_WaitADC_mSec
000e7a 91b0 073a 	LDS  R27,_WaitADC_mSec+1
000e7c 3dad      	CPI  R26,LOW(0x5DD)
000e7d e0e5      	LDI  R30,HIGH(0x5DD)
000e7e 07be      	CPC  R27,R30
000e7f f080      	BRLO _0x147
                 ; 0000 023F             {
                 ; 0000 0240                 WaitADC_mSec = 0;
000e80 e0e0      	LDI  R30,LOW(0)
000e81 93e0 0739 	STS  _WaitADC_mSec,R30
000e83 93e0 073a 	STS  _WaitADC_mSec+1,R30
                 ; 0000 0241                 ValueState = 0;
000e85 93e0 072a 	STS  _ValueState,R30
                 ; 0000 0242                 while(rx_counter0) getchar0();
                 _0x148:
000e87 91e0 06d6 	LDS  R30,_rx_counter0
000e89 30e0      	CPI  R30,0
000e8a f011      	BREQ _0x14A
000e8b dbe6      	RCALL _getchar0
000e8c cffa      	RJMP _0x148
                 _0x14A:
                 ; 0000 0243 putchar0('S');
000e8d e5e3      	LDI  R30,LOW(83)
000e8e 93ea      	ST   -Y,R30
000e8f dc14      	RCALL _putchar0
                 ; 0000 0244             }
                 ; 0000 0245 }
                 _0x147:
                 _0x2080001:
000e90 9119      	LD   R17,Y+
000e91 9508      	RET
                 ;
                 ;// Timer 0 overflow interrupt 1 ms
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0249 {
                 _timer0_ovf_isr:
000e92 93aa      	ST   -Y,R26
000e93 93ba      	ST   -Y,R27
000e94 93ea      	ST   -Y,R30
000e95 93fa      	ST   -Y,R31
000e96 b7ef      	IN   R30,SREG
000e97 93ea      	ST   -Y,R30
                 ; 0000 024A // Reinitialize Timer 0 value
                 ; 0000 024B TCNT0=0x06;
000e98 e0e6      	LDI  R30,LOW(6)
000e99 bfe2      	OUT  0x32,R30
                 ; 0000 024C // Place your code here
                 ; 0000 024D WaitADC_mSec++;
000e9a e3a9      	LDI  R26,LOW(_WaitADC_mSec)
000e9b e0b7      	LDI  R27,HIGH(_WaitADC_mSec)
000e9c 91ed      	LD   R30,X+
000e9d 91fd      	LD   R31,X+
000e9e 9631      	ADIW R30,1
000e9f 93fe      	ST   -X,R31
000ea0 93ee      	ST   -X,R30
                 ; 0000 024E }
000ea1 91e9      	LD   R30,Y+
000ea2 bfef      	OUT  SREG,R30
000ea3 91f9      	LD   R31,Y+
000ea4 91e9      	LD   R30,Y+
000ea5 91b9      	LD   R27,Y+
000ea6 91a9      	LD   R26,Y+
000ea7 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0253 {
                 _main:
                 ; 0000 0254 // Declare your local variables here
                 ; 0000 0255 {
                 ; 0000 0256 // Input/Output Ports initialization
                 ; 0000 0257 // Port A initialization
                 ; 0000 0258 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0259 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 025A PORTA=0x00;
000ea8 e0e0      	LDI  R30,LOW(0)
000ea9 bbeb      	OUT  0x1B,R30
                 ; 0000 025B DDRA=0x00;
000eaa bbea      	OUT  0x1A,R30
                 ; 0000 025C 
                 ; 0000 025D // Port B initialization
                 ; 0000 025E // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 025F // State7=1 State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
                 ; 0000 0260 PORTB=0x80;
000eab e8e0      	LDI  R30,LOW(128)
000eac bbe8      	OUT  0x18,R30
                 ; 0000 0261 DDRB=0x87;
000ead e8e7      	LDI  R30,LOW(135)
000eae bbe7      	OUT  0x17,R30
                 ; 0000 0262 
                 ; 0000 0263 // Port C initialization
                 ; 0000 0264 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0265 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0266 PORTC=0x00;
000eaf e0e0      	LDI  R30,LOW(0)
000eb0 bbe5      	OUT  0x15,R30
                 ; 0000 0267 DDRC=0x00;
000eb1 bbe4      	OUT  0x14,R30
                 ; 0000 0268 
                 ; 0000 0269 // Port D initialization
                 ; 0000 026A // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 026B // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 026C PORTD=0x00;
000eb2 bbe2      	OUT  0x12,R30
                 ; 0000 026D DDRD=0x10;
000eb3 e1e0      	LDI  R30,LOW(16)
000eb4 bbe1      	OUT  0x11,R30
                 ; 0000 026E 
                 ; 0000 026F // Port E initialization
                 ; 0000 0270 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0271 // State7=T State6=T State5=T State4=1 State3=T State2=T State1=T State0=T
                 ; 0000 0272 PORTE=0x10;
000eb5 b9e3      	OUT  0x3,R30
                 ; 0000 0273 DDRE=0x10;  //PE4 - CD off
000eb6 b9e2      	OUT  0x2,R30
                 ; 0000 0274 
                 ; 0000 0275 // Port F initialization
                 ; 0000 0276 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0277 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0278 PORTF=0x00;
000eb7 e0e0      	LDI  R30,LOW(0)
000eb8 93e0 0062 	STS  98,R30
                 ; 0000 0279 DDRF=0x00;
000eba 93e0 0061 	STS  97,R30
                 ; 0000 027A 
                 ; 0000 027B // Port G initialization
                 ; 0000 027C // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 027D // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 027E PORTG=0x00;
000ebc 93e0 0065 	STS  101,R30
                 ; 0000 027F DDRG=0x00;
000ebe 93e0 0064 	STS  100,R30
                 ; 0000 0280 
                 ; 0000 0281 // Timer/Counter 0 initialization
                 ; 0000 0282 // Clock source: System Clock
                 ; 0000 0283 // Clock value: 250,000 kHz
                 ; 0000 0284 // Mode: Normal top=0xFF
                 ; 0000 0285 // OC0 output: Disconnected
                 ; 0000 0286 ASSR=0x00;
000ec0 bfe0      	OUT  0x30,R30
                 ; 0000 0287 TCCR0=0x04;
000ec1 e0e4      	LDI  R30,LOW(4)
000ec2 bfe3      	OUT  0x33,R30
                 ; 0000 0288 TCNT0=0x06;
000ec3 e0e6      	LDI  R30,LOW(6)
000ec4 bfe2      	OUT  0x32,R30
                 ; 0000 0289 OCR0=0x00;
000ec5 e0e0      	LDI  R30,LOW(0)
000ec6 bfe1      	OUT  0x31,R30
                 ; 0000 028A 
                 ; 0000 028B // Timer/Counter 1 initialization
                 ; 0000 028C // Clock source: System Clock
                 ; 0000 028D // Clock value: Timer1 Stopped
                 ; 0000 028E // Mode: Normal top=0xFFFF
                 ; 0000 028F // OC1A output: Discon.
                 ; 0000 0290 // OC1B output: Discon.
                 ; 0000 0291 // OC1C output: Discon.
                 ; 0000 0292 // Noise Canceler: Off
                 ; 0000 0293 // Input Capture on Falling Edge
                 ; 0000 0294 // Timer1 Overflow Interrupt: Off
                 ; 0000 0295 // Input Capture Interrupt: Off
                 ; 0000 0296 // Compare A Match Interrupt: Off
                 ; 0000 0297 // Compare B Match Interrupt: Off
                 ; 0000 0298 // Compare C Match Interrupt: Off
                 ; 0000 0299 TCCR1A=0x00;
000ec7 bdef      	OUT  0x2F,R30
                 ; 0000 029A TCCR1B=0x00;
000ec8 bdee      	OUT  0x2E,R30
                 ; 0000 029B TCNT1H=0x00;
000ec9 bded      	OUT  0x2D,R30
                 ; 0000 029C TCNT1L=0x00;
000eca bdec      	OUT  0x2C,R30
                 ; 0000 029D ICR1H=0x00;
000ecb bde7      	OUT  0x27,R30
                 ; 0000 029E ICR1L=0x00;
000ecc bde6      	OUT  0x26,R30
                 ; 0000 029F OCR1AH=0x00;
000ecd bdeb      	OUT  0x2B,R30
                 ; 0000 02A0 OCR1AL=0x00;
000ece bdea      	OUT  0x2A,R30
                 ; 0000 02A1 OCR1BH=0x00;
000ecf bde9      	OUT  0x29,R30
                 ; 0000 02A2 OCR1BL=0x00;
000ed0 bde8      	OUT  0x28,R30
                 ; 0000 02A3 OCR1CH=0x00;
000ed1 93e0 0079 	STS  121,R30
                 ; 0000 02A4 OCR1CL=0x00;
000ed3 93e0 0078 	STS  120,R30
                 ; 0000 02A5 
                 ; 0000 02A6 // Timer/Counter 2 initialization
                 ; 0000 02A7 // Clock source: System Clock
                 ; 0000 02A8 // Clock value: Timer2 Stopped
                 ; 0000 02A9 // Mode: Normal top=0xFF
                 ; 0000 02AA // OC2 output: Disconnected
                 ; 0000 02AB TCCR2=0x00;
000ed5 bde5      	OUT  0x25,R30
                 ; 0000 02AC TCNT2=0x00;
000ed6 bde4      	OUT  0x24,R30
                 ; 0000 02AD OCR2=0x00;
000ed7 bde3      	OUT  0x23,R30
                 ; 0000 02AE 
                 ; 0000 02AF // Timer/Counter 3 initialization
                 ; 0000 02B0 // Clock source: System Clock
                 ; 0000 02B1 // Clock value: Timer3 Stopped
                 ; 0000 02B2 // Mode: Normal top=0xFFFF
                 ; 0000 02B3 // OC3A output: Discon.
                 ; 0000 02B4 // OC3B output: Discon.
                 ; 0000 02B5 // OC3C output: Discon.
                 ; 0000 02B6 // Noise Canceler: Off
                 ; 0000 02B7 // Input Capture on Falling Edge
                 ; 0000 02B8 // Timer3 Overflow Interrupt: Off
                 ; 0000 02B9 // Input Capture Interrupt: Off
                 ; 0000 02BA // Compare A Match Interrupt: Off
                 ; 0000 02BB // Compare B Match Interrupt: Off
                 ; 0000 02BC // Compare C Match Interrupt: Off
                 ; 0000 02BD TCCR3A=0x00;
000ed8 93e0 008b 	STS  139,R30
                 ; 0000 02BE TCCR3B=0x00;
000eda 93e0 008a 	STS  138,R30
                 ; 0000 02BF TCNT3H=0x00;
000edc 93e0 0089 	STS  137,R30
                 ; 0000 02C0 TCNT3L=0x00;
000ede 93e0 0088 	STS  136,R30
                 ; 0000 02C1 ICR3H=0x00;
000ee0 93e0 0081 	STS  129,R30
                 ; 0000 02C2 ICR3L=0x00;
000ee2 93e0 0080 	STS  128,R30
                 ; 0000 02C3 OCR3AH=0x00;
000ee4 93e0 0087 	STS  135,R30
                 ; 0000 02C4 OCR3AL=0x00;
000ee6 93e0 0086 	STS  134,R30
                 ; 0000 02C5 OCR3BH=0x00;
000ee8 93e0 0085 	STS  133,R30
                 ; 0000 02C6 OCR3BL=0x00;
000eea 93e0 0084 	STS  132,R30
                 ; 0000 02C7 OCR3CH=0x00;
000eec 93e0 0083 	STS  131,R30
                 ; 0000 02C8 OCR3CL=0x00;
000eee 93e0 0082 	STS  130,R30
                 ; 0000 02C9 
                 ; 0000 02CA // External Interrupt(s) initialization
                 ; 0000 02CB // INT0: Off
                 ; 0000 02CC // INT1: Off
                 ; 0000 02CD // INT2: Off
                 ; 0000 02CE // INT3: Off
                 ; 0000 02CF // INT4: Off
                 ; 0000 02D0 // INT5: Off
                 ; 0000 02D1 // INT6: Off
                 ; 0000 02D2 // INT7: Off
                 ; 0000 02D3 EICRA=0x00;
000ef0 93e0 006a 	STS  106,R30
                 ; 0000 02D4 EICRB=0x00;
000ef2 bfea      	OUT  0x3A,R30
                 ; 0000 02D5 EIMSK=0x00;
000ef3 bfe9      	OUT  0x39,R30
                 ; 0000 02D6 
                 ; 0000 02D7 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 02D8 TIMSK=0x01;
000ef4 e0e1      	LDI  R30,LOW(1)
000ef5 bfe7      	OUT  0x37,R30
                 ; 0000 02D9 
                 ; 0000 02DA ETIMSK=0x00;
000ef6 e0e0      	LDI  R30,LOW(0)
000ef7 93e0 007d 	STS  125,R30
                 ; 0000 02DB 
                 ; 0000 02DC // USART0 initialization
                 ; 0000 02DD // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02DE // USART0 Receiver: On
                 ; 0000 02DF // USART0 Transmitter: On
                 ; 0000 02E0 // USART0 Mode: Asynchronous
                 ; 0000 02E1 // USART0 Baud Rate: 115200
                 ; 0000 02E2 UCSR0A=0x00;
000ef9 b9eb      	OUT  0xB,R30
                 ; 0000 02E3 UCSR0B=0xD8;
000efa ede8      	LDI  R30,LOW(216)
000efb b9ea      	OUT  0xA,R30
                 ; 0000 02E4 UCSR0C=0x06;
000efc e0e6      	LDI  R30,LOW(6)
000efd 93e0 0095 	STS  149,R30
                 ; 0000 02E5 UBRR0H=0x00;
000eff e0e0      	LDI  R30,LOW(0)
000f00 93e0 0090 	STS  144,R30
                 ; 0000 02E6 UBRR0L=0x08;
000f02 e0e8      	LDI  R30,LOW(8)
000f03 b9e9      	OUT  0x9,R30
                 ; 0000 02E7 
                 ; 0000 02E8 // USART1 initialization
                 ; 0000 02E9 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02EA // USART1 Receiver: On
                 ; 0000 02EB // USART1 Transmitter: On
                 ; 0000 02EC // USART1 Mode: Asynchronous
                 ; 0000 02ED // USART1 Baud Rate: 9600
                 ; 0000 02EE UCSR1A=0x00;
000f04 e0e0      	LDI  R30,LOW(0)
000f05 93e0 009b 	STS  155,R30
                 ; 0000 02EF UCSR1B=0xD8;
000f07 ede8      	LDI  R30,LOW(216)
000f08 93e0 009a 	STS  154,R30
                 ; 0000 02F0 UCSR1C=0x06;
000f0a e0e6      	LDI  R30,LOW(6)
000f0b 93e0 009d 	STS  157,R30
                 ; 0000 02F1 UBRR1H=0x00;
000f0d e0e0      	LDI  R30,LOW(0)
000f0e 93e0 0098 	STS  152,R30
                 ; 0000 02F2 UBRR1L=0x67;
000f10 e6e7      	LDI  R30,LOW(103)
000f11 93e0 0099 	STS  153,R30
                 ; 0000 02F3 
                 ; 0000 02F4 // Analog Comparator initialization
                 ; 0000 02F5 // Analog Comparator: Off
                 ; 0000 02F6 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 02F7 ACSR=0x80;
000f13 e8e0      	LDI  R30,LOW(128)
000f14 b9e8      	OUT  0x8,R30
                 ; 0000 02F8 SFIOR=0x00;
000f15 e0e0      	LDI  R30,LOW(0)
000f16 bde0      	OUT  0x20,R30
                 ; 0000 02F9 
                 ; 0000 02FA // ADC initialization
                 ; 0000 02FB // ADC disabled
                 ; 0000 02FC ADCSRA=0x00;
000f17 b9e6      	OUT  0x6,R30
                 ; 0000 02FD 
                 ; 0000 02FE // SPI initialization
                 ; 0000 02FF // SPI Type: Master
                 ; 0000 0300 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 0301 // SPI Clock Phase: Cycle Start
                 ; 0000 0302 // SPI Clock Polarity: Low
                 ; 0000 0303 // SPI Data Order: MSB First
                 ; 0000 0304 SPCR=0x52;
000f18 e5e2      	LDI  R30,LOW(82)
000f19 b9ed      	OUT  0xD,R30
                 ; 0000 0305 SPSR=0x00;
000f1a e0e0      	LDI  R30,LOW(0)
000f1b b9ee      	OUT  0xE,R30
                 ; 0000 0306 
                 ; 0000 0307 // TWI initialization
                 ; 0000 0308 // TWI disabled
                 ; 0000 0309 TWCR=0x00;
000f1c 93e0 0074 	STS  116,R30
                 ; 0000 030A }
                 ; 0000 030B {
                 ; 0000 030C // Global enable interrupts
                 ; 0000 030D #asm("sei")
000f1e 9478      	sei
                 ; 0000 030E 
                 ; 0000 030F SSD1963_Init();
000f1f 940e 051c 	CALL _SSD1963_Init
                 ; 0000 0310 TSC2046_Init();
000f21 940e 0a20 	CALL _TSC2046_Init
                 ; 0000 0311 SSD1963_ClearScreen(BLACK);
000f23 940e 1040 	CALL SUBOPT_0xD
000f25 940e 05be 	CALL _SSD1963_ClearScreen
                 ; 0000 0312 
                 ; 0000 0313   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLUE, BLACK);
                +
000f27 e9ee     +LDI R30 , LOW ( _0x14B + ( 0 ) )
000f28 e0f5     +LDI R31 , HIGH ( _0x14B + ( 0 ) )
                 	__POINTW1MN _0x14B,0
000f29 940e 121a 	CALL SUBOPT_0x4B
000f2b e7e0      	LDI  R30,LOW(112)
000f2c e0f0      	LDI  R31,HIGH(112)
000f2d 93fa      	ST   -Y,R31
000f2e 93ea      	ST   -Y,R30
000f2f efe8      	LDI  R30,LOW(248)
000f30 e0f0      	LDI  R31,HIGH(248)
000f31 940e 1045 	CALL SUBOPT_0xE
000f33 940e 07c7 	CALL _SSD1963_PutString16
                 ; 0000 0314   BACKLIGHT = 0; //On
000f35 98c7      	CBI  0x18,7
                 ; 0000 0315   delay_ms(200);
000f36 940e 100c 	CALL SUBOPT_0x4
                 ; 0000 0316   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), RED, BLACK);
                +
000f38 eae5     +LDI R30 , LOW ( _0x14B + ( 7 ) )
000f39 e0f5     +LDI R31 , HIGH ( _0x14B + ( 7 ) )
                 	__POINTW1MN _0x14B,7
000f3a 940e 121a 	CALL SUBOPT_0x4B
000f3c e8e0      	LDI  R30,LOW(128)
000f3d e0f0      	LDI  R31,HIGH(128)
000f3e 93fa      	ST   -Y,R31
000f3f 93ea      	ST   -Y,R30
000f40 e0e0      	LDI  R30,LOW(7936)
000f41 e1ff      	LDI  R31,HIGH(7936)
000f42 940e 1045 	CALL SUBOPT_0xE
000f44 940e 1221 	CALL SUBOPT_0x4C
                 ; 0000 0317   delay_ms(200);
                 ; 0000 0318   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, GREEN, BLACK);
                +
000f46 eaec     +LDI R30 , LOW ( _0x14B + ( 14 ) )
000f47 e0f5     +LDI R31 , HIGH ( _0x14B + ( 14 ) )
                 	__POINTW1MN _0x14B,14
000f48 940e 121a 	CALL SUBOPT_0x4B
000f4a e9e0      	LDI  R30,LOW(144)
000f4b e0f0      	LDI  R31,HIGH(144)
000f4c 93fa      	ST   -Y,R31
000f4d 93ea      	ST   -Y,R30
000f4e e0e7      	LDI  R30,LOW(57351)
000f4f eef0      	LDI  R31,HIGH(57351)
000f50 940e 1045 	CALL SUBOPT_0xE
000f52 940e 1221 	CALL SUBOPT_0x4C
                 ; 0000 0319   delay_ms(200);
                 ; 0000 031A   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
000f54 ebe3     +LDI R30 , LOW ( _0x14B + ( 21 ) )
000f55 e0f5     +LDI R31 , HIGH ( _0x14B + ( 21 ) )
                 	__POINTW1MN _0x14B,21
000f56 940e 121a 	CALL SUBOPT_0x4B
000f58 e7e0      	LDI  R30,LOW(112)
000f59 e0f0      	LDI  R31,HIGH(112)
000f5a 940e 1045 	CALL SUBOPT_0xE
000f5c 940e 1040 	CALL SUBOPT_0xD
000f5e 940e 1221 	CALL SUBOPT_0x4C
                 ; 0000 031B   delay_ms(200);
                 ; 0000 031C   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
000f60 ebea     +LDI R30 , LOW ( _0x14B + ( 28 ) )
000f61 e0f5     +LDI R31 , HIGH ( _0x14B + ( 28 ) )
                 	__POINTW1MN _0x14B,28
000f62 940e 121a 	CALL SUBOPT_0x4B
000f64 e8e0      	LDI  R30,LOW(128)
000f65 e0f0      	LDI  R31,HIGH(128)
000f66 940e 1045 	CALL SUBOPT_0xE
000f68 940e 1040 	CALL SUBOPT_0xD
000f6a 940e 1221 	CALL SUBOPT_0x4C
                 ; 0000 031D   delay_ms(200);
                 ; 0000 031E   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
000f6c ece1     +LDI R30 , LOW ( _0x14B + ( 35 ) )
000f6d e0f5     +LDI R31 , HIGH ( _0x14B + ( 35 ) )
                 	__POINTW1MN _0x14B,35
000f6e 940e 121a 	CALL SUBOPT_0x4B
000f70 e9e0      	LDI  R30,LOW(144)
000f71 e0f0      	LDI  R31,HIGH(144)
000f72 940e 1045 	CALL SUBOPT_0xE
000f74 940e 1040 	CALL SUBOPT_0xD
000f76 940e 07c7 	CALL _SSD1963_PutString16
                 ; 0000 031F 
                 ; 0000 0320 Prepare_Screen();
000f78 dbf7      	RCALL _Prepare_Screen
                 ; 0000 0321 
                 ; 0000 0322 // Watchdog Timer initialization
                 ; 0000 0323 // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 0324 #pragma optsize-
                 ; 0000 0325 #asm("wdr")
000f79 95a8      	wdr
                 ; 0000 0326 //WDTCR=0x1F;
                 ; 0000 0327 //WDTCR=0x0F;
                 ; 0000 0328 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0329 #pragma optsize+
                 ; 0000 032A #endif
                 ; 0000 032B }
                 ; 0000 032C 
                 ; 0000 032D PutParameterText(ParameterState, BLUE);
000f7a 940e 1224 	CALL SUBOPT_0x4D
                 ; 0000 032E while (1)
                 _0x14E:
                 ; 0000 032F       {
                 ; 0000 0330       #asm("wdr")
000f7c 95a8      	wdr
                 ; 0000 0331       switch(State)
000f7d 91e0 0728 	LDS  R30,_State
000f7f 940e 11c0 	CALL SUBOPT_0x39
                 ; 0000 0332         {
                 ; 0000 0333           case 0: // основной рабочий режим
000f81 f011      	BREQ PC+3
000f82 940c 0fc3 	JMP _0x154
                 ; 0000 0334           {
                 ; 0000 0335               main_loop();
000f84 de8c      	RCALL _main_loop
                 ; 0000 0336 
                 ; 0000 0337               switch (GetButton())
000f85 dc53      	RCALL _GetButton
                 ; 0000 0338               {
                 ; 0000 0339               case 1 :
000f86 30e1      	CPI  R30,LOW(0x1)
000f87 f469      	BRNE _0x158
                 ; 0000 033A                   if(++ParameterState > 2) ParameterState = 0;
000f88 91a0 0729 	LDS  R26,_ParameterState
000f8a 5faf      	SUBI R26,-LOW(1)
000f8b 93a0 0729 	STS  _ParameterState,R26
000f8d 30a3      	CPI  R26,LOW(0x3)
000f8e f018      	BRLO _0x159
000f8f e0e0      	LDI  R30,LOW(0)
000f90 93e0 0729 	STS  _ParameterState,R30
                 ; 0000 033B                   PutParameterText(ParameterState, BLUE);
                 _0x159:
000f92 940e 1224 	CALL SUBOPT_0x4D
                 ; 0000 033C                   delay_ms(250);
000f94 c029      	RJMP _0x174
                 ; 0000 033D               break;
                 ; 0000 033E               case 2 :
                 _0x158:
000f95 30e2      	CPI  R30,LOW(0x2)
000f96 f471      	BRNE _0x15A
                 ; 0000 033F                   if(Amplitude[ParameterState] < 200)
000f97 940e 11f4 	CALL SUBOPT_0x45
000f99 3ce8      	CPI  R30,LOW(0xC8)
000f9a e0a0      	LDI  R26,HIGH(0xC8)
000f9b 07fa      	CPC  R31,R26
000f9c f43c      	BRGE _0x15B
                 ; 0000 0340                   {
                 ; 0000 0341                       Amplitude[ParameterState] += 10;
000f9d 940e 122d 	CALL SUBOPT_0x4E
000f9f 963a      	ADIW R30,10
000fa0 93fe      	ST   -X,R31
000fa1 93ee      	ST   -X,R30
                 ; 0000 0342                       delay_ms(100);
000fa2 940e 0ffa 	CALL SUBOPT_0x1
                 ; 0000 0343                   }
                 ; 0000 0344               break;
                 _0x15B:
000fa4 c01d      	RJMP _0x157
                 ; 0000 0345               case 3 :
                 _0x15A:
000fa5 30e3      	CPI  R30,LOW(0x3)
000fa6 f461      	BRNE _0x15C
                 ; 0000 0346                   if(Amplitude[ParameterState] > 20)
000fa7 940e 11f4 	CALL SUBOPT_0x45
000fa9 9775      	SBIW R30,21
000faa f03c      	BRLT _0x15D
                 ; 0000 0347                   {
                 ; 0000 0348                       Amplitude[ParameterState] -= 10;
000fab 940e 122d 	CALL SUBOPT_0x4E
000fad 973a      	SBIW R30,10
000fae 93fe      	ST   -X,R31
000faf 93ee      	ST   -X,R30
                 ; 0000 0349                       delay_ms(100);
000fb0 940e 0ffa 	CALL SUBOPT_0x1
                 ; 0000 034A                   }
                 ; 0000 034B               break;
                 _0x15D:
000fb2 c00f      	RJMP _0x157
                 ; 0000 034C               case 4 :
                 _0x15C:
000fb3 30e4      	CPI  R30,LOW(0x4)
000fb4 f469      	BRNE _0x157
                 ; 0000 034D                 State = 200;
000fb5 ece8      	LDI  R30,LOW(200)
000fb6 93e0 0728 	STS  _State,R30
                 ; 0000 034E                 Repaint_Button("СТАРТ", 4, BLACK, WHITE);
                +
000fb8 ece8     +LDI R30 , LOW ( _0x14B + ( 42 ) )
000fb9 e0f5     +LDI R31 , HIGH ( _0x14B + ( 42 ) )
                 	__POINTW1MN _0x14B,42
000fba 940e 11a0 	CALL SUBOPT_0x33
000fbc 940e 119a 	CALL SUBOPT_0x32
                 ; 0000 034F                 delay_ms(250);
                 _0x174:
000fbe efea      	LDI  R30,LOW(250)
000fbf e0f0      	LDI  R31,HIGH(250)
000fc0 940e 102d 	CALL SUBOPT_0x9
                 ; 0000 0350               break;
                 ; 0000 0351               }
                 _0x157:
                 ; 0000 0352           }
                 ; 0000 0353           break;
000fc2 c02b      	RJMP _0x153
                 ; 0000 0354           case 3: // настройки
                 _0x154:
000fc3 30e3      	CPI  R30,LOW(0x3)
000fc4 e0a0      	LDI  R26,HIGH(0x3)
000fc5 07fa      	CPC  R31,R26
000fc6 f139      	BREQ _0x153
                 ; 0000 0355           {
                 ; 0000 0356           }
                 ; 0000 0357           break;
                 ; 0000 0358           case 200 : // пауза
000fc7 3ce8      	CPI  R30,LOW(0xC8)
000fc8 e0a0      	LDI  R26,HIGH(0xC8)
000fc9 07fa      	CPC  R31,R26
000fca f4b9      	BRNE _0x160
                 ; 0000 0359             //Sleep_mSec = 0;
                 ; 0000 035A             switch (GetButton())
000fcb dc0d      	RCALL _GetButton
                 ; 0000 035B             {
                 ; 0000 035C               case 1 :
000fcc 30e1      	CPI  R30,LOW(0x1)
000fcd f099      	BREQ _0x163
                 ; 0000 035D               break;
                 ; 0000 035E               case 2 :
000fce 30e2      	CPI  R30,LOW(0x2)
000fcf f089      	BREQ _0x163
                 ; 0000 035F               break;
                 ; 0000 0360               case 3 :
000fd0 30e3      	CPI  R30,LOW(0x3)
000fd1 f079      	BREQ _0x163
                 ; 0000 0361               break;
                 ; 0000 0362               case 4 :
000fd2 30e4      	CPI  R30,LOW(0x4)
000fd3 f469      	BRNE _0x163
                 ; 0000 0363                 State = 0;
000fd4 e0e0      	LDI  R30,LOW(0)
000fd5 93e0 0728 	STS  _State,R30
                 ; 0000 0364                 Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000fd7 ecee     +LDI R30 , LOW ( _0x14B + ( 48 ) )
000fd8 e0f5     +LDI R31 , HIGH ( _0x14B + ( 48 ) )
                 	__POINTW1MN _0x14B,48
000fd9 940e 11a0 	CALL SUBOPT_0x33
000fdb 940e 119a 	CALL SUBOPT_0x32
                 ; 0000 0365                 delay_ms(250);
000fdd efea      	LDI  R30,LOW(250)
000fde e0f0      	LDI  R31,HIGH(250)
000fdf 940e 102d 	CALL SUBOPT_0x9
                 ; 0000 0366               break;
                 ; 0000 0367             }
                 _0x163:
                 ; 0000 0368 
                 ; 0000 0369           break;
000fe1 c00c      	RJMP _0x153
                 ; 0000 036A           case 250 : // сп¤щий режим
                 _0x160:
000fe2 3fea      	CPI  R30,LOW(0xFA)
000fe3 e0a0      	LDI  R26,HIGH(0xFA)
000fe4 07fa      	CPC  R31,R26
000fe5 f441      	BRNE _0x153
                 ; 0000 036B           {
                 ; 0000 036C             if (TSC2046_GetCoordinates() > 0)
000fe6 940e 09c7 	CALL _TSC2046_GetCoordinates
000fe8 30e1      	CPI  R30,LOW(0x1)
000fe9 f020      	BRLO _0x169
                 ; 0000 036D             {
                 ; 0000 036E               State = 0;
000fea e0e0      	LDI  R30,LOW(0)
000feb 93e0 0728 	STS  _State,R30
                 ; 0000 036F               BACKLIGHT = 0; //On
000fed 98c7      	CBI  0x18,7
                 ; 0000 0370             }
                 ; 0000 0371           }
                 _0x169:
                 ; 0000 0372           break;
                 ; 0000 0373         }
                 _0x153:
                 ; 0000 0374 
                 ; 0000 0375       }
000fee cf8d      	RJMP _0x14E
                 ; 0000 0376 }
                 _0x16C:
000fef cfff      	RJMP _0x16C
                 
                 	.DSEG
                 _0x14B:
00059e           	.BYTE 0x36
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
000ff0 81e8      	LD   R30,Y
000ff1 b9ef      	OUT  0xF,R30
                 _0x2000003:
000ff2 9b77      	SBIS 0xE,7
000ff3 cffe      	RJMP _0x2000003
000ff4 b1ef      	IN   R30,0xF
000ff5 9621      	ADIW R28,1
000ff6 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _tempX:
0005d4           	.BYTE 0x4
                 _tempY:
0005d8           	.BYTE 0x4
                 _rx_buffer0:
0005dc           	.BYTE 0xFA
                 _rx_counter0:
0006d6           	.BYTE 0x1
                 _tx_buffer0:
0006d7           	.BYTE 0x8
                 _tx_wr_index0:
0006df           	.BYTE 0x1
                 _tx_rd_index0:
0006e0           	.BYTE 0x1
                 _tx_counter0:
0006e1           	.BYTE 0x1
                 _rx_buffer1:
0006e2           	.BYTE 0x20
                 _rx_wr_index1:
000702           	.BYTE 0x1
                 _rx_rd_index1:
000703           	.BYTE 0x1
                 _rx_counter1:
000704           	.BYTE 0x1
                 _tx_buffer1:
000705           	.BYTE 0x20
                 _tx_wr_index1:
000725           	.BYTE 0x1
                 _tx_rd_index1:
000726           	.BYTE 0x1
                 _tx_counter1:
000727           	.BYTE 0x1
                 _State:
000728           	.BYTE 0x1
                 _ParameterState:
000729           	.BYTE 0x1
                 _ValueState:
00072a           	.BYTE 0x1
                 _Graph_X:
00072b           	.BYTE 0x2
                 _Amplitude:
00072d           	.BYTE 0x6
                 _ValueLast:
000733           	.BYTE 0x6
                 _WaitADC_mSec:
000739           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000ff7 81e8      	LD   R30,Y
000ff8 e0f0      	LDI  R31,0
000ff9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000ffa e6e4      	LDI  R30,LOW(100)
000ffb e0f0      	LDI  R31,HIGH(100)
000ffc 93fa      	ST   -Y,R31
000ffd 93ea      	ST   -Y,R30
000ffe 940c 1235 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
001000 81e8      	LD   R30,Y
001001 93ea      	ST   -Y,R30
001002 940e 04c1 	CALL _RotateByte
001004 bbeb      	OUT  0x1B,R30
001005 e0e0      	LDI  R30,LOW(0)
001006 bbe5      	OUT  0x15,R30
001007 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
001008 e0e1      	LDI  R30,LOW(1)
001009 93ea      	ST   -Y,R30
00100a 940c 04f0 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4:
00100c ece8      	LDI  R30,LOW(200)
00100d e0f0      	LDI  R31,HIGH(200)
00100e 93fa      	ST   -Y,R31
00100f 93ea      	ST   -Y,R30
001010 940c 1235 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
001012 93ea      	ST   -Y,R30
001013 940e 04fc 	CALL _SSD1963_WriteData_b8
001015 e0e4      	LDI  R30,LOW(4)
001016 93ea      	ST   -Y,R30
001017 940c 04fc 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
001019 93ea      	ST   -Y,R30
00101a 940e 04f0 	CALL _SSD1963_WriteCmd
00101c e0e1      	LDI  R30,LOW(1)
00101d 93ea      	ST   -Y,R30
00101e 940c 04fc 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
001020 e0e1      	LDI  R30,LOW(1)
001021 e0f0      	LDI  R31,HIGH(1)
001022 93fa      	ST   -Y,R31
001023 93ea      	ST   -Y,R30
001024 940c 1235 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
001026 93ea      	ST   -Y,R30
001027 940e 04f0 	CALL _SSD1963_WriteCmd
001029 e0e3      	LDI  R30,LOW(3)
00102a 93ea      	ST   -Y,R30
00102b 940c 04fc 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
00102d 93fa      	ST   -Y,R31
00102e 93ea      	ST   -Y,R30
00102f 940c 1235 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
001031 93ea      	ST   -Y,R30
001032 940e 04fc 	CALL _SSD1963_WriteData_b8
001034 e0e0      	LDI  R30,LOW(0)
001035 93ea      	ST   -Y,R30
001036 940c 04fc 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
001038 e0e1      	LDI  R30,LOW(1)
001039 93ea      	ST   -Y,R30
00103a 940c 04fc 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00103c 93ea      	ST   -Y,R30
00103d 940e 04fc 	CALL _SSD1963_WriteData_b8
00103f cff8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 38 TIMES, CODE SIZE REDUCTION:71 WORDS
                 SUBOPT_0xD:
001040 e0e0      	LDI  R30,LOW(0)
001041 e0f0      	LDI  R31,HIGH(0)
001042 93fa      	ST   -Y,R31
001043 93ea      	ST   -Y,R30
001044 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0xE:
001045 93fa      	ST   -Y,R31
001046 93ea      	ST   -Y,R30
001047 cff8      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xF:
001048 93fa      	ST   -Y,R31
001049 93ea      	ST   -Y,R30
00104a 940e 059e 	CALL _SSD1963_SetArea
00104c e2ec      	LDI  R30,LOW(44)
00104d 93ea      	ST   -Y,R30
00104e 940c 04f0 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
001050 93fa      	ST   -Y,R31
001051 93ea      	ST   -Y,R30
001052 940c 0509 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 29 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x11:
001054 85e8      	LDD  R30,Y+8
001055 85f9      	LDD  R31,Y+8+1
001056 93fa      	ST   -Y,R31
001057 93ea      	ST   -Y,R30
001058 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
001059 85ea      	LDD  R30,Y+10
00105a 85fb      	LDD  R31,Y+10+1
00105b 93fa      	ST   -Y,R31
00105c 93ea      	ST   -Y,R30
00105d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
00105e 85e8      	LDD  R30,Y+8
00105f e0f0      	LDI  R31,0
001060 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x14:
001061 81ef      	LDD  R30,Y+7
001062 85f8      	LDD  R31,Y+7+1
001063 93fa      	ST   -Y,R31
001064 93ea      	ST   -Y,R30
001065 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
001066 940e 1373 	CALL __DIVW21U
001068 5de0      	SUBI R30,-LOW(48)
001069 93ea      	ST   -Y,R30
00106a cfe9      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
00106b 940e 0623 	CALL _SSD1963_PutChar16
00106d 85a9      	LDD  R26,Y+9
00106e 85ba      	LDD  R27,Y+9+1
00106f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x17:
001070 940e 13b0 	CALL __MODW21U
001072 87e9      	STD  Y+9,R30
001073 87fa      	STD  Y+9+1,R31
001074 81ef      	LDD  R30,Y+7
001075 85f8      	LDD  R31,Y+7+1
001076 9670      	ADIW R30,16
001077 83ef      	STD  Y+7,R30
001078 87f8      	STD  Y+7+1,R31
001079 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x18:
00107a 9728      	SBIW R28,8
00107b 931a      	ST   -Y,R17
00107c 930a      	ST   -Y,R16
00107d 89ea      	LDD  R30,Y+18
00107e 89fb      	LDD  R31,Y+18+1
00107f 93fa      	ST   -Y,R31
001080 93ea      	ST   -Y,R30
001081 89ea      	LDD  R30,Y+18
001082 89fb      	LDD  R31,Y+18+1
001083 93fa      	ST   -Y,R31
001084 93ea      	ST   -Y,R30
001085 89ea      	LDD  R30,Y+18
001086 89fb      	LDD  R31,Y+18+1
001087 93fa      	ST   -Y,R31
001088 93ea      	ST   -Y,R30
001089 89ea      	LDD  R30,Y+18
00108a 89fb      	LDD  R31,Y+18+1
00108b cfbc      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
00108c 89aa      	LDD  R26,Y+18
00108d 89bb      	LDD  R27,Y+18+1
00108e 89e8      	LDD  R30,Y+16
00108f 89f9      	LDD  R31,Y+16+1
001090 1bea      	SUB  R30,R26
001091 0bfb      	SBC  R31,R27
001092 9631      	ADIW R30,1
001093 018f      	MOVW R16,R30
001094 2311      	TST  R17
001095 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
001096 01f8      	MOVW R30,R16
001097 efaf      	LDI  R26,LOW(65535)
001098 efbf      	LDI  R27,HIGH(65535)
001099 940e 1369 	CALL __MULW12
00109b 018f      	MOVW R16,R30
00109c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1B:
00109d 85ae      	LDD  R26,Y+14
00109e 85bf      	LDD  R27,Y+14+1
00109f 85ec      	LDD  R30,Y+12
0010a0 85fd      	LDD  R31,Y+12+1
0010a1 1bea      	SUB  R30,R26
0010a2 0bfb      	SBC  R31,R27
0010a3 9631      	ADIW R30,1
0010a4 2766      	CLR  R22
0010a5 2777      	CLR  R23
                +
0010a6 83ea     +STD Y + 2 , R30
0010a7 83fb     +STD Y + 2 + 1 , R31
0010a8 836c     +STD Y + 2 + 2 , R22
0010a9 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010aa 81ad      	LDD  R26,Y+5
0010ab 23aa      	TST  R26
0010ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
                +
0010ad 81ea     +LDD R30 , Y + 2
0010ae 81fb     +LDD R31 , Y + 2 + 1
0010af 816c     +LDD R22 , Y + 2 + 2
0010b0 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0010b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
                +
0010b2 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
0010b3 efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
0010b4 ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
0010b5 ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
0010b6 940e 136e 	CALL __MULD12
                +
0010b8 83ea     +STD Y + 2 , R30
0010b9 83fb     +STD Y + 2 + 1 , R31
0010ba 836c     +STD Y + 2 + 2 , R22
0010bb 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1E:
0010bd 01f8      	MOVW R30,R16
                +
0010be 81aa     +LDD R26 , Y + 2
0010bf 81bb     +LDD R27 , Y + 2 + 1
0010c0 818c     +LDD R24 , Y + 2 + 2
0010c1 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0010c2 940e 133c 	CALL __CWD1
0010c4 940e 136e 	CALL __MULD12
                +
0010c6 83ea     +STD Y + 2 , R30
0010c7 83fb     +STD Y + 2 + 1 , R31
0010c8 836c     +STD Y + 2 + 2 , R22
0010c9 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0010ca e0e0      	LDI  R30,LOW(0)
                +
0010cb 83ee     +STD Y + 6 , R30
0010cc 83ef     +STD Y + 6 + 1 , R30
0010cd 87e8     +STD Y + 6 + 2 , R30
0010ce 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
0010cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
0010d0 dfdc      	RCALL SUBOPT_0x1C
                +
0010d1 81ae     +LDD R26 , Y + 6
0010d2 81bf     +LDD R27 , Y + 6 + 1
0010d3 8588     +LDD R24 , Y + 6 + 2
0010d4 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0010d5 940e 13df 	CALL __CPD21
0010d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
                +
0010d8 81ee     +LDD R30 , Y + 6
0010d9 81ff     +LDD R31 , Y + 6 + 1
0010da 8568     +LDD R22 , Y + 6 + 2
0010db 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0010dc 5fef     +SUBI R30 , LOW ( - 1 )
0010dd 4fff     +SBCI R31 , HIGH ( - 1 )
0010de 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0010df 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0010e0 83ee     +STD Y + 6 , R30
0010e1 83ff     +STD Y + 6 + 1 , R31
0010e2 8768     +STD Y + 6 + 2 , R22
0010e3 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0010e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
0010e5 e0f0      	LDI  R31,0
0010e6 8dab      	LDD  R26,Y+27
0010e7 8dbc      	LDD  R27,Y+27+1
0010e8 0fea      	ADD  R30,R26
0010e9 1ffb      	ADC  R31,R27
0010ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0010eb 85e8      	LDD  R30,Y+8
0010ec 85f9      	LDD  R31,Y+8+1
0010ed 1bea      	SUB  R30,R26
0010ee 0bfb      	SBC  R31,R27
0010ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
0010f0 85ac      	LDD  R26,Y+12
0010f1 85bd      	LDD  R27,Y+12+1
0010f2 0fea      	ADD  R30,R26
0010f3 1ffb      	ADC  R31,R27
0010f4 93fa      	ST   -Y,R31
0010f5 93ea      	ST   -Y,R30
0010f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x24:
0010f7 93ea      	ST   -Y,R30
0010f8 940e 0ff0 	CALL _spi
                +
0010fa e980     +LDI R24 , LOW ( 400 )
0010fb e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0010fc 9701     +SBIW R24 , 1
0010fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0010fe e0e0      	LDI  R30,LOW(0)
0010ff 93ea      	ST   -Y,R30
001100 940e 0ff0 	CALL _spi
001102 2f0e      	MOV  R16,R30
001103 2711      	CLR  R17
001104 2f10      	MOV  R17,R16
001105 2700      	CLR  R16
001106 e0e0      	LDI  R30,LOW(0)
001107 93ea      	ST   -Y,R30
001108 940e 0ff0 	CALL _spi
00110a e0f0      	LDI  R31,0
                +
00110b 0f0e     +ADD R16 , R30
00110c 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
00110d 9a1a      	SBI  0x3,2
00110e 01f8      	MOVW R30,R16
00110f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
001110 01f8      	MOVW R30,R16
001111 940e 133c 	CALL __CWD1
001113 940e 12a7 	CALL __CDF1
001115 01df      	MOVW R26,R30
001116 01cb      	MOVW R24,R22
001117 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
001118 940e 12d5 	CALL __DIVF21
00111a 940e 1270 	CALL __CFD1
00111c 018f      	MOVW R16,R30
00111d 01f8      	MOVW R30,R16
00111e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x27:
00111f e0e0      	LDI  R30,LOW(0)
001120 93e0 05d4 	STS  _tempX,R30
001122 93e0 05d5 	STS  _tempX+1,R30
001124 93e0 05d6 	STS  _tempX+2,R30
001126 93e0 05d7 	STS  _tempX+3,R30
001128 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x28:
001129 e0e0      	LDI  R30,LOW(0)
00112a 93e0 05d8 	STS  _tempY,R30
00112c 93e0 05d9 	STS  _tempY+1,R30
00112e 93e0 05da 	STS  _tempY+2,R30
001130 93e0 05db 	STS  _tempY+3,R30
001132 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x29:
001133 91a0 05d4 	LDS  R26,_tempX
001135 91b0 05d5 	LDS  R27,_tempX+1
001137 9180 05d6 	LDS  R24,_tempX+2
001139 9190 05d7 	LDS  R25,_tempX+3
00113b 2766      	CLR  R22
00113c 2777      	CLR  R23
00113d 940e 131a 	CALL __ADDD12
00113f 93e0 05d4 	STS  _tempX,R30
001141 93f0 05d5 	STS  _tempX+1,R31
001143 9360 05d6 	STS  _tempX+2,R22
001145 9370 05d7 	STS  _tempX+3,R23
001147 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2A:
001148 91a0 05d8 	LDS  R26,_tempY
00114a 91b0 05d9 	LDS  R27,_tempY+1
00114c 9180 05da 	LDS  R24,_tempY+2
00114e 9190 05db 	LDS  R25,_tempY+3
001150 2766      	CLR  R22
001151 2777      	CLR  R23
001152 940e 131a 	CALL __ADDD12
001154 93e0 05d8 	STS  _tempY,R30
001156 93f0 05d9 	STS  _tempY+1,R31
001158 9360 05da 	STS  _tempY+2,R22
00115a 9370 05db 	STS  _tempY+3,R23
00115c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
                +
00115d e1e0     +LDI R30 , LOW ( 0x10 )
00115e e0f0     +LDI R31 , HIGH ( 0x10 )
00115f e060     +LDI R22 , BYTE3 ( 0x10 )
001160 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
001161 940e 13ab 	CALL __DIVD21
001163 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2C:
001164 93aa      	ST   -Y,R26
001165 93ea      	ST   -Y,R30
001166 93fa      	ST   -Y,R31
001167 b7ef      	IN   R30,SREG
001168 93ea      	ST   -Y,R30
001169 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
00116a 50e1      	SUBI R30,LOW(1)
00116b e0f0      	LDI  R31,0
00116c 52e9      	SUBI R30,LOW(-_tx_buffer0)
00116d 4ff9      	SBCI R31,HIGH(-_tx_buffer0)
00116e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2E:
00116f 93fa      	ST   -Y,R31
001170 93ea      	ST   -Y,R30
001171 efe7      	LDI  R30,LOW(247)
001172 e0f0      	LDI  R31,HIGH(247)
001173 93fa      	ST   -Y,R31
001174 93ea      	ST   -Y,R30
001175 cede      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2F:
001176 940e 07c7 	CALL _SSD1963_PutString16
001178 81ed      	LDD  R30,Y+5
001179 81fe      	LDD  R31,Y+5+1
00117a 93fa      	ST   -Y,R31
00117b 93ea      	ST   -Y,R30
00117c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x30:
00117d 93fa      	ST   -Y,R31
00117e 93ea      	ST   -Y,R30
00117f efe0      	LDI  R30,LOW(240)
001180 e0f0      	LDI  R31,HIGH(240)
001181 93fa      	ST   -Y,R31
001182 93ea      	ST   -Y,R30
001183 e0ee      	LDI  R30,LOW(270)
001184 e0f1      	LDI  R31,HIGH(270)
001185 93fa      	ST   -Y,R31
001186 93ea      	ST   -Y,R30
001187 efef      	LDI  R30,LOW(65535)
001188 efff      	LDI  R31,HIGH(65535)
001189 93fa      	ST   -Y,R31
00118a 93ea      	ST   -Y,R30
00118b 940c 0957 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x31:
00118d 93fa      	ST   -Y,R31
00118e 93ea      	ST   -Y,R30
00118f efe1      	LDI  R30,LOW(241)
001190 e0f0      	LDI  R31,HIGH(241)
001191 93fa      	ST   -Y,R31
001192 93ea      	ST   -Y,R30
001193 e0ed      	LDI  R30,LOW(269)
001194 e0f1      	LDI  R31,HIGH(269)
001195 93fa      	ST   -Y,R31
001196 93ea      	ST   -Y,R30
001197 e0e1      	LDI  R30,LOW(1)
001198 e0f0      	LDI  R31,HIGH(1)
001199 ceab      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x32:
00119a efef      	LDI  R30,LOW(65535)
00119b efff      	LDI  R31,HIGH(65535)
00119c 93fa      	ST   -Y,R31
00119d 93ea      	ST   -Y,R30
00119e 940c 0b17 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
0011a0 93fa      	ST   -Y,R31
0011a1 93ea      	ST   -Y,R30
0011a2 e0e4      	LDI  R30,LOW(4)
0011a3 93ea      	ST   -Y,R30
0011a4 ce9b      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x34:
0011a5 efe0      	LDI  R30,LOW(240)
0011a6 e0f0      	LDI  R31,HIGH(240)
0011a7 15e6      	CP   R30,R6
0011a8 05f7      	CPC  R31,R7
0011a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x35:
0011aa e0ee      	LDI  R30,LOW(270)
0011ab e0f1      	LDI  R31,HIGH(270)
0011ac 166e      	CP   R6,R30
0011ad 067f      	CPC  R7,R31
0011ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x36:
0011af 93fa      	ST   -Y,R31
0011b0 93ea      	ST   -Y,R30
0011b1 931a      	ST   -Y,R17
0011b2 930a      	ST   -Y,R16
0011b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
0011b4 933a      	ST   -Y,R19
0011b5 932a      	ST   -Y,R18
0011b6 85ea      	LDD  R30,Y+10
0011b7 85fb      	LDD  R31,Y+10+1
0011b8 ce8c      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
0011b9 01f9      	MOVW R30,R18
0011ba 9670      	ADIW R30,16
0011bb 93fa      	ST   -Y,R31
0011bc 93ea      	ST   -Y,R30
0011bd 85ea      	LDD  R30,Y+10
0011be 85fb      	LDD  R31,Y+10+1
0011bf ce85      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
0011c0 e0f0      	LDI  R31,0
0011c1 9730      	SBIW R30,0
0011c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
0011c3 933a      	ST   -Y,R19
0011c4 932a      	ST   -Y,R18
0011c5 935a      	ST   -Y,R21
0011c6 934a      	ST   -Y,R20
0011c7 ce78      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3B:
0011c8 935a      	ST   -Y,R21
0011c9 934a      	ST   -Y,R20
0011ca ce75      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3C:
0011cb e0f0      	LDI  R31,0
0011cc cfe2      	RJMP SUBOPT_0x36
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3D:
0011cd 933a      	ST   -Y,R19
0011ce 932a      	ST   -Y,R18
0011cf e0e3      	LDI  R30,LOW(3)
0011d0 93ea      	ST   -Y,R30
0011d1 cff6      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
0011d2 940e 07e1 	CALL _SSD1963_PutValue16
                +
0011d4 5c00     +SUBI R16 , LOW ( - 64 )
0011d5 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
0011d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3F:
0011d7 91e0 072b 	LDS  R30,_Graph_X
0011d9 91f0 072c 	LDS  R31,_Graph_X+1
0011db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x40:
0011dc dffa      	RCALL SUBOPT_0x3F
0011dd cfd1      	RJMP SUBOPT_0x36
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x41:
0011de e0e8      	LDI  R30,LOW(8456)
0011df e2f1      	LDI  R31,HIGH(8456)
0011e0 93fa      	ST   -Y,R31
0011e1 93ea      	ST   -Y,R30
0011e2 940e 0851 	CALL _SSD1963_DrawFastLine
0011e4 cff7      	RJMP SUBOPT_0x40
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
0011e5 93fa      	ST   -Y,R31
0011e6 93ea      	ST   -Y,R30
0011e7 cff6      	RJMP SUBOPT_0x41
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x43:
0011e8 2fe5      	MOV  R30,R21
0011e9 e0f0      	LDI  R31,0
0011ea 01de      	MOVW R26,R28
0011eb 961c      	ADIW R26,12
0011ec 0fee      	LSL  R30
0011ed 1fff      	ROL  R31
0011ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x44:
0011ef 0fae      	ADD  R26,R30
0011f0 1fbf      	ADC  R27,R31
0011f1 940e 13d4 	CALL __GETW1P
0011f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x45:
0011f4 91e0 0729 	LDS  R30,_ParameterState
0011f6 e2ad      	LDI  R26,LOW(_Amplitude)
0011f7 e0b7      	LDI  R27,HIGH(_Amplitude)
0011f8 e0f0      	LDI  R31,0
0011f9 0fee      	LSL  R30
0011fa 1fff      	ROL  R31
0011fb cff3      	RJMP SUBOPT_0x44
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x46:
0011fc 0fae      	ADD  R26,R30
0011fd 1fbf      	ADC  R27,R31
0011fe 91ed      	LD   R30,X+
0011ff 91fd      	LD   R31,X+
001200 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x47:
001201 2fe5      	MOV  R30,R21
001202 e3a3      	LDI  R26,LOW(_ValueLast)
001203 e0b7      	LDI  R27,HIGH(_ValueLast)
001204 e0f0      	LDI  R31,0
001205 0fee      	LSL  R30
001206 1fff      	ROL  R31
001207 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
001208 93fa      	ST   -Y,R31
001209 93ea      	ST   -Y,R30
00120a 2fe5      	MOV  R30,R21
00120b e0f0      	LDI  R31,0
00120c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x49:
00120d 940e 0a72 	CALL _getchar0
00120f 940e 0a72 	CALL _getchar0
001211 940c 0a72 	JMP  _getchar0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4A:
001213 940e 0a72 	CALL _getchar0
001215 93ea      	ST   -Y,R30
001216 940e 0a72 	CALL _getchar0
001218 93ea      	ST   -Y,R30
001219 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4B:
00121a 93fa      	ST   -Y,R31
00121b 93ea      	ST   -Y,R30
00121c ece0      	LDI  R30,LOW(192)
00121d e0f0      	LDI  R31,HIGH(192)
00121e 93fa      	ST   -Y,R31
00121f 93ea      	ST   -Y,R30
001220 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4C:
001221 940e 07c7 	CALL _SSD1963_PutString16
001223 cde8      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4D:
001224 91e0 0729 	LDS  R30,_ParameterState
001226 93ea      	ST   -Y,R30
001227 efe8      	LDI  R30,LOW(248)
001228 e0f0      	LDI  R31,HIGH(248)
001229 93fa      	ST   -Y,R31
00122a 93ea      	ST   -Y,R30
00122b 940c 0c2e 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4E:
00122d 91e0 0729 	LDS  R30,_ParameterState
00122f e2ad      	LDI  R26,LOW(_Amplitude)
001230 e0b7      	LDI  R27,HIGH(_Amplitude)
001231 e0f0      	LDI  R31,0
001232 0fee      	LSL  R30
001233 1fff      	ROL  R31
001234 cfc7      	RJMP SUBOPT_0x46
                 
                 
                 	.CSEG
                 _delay_ms:
001235 91e9      	ld   r30,y+
001236 91f9      	ld   r31,y+
001237 9630      	adiw r30,0
001238 f039      	breq __delay_ms1
                 __delay_ms0:
                +
001239 ea80     +LDI R24 , LOW ( 0xFA0 )
00123a e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00123b 9701     +SBIW R24 , 1
00123c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00123d 95a8      	wdr
00123e 9731      	sbiw r30,1
00123f f7c9      	brne __delay_ms0
                 __delay_ms1:
001240 9508      	ret
                 
                 __ROUND_REPACK:
001241 2355      	TST  R21
001242 f442      	BRPL __REPACK
001243 3850      	CPI  R21,0x80
001244 f411      	BRNE __ROUND_REPACK0
001245 ffe0      	SBRS R30,0
001246 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001247 9631      	ADIW R30,1
001248 1f69      	ADC  R22,R25
001249 1f79      	ADC  R23,R25
00124a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00124b e850      	LDI  R21,0x80
00124c 2757      	EOR  R21,R23
00124d f411      	BRNE __REPACK0
00124e 935f      	PUSH R21
00124f c073      	RJMP __ZERORES
                 __REPACK0:
001250 3f5f      	CPI  R21,0xFF
001251 f031      	BREQ __REPACK1
001252 0f66      	LSL  R22
001253 0c00      	LSL  R0
001254 9557      	ROR  R21
001255 9567      	ROR  R22
001256 2f75      	MOV  R23,R21
001257 9508      	RET
                 __REPACK1:
001258 935f      	PUSH R21
001259 2000      	TST  R0
00125a f00a      	BRMI __REPACK2
00125b c073      	RJMP __MAXRES
                 __REPACK2:
00125c c06c      	RJMP __MINRES
                 
                 __UNPACK:
00125d e850      	LDI  R21,0x80
00125e 2e19      	MOV  R1,R25
00125f 2215      	AND  R1,R21
001260 0f88      	LSL  R24
001261 1f99      	ROL  R25
001262 2795      	EOR  R25,R21
001263 0f55      	LSL  R21
001264 9587      	ROR  R24
                 
                 __UNPACK1:
001265 e850      	LDI  R21,0x80
001266 2e07      	MOV  R0,R23
001267 2205      	AND  R0,R21
001268 0f66      	LSL  R22
001269 1f77      	ROL  R23
00126a 2775      	EOR  R23,R21
00126b 0f55      	LSL  R21
00126c 9567      	ROR  R22
00126d 9508      	RET
                 
                 __CFD1U:
00126e 9468      	SET
00126f c001      	RJMP __CFD1U0
                 __CFD1:
001270 94e8      	CLT
                 __CFD1U0:
001271 935f      	PUSH R21
001272 dff2      	RCALL __UNPACK1
001273 3870      	CPI  R23,0x80
001274 f018      	BRLO __CFD10
001275 3f7f      	CPI  R23,0xFF
001276 f408      	BRCC __CFD10
001277 c04b      	RJMP __ZERORES
                 __CFD10:
001278 e156      	LDI  R21,22
001279 1b57      	SUB  R21,R23
00127a f4aa      	BRPL __CFD11
00127b 9551      	NEG  R21
00127c 3058      	CPI  R21,8
00127d f40e      	BRTC __CFD19
00127e 3059      	CPI  R21,9
                 __CFD19:
00127f f030      	BRLO __CFD17
001280 efef      	SER  R30
001281 efff      	SER  R31
001282 ef6f      	SER  R22
001283 e77f      	LDI  R23,0x7F
001284 f977      	BLD  R23,7
001285 c01a      	RJMP __CFD15
                 __CFD17:
001286 2777      	CLR  R23
001287 2355      	TST  R21
001288 f0b9      	BREQ __CFD15
                 __CFD18:
001289 0fee      	LSL  R30
00128a 1fff      	ROL  R31
00128b 1f66      	ROL  R22
00128c 1f77      	ROL  R23
00128d 955a      	DEC  R21
00128e f7d1      	BRNE __CFD18
00128f c010      	RJMP __CFD15
                 __CFD11:
001290 2777      	CLR  R23
                 __CFD12:
001291 3058      	CPI  R21,8
001292 f028      	BRLO __CFD13
001293 2fef      	MOV  R30,R31
001294 2ff6      	MOV  R31,R22
001295 2f67      	MOV  R22,R23
001296 5058      	SUBI R21,8
001297 cff9      	RJMP __CFD12
                 __CFD13:
001298 2355      	TST  R21
001299 f031      	BREQ __CFD15
                 __CFD14:
00129a 9576      	LSR  R23
00129b 9567      	ROR  R22
00129c 95f7      	ROR  R31
00129d 95e7      	ROR  R30
00129e 955a      	DEC  R21
00129f f7d1      	BRNE __CFD14
                 __CFD15:
0012a0 2000      	TST  R0
0012a1 f40a      	BRPL __CFD16
0012a2 d080      	RCALL __ANEGD1
                 __CFD16:
0012a3 915f      	POP  R21
0012a4 9508      	RET
                 
                 __CDF1U:
0012a5 9468      	SET
0012a6 c001      	RJMP __CDF1U0
                 __CDF1:
0012a7 94e8      	CLT
                 __CDF1U0:
0012a8 9730      	SBIW R30,0
0012a9 4060      	SBCI R22,0
0012aa 4070      	SBCI R23,0
0012ab f0b1      	BREQ __CDF10
0012ac 2400      	CLR  R0
0012ad f026      	BRTS __CDF11
0012ae 2377      	TST  R23
0012af f412      	BRPL __CDF11
0012b0 9400      	COM  R0
0012b1 d071      	RCALL __ANEGD1
                 __CDF11:
0012b2 2e17      	MOV  R1,R23
0012b3 e17e      	LDI  R23,30
0012b4 2011      	TST  R1
                 __CDF12:
0012b5 f032      	BRMI __CDF13
0012b6 957a      	DEC  R23
0012b7 0fee      	LSL  R30
0012b8 1fff      	ROL  R31
0012b9 1f66      	ROL  R22
0012ba 1c11      	ROL  R1
0012bb cff9      	RJMP __CDF12
                 __CDF13:
0012bc 2fef      	MOV  R30,R31
0012bd 2ff6      	MOV  R31,R22
0012be 2d61      	MOV  R22,R1
0012bf 935f      	PUSH R21
0012c0 df8a      	RCALL __REPACK
0012c1 915f      	POP  R21
                 __CDF10:
0012c2 9508      	RET
                 
                 __ZERORES:
0012c3 27ee      	CLR  R30
0012c4 27ff      	CLR  R31
0012c5 2766      	CLR  R22
0012c6 2777      	CLR  R23
0012c7 915f      	POP  R21
0012c8 9508      	RET
                 
                 __MINRES:
0012c9 efef      	SER  R30
0012ca efff      	SER  R31
0012cb e76f      	LDI  R22,0x7F
0012cc ef7f      	SER  R23
0012cd 915f      	POP  R21
0012ce 9508      	RET
                 
                 __MAXRES:
0012cf efef      	SER  R30
0012d0 efff      	SER  R31
0012d1 e76f      	LDI  R22,0x7F
0012d2 e77f      	LDI  R23,0x7F
0012d3 915f      	POP  R21
0012d4 9508      	RET
                 
                 __DIVF21:
0012d5 935f      	PUSH R21
0012d6 df86      	RCALL __UNPACK
0012d7 3870      	CPI  R23,0x80
0012d8 f421      	BRNE __DIVF210
0012d9 2011      	TST  R1
                 __DIVF211:
0012da f40a      	BRPL __DIVF219
0012db cfed      	RJMP __MINRES
                 __DIVF219:
0012dc cff2      	RJMP __MAXRES
                 __DIVF210:
0012dd 3890      	CPI  R25,0x80
0012de f409      	BRNE __DIVF218
                 __DIVF217:
0012df cfe3      	RJMP __ZERORES
                 __DIVF218:
0012e0 2401      	EOR  R0,R1
0012e1 9408      	SEC
0012e2 0b97      	SBC  R25,R23
0012e3 f41b      	BRVC __DIVF216
0012e4 f3d4      	BRLT __DIVF217
0012e5 2000      	TST  R0
0012e6 cff3      	RJMP __DIVF211
                 __DIVF216:
0012e7 2f79      	MOV  R23,R25
0012e8 931f      	PUSH R17
0012e9 932f      	PUSH R18
0012ea 933f      	PUSH R19
0012eb 934f      	PUSH R20
0012ec 2411      	CLR  R1
0012ed 2711      	CLR  R17
0012ee 2722      	CLR  R18
0012ef 2733      	CLR  R19
0012f0 2744      	CLR  R20
0012f1 2755      	CLR  R21
0012f2 e290      	LDI  R25,32
                 __DIVF212:
0012f3 17ae      	CP   R26,R30
0012f4 07bf      	CPC  R27,R31
0012f5 0786      	CPC  R24,R22
0012f6 0741      	CPC  R20,R17
0012f7 f030      	BRLO __DIVF213
0012f8 1bae      	SUB  R26,R30
0012f9 0bbf      	SBC  R27,R31
0012fa 0b86      	SBC  R24,R22
0012fb 0b41      	SBC  R20,R17
0012fc 9408      	SEC
0012fd c001      	RJMP __DIVF214
                 __DIVF213:
0012fe 9488      	CLC
                 __DIVF214:
0012ff 1f55      	ROL  R21
001300 1f22      	ROL  R18
001301 1f33      	ROL  R19
001302 1c11      	ROL  R1
001303 1faa      	ROL  R26
001304 1fbb      	ROL  R27
001305 1f88      	ROL  R24
001306 1f44      	ROL  R20
001307 959a      	DEC  R25
001308 f751      	BRNE __DIVF212
001309 01f9      	MOVW R30,R18
00130a 2d61      	MOV  R22,R1
00130b 914f      	POP  R20
00130c 913f      	POP  R19
00130d 912f      	POP  R18
00130e 911f      	POP  R17
00130f 2366      	TST  R22
001310 f032      	BRMI __DIVF215
001311 0f55      	LSL  R21
001312 1fee      	ROL  R30
001313 1fff      	ROL  R31
001314 1f66      	ROL  R22
001315 957a      	DEC  R23
001316 f243      	BRVS __DIVF217
                 __DIVF215:
001317 df29      	RCALL __ROUND_REPACK
001318 915f      	POP  R21
001319 9508      	RET
                 
                 __ADDD12:
00131a 0fea      	ADD  R30,R26
00131b 1ffb      	ADC  R31,R27
00131c 1f68      	ADC  R22,R24
00131d 1f79      	ADC  R23,R25
00131e 9508      	RET
                 
                 __ANEGW1:
00131f 95f1      	NEG  R31
001320 95e1      	NEG  R30
001321 40f0      	SBCI R31,0
001322 9508      	RET
                 
                 __ANEGD1:
001323 95f0      	COM  R31
001324 9560      	COM  R22
001325 9570      	COM  R23
001326 95e1      	NEG  R30
001327 4fff      	SBCI R31,-1
001328 4f6f      	SBCI R22,-1
001329 4f7f      	SBCI R23,-1
00132a 9508      	RET
                 
                 __LSRB12:
00132b 23ee      	TST  R30
00132c 2e0e      	MOV  R0,R30
00132d 2fea      	MOV  R30,R26
00132e f019      	BREQ __LSRB12R
                 __LSRB12L:
00132f 95e6      	LSR  R30
001330 940a      	DEC  R0
001331 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
001332 9508      	RET
                 
                 __ASRW4:
001333 95f5      	ASR  R31
001334 95e7      	ROR  R30
                 __ASRW3:
001335 95f5      	ASR  R31
001336 95e7      	ROR  R30
                 __ASRW2:
001337 95f5      	ASR  R31
001338 95e7      	ROR  R30
001339 95f5      	ASR  R31
00133a 95e7      	ROR  R30
00133b 9508      	RET
                 
                 __CWD1:
00133c 2f6f      	MOV  R22,R31
00133d 0f66      	ADD  R22,R22
00133e 0b66      	SBC  R22,R22
00133f 2f76      	MOV  R23,R22
001340 9508      	RET
                 
                 __MULW12U:
001341 9ffa      	MUL  R31,R26
001342 2df0      	MOV  R31,R0
001343 9feb      	MUL  R30,R27
001344 0df0      	ADD  R31,R0
001345 9fea      	MUL  R30,R26
001346 2de0      	MOV  R30,R0
001347 0df1      	ADD  R31,R1
001348 9508      	RET
                 
                 __MULD12U:
001349 9f7a      	MUL  R23,R26
00134a 2d70      	MOV  R23,R0
00134b 9f6b      	MUL  R22,R27
00134c 0d70      	ADD  R23,R0
00134d 9ff8      	MUL  R31,R24
00134e 0d70      	ADD  R23,R0
00134f 9fe9      	MUL  R30,R25
001350 0d70      	ADD  R23,R0
001351 9f6a      	MUL  R22,R26
001352 2d60      	MOV  R22,R0
001353 0d71      	ADD  R23,R1
001354 9ffb      	MUL  R31,R27
001355 0d60      	ADD  R22,R0
001356 1d71      	ADC  R23,R1
001357 9fe8      	MUL  R30,R24
001358 0d60      	ADD  R22,R0
001359 1d71      	ADC  R23,R1
00135a 2788      	CLR  R24
00135b 9ffa      	MUL  R31,R26
00135c 2df0      	MOV  R31,R0
00135d 0d61      	ADD  R22,R1
00135e 1f78      	ADC  R23,R24
00135f 9feb      	MUL  R30,R27
001360 0df0      	ADD  R31,R0
001361 1d61      	ADC  R22,R1
001362 1f78      	ADC  R23,R24
001363 9fea      	MUL  R30,R26
001364 2de0      	MOV  R30,R0
001365 0df1      	ADD  R31,R1
001366 1f68      	ADC  R22,R24
001367 1f78      	ADC  R23,R24
001368 9508      	RET
                 
                 __MULW12:
001369 d049      	RCALL __CHKSIGNW
00136a dfd6      	RCALL __MULW12U
00136b f40e      	BRTC __MULW121
00136c dfb2      	RCALL __ANEGW1
                 __MULW121:
00136d 9508      	RET
                 
                 __MULD12:
00136e d052      	RCALL __CHKSIGND
00136f dfd9      	RCALL __MULD12U
001370 f40e      	BRTC __MULD121
001371 dfb1      	RCALL __ANEGD1
                 __MULD121:
001372 9508      	RET
                 
                 __DIVW21U:
001373 2400      	CLR  R0
001374 2411      	CLR  R1
001375 e190      	LDI  R25,16
                 __DIVW21U1:
001376 0faa      	LSL  R26
001377 1fbb      	ROL  R27
001378 1c00      	ROL  R0
001379 1c11      	ROL  R1
00137a 1a0e      	SUB  R0,R30
00137b 0a1f      	SBC  R1,R31
00137c f418      	BRCC __DIVW21U2
00137d 0e0e      	ADD  R0,R30
00137e 1e1f      	ADC  R1,R31
00137f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001380 60a1      	SBR  R26,1
                 __DIVW21U3:
001381 959a      	DEC  R25
001382 f799      	BRNE __DIVW21U1
001383 01fd      	MOVW R30,R26
001384 01d0      	MOVW R26,R0
001385 9508      	RET
                 
                 __DIVD21U:
001386 933f      	PUSH R19
001387 934f      	PUSH R20
001388 935f      	PUSH R21
001389 2400      	CLR  R0
00138a 2411      	CLR  R1
00138b 2744      	CLR  R20
00138c 2755      	CLR  R21
00138d e230      	LDI  R19,32
                 __DIVD21U1:
00138e 0faa      	LSL  R26
00138f 1fbb      	ROL  R27
001390 1f88      	ROL  R24
001391 1f99      	ROL  R25
001392 1c00      	ROL  R0
001393 1c11      	ROL  R1
001394 1f44      	ROL  R20
001395 1f55      	ROL  R21
001396 1a0e      	SUB  R0,R30
001397 0a1f      	SBC  R1,R31
001398 0b46      	SBC  R20,R22
001399 0b57      	SBC  R21,R23
00139a f428      	BRCC __DIVD21U2
00139b 0e0e      	ADD  R0,R30
00139c 1e1f      	ADC  R1,R31
00139d 1f46      	ADC  R20,R22
00139e 1f57      	ADC  R21,R23
00139f c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0013a0 60a1      	SBR  R26,1
                 __DIVD21U3:
0013a1 953a      	DEC  R19
0013a2 f759      	BRNE __DIVD21U1
0013a3 01fd      	MOVW R30,R26
0013a4 01bc      	MOVW R22,R24
0013a5 01d0      	MOVW R26,R0
0013a6 01ca      	MOVW R24,R20
0013a7 915f      	POP  R21
0013a8 914f      	POP  R20
0013a9 913f      	POP  R19
0013aa 9508      	RET
                 
                 __DIVD21:
0013ab d015      	RCALL __CHKSIGND
0013ac dfd9      	RCALL __DIVD21U
0013ad f40e      	BRTC __DIVD211
0013ae df74      	RCALL __ANEGD1
                 __DIVD211:
0013af 9508      	RET
                 
                 __MODW21U:
0013b0 dfc2      	RCALL __DIVW21U
0013b1 01fd      	MOVW R30,R26
0013b2 9508      	RET
                 
                 __CHKSIGNW:
0013b3 94e8      	CLT
0013b4 fff7      	SBRS R31,7
0013b5 c002      	RJMP __CHKSW1
0013b6 df68      	RCALL __ANEGW1
0013b7 9468      	SET
                 __CHKSW1:
0013b8 ffb7      	SBRS R27,7
0013b9 c006      	RJMP __CHKSW2
0013ba 95a0      	COM  R26
0013bb 95b0      	COM  R27
0013bc 9611      	ADIW R26,1
0013bd f800      	BLD  R0,0
0013be 9403      	INC  R0
0013bf fa00      	BST  R0,0
                 __CHKSW2:
0013c0 9508      	RET
                 
                 __CHKSIGND:
0013c1 94e8      	CLT
0013c2 ff77      	SBRS R23,7
0013c3 c002      	RJMP __CHKSD1
0013c4 df5e      	RCALL __ANEGD1
0013c5 9468      	SET
                 __CHKSD1:
0013c6 ff97      	SBRS R25,7
0013c7 c00b      	RJMP __CHKSD2
0013c8 2400      	CLR  R0
0013c9 95a0      	COM  R26
0013ca 95b0      	COM  R27
0013cb 9580      	COM  R24
0013cc 9590      	COM  R25
0013cd 9611      	ADIW R26,1
0013ce 1d80      	ADC  R24,R0
0013cf 1d90      	ADC  R25,R0
0013d0 f800      	BLD  R0,0
0013d1 9403      	INC  R0
0013d2 fa00      	BST  R0,0
                 __CHKSD2:
0013d3 9508      	RET
                 
                 __GETW1P:
0013d4 91ed      	LD   R30,X+
0013d5 91fc      	LD   R31,X
0013d6 9711      	SBIW R26,1
0013d7 9508      	RET
                 
                 __SWAPW12:
0013d8 2e1b      	MOV  R1,R27
0013d9 2fbf      	MOV  R27,R31
0013da 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0013db 2e1a      	MOV  R1,R26
0013dc 2fae      	MOV  R26,R30
0013dd 2de1      	MOV  R30,R1
0013de 9508      	RET
                 
                 __CPD21:
0013df 17ae      	CP   R26,R30
0013e0 07bf      	CPC  R27,R31
0013e1 0786      	CPC  R24,R22
0013e2 0797      	CPC  R25,R23
0013e3 9508      	RET
                 
                 __SAVELOCR6:
0013e4 935a      	ST   -Y,R21
                 __SAVELOCR5:
0013e5 934a      	ST   -Y,R20
                 __SAVELOCR4:
0013e6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0013e7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0013e8 931a      	ST   -Y,R17
0013e9 930a      	ST   -Y,R16
0013ea 9508      	RET
                 
                 __LOADLOCR6:
0013eb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0013ec 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0013ed 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0013ee 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0013ef 8119      	LDD  R17,Y+1
0013f0 8108      	LD   R16,Y
0013f1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  53 r1 :  36 r2 :   2 r3 :   0 r4 :  10 r5 :   8 r6 :   4 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   4 r13:   4 r14:   0 r15:   0 
r16:  64 r17:  77 r18:  33 r19:  25 r20:  24 r21:  61 r22:  73 r23:  66 
r24:  45 r25:  31 r26: 355 r27: 100 r28:  22 r29:   1 r30:1036 r31: 546 
x  :  35 y  : 546 z  :  18 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  35 add   :  32 
adiw  :  37 and   :   3 andi  :   9 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  23 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   6 brmi  :   4 brne  : 120 brpl  :  16 brsh  :  20 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 381 
cbi   :  17 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  34 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  21 cpc   : 106 cpi   : 135 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   7 inc   :   4 jmp   :  57 ld    :  41 ldd   : 182 
ldi   : 680 lds   :  72 lpm   :   9 lsl   :  21 lsr   :   2 mov   :  47 
movw  :  61 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   9 
or    :   3 ori   :   3 out   :  60 pop   :  13 push  :  12 rcall : 100 
ret   :  98 reti  :   2 rjmp  : 173 rol   :  36 ror   :  12 sbc   :  16 
sbci  :  29 sbi   :  19 sbic  :   2 sbis  :   1 sbiw  :  22 sbr   :   2 
sbrc  :   0 sbrs  :   5 sec   :   2 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 308 std   :  60 sts   :  75 sub   :  11 subi  :  43 
swap  :   1 tst   :  21 wdr   :   3 
Instructions used: 79 out of 117 (67.5%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0027e4   8040   2172  10212  131072   7.8%
[.dseg] 0x000100 0x00073b      0    571    571    4351  13.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 7 warnings
