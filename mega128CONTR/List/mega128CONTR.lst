
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm Sat Aug 01 14:03:25 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1061): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1065): warning: Register r13 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TOUCH_X=R4
                 	.DEF _TOUCH_Y=R6
                 	.DEF _TOUCH_X_LAST=R8
                 	.DEF _TOUCH_Y_LAST=R10
                 	.DEF _rx_wr_index2=R13
                 	.DEF _rx_rd_index2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 04fe 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0cb5 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0ac8 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0b38 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0b7f 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0baa 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _ConfigParam:
0003e6 000a
0003e7 000a
0003e8 000a
0003e9 0005      	.DB  0xA,0x0,0xA,0x0,0xA,0x0,0x5,0x0
0003ea 0005
0003eb 0005
0003ec 0005
0003ed 0005      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x5,0x0
0003ee 0005
0003ef 0005
0003f0 0005
0003f1 0001      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x1,0x0
0003f2 0014
0003f3 0014
0003f4 0014
0003f5 0005      	.DB  0x14,0x0,0x14,0x0,0x14,0x0,0x5,0x0
0003f6 0005
0003f7 0005
0003f8 0005
0003f9 0005      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x5,0x0
0003fa 0005
0003fb 0005
0003fc 0005
0003fd 0000      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x0,0x0
0003fe 00dc
0003ff 00dc
000400 00dc
000401 01f4      	.DB  0xDC,0x0,0xDC,0x0,0xDC,0x0,0xF4,0x1
000402 01f4
000403 01f4
000404 01f4
000405 01f4      	.DB  0xF4,0x1,0xF4,0x1,0xF4,0x1,0xF4,0x1
000406 01f4
000407 01f4
000408 01f4
000409 0001      	.DB  0xF4,0x1,0xF4,0x1,0xF4,0x1,0x1,0x0
00040a 005a
00040b 005a
00040c 002d
00040d 0064      	.DB  0x5A,0x0,0x5A,0x0,0x2D,0x0,0x64,0x0
00040e 0064
00040f 0064
000410 0064
000411 0064      	.DB  0x64,0x0,0x64,0x0,0x64,0x0,0x64,0x0
000412 0064
000413 0064
000414 0064
000415 0000      	.DB  0x64,0x0,0x64,0x0,0x64,0x0,0x0,0x0
                 _tbl10_G101:
000416 2710
000417 03e8
000418 0064
000419 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00041a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00041b 1000
00041c 0100
00041d 0010
00041e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00041f 0000      	.DW  0x0000
                 
                 _0xFD:
000420 fffa      	.DB  0xFA,0xFF
                 _0x0:
000421 2020
000422 2020
000423 0020
000424 cbd1      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xD1,0xCB
000425 c4c5
000426 2000
000427 2b20
000428 2000      	.DB  0xC5,0xC4,0x0,0x20,0x20,0x2B,0x0,0x20
000429 2d20
00042a cf00
00042b d3c0
00042c c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
00042d 2000
00042e 2020
00042f 2020
000430 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000431 2020
000432 2020
000433 2020
000434 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000435 0020
000436 c0cd
000437 d0cf
000438 c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
000439 cdc5
00043a c5c8
00043b d400
00043c c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
00043d d200
00043e cace
00043f cd00
000440 cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
000441 dfd0
000442 c5c6
000443 c8cd
000444 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000445 20c8
000446 ced2
000447 00ca
000448 cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
000449 c1c7
00044a c6d3
00044b c5c4
00044c c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
00044d 00df
00044e c1ce
00044f 00cd
000450 ccc0      	.DB  0xDF,0x0,0xCE,0xC1,0xCD,0x0,0xC0,0xCC
000451 00cf
000452 c5cf
000453 00d0
000454 ca20      	.DB  0xCF,0x0,0xCF,0xC5,0xD0,0x0,0x20,0xCA
000455 00cd
000456 ca20
000457 00d2
000458 cdca      	.DB  0xCD,0x0,0x20,0xCA,0xD2,0x0,0xCA,0xCD
000459 00d2
00045a dbc1
00045b d2d1
00045c d6c0      	.DB  0xD2,0x0,0xC1,0xDB,0xD1,0xD2,0xC0,0xD6
00045d 00cf
00045e d6c3
00045f cd00
000460 efe0      	.DB  0xCF,0x0,0xC3,0xD6,0x0,0xCD,0xE0,0xEF
000461 f3f0
000462 f3e3
000463 f320
000464 e0e1      	.DB  0xF0,0xF3,0xE3,0xF3,0x20,0xF3,0xE1,0xE0
000465 fce2
000466 0a20
000467 cd00
000468 efe0      	.DB  0xE2,0xFC,0x20,0xA,0x0,0xCD,0xE0,0xEF
000469 f3f0
00046a e8e3
00046b ef20
00046c e8f0      	.DB  0xF0,0xF3,0xE3,0xE8,0x20,0xEF,0xF0,0xE8
00046d e0e1
00046e fce2
00046f 0a20
000470 cf00      	.DB  0xE1,0xE0,0xE2,0xFC,0x20,0xA,0x0,0xCF
000471 e4ee
000472 e0e4
000473 20e9
000474 e1ee      	.DB  0xEE,0xE4,0xE4,0xE0,0xE9,0x20,0xEE,0xE1
000475 f0ee
000476 f2ee
000477 e2ee
000478 0a20      	.DB  0xEE,0xF0,0xEE,0xF2,0xEE,0xE2,0x20,0xA
000479 cd00
00047a 20e5
00047b eee3
00047c e8ed      	.DB  0x0,0xCD,0xE5,0x20,0xE3,0xEE,0xED,0xE8
00047d 202c
00047e eeef
00047f e5ec
000480 ebe4      	.DB  0x2C,0x20,0xEF,0xEE,0xEC,0xE5,0xE4,0xEB
000481 ede5
000482 e5ed
000483 20e5
000484 000a      	.DB  0xE5,0xED,0xED,0xE5,0xE5,0x20,0xA,0x0
000485 c5cc
000486 decd
000487 cd00
000488 c7c0      	.DB  0xCC,0xC5,0xCD,0xDE,0x0,0xCD,0xC0,0xC7
000489 c4c0
00048a c400
00048b d1c5
00048c ceca      	.DB  0xC0,0xC4,0x0,0xC4,0xC5,0xD1,0xCA,0xCE
00048d 00cc      	.DB  0xCC,0x0
                 
                 __GLOBAL_INI_TBL:
00048e 0001      	.DW  0x01
00048f 0002      	.DW  0x02
000490 083e      	.DW  __REG_BIT_VARS*2
                 
000491 0006      	.DW  0x06
000492 0500      	.DW  _0xF8
000493 0842      	.DW  _0x0*2
                 
000494 0006      	.DW  0x06
000495 0506      	.DW  _0xF8+6
000496 0842      	.DW  _0x0*2
                 
000497 0006      	.DW  0x06
000498 050c      	.DW  _0xF8+12
000499 0842      	.DW  _0x0*2
                 
00049a 0006      	.DW  0x06
00049b 0512      	.DW  _0xF8+18
00049c 0842      	.DW  _0x0*2
                 
00049d 0005      	.DW  0x05
00049e 0518      	.DW  _0xFC
00049f 0848      	.DW  _0x0*2+6
                 
0004a0 0004      	.DW  0x04
0004a1 051d      	.DW  _0xFC+5
0004a2 084d      	.DW  _0x0*2+11
                 
0004a3 0004      	.DW  0x04
0004a4 0521      	.DW  _0xFC+9
0004a5 0851      	.DW  _0x0*2+15
                 
0004a6 0006      	.DW  0x06
0004a7 0525      	.DW  _0xFC+13
0004a8 0855      	.DW  _0x0*2+19
                 
0004a9 0002      	.DW  0x02
0004aa 0798      	.DW  _Graph_X
0004ab 0840      	.DW  _0xFD*2
                 
0004ac 0011      	.DW  0x11
0004ad 052b      	.DW  _0x11A
0004ae 085b      	.DW  _0x0*2+25
                 
0004af 0011      	.DW  0x11
0004b0 053c      	.DW  _0x11A+17
0004b1 085b      	.DW  _0x0*2+25
                 
0004b2 000b      	.DW  0x0B
0004b3 054d      	.DW  _0x11A+34
0004b4 086c      	.DW  _0x0*2+42
                 
0004b5 0004      	.DW  0x04
0004b6 0558      	.DW  _0x11A+45
0004b7 0877      	.DW  _0x0*2+53
                 
0004b8 0004      	.DW  0x04
0004b9 055c      	.DW  _0x11A+49
0004ba 087b      	.DW  _0x0*2+57
                 
0004bb 0004      	.DW  0x04
0004bc 0560      	.DW  _0x11A+53
0004bd 0877      	.DW  _0x0*2+53
                 
0004be 0011      	.DW  0x11
0004bf 0564      	.DW  _0x11A+57
0004c0 087f      	.DW  _0x0*2+61
                 
0004c1 000c      	.DW  0x0C
0004c2 0575      	.DW  _0x11A+74
0004c3 0890      	.DW  _0x0*2+78
                 
0004c4 0004      	.DW  0x04
0004c5 0581      	.DW  _0x11A+86
0004c6 089c      	.DW  _0x0*2+90
                 
0004c7 0004      	.DW  0x04
0004c8 0585      	.DW  _0x11A+90
0004c9 08a0      	.DW  _0x0*2+94
                 
0004ca 0004      	.DW  0x04
0004cb 0589      	.DW  _0x11A+94
0004cc 08a4      	.DW  _0x0*2+98
                 
0004cd 0004      	.DW  0x04
0004ce 058d      	.DW  _0x11A+98
0004cf 08a8      	.DW  _0x0*2+102
                 
0004d0 0004      	.DW  0x04
0004d1 0591      	.DW  _0x11A+102
0004d2 08ac      	.DW  _0x0*2+106
                 
0004d3 0004      	.DW  0x04
0004d4 0595      	.DW  _0x11A+106
0004d5 08b0      	.DW  _0x0*2+110
                 
0004d6 0008      	.DW  0x08
0004d7 0599      	.DW  _0x11A+110
0004d8 08b4      	.DW  _0x0*2+114
                 
0004d9 000d      	.DW  0x0D
0004da 05a1      	.DW  _0x15A
0004db 085f      	.DW  _0x0*2+29
                 
0004dc 000d      	.DW  0x0D
0004dd 05ae      	.DW  _0x15A+13
0004de 085f      	.DW  _0x0*2+29
                 
0004df 0003      	.DW  0x03
0004e0 05bb      	.DW  _0x15A+26
0004e1 08bc      	.DW  _0x0*2+122
                 
0004e2 0005      	.DW  0x05
0004e3 05be      	.DW  _0x1CC
0004e4 090a      	.DW  _0x0*2+200
                 
0004e5 0006      	.DW  0x06
0004e6 05c3      	.DW  _0x1CC+5
0004e7 090f      	.DW  _0x0*2+205
                 
0004e8 0006      	.DW  0x06
0004e9 05c9      	.DW  _0x1CC+11
0004ea 0855      	.DW  _0x0*2+19
                 
0004eb 0007      	.DW  0x07
0004ec 05cf      	.DW  _0x202
0004ed 0915      	.DW  _0x0*2+211
                 
0004ee 0007      	.DW  0x07
0004ef 05d6      	.DW  _0x202+7
0004f0 0915      	.DW  _0x0*2+211
                 
0004f1 0007      	.DW  0x07
0004f2 05dd      	.DW  _0x202+14
0004f3 0915      	.DW  _0x0*2+211
                 
0004f4 0007      	.DW  0x07
0004f5 05e4      	.DW  _0x202+21
0004f6 0865      	.DW  _0x0*2+35
                 
0004f7 0007      	.DW  0x07
0004f8 05eb      	.DW  _0x202+28
0004f9 0865      	.DW  _0x0*2+35
                 
0004fa 0007      	.DW  0x07
0004fb 05f2      	.DW  _0x202+35
0004fc 0865      	.DW  _0x0*2+35
                 
                 _0xFFFFFFFF:
0004fd 0000      	.DW  0
                 
                 __RESET:
0004fe 94f8      	CLI
0004ff 27ee      	CLR  R30
000500 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000501 e0f1      	LDI  R31,1
000502 bff5      	OUT  MCUCR,R31
000503 bfe5      	OUT  MCUCR,R30
000504 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000506 e1f8      	LDI  R31,0x18
000507 bdf1      	OUT  WDTCR,R31
000508 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000509 e08d      	LDI  R24,(14-2)+1
00050a e0a2      	LDI  R26,2
00050b 27bb      	CLR  R27
                 __CLEAR_REG:
00050c 93ed      	ST   X+,R30
00050d 958a      	DEC  R24
00050e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00050f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000510 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000511 e0a0      	LDI  R26,LOW(__SRAM_START)
000512 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000513 93ed      	ST   X+,R30
000514 9701      	SBIW R24,1
000515 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000516 e1ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000517 e0f9      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000518 9185      	LPM  R24,Z+
000519 9195      	LPM  R25,Z+
00051a 9700      	SBIW R24,0
00051b f061      	BREQ __GLOBAL_INI_END
00051c 91a5      	LPM  R26,Z+
00051d 91b5      	LPM  R27,Z+
00051e 9005      	LPM  R0,Z+
00051f 9015      	LPM  R1,Z+
000520 01bf      	MOVW R22,R30
000521 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000522 9005      	LPM  R0,Z+
000523 920d      	ST   X+,R0
000524 9701      	SBIW R24,1
000525 f7e1      	BRNE __GLOBAL_INI_LOOP
000526 01fb      	MOVW R30,R22
000527 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000528 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000529 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00052a bfed      	OUT  SPL,R30
00052b e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00052c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00052d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00052e e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00052f 940c 13e4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;void SSD1963_PortInit(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _SSD1963_PortInit:
                 ;    //SSD1963_PORT
                 ;    DDRA = 0xFF;
000531 efef      	LDI  R30,LOW(255)
000532 bbea      	OUT  0x1A,R30
                 ;    DDRC = 0xFF;
000533 bbe4      	OUT  0x14,R30
                 ;    //SSD1963 76543210
                 ;    DDRD |= 0b11100000;
000534 b3e1      	IN   R30,0x11
000535 6ee0      	ORI  R30,LOW(0xE0)
000536 bbe1      	OUT  0x11,R30
                 ;    DDRE |= 0b10100000;
000537 b1e2      	IN   R30,0x2
000538 6ae0      	ORI  R30,LOW(0xA0)
000539 b9e2      	OUT  0x2,R30
                 ;}
00053a 9508      	RET
                 ;
                 ;#pragma used+
                 ;
                 ;unsigned char RotateByte(unsigned char Value)
                 ;{
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
00053b 940e 1643 	CALL SUBOPT_0x0
00053d 95f5      	ASR  R31
00053e 95e7      	ROR  R30
00053f 75e5      	ANDI R30,LOW(0x55)
000540 2fae      	MOV  R26,R30
000541 81e8      	LD   R30,Y
000542 0fee      	LSL  R30
000543 7aea      	ANDI R30,LOW(0xAA)
000544 2bea      	OR   R30,R26
000545 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
000546 940e 1643 	CALL SUBOPT_0x0
000548 940e 1aa8 	CALL __ASRW2
00054a 73e3      	ANDI R30,LOW(0x33)
00054b 2fae      	MOV  R26,R30
00054c 81e8      	LD   R30,Y
00054d 0fee      	LSL  R30
00054e 0fee      	LSL  R30
00054f 7cec      	ANDI R30,LOW(0xCC)
000550 2bea      	OR   R30,R26
000551 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
000552 940e 1643 	CALL SUBOPT_0x0
000554 940e 1aa4 	CALL __ASRW4
000556 70ef      	ANDI R30,LOW(0xF)
000557 2fae      	MOV  R26,R30
000558 81e8      	LD   R30,Y
000559 95e2      	SWAP R30
00055a 7fe0      	ANDI R30,LOW(0xF0)
00055b 2bea      	OR   R30,R26
00055c 83e8      	ST   Y,R30
                 ;  return Value;
00055d c023      	RJMP _0x208000C
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
00055e 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
00055f 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
000560 940e 1646 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
000562 981d      	CBI  0x3,5
                 ;  delay_ms(100);
000563 940e 1646 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
000565 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
000566 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
000567 940e 1646 	CALL SUBOPT_0x1
                 ;}
000569 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
00056a 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
00056b 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
00056c 940e 164c 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
00056e 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00056f 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000570 9896      	CBI  0x12,6
                 ;  #asm("nop")
000571 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000572 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000573 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000574 0000      	nop
000575 c00b      	RJMP _0x208000B
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
000576 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000577 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
000578 940e 164c 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
00057a 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00057b 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00057c 9896      	CBI  0x12,6
                 ;  #asm("nop")
00057d 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00057e 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
00057f 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000580 0000      	nop
                 _0x208000B:
                 ;} // SSD1963_Writedata
                 _0x208000C:
000581 9621      	ADIW R28,1
000582 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000583 931a      	ST   -Y,R17
000584 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
000585 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
000586 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
000587 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000588 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
000589 bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
00058a bb05      	OUT  0x15,R16
                 ;  #asm("nop")
00058b 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00058c 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00058d 9896      	CBI  0x12,6
                 ;  #asm("nop")
00058e 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
00058f 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000590 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000591 0000      	nop
                 ;} // SSD1963_Writedata
000592 8119      	LDD  R17,Y+1
000593 8108      	LDD  R16,Y+0
000594 9624      	ADIW R28,4
000595 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_PortInit();
000596 df9a      	RCALL _SSD1963_PortInit
                 ;  SSD1963_Reset();
000597 dfc6      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
000598 940e 1654 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
00059a 940e 1654 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
00059c 940e 1654 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
00059e 940e 1658 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
0005a0 eee2      	LDI  R30,LOW(226)
0005a1 93ea      	ST   -Y,R30
0005a2 dfc7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
0005a3 e2e3      	LDI  R30,LOW(35)
0005a4 93ea      	ST   -Y,R30
0005a5 dfd0      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
0005a6 e0e2      	LDI  R30,LOW(2)
0005a7 940e 165e 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
0005a9 eee0      	LDI  R30,LOW(224)
0005aa 940e 1665 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
0005ac 940e 166c 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
0005ae eee0      	LDI  R30,LOW(224)
0005af 940e 1672 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
0005b1 940e 1654 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
0005b3 e7e8      	LDI  R30,LOW(120)
0005b4 e0f0      	LDI  R31,HIGH(120)
0005b5 940e 1679 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
0005b7 eee6      	LDI  R30,LOW(230)
0005b8 940e 1665 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
0005ba edea      	LDI  R30,LOW(218)
0005bb 93ea      	ST   -Y,R30
0005bc dfb9      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
0005bd e7e3      	LDI  R30,LOW(115)
0005be 93ea      	ST   -Y,R30
0005bf dfb6      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
0005c0 ebe0      	LDI  R30,LOW(176)
0005c1 93ea      	ST   -Y,R30
0005c2 dfa7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
0005c3 e2e4      	LDI  R30,LOW(36)
0005c4 940e 167d 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
0005c6 940e 1684 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
0005c8 edef      	LDI  R30,LOW(223)
0005c9 940e 1688 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
0005cb e0ef      	LDI  R30,LOW(15)
0005cc 940e 167d 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
0005ce ebe4      	LDI  R30,LOW(180)
0005cf 940e 1672 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
0005d1 e8e4      	LDI  R30,LOW(132)
0005d2 940e 167d 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
0005d4 e5ea      	LDI  R30,LOW(90)
0005d5 93ea      	ST   -Y,R30
0005d6 df9f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
0005d7 e0ea      	LDI  R30,LOW(10)
0005d8 940e 167d 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
0005da e0e8      	LDI  R30,LOW(8)
0005db 940e 167d 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
0005dd ebe6      	LDI  R30,LOW(182)
0005de 940e 1665 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
0005e0 e2ec      	LDI  R30,LOW(44)
0005e1 940e 167d 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
0005e3 e0ec      	LDI  R30,LOW(12)
0005e4 93ea      	ST   -Y,R30
0005e5 df90      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
0005e6 e0ea      	LDI  R30,LOW(10)
0005e7 93ea      	ST   -Y,R30
0005e8 df8d      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
0005e9 e0e0      	LDI  R30,LOW(0)
0005ea 940e 165e 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
0005ec ebea      	LDI  R30,LOW(186)
0005ed 93ea      	ST   -Y,R30
0005ee df7b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
0005ef e0ef      	LDI  R30,LOW(15)
0005f0 93ea      	ST   -Y,R30
0005f1 df84      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
0005f2 ebe8      	LDI  R30,LOW(184)
0005f3 93ea      	ST   -Y,R30
0005f4 df75      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
0005f5 e0e7      	LDI  R30,LOW(7)
0005f6 940e 1688 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
0005f8 e3e6      	LDI  R30,LOW(54)
0005f9 940e 1672 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
0005fb ebec      	LDI  R30,LOW(188)
0005fc 93ea      	ST   -Y,R30
0005fd df6c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
0005fe e5e0      	LDI  R30,LOW(80)
0005ff 93ea      	ST   -Y,R30
000600 df75      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
000601 e9e0      	LDI  R30,LOW(144)
000602 93ea      	ST   -Y,R30
000603 df72      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
000604 e5e0      	LDI  R30,LOW(80)
000605 940e 1688 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
000607 efe0      	LDI  R30,LOW(240)
000608 940e 1672 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
00060a e0e5      	LDI  R30,LOW(5)
00060b e0f0      	LDI  R31,HIGH(5)
00060c 940e 1679 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
00060e e2e9      	LDI  R30,LOW(41)
00060f 93ea      	ST   -Y,R30
000610 df59      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
000611 ede0      	LDI  R30,LOW(208)
000612 93ea      	ST   -Y,R30
000613 df56      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
000614 e0ed      	LDI  R30,LOW(13)
000615 93ea      	ST   -Y,R30
000616 df5f      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
000617 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
000618 e2ea      	LDI  R30,LOW(42)
000619 93ea      	ST   -Y,R30
00061a df4f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
00061b 81ef      	LDD  R30,Y+7
00061c 93ea      	ST   -Y,R30
00061d df58      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
00061e 81ee      	LDD  R30,Y+6
00061f 93ea      	ST   -Y,R30
000620 df55      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
000621 81ed      	LDD  R30,Y+5
000622 93ea      	ST   -Y,R30
000623 df52      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
000624 81ec      	LDD  R30,Y+4
000625 93ea      	ST   -Y,R30
000626 df4f      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
000627 e2eb      	LDI  R30,LOW(43)
000628 93ea      	ST   -Y,R30
000629 df40      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
00062a 81eb      	LDD  R30,Y+3
00062b 93ea      	ST   -Y,R30
00062c df49      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
00062d 81ea      	LDD  R30,Y+2
00062e 93ea      	ST   -Y,R30
00062f df46      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
000630 81e9      	LDD  R30,Y+1
000631 93ea      	ST   -Y,R30
000632 df43      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
000633 81e8      	LD   R30,Y
000634 93ea      	ST   -Y,R30
000635 df40      	RCALL _SSD1963_WriteData_b8
                 ;}
000636 9628      	ADIW R28,8
000637 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
000638 940e 1b87 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
00063a e2e8      	LDI  R30,LOW(40)
00063b 93ea      	ST   -Y,R30
00063c df2d      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
00063d 940e 168c 	CALL SUBOPT_0xD
00063f edef      	LDI  R30,LOW(479)
000640 e0f1      	LDI  R31,HIGH(479)
000641 940e 1691 	CALL SUBOPT_0xE
000643 e0ef      	LDI  R30,LOW(271)
000644 e0f1      	LDI  R31,HIGH(271)
000645 940e 1694 	CALL SUBOPT_0xF
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
000647 e000     +LDI R16 , LOW ( 0 )
000648 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x31:
                +
000649 3100     +CPI R16 , LOW ( 272 )
00064a e0e1     +LDI R30 , HIGH ( 272 )
00064b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
00064c f480      	BRSH _0x33
                 ;  {
                 ;    y=0;
                +
00064d e020     +LDI R18 , LOW ( 0 )
00064e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x34:
                +
00064f 3e20     +CPI R18 , LOW ( 480 )
000650 e0e1     +LDI R30 , HIGH ( 480 )
000651 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
000652 f438      	BRSH _0x36
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
000653 81ec      	LDD  R30,Y+4
000654 81fd      	LDD  R31,Y+4+1
000655 940e 169c 	CALL SUBOPT_0x10
                 ;      y++;
                +
000657 5f2f     +SUBI R18 , LOW ( - 1 )
000658 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
000659 cff5      	RJMP _0x34
                 _0x36:
                 ;  x++;
                +
00065a 5f0f     +SUBI R16 , LOW ( - 1 )
00065b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
00065c cfec      	RJMP _0x31
                 _0x33:
                 ;  SSD1963_WriteCmd(0x29);
00065d e2e9      	LDI  R30,LOW(41)
00065e 93ea      	ST   -Y,R30
00065f df0a      	RCALL _SSD1963_WriteCmd
                 ;}
000660 940e 1b8e 	CALL __LOADLOCR4
000662 9626      	ADIW R28,6
000663 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
000664 931a      	ST   -Y,R17
000665 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
000666 940e 16a0 	CALL SUBOPT_0x11
000668 85aa      	LDD  R26,Y+10
000669 85bb      	LDD  R27,Y+10+1
00066a 9650      	ADIW R26,16
00066b 9711      	SBIW R26,1
00066c 93ba      	ST   -Y,R27
00066d 93aa      	ST   -Y,R26
00066e 940e 16a5 	CALL SUBOPT_0x12
000670 85ac      	LDD  R26,Y+12
000671 85bd      	LDD  R27,Y+12+1
000672 9650      	ADIW R26,16
000673 9711      	SBIW R26,1
000674 93ba      	ST   -Y,R27
000675 93aa      	ST   -Y,R26
000676 dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
000677 e2ec      	LDI  R30,LOW(44)
000678 93ea      	ST   -Y,R30
000679 def0      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
00067a e010      	LDI  R17,LOW(0)
                 _0x38:
00067b 3210      	CPI  R17,32
00067c f4e8      	BRSH _0x39
                 ;  {
                 ;    for (j = 0; j < 8; j++)
00067d e000      	LDI  R16,LOW(0)
                 _0x3B:
00067e 3008      	CPI  R16,8
00067f f4c0      	BRSH _0x3C
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
000680 2fe1      	MOV  R30,R17
000681 85aa      	LDD  R26,Y+10
000682 85bb      	LDD  R27,Y+10+1
000683 e0f0      	LDI  R31,0
000684 0fea      	ADD  R30,R26
000685 1ffb      	ADC  R31,R27
000686 9014      	LPM  R1,Z
000687 2fe0      	MOV  R30,R16
000688 e8a0      	LDI  R26,LOW(128)
000689 940e 1a9c 	CALL __LSRB12
00068b 21e1      	AND  R30,R1
00068c 30e1      	CPI  R30,LOW(0x1)
00068d f018      	BRLO _0x3D
00068e 81ec      	LDD  R30,Y+4
00068f 81fd      	LDD  R31,Y+4+1
000690 c002      	RJMP _0x209
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3D:
000691 81ea      	LDD  R30,Y+2
000692 81fb      	LDD  R31,Y+2+1
                 _0x209:
000693 93fa      	ST   -Y,R31
000694 93ea      	ST   -Y,R30
000695 deed      	RCALL _SSD1963_WriteData_b16
                 ;    }
000696 5f0f      	SUBI R16,-1
000697 cfe6      	RJMP _0x3B
                 _0x3C:
                 ;  }
000698 5f1f      	SUBI R17,-1
000699 cfe1      	RJMP _0x38
                 _0x39:
                 ;}
00069a 8119      	LDD  R17,Y+1
00069b 8108      	LDD  R16,Y+0
00069c c332      	RJMP _0x208000A
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
00069d 940e 16aa 	CALL SUBOPT_0x13
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
00069f 33e0      	CPI  R30,LOW(0x30)
0006a0 e0a0      	LDI  R26,HIGH(0x30)
0006a1 07fa      	CPC  R31,R26
0006a2 f419      	BRNE _0x42
0006a3 e0ec      	LDI  R30,LOW(_S_48*2)
0006a4 e0f1      	LDI  R31,HIGH(_S_48*2)
0006a5 c18e      	RJMP _0x20A
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x42:
0006a6 33e1      	CPI  R30,LOW(0x31)
0006a7 e0a0      	LDI  R26,HIGH(0x31)
0006a8 07fa      	CPC  R31,R26
0006a9 f419      	BRNE _0x43
0006aa e2ec      	LDI  R30,LOW(_S_49*2)
0006ab e0f1      	LDI  R31,HIGH(_S_49*2)
0006ac c187      	RJMP _0x20A
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x43:
0006ad 33e2      	CPI  R30,LOW(0x32)
0006ae e0a0      	LDI  R26,HIGH(0x32)
0006af 07fa      	CPC  R31,R26
0006b0 f419      	BRNE _0x44
0006b1 e4ec      	LDI  R30,LOW(_S_50*2)
0006b2 e0f1      	LDI  R31,HIGH(_S_50*2)
0006b3 c180      	RJMP _0x20A
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x44:
0006b4 33e3      	CPI  R30,LOW(0x33)
0006b5 e0a0      	LDI  R26,HIGH(0x33)
0006b6 07fa      	CPC  R31,R26
0006b7 f419      	BRNE _0x45
0006b8 e6ec      	LDI  R30,LOW(_S_51*2)
0006b9 e0f1      	LDI  R31,HIGH(_S_51*2)
0006ba c179      	RJMP _0x20A
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x45:
0006bb 33e4      	CPI  R30,LOW(0x34)
0006bc e0a0      	LDI  R26,HIGH(0x34)
0006bd 07fa      	CPC  R31,R26
0006be f419      	BRNE _0x46
0006bf e8ec      	LDI  R30,LOW(_S_52*2)
0006c0 e0f1      	LDI  R31,HIGH(_S_52*2)
0006c1 c172      	RJMP _0x20A
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x46:
0006c2 33e5      	CPI  R30,LOW(0x35)
0006c3 e0a0      	LDI  R26,HIGH(0x35)
0006c4 07fa      	CPC  R31,R26
0006c5 f419      	BRNE _0x47
0006c6 eaec      	LDI  R30,LOW(_S_53*2)
0006c7 e0f1      	LDI  R31,HIGH(_S_53*2)
0006c8 c16b      	RJMP _0x20A
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x47:
0006c9 33e6      	CPI  R30,LOW(0x36)
0006ca e0a0      	LDI  R26,HIGH(0x36)
0006cb 07fa      	CPC  R31,R26
0006cc f419      	BRNE _0x48
0006cd ecec      	LDI  R30,LOW(_S_54*2)
0006ce e0f1      	LDI  R31,HIGH(_S_54*2)
0006cf c164      	RJMP _0x20A
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x48:
0006d0 33e7      	CPI  R30,LOW(0x37)
0006d1 e0a0      	LDI  R26,HIGH(0x37)
0006d2 07fa      	CPC  R31,R26
0006d3 f419      	BRNE _0x49
0006d4 eeec      	LDI  R30,LOW(_S_55*2)
0006d5 e0f1      	LDI  R31,HIGH(_S_55*2)
0006d6 c15d      	RJMP _0x20A
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x49:
0006d7 33e8      	CPI  R30,LOW(0x38)
0006d8 e0a0      	LDI  R26,HIGH(0x38)
0006d9 07fa      	CPC  R31,R26
0006da f419      	BRNE _0x4A
0006db e0ec      	LDI  R30,LOW(_S_56*2)
0006dc e0f2      	LDI  R31,HIGH(_S_56*2)
0006dd c156      	RJMP _0x20A
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4A:
0006de 33e9      	CPI  R30,LOW(0x39)
0006df e0a0      	LDI  R26,HIGH(0x39)
0006e0 07fa      	CPC  R31,R26
0006e1 f419      	BRNE _0x4B
0006e2 e2ec      	LDI  R30,LOW(_S_57*2)
0006e3 e0f2      	LDI  R31,HIGH(_S_57*2)
0006e4 c14f      	RJMP _0x20A
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4B:
0006e5 32e1      	CPI  R30,LOW(0x21)
0006e6 e0a0      	LDI  R26,HIGH(0x21)
0006e7 07fa      	CPC  R31,R26
0006e8 f419      	BRNE _0x4C
0006e9 e6ec      	LDI  R30,LOW(_S_33*2)
0006ea e0f2      	LDI  R31,HIGH(_S_33*2)
0006eb c148      	RJMP _0x20A
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4C:
0006ec 32e8      	CPI  R30,LOW(0x28)
0006ed e0a0      	LDI  R26,HIGH(0x28)
0006ee 07fa      	CPC  R31,R26
0006ef f419      	BRNE _0x4D
0006f0 e8ec      	LDI  R30,LOW(_S_40*2)
0006f1 e0f2      	LDI  R31,HIGH(_S_40*2)
0006f2 c141      	RJMP _0x20A
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4D:
0006f3 32e9      	CPI  R30,LOW(0x29)
0006f4 e0a0      	LDI  R26,HIGH(0x29)
0006f5 07fa      	CPC  R31,R26
0006f6 f419      	BRNE _0x4E
0006f7 eaec      	LDI  R30,LOW(_S_41*2)
0006f8 e0f2      	LDI  R31,HIGH(_S_41*2)
0006f9 c13a      	RJMP _0x20A
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x4E:
0006fa 32ef      	CPI  R30,LOW(0x2F)
0006fb e0a0      	LDI  R26,HIGH(0x2F)
0006fc 07fa      	CPC  R31,R26
0006fd f419      	BRNE _0x4F
0006fe ecec      	LDI  R30,LOW(_S_47*2)
0006ff e0f2      	LDI  R31,HIGH(_S_47*2)
000700 c133      	RJMP _0x20A
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x4F:
000701 33ea      	CPI  R30,LOW(0x3A)
000702 e0a0      	LDI  R26,HIGH(0x3A)
000703 07fa      	CPC  R31,R26
000704 f419      	BRNE _0x50
000705 e2ec      	LDI  R30,LOW(_S_58*2)
000706 e0f3      	LDI  R31,HIGH(_S_58*2)
000707 c12c      	RJMP _0x20A
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x50:
000708 33ec      	CPI  R30,LOW(0x3C)
000709 e0a0      	LDI  R26,HIGH(0x3C)
00070a 07fa      	CPC  R31,R26
00070b f419      	BRNE _0x51
00070c e4ec      	LDI  R30,LOW(_S_60*2)
00070d e0f3      	LDI  R31,HIGH(_S_60*2)
00070e c125      	RJMP _0x20A
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x51:
00070f 33ed      	CPI  R30,LOW(0x3D)
000710 e0a0      	LDI  R26,HIGH(0x3D)
000711 07fa      	CPC  R31,R26
000712 f419      	BRNE _0x52
000713 e6ec      	LDI  R30,LOW(_S_61*2)
000714 e0f3      	LDI  R31,HIGH(_S_61*2)
000715 c11e      	RJMP _0x20A
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x52:
000716 33ee      	CPI  R30,LOW(0x3E)
000717 e0a0      	LDI  R26,HIGH(0x3E)
000718 07fa      	CPC  R31,R26
000719 f419      	BRNE _0x53
00071a e8ec      	LDI  R30,LOW(_S_62*2)
00071b e0f3      	LDI  R31,HIGH(_S_62*2)
00071c c117      	RJMP _0x20A
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x53:
00071d 33ef      	CPI  R30,LOW(0x3F)
00071e e0a0      	LDI  R26,HIGH(0x3F)
00071f 07fa      	CPC  R31,R26
000720 f419      	BRNE _0x54
000721 eaec      	LDI  R30,LOW(_S_63*2)
000722 e0f3      	LDI  R31,HIGH(_S_63*2)
000723 c110      	RJMP _0x20A
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x54:
000724 32eb      	CPI  R30,LOW(0x2B)
000725 e0a0      	LDI  R26,HIGH(0x2B)
000726 07fa      	CPC  R31,R26
000727 f419      	BRNE _0x55
000728 eeec      	LDI  R30,LOW(_S_43*2)
000729 e0f2      	LDI  R31,HIGH(_S_43*2)
00072a c109      	RJMP _0x20A
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x55:
00072b 32ed      	CPI  R30,LOW(0x2D)
00072c e0a0      	LDI  R26,HIGH(0x2D)
00072d 07fa      	CPC  R31,R26
00072e f419      	BRNE _0x56
00072f e0ec      	LDI  R30,LOW(_S_45*2)
000730 e0f3      	LDI  R31,HIGH(_S_45*2)
000731 c102      	RJMP _0x20A
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x56:
000732 3ce0      	CPI  R30,LOW(0xC0)
000733 e0a0      	LDI  R26,HIGH(0xC0)
000734 07fa      	CPC  R31,R26
000735 f419      	BRNE _0x57
000736 ecec      	LDI  R30,LOW(_S_192*2)
000737 e0f3      	LDI  R31,HIGH(_S_192*2)
000738 c0fb      	RJMP _0x20A
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x57:
000739 3ce1      	CPI  R30,LOW(0xC1)
00073a e0a0      	LDI  R26,HIGH(0xC1)
00073b 07fa      	CPC  R31,R26
00073c f419      	BRNE _0x58
00073d eeec      	LDI  R30,LOW(_S_193*2)
00073e e0f3      	LDI  R31,HIGH(_S_193*2)
00073f c0f4      	RJMP _0x20A
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x58:
000740 3ce2      	CPI  R30,LOW(0xC2)
000741 e0a0      	LDI  R26,HIGH(0xC2)
000742 07fa      	CPC  R31,R26
000743 f419      	BRNE _0x59
000744 e0ec      	LDI  R30,LOW(_S_194*2)
000745 e0f4      	LDI  R31,HIGH(_S_194*2)
000746 c0ed      	RJMP _0x20A
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x59:
000747 3ce3      	CPI  R30,LOW(0xC3)
000748 e0a0      	LDI  R26,HIGH(0xC3)
000749 07fa      	CPC  R31,R26
00074a f419      	BRNE _0x5A
00074b e2ec      	LDI  R30,LOW(_S_195*2)
00074c e0f4      	LDI  R31,HIGH(_S_195*2)
00074d c0e6      	RJMP _0x20A
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5A:
00074e 3ce4      	CPI  R30,LOW(0xC4)
00074f e0a0      	LDI  R26,HIGH(0xC4)
000750 07fa      	CPC  R31,R26
000751 f419      	BRNE _0x5B
000752 e4ec      	LDI  R30,LOW(_S_196*2)
000753 e0f4      	LDI  R31,HIGH(_S_196*2)
000754 c0df      	RJMP _0x20A
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5B:
000755 3ce5      	CPI  R30,LOW(0xC5)
000756 e0a0      	LDI  R26,HIGH(0xC5)
000757 07fa      	CPC  R31,R26
000758 f419      	BRNE _0x5C
000759 e6ec      	LDI  R30,LOW(_S_197*2)
00075a e0f4      	LDI  R31,HIGH(_S_197*2)
00075b c0d8      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5C:
00075c 3ce6      	CPI  R30,LOW(0xC6)
00075d e0a0      	LDI  R26,HIGH(0xC6)
00075e 07fa      	CPC  R31,R26
00075f f419      	BRNE _0x5D
000760 e8ec      	LDI  R30,LOW(_S_198*2)
000761 e0f4      	LDI  R31,HIGH(_S_198*2)
000762 c0d1      	RJMP _0x20A
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5D:
000763 3ce7      	CPI  R30,LOW(0xC7)
000764 e0a0      	LDI  R26,HIGH(0xC7)
000765 07fa      	CPC  R31,R26
000766 f419      	BRNE _0x5E
000767 eaec      	LDI  R30,LOW(_S_199*2)
000768 e0f4      	LDI  R31,HIGH(_S_199*2)
000769 c0ca      	RJMP _0x20A
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x5E:
00076a 3ce8      	CPI  R30,LOW(0xC8)
00076b e0a0      	LDI  R26,HIGH(0xC8)
00076c 07fa      	CPC  R31,R26
00076d f419      	BRNE _0x5F
00076e ecec      	LDI  R30,LOW(_S_200*2)
00076f e0f4      	LDI  R31,HIGH(_S_200*2)
000770 c0c3      	RJMP _0x20A
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x5F:
000771 3ce9      	CPI  R30,LOW(0xC9)
000772 e0a0      	LDI  R26,HIGH(0xC9)
000773 07fa      	CPC  R31,R26
000774 f419      	BRNE _0x60
000775 eeec      	LDI  R30,LOW(_S_201*2)
000776 e0f4      	LDI  R31,HIGH(_S_201*2)
000777 c0bc      	RJMP _0x20A
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x60:
000778 3cea      	CPI  R30,LOW(0xCA)
000779 e0a0      	LDI  R26,HIGH(0xCA)
00077a 07fa      	CPC  R31,R26
00077b f419      	BRNE _0x61
00077c e0ec      	LDI  R30,LOW(_S_202*2)
00077d e0f5      	LDI  R31,HIGH(_S_202*2)
00077e c0b5      	RJMP _0x20A
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x61:
00077f 3ceb      	CPI  R30,LOW(0xCB)
000780 e0a0      	LDI  R26,HIGH(0xCB)
000781 07fa      	CPC  R31,R26
000782 f419      	BRNE _0x62
000783 e2ec      	LDI  R30,LOW(_S_203*2)
000784 e0f5      	LDI  R31,HIGH(_S_203*2)
000785 c0ae      	RJMP _0x20A
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x62:
000786 3cec      	CPI  R30,LOW(0xCC)
000787 e0a0      	LDI  R26,HIGH(0xCC)
000788 07fa      	CPC  R31,R26
000789 f419      	BRNE _0x63
00078a e4ec      	LDI  R30,LOW(_S_204*2)
00078b e0f5      	LDI  R31,HIGH(_S_204*2)
00078c c0a7      	RJMP _0x20A
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x63:
00078d 3ced      	CPI  R30,LOW(0xCD)
00078e e0a0      	LDI  R26,HIGH(0xCD)
00078f 07fa      	CPC  R31,R26
000790 f419      	BRNE _0x64
000791 e6ec      	LDI  R30,LOW(_S_205*2)
000792 e0f5      	LDI  R31,HIGH(_S_205*2)
000793 c0a0      	RJMP _0x20A
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x64:
000794 3cee      	CPI  R30,LOW(0xCE)
000795 e0a0      	LDI  R26,HIGH(0xCE)
000796 07fa      	CPC  R31,R26
000797 f419      	BRNE _0x65
000798 e8ec      	LDI  R30,LOW(_S_206*2)
000799 e0f5      	LDI  R31,HIGH(_S_206*2)
00079a c099      	RJMP _0x20A
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x65:
00079b 3cef      	CPI  R30,LOW(0xCF)
00079c e0a0      	LDI  R26,HIGH(0xCF)
00079d 07fa      	CPC  R31,R26
00079e f419      	BRNE _0x66
00079f eaec      	LDI  R30,LOW(_S_207*2)
0007a0 e0f5      	LDI  R31,HIGH(_S_207*2)
0007a1 c092      	RJMP _0x20A
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x66:
0007a2 3de0      	CPI  R30,LOW(0xD0)
0007a3 e0a0      	LDI  R26,HIGH(0xD0)
0007a4 07fa      	CPC  R31,R26
0007a5 f419      	BRNE _0x67
0007a6 ecec      	LDI  R30,LOW(_S_208*2)
0007a7 e0f5      	LDI  R31,HIGH(_S_208*2)
0007a8 c08b      	RJMP _0x20A
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x67:
0007a9 3de1      	CPI  R30,LOW(0xD1)
0007aa e0a0      	LDI  R26,HIGH(0xD1)
0007ab 07fa      	CPC  R31,R26
0007ac f419      	BRNE _0x68
0007ad eeec      	LDI  R30,LOW(_S_209*2)
0007ae e0f5      	LDI  R31,HIGH(_S_209*2)
0007af c084      	RJMP _0x20A
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x68:
0007b0 3de2      	CPI  R30,LOW(0xD2)
0007b1 e0a0      	LDI  R26,HIGH(0xD2)
0007b2 07fa      	CPC  R31,R26
0007b3 f419      	BRNE _0x69
0007b4 e0ec      	LDI  R30,LOW(_S_210*2)
0007b5 e0f6      	LDI  R31,HIGH(_S_210*2)
0007b6 c07d      	RJMP _0x20A
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x69:
0007b7 3de3      	CPI  R30,LOW(0xD3)
0007b8 e0a0      	LDI  R26,HIGH(0xD3)
0007b9 07fa      	CPC  R31,R26
0007ba f419      	BRNE _0x6A
0007bb e2ec      	LDI  R30,LOW(_S_211*2)
0007bc e0f6      	LDI  R31,HIGH(_S_211*2)
0007bd c076      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6A:
0007be 3de4      	CPI  R30,LOW(0xD4)
0007bf e0a0      	LDI  R26,HIGH(0xD4)
0007c0 07fa      	CPC  R31,R26
0007c1 f419      	BRNE _0x6B
0007c2 e4ec      	LDI  R30,LOW(_S_212*2)
0007c3 e0f6      	LDI  R31,HIGH(_S_212*2)
0007c4 c06f      	RJMP _0x20A
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6B:
0007c5 3de5      	CPI  R30,LOW(0xD5)
0007c6 e0a0      	LDI  R26,HIGH(0xD5)
0007c7 07fa      	CPC  R31,R26
0007c8 f419      	BRNE _0x6C
0007c9 e6ec      	LDI  R30,LOW(_S_213*2)
0007ca e0f6      	LDI  R31,HIGH(_S_213*2)
0007cb c068      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6C:
0007cc 3de6      	CPI  R30,LOW(0xD6)
0007cd e0a0      	LDI  R26,HIGH(0xD6)
0007ce 07fa      	CPC  R31,R26
0007cf f419      	BRNE _0x6D
0007d0 e8ec      	LDI  R30,LOW(_S_214*2)
0007d1 e0f6      	LDI  R31,HIGH(_S_214*2)
0007d2 c061      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6D:
0007d3 3de7      	CPI  R30,LOW(0xD7)
0007d4 e0a0      	LDI  R26,HIGH(0xD7)
0007d5 07fa      	CPC  R31,R26
0007d6 f419      	BRNE _0x6E
0007d7 eaec      	LDI  R30,LOW(_S_215*2)
0007d8 e0f6      	LDI  R31,HIGH(_S_215*2)
0007d9 c05a      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x6E:
0007da 3de8      	CPI  R30,LOW(0xD8)
0007db e0a0      	LDI  R26,HIGH(0xD8)
0007dc 07fa      	CPC  R31,R26
0007dd f419      	BRNE _0x6F
0007de ecec      	LDI  R30,LOW(_S_216*2)
0007df e0f6      	LDI  R31,HIGH(_S_216*2)
0007e0 c053      	RJMP _0x20A
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x6F:
0007e1 3de9      	CPI  R30,LOW(0xD9)
0007e2 e0a0      	LDI  R26,HIGH(0xD9)
0007e3 07fa      	CPC  R31,R26
0007e4 f419      	BRNE _0x70
0007e5 eeec      	LDI  R30,LOW(_S_217*2)
0007e6 e0f6      	LDI  R31,HIGH(_S_217*2)
0007e7 c04c      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x70:
0007e8 3dea      	CPI  R30,LOW(0xDA)
0007e9 e0a0      	LDI  R26,HIGH(0xDA)
0007ea 07fa      	CPC  R31,R26
0007eb f419      	BRNE _0x71
0007ec e0ec      	LDI  R30,LOW(_S_218*2)
0007ed e0f7      	LDI  R31,HIGH(_S_218*2)
0007ee c045      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x71:
0007ef 3deb      	CPI  R30,LOW(0xDB)
0007f0 e0a0      	LDI  R26,HIGH(0xDB)
0007f1 07fa      	CPC  R31,R26
0007f2 f419      	BRNE _0x72
0007f3 e2ec      	LDI  R30,LOW(_S_219*2)
0007f4 e0f7      	LDI  R31,HIGH(_S_219*2)
0007f5 c03e      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x72:
0007f6 3dec      	CPI  R30,LOW(0xDC)
0007f7 e0a0      	LDI  R26,HIGH(0xDC)
0007f8 07fa      	CPC  R31,R26
0007f9 f419      	BRNE _0x73
0007fa e4ec      	LDI  R30,LOW(_S_220*2)
0007fb e0f7      	LDI  R31,HIGH(_S_220*2)
0007fc c037      	RJMP _0x20A
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x73:
0007fd 3ded      	CPI  R30,LOW(0xDD)
0007fe e0a0      	LDI  R26,HIGH(0xDD)
0007ff 07fa      	CPC  R31,R26
000800 f419      	BRNE _0x74
000801 e6ec      	LDI  R30,LOW(_S_221*2)
000802 e0f7      	LDI  R31,HIGH(_S_221*2)
000803 c030      	RJMP _0x20A
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x74:
000804 3dee      	CPI  R30,LOW(0xDE)
000805 e0a0      	LDI  R26,HIGH(0xDE)
000806 07fa      	CPC  R31,R26
000807 f419      	BRNE _0x75
000808 e8ec      	LDI  R30,LOW(_S_222*2)
000809 e0f7      	LDI  R31,HIGH(_S_222*2)
00080a c029      	RJMP _0x20A
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x75:
00080b 3def      	CPI  R30,LOW(0xDF)
00080c e0a0      	LDI  R26,HIGH(0xDF)
00080d 07fa      	CPC  R31,R26
00080e f419      	BRNE _0x76
00080f eaec      	LDI  R30,LOW(_S_223*2)
000810 e0f7      	LDI  R31,HIGH(_S_223*2)
000811 c022      	RJMP _0x20A
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x76:
000812 32ee      	CPI  R30,LOW(0x2E)
000813 e0a0      	LDI  R26,HIGH(0x2E)
000814 07fa      	CPC  R31,R26
000815 f419      	BRNE _0x77
000816 eaec      	LDI  R30,LOW(_S_46*2)
000817 e0f0      	LDI  R31,HIGH(_S_46*2)
000818 c01b      	RJMP _0x20A
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x77:
000819 32e0      	CPI  R30,LOW(0x20)
00081a e0a0      	LDI  R26,HIGH(0x20)
00081b 07fa      	CPC  R31,R26
00081c f419      	BRNE _0x78
00081d e4ec      	LDI  R30,LOW(_S_32*2)
00081e e0f2      	LDI  R31,HIGH(_S_32*2)
00081f c014      	RJMP _0x20A
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x78:
000820 30e1      	CPI  R30,LOW(0x1)
000821 e0a0      	LDI  R26,HIGH(0x1)
000822 07fa      	CPC  R31,R26
000823 f419      	BRNE _0x79
000824 ecec      	LDI  R30,LOW(_S_UP*2)
000825 e0f0      	LDI  R31,HIGH(_S_UP*2)
000826 c00d      	RJMP _0x20A
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x79:
000827 30e2      	CPI  R30,LOW(0x2)
000828 e0a0      	LDI  R26,HIGH(0x2)
000829 07fa      	CPC  R31,R26
00082a f419      	BRNE _0x7A
00082b eeec      	LDI  R30,LOW(_S_DOWN*2)
00082c e0f0      	LDI  R31,HIGH(_S_DOWN*2)
00082d c006      	RJMP _0x20A
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7A:
00082e 30e3      	CPI  R30,LOW(0x3)
00082f e0a0      	LDI  R26,HIGH(0x3)
000830 07fa      	CPC  R31,R26
000831 f469      	BRNE _0x41
000832 e8ec      	LDI  R30,LOW(_blank_symb*2)
000833 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x20A:
000834 93fa      	ST   -Y,R31
000835 93ea      	ST   -Y,R30
000836 940e 16a0 	CALL SUBOPT_0x11
000838 940e 16a0 	CALL SUBOPT_0x11
00083a 940e 16a0 	CALL SUBOPT_0x11
00083c 940e 16a0 	CALL SUBOPT_0x11
00083e de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x41:
                 ;}
00083f 9629      	ADIW R28,9
000840 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7C:
000841 85a8      	LDD  R26,Y+8
000842 85b9      	LDD  R27,Y+8+1
000843 91ec      	LD   R30,X
000844 30e0      	CPI  R30,0
000845 f099      	BREQ _0x7E
000846 91ed      	LD   R30,X+
000847 87a8      	STD  Y+8,R26
000848 87b9      	STD  Y+8+1,R27
000849 93ea      	ST   -Y,R30
00084a 940e 16ad 	CALL SUBOPT_0x14
00084c 940e 16ad 	CALL SUBOPT_0x14
00084e 940e 16ad 	CALL SUBOPT_0x14
000850 940e 16ad 	CALL SUBOPT_0x14
000852 de4a      	RCALL _SSD1963_PutChar16
000853 81ee      	LDD  R30,Y+6
000854 81ff      	LDD  R31,Y+6+1
000855 9670      	ADIW R30,16
000856 83ee      	STD  Y+6,R30
000857 83ff      	STD  Y+6+1,R31
000858 cfe8      	RJMP _0x7C
                 _0x7E:
                 ;}
000859 962a      	ADIW R28,10
00085a 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutValue16:
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
00085b 81ec      	LDD  R30,Y+4
00085c e0f0      	LDI  R31,0
                 ;  {
                 ;    case 5 :
00085d 30e5      	CPI  R30,LOW(0x5)
00085e e0a0      	LDI  R26,HIGH(0x5)
00085f 07fa      	CPC  R31,R26
000860 f499      	BRNE _0x82
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
000861 85a9      	LDD  R26,Y+9
000862 85ba      	LDD  R27,Y+9+1
000863 e1e0      	LDI  R30,LOW(10000)
000864 e2f7      	LDI  R31,HIGH(10000)
000865 940e 16b2 	CALL SUBOPT_0x15
000867 940e 16a0 	CALL SUBOPT_0x11
000869 940e 16ad 	CALL SUBOPT_0x14
00086b 940e 16ad 	CALL SUBOPT_0x14
00086d 940e 16b7 	CALL SUBOPT_0x16
                 ;      Value %= 10000;
00086f e1e0      	LDI  R30,LOW(10000)
000870 e2f7      	LDI  R31,HIGH(10000)
000871 940e 16bc 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
000873 c004      	RJMP _0x83
                 _0x82:
000874 30e4      	CPI  R30,LOW(0x4)
000875 e0a0      	LDI  R26,HIGH(0x4)
000876 07fa      	CPC  R31,R26
000877 f499      	BRNE _0x84
                 _0x83:
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
000878 85a9      	LDD  R26,Y+9
000879 85ba      	LDD  R27,Y+9+1
00087a eee8      	LDI  R30,LOW(1000)
00087b e0f3      	LDI  R31,HIGH(1000)
00087c 940e 16b2 	CALL SUBOPT_0x15
00087e 940e 16a0 	CALL SUBOPT_0x11
000880 940e 16ad 	CALL SUBOPT_0x14
000882 940e 16ad 	CALL SUBOPT_0x14
000884 940e 16b7 	CALL SUBOPT_0x16
                 ;      Value %= 1000;
000886 eee8      	LDI  R30,LOW(1000)
000887 e0f3      	LDI  R31,HIGH(1000)
000888 940e 16bc 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
00088a c004      	RJMP _0x85
                 _0x84:
00088b 30e3      	CPI  R30,LOW(0x3)
00088c e0a0      	LDI  R26,HIGH(0x3)
00088d 07fa      	CPC  R31,R26
00088e f499      	BRNE _0x86
                 _0x85:
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
00088f 85a9      	LDD  R26,Y+9
000890 85ba      	LDD  R27,Y+9+1
000891 e6e4      	LDI  R30,LOW(100)
000892 e0f0      	LDI  R31,HIGH(100)
000893 940e 16b2 	CALL SUBOPT_0x15
000895 940e 16a0 	CALL SUBOPT_0x11
000897 940e 16ad 	CALL SUBOPT_0x14
000899 940e 16ad 	CALL SUBOPT_0x14
00089b 940e 16b7 	CALL SUBOPT_0x16
                 ;      Value %= 100;
00089d e6e4      	LDI  R30,LOW(100)
00089e e0f0      	LDI  R31,HIGH(100)
00089f 940e 16bc 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
0008a1 c004      	RJMP _0x87
                 _0x86:
0008a2 30e2      	CPI  R30,LOW(0x2)
0008a3 e0a0      	LDI  R26,HIGH(0x2)
0008a4 07fa      	CPC  R31,R26
0008a5 f499      	BRNE _0x88
                 _0x87:
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
0008a6 85a9      	LDD  R26,Y+9
0008a7 85ba      	LDD  R27,Y+9+1
0008a8 e0ea      	LDI  R30,LOW(10)
0008a9 e0f0      	LDI  R31,HIGH(10)
0008aa 940e 16b2 	CALL SUBOPT_0x15
0008ac 940e 16a0 	CALL SUBOPT_0x11
0008ae 940e 16ad 	CALL SUBOPT_0x14
0008b0 940e 16ad 	CALL SUBOPT_0x14
0008b2 940e 16b7 	CALL SUBOPT_0x16
                 ;      Value %= 10;
0008b4 e0ea      	LDI  R30,LOW(10)
0008b5 e0f0      	LDI  R31,HIGH(10)
0008b6 940e 16bc 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
0008b8 c004      	RJMP _0x89
                 _0x88:
0008b9 30e1      	CPI  R30,LOW(0x1)
0008ba e0a0      	LDI  R26,HIGH(0x1)
0008bb 07fa      	CPC  R31,R26
0008bc f461      	BRNE _0x81
                 _0x89:
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
0008bd 85e9      	LDD  R30,Y+9
0008be 5de0      	SUBI R30,-LOW(48)
0008bf 93ea      	ST   -Y,R30
0008c0 940e 16a0 	CALL SUBOPT_0x11
0008c2 940e 16a0 	CALL SUBOPT_0x11
0008c4 940e 16ad 	CALL SUBOPT_0x14
0008c6 940e 16ad 	CALL SUBOPT_0x14
0008c8 ddd4      	RCALL _SSD1963_PutChar16
                 ;    break;
                 ;  }
                 _0x81:
                 ;}
0008c9 962b      	ADIW R28,11
0008ca 9508      	RET
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
0008cb 940e 16c6 	CALL SUBOPT_0x18
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
0008cd 940e 16d8 	CALL SUBOPT_0x19
                 ;  if (j < 0) j *= -1;
0008cf f412      	BRPL _0x8B
0008d0 940e 16e2 	CALL SUBOPT_0x1A
                 ;  k = StopY - StartY + 1;
                 _0x8B:
0008d2 940e 16e9 	CALL SUBOPT_0x1B
                 ;  if (k < 0) k *= -1;
0008d4 f422      	BRPL _0x8C
0008d5 940e 16f9 	CALL SUBOPT_0x1C
0008d7 940e 16fe 	CALL SUBOPT_0x1D
                 ;  k = k * j;
                 _0x8C:
0008d9 940e 1709 	CALL SUBOPT_0x1E
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x8E:
0008db 940e 171c 	CALL SUBOPT_0x1F
0008dd f43c      	BRGE _0x8F
0008de 85ea      	LDD  R30,Y+10
0008df 85fb      	LDD  R31,Y+10+1
0008e0 940e 169c 	CALL SUBOPT_0x10
0008e2 940e 1724 	CALL SUBOPT_0x20
0008e4 cff6      	RJMP _0x8E
                 _0x8F:
0008e5 c105      	RJMP _0x2080009
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
0008e6 972a      	SBIW R28,10
0008e7 940e 1b85 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
0008e9 8da9      	LDD  R26,Y+25
0008ea 8dba      	LDD  R27,Y+25+1
0008eb 89ef      	LDD  R30,Y+23
0008ec 8df8      	LDD  R31,Y+23+1
0008ed 1bea      	SUB  R30,R26
0008ee 0bfb      	SBC  R31,R27
0008ef 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
0008f0 2355      	TST  R21
0008f1 f432      	BRPL _0x90
0008f2 01fa      	MOVW R30,R20
0008f3 efaf      	LDI  R26,LOW(65535)
0008f4 efbf      	LDI  R27,HIGH(65535)
0008f5 940e 1ada 	CALL __MULW12
0008f7 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x90:
0008f8 89ad      	LDD  R26,Y+21
0008f9 89be      	LDD  R27,Y+21+1
0008fa 89eb      	LDD  R30,Y+19
0008fb 89fc      	LDD  R31,Y+19+1
0008fc 1bea      	SUB  R30,R26
0008fd 0bfb      	SBC  R31,R27
0008fe 87ee      	STD  Y+14,R30
0008ff 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
000900 85af      	LDD  R26,Y+15
000901 23aa      	TST  R26
000902 f432      	BRPL _0x91
000903 efaf      	LDI  R26,LOW(65535)
000904 efbf      	LDI  R27,HIGH(65535)
000905 940e 1ada 	CALL __MULW12
000907 87ee      	STD  Y+14,R30
000908 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x91:
000909 89ef      	LDD  R30,Y+23
00090a 8df8      	LDD  R31,Y+23+1
00090b 8da9      	LDD  R26,Y+25
00090c 8dba      	LDD  R27,Y+25+1
00090d 17ae      	CP   R26,R30
00090e 07bf      	CPC  R27,R31
00090f f418      	BRSH _0x92
000910 e0e1      	LDI  R30,LOW(1)
000911 e0f0      	LDI  R31,HIGH(1)
000912 c002      	RJMP _0x93
                 _0x92:
000913 efef      	LDI  R30,LOW(65535)
000914 efff      	LDI  R31,HIGH(65535)
                 _0x93:
000915 87ec      	STD  Y+12,R30
000916 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
000917 89eb      	LDD  R30,Y+19
000918 89fc      	LDD  R31,Y+19+1
000919 89ad      	LDD  R26,Y+21
00091a 89be      	LDD  R27,Y+21+1
00091b 17ae      	CP   R26,R30
00091c 07bf      	CPC  R27,R31
00091d f418      	BRSH _0x95
00091e e0e1      	LDI  R30,LOW(1)
00091f e0f0      	LDI  R31,HIGH(1)
000920 c002      	RJMP _0x96
                 _0x95:
000921 efef      	LDI  R30,LOW(65535)
000922 efff      	LDI  R31,HIGH(65535)
                 _0x96:
000923 87ea      	STD  Y+10,R30
000924 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
000925 85ae      	LDD  R26,Y+14
000926 85bf      	LDD  R27,Y+14+1
000927 01fa      	MOVW R30,R20
000928 1bea      	SUB  R30,R26
000929 0bfb      	SBC  R31,R27
00092a 87e8      	STD  Y+8,R30
00092b 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x98:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
00092c 8de9      	LDD  R30,Y+25
00092d 8dfa      	LDD  R31,Y+25+1
00092e 93fa      	ST   -Y,R31
00092f 93ea      	ST   -Y,R30
000930 89ea      	LDD  R30,Y+18
000931 940e 1731 	CALL SUBOPT_0x21
000933 93fa      	ST   -Y,R31
000934 93ea      	ST   -Y,R30
000935 8de9      	LDD  R30,Y+25
000936 8dfa      	LDD  R31,Y+25+1
000937 93fa      	ST   -Y,R31
000938 93ea      	ST   -Y,R30
000939 89ee      	LDD  R30,Y+22
00093a 940e 1731 	CALL SUBOPT_0x21
00093c 940e 1694 	CALL SUBOPT_0xF
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
00093e 89a8      	LDD  R26,Y+16
00093f 27bb      	CLR  R27
000940 89e8      	LDD  R30,Y+16
000941 e0f0      	LDI  R31,0
000942 940e 1ada 	CALL __MULW12
000944 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
000945 e000     +LDI R16 , LOW ( 0 )
000946 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9C:
                +
000947 1720     +CP R18 , R16
000948 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000949 f03c      	BRLT _0x9D
00094a 89e9      	LDD  R30,Y+17
00094b 89fa      	LDD  R31,Y+17+1
00094c 940e 169c 	CALL SUBOPT_0x10
                +
00094e 5f0f     +SUBI R16 , LOW ( - 1 )
00094f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000950 cff6      	RJMP _0x9C
                 _0x9D:
000951 89ef      	LDD  R30,Y+23
000952 8df8      	LDD  R31,Y+23+1
000953 8da9      	LDD  R26,Y+25
000954 8dba      	LDD  R27,Y+25+1
000955 17ea      	CP   R30,R26
000956 07fb      	CPC  R31,R27
000957 f439      	BRNE _0x9F
000958 89eb      	LDD  R30,Y+19
000959 89fc      	LDD  R31,Y+19+1
00095a 89ad      	LDD  R26,Y+21
00095b 89be      	LDD  R27,Y+21+1
00095c 17ea      	CP   R30,R26
00095d 07fb      	CPC  R31,R27
00095e f009      	BREQ _0xA0
                 _0x9F:
00095f c001      	RJMP _0x9E
                 _0xA0:
                 ;		break;
000960 c032      	RJMP _0x9A
                 ;
                 ;		error2 = error * 2;
                 _0x9E:
000961 85e8      	LDD  R30,Y+8
000962 85f9      	LDD  R31,Y+8+1
000963 0fee      	LSL  R30
000964 1fff      	ROL  R31
000965 83ee      	STD  Y+6,R30
000966 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
000967 85ee      	LDD  R30,Y+14
000968 85ff      	LDD  R31,Y+14+1
000969 940e 1a90 	CALL __ANEGW1
00096b 81ae      	LDD  R26,Y+6
00096c 81bf      	LDD  R27,Y+6+1
00096d 17ea      	CP   R30,R26
00096e 07fb      	CPC  R31,R27
00096f f474      	BRGE _0xA1
                 ;		{
                 ;			error -= deltaY;
000970 85ae      	LDD  R26,Y+14
000971 85bf      	LDD  R27,Y+14+1
000972 940e 1737 	CALL SUBOPT_0x22
000974 87e8      	STD  Y+8,R30
000975 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
000976 85ec      	LDD  R30,Y+12
000977 85fd      	LDD  R31,Y+12+1
000978 8da9      	LDD  R26,Y+25
000979 8dba      	LDD  R27,Y+25+1
00097a 0fea      	ADD  R30,R26
00097b 1ffb      	ADC  R31,R27
00097c 8fe9      	STD  Y+25,R30
00097d 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA1:
00097e 81ae      	LDD  R26,Y+6
00097f 81bf      	LDD  R27,Y+6+1
000980 17a4      	CP   R26,R20
000981 07b5      	CPC  R27,R21
000982 f47c      	BRGE _0xA2
                 ;		{
                 ;			error += deltaX;
000983 01fa      	MOVW R30,R20
000984 85a8      	LDD  R26,Y+8
000985 85b9      	LDD  R27,Y+8+1
000986 0fea      	ADD  R30,R26
000987 1ffb      	ADC  R31,R27
000988 87e8      	STD  Y+8,R30
000989 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
00098a 85ea      	LDD  R30,Y+10
00098b 85fb      	LDD  R31,Y+10+1
00098c 89ad      	LDD  R26,Y+21
00098d 89be      	LDD  R27,Y+21+1
00098e 0fea      	ADD  R30,R26
00098f 1ffb      	ADC  R31,R27
000990 8bed      	STD  Y+21,R30
000991 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA2:
000992 cf99      	RJMP _0x98
                 _0x9A:
                 ;}
000993 940e 1b8c 	CALL __LOADLOCR6
000995 966b      	ADIW R28,27
000996 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
000997 940e 16a5 	CALL SUBOPT_0x12
000999 940e 16a5 	CALL SUBOPT_0x12
00099b 940e 16a5 	CALL SUBOPT_0x12
00099d 85e8      	LDD  R30,Y+8
00099e 85f9      	LDD  R31,Y+8+1
00099f 940e 173c 	CALL SUBOPT_0x23
0009a1 940e 16a0 	CALL SUBOPT_0x11
0009a3 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
0009a4 940e 16a5 	CALL SUBOPT_0x12
0009a6 81ec      	LDD  R30,Y+4
0009a7 81fd      	LDD  R31,Y+4+1
0009a8 940e 173c 	CALL SUBOPT_0x23
0009aa 940e 16a5 	CALL SUBOPT_0x12
0009ac 940e 16a5 	CALL SUBOPT_0x12
0009ae 940e 16a0 	CALL SUBOPT_0x11
0009b0 df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
0009b1 940e 16a5 	CALL SUBOPT_0x12
0009b3 940e 16a5 	CALL SUBOPT_0x12
0009b5 81ae      	LDD  R26,Y+6
0009b6 81bf      	LDD  R27,Y+6+1
0009b7 940e 1737 	CALL SUBOPT_0x22
0009b9 93fa      	ST   -Y,R31
0009ba 93ea      	ST   -Y,R30
0009bb 940e 16a5 	CALL SUBOPT_0x12
0009bd 940e 16a0 	CALL SUBOPT_0x11
0009bf df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
0009c0 81aa      	LDD  R26,Y+2
0009c1 81bb      	LDD  R27,Y+2+1
0009c2 940e 1737 	CALL SUBOPT_0x22
0009c4 93fa      	ST   -Y,R31
0009c5 93ea      	ST   -Y,R30
0009c6 940e 16a5 	CALL SUBOPT_0x12
0009c8 940e 16a5 	CALL SUBOPT_0x12
0009ca 940e 16a5 	CALL SUBOPT_0x12
0009cc 940e 16a0 	CALL SUBOPT_0x11
0009ce defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x208000A:
0009cf 962c      	ADIW R28,12
0009d0 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
0009d1 940e 16c6 	CALL SUBOPT_0x18
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
0009d3 940e 16d8 	CALL SUBOPT_0x19
                 ;  if (j < 0) j *= -1;
0009d5 f412      	BRPL _0xA3
0009d6 940e 16e2 	CALL SUBOPT_0x1A
                 ;  k = StopY - StartY + 1;
                 _0xA3:
0009d8 940e 16e9 	CALL SUBOPT_0x1B
                 ;  if (k < 0) k *= -1;
0009da f422      	BRPL _0xA4
0009db 940e 16f9 	CALL SUBOPT_0x1C
0009dd 940e 16fe 	CALL SUBOPT_0x1D
                 ;  k = k * j;
                 _0xA4:
0009df 940e 1709 	CALL SUBOPT_0x1E
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA6:
0009e1 940e 171c 	CALL SUBOPT_0x1F
0009e3 f43c      	BRGE _0xA7
0009e4 85ea      	LDD  R30,Y+10
0009e5 85fb      	LDD  R31,Y+10+1
0009e6 940e 169c 	CALL SUBOPT_0x10
0009e8 940e 1724 	CALL SUBOPT_0x20
0009ea cff6      	RJMP _0xA6
                 _0xA7:
                 _0x2080009:
0009eb 8119      	LDD  R17,Y+1
0009ec 8108      	LDD  R16,Y+0
0009ed 9664      	ADIW R28,20
0009ee 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#pragma used-
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;void TSC2046_PortInit(void)
                 ; 0000 001C {
                 _TSC2046_PortInit:
                 ;  DDRE |= 0b00000100;
0009ef 9a12      	SBI  0x2,2
                 ;  DDRE &= 0b11110111;
0009f0 9813      	CBI  0x2,3
                 ;}
0009f1 9508      	RET
                 ;
                 ;#pragma used+
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ;{
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
0009f2 931a      	ST   -Y,R17
0009f3 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0009f4 981a      	CBI  0x3,2
                 ;  delay_ms(1);
0009f5 940e 166c 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
0009f7 ede3      	LDI  R30,LOW(211)
0009f8 940e 1743 	CALL SUBOPT_0x24
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
0009fa c09a      	RJMP _0x2080008
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
0009fb 931a      	ST   -Y,R17
0009fc 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0009fd 981a      	CBI  0x3,2
                 ;  delay_ms(1);
0009fe 940e 166c 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
000a00 e9e3      	LDI  R30,LOW(147)
000a01 940e 1743 	CALL SUBOPT_0x24
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000a03 c091      	RJMP _0x2080008
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
000a04 981a      	CBI  0x3,2
                 ;  delay_ms(5);
000a05 e0e5      	LDI  R30,LOW(5)
000a06 e0f0      	LDI  R31,HIGH(5)
000a07 940e 1679 	CALL SUBOPT_0x9
                 ;  spi(0b10010000);
000a09 e9e0      	LDI  R30,LOW(144)
000a0a 93ea      	ST   -Y,R30
000a0b 940e 14c3 	CALL _spi
                 ;  delay_us(100);
                +
000a0d e980     +LDI R24 , LOW ( 400 )
000a0e e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000a0f 9701     +SBIW R24 , 1
000a10 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
000a11 e0e0      	LDI  R30,LOW(0)
000a12 93ea      	ST   -Y,R30
000a13 940e 14c3 	CALL _spi
                 ;  spi(0x00);
000a15 e0e0      	LDI  R30,LOW(0)
000a16 93ea      	ST   -Y,R30
000a17 940e 14c3 	CALL _spi
                 ;  TOUCH_CS = 1;
000a19 9a1a      	SBI  0x3,2
                 ;}
000a1a 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
000a1b 931a      	ST   -Y,R17
000a1c 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000a1d dfd4      	RCALL _TSC2046_getADC_X
000a1e 51e4      	SUBI R30,LOW(1300)
000a1f 40f5      	SBCI R31,HIGH(1300)
000a20 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000a21 2311      	TST  R17
000a22 f412      	BRPL _0xB8
                +
000a23 e000     +LDI R16 , LOW ( 0 )
000a24 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xB8:
000a25 940e 175c 	CALL SUBOPT_0x25
                +
000a27 e5e5     +LDI R30 , LOW ( 0x4275D555 )
000a28 edf5     +LDI R31 , HIGH ( 0x4275D555 )
000a29 e765     +LDI R22 , BYTE3 ( 0x4275D555 )
000a2a e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
000a2b 940e 1764 	CALL SUBOPT_0x26
                 ;  return res;
000a2d c067      	RJMP _0x2080008
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
000a2e 931a      	ST   -Y,R17
000a2f 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000a30 dfca      	RCALL _TSC2046_getADC_Y
000a31 53e4      	SUBI R30,LOW(2100)
000a32 40f8      	SBCI R31,HIGH(2100)
000a33 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000a34 2311      	TST  R17
000a35 f412      	BRPL _0xB9
                +
000a36 e000     +LDI R16 , LOW ( 0 )
000a37 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xB9:
000a38 940e 175c 	CALL SUBOPT_0x25
                +
000a3a e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
000a3b e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
000a3c ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
000a3d e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
000a3e 940e 1764 	CALL SUBOPT_0x26
                 ;  return res;
000a40 c054      	RJMP _0x2080008
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;
                 ;  if (TOUCH_IRQ < 1)
000a41 931a      	ST   -Y,R17
000a42 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
000a43 e010      	LDI  R17,0
000a44 940e 176b 	CALL SUBOPT_0x27
000a46 f010      	BRLO PC+3
000a47 940c 0a94 	JMP _0xBA
                 ;  {
                 ;    tempX = 0;
000a49 940e 1770 	CALL SUBOPT_0x28
                 ;    tempY = 0;
000a4b 940e 177a 	CALL SUBOPT_0x29
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000a4d e000      	LDI  R16,LOW(0)
                 _0xBC:
000a4e 3100      	CPI  R16,16
000a4f f460      	BRSH _0xBD
                 ;    {
                 ;        tempX += TSC2046_getADC_X() - ADC_X_MIN;
000a50 dfa1      	RCALL _TSC2046_getADC_X
000a51 51e4      	SUBI R30,LOW(1300)
000a52 40f5      	SBCI R31,HIGH(1300)
000a53 940e 1784 	CALL SUBOPT_0x2A
                 ;        tempY += TSC2046_getADC_Y() - ADC_Y_MIN;
000a55 dfa5      	RCALL _TSC2046_getADC_Y
000a56 53e4      	SUBI R30,LOW(2100)
000a57 40f8      	SBCI R31,HIGH(2100)
000a58 940e 1799 	CALL SUBOPT_0x2B
                 ;    }
000a5a 5f0f      	SUBI R16,-1
000a5b cff2      	RJMP _0xBC
                 _0xBD:
                 ;    if (tempX < 0) tempX = 0;
000a5c 91a0 05fc 	LDS  R26,_tempX+3
000a5e 23aa      	TST  R26
000a5f f412      	BRPL _0xBE
000a60 940e 1770 	CALL SUBOPT_0x28
                 ;    if (tempY < 0) tempY = 0;
                 _0xBE:
000a62 91a0 0600 	LDS  R26,_tempY+3
000a64 23aa      	TST  R26
000a65 f412      	BRPL _0xBF
000a66 940e 177a 	CALL SUBOPT_0x29
                 ;
                 ;    TOUCH_X = tempX / (TOUCH_Calc_Max * ADC_X_K);
                 _0xBF:
000a68 91e0 05f9 	LDS  R30,_tempX
000a6a 91f0 05fa 	LDS  R31,_tempX+1
000a6c 9160 05fb 	LDS  R22,_tempX+2
000a6e 9170 05fc 	LDS  R23,_tempX+3
000a70 940e 1a14 	CALL __CDF1
000a72 01df      	MOVW R26,R30
000a73 01cb      	MOVW R24,R22
                +
000a74 e5e5     +LDI R30 , LOW ( 0x4475D555 )
000a75 edf5     +LDI R31 , HIGH ( 0x4475D555 )
000a76 e765     +LDI R22 , BYTE3 ( 0x4475D555 )
000a77 e474     +LDI R23 , BYTE4 ( 0x4475D555 )
                 	__GETD1N 0x4475D555
000a78 940e 1a42 	CALL __DIVF21
000a7a 940e 19db 	CALL __CFD1U
000a7c 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / (TOUCH_Calc_Max * ADC_Y_K);
000a7d 91e0 05fd 	LDS  R30,_tempY
000a7f 91f0 05fe 	LDS  R31,_tempY+1
000a81 9160 05ff 	LDS  R22,_tempY+2
000a83 9170 0600 	LDS  R23,_tempY+3
000a85 940e 1a14 	CALL __CDF1
000a87 01df      	MOVW R26,R30
000a88 01cb      	MOVW R24,R22
                +
000a89 e1ee     +LDI R30 , LOW ( 0x44CE9E1E )
000a8a e9fe     +LDI R31 , HIGH ( 0x44CE9E1E )
000a8b ec6e     +LDI R22 , BYTE3 ( 0x44CE9E1E )
000a8c e474     +LDI R23 , BYTE4 ( 0x44CE9E1E )
                 	__GETD1N 0x44CE9E1E
000a8d 940e 1a42 	CALL __DIVF21
000a8f 940e 19db 	CALL __CFD1U
000a91 013f      	MOVW R6,R30
                 ;
                 ;    TSC2046_Stop();
000a92 df71      	RCALL _TSC2046_Stop
                 ;    res = 1;
000a93 e011      	LDI  R17,LOW(1)
                 ;  }
                 ;
                 ;  return res;
                 _0xBA:
000a94 2fe1      	MOV  R30,R17
                 _0x2080008:
000a95 9109      	LD   R16,Y+
000a96 9119      	LD   R17,Y+
000a97 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  char i;
                 ;  TSC2046_PortInit();
000a98 931a      	ST   -Y,R17
                 ;	i -> R17
000a99 df55      	RCALL _TSC2046_PortInit
                 ;  TOUCH_CS = 0;
000a9a 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
000a9b 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
000a9c e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000a9d 958a     +DEC R24
000a9e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
000a9f 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
000aa0 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
000aa1 940e 1770 	CALL SUBOPT_0x28
                 ;    tempY = 0;
000aa3 940e 177a 	CALL SUBOPT_0x29
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000aa5 e010      	LDI  R17,LOW(0)
                 _0xC9:
000aa6 3110      	CPI  R17,16
000aa7 f440      	BRSH _0xCA
                 ;    {
                 ;      tempX += TSC2046_getX();
000aa8 df72      	RCALL _TSC2046_getX
000aa9 940e 1784 	CALL SUBOPT_0x2A
                 ;      tempY += TSC2046_getY();
000aab df82      	RCALL _TSC2046_getY
000aac 940e 1799 	CALL SUBOPT_0x2B
                 ;    }
000aae 5f1f      	SUBI R17,-1
000aaf cff6      	RJMP _0xC9
                 _0xCA:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
000ab0 91a0 05f9 	LDS  R26,_tempX
000ab2 91b0 05fa 	LDS  R27,_tempX+1
000ab4 9180 05fb 	LDS  R24,_tempX+2
000ab6 9190 05fc 	LDS  R25,_tempX+3
000ab8 940e 17ae 	CALL SUBOPT_0x2C
000aba 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
000abb 91a0 05fd 	LDS  R26,_tempY
000abd 91b0 05fe 	LDS  R27,_tempY+1
000abf 9180 05ff 	LDS  R24,_tempY+2
000ac1 9190 0600 	LDS  R25,_tempY+3
000ac3 940e 17ae 	CALL SUBOPT_0x2C
000ac5 013f      	MOVW R6,R30
                 ;    TSC2046_Stop();
000ac6 df3d      	RCALL _TSC2046_Stop
                 ;}
000ac7 c276      	RJMP _0x2080005
                 ;
                 ;#pragma used-
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART2 Receiver buffer
                 ;#define RX_BUFFER_SIZE2 20
                 ;char rx_buffer2[RX_BUFFER_SIZE2];
                 ;
                 ;#if RX_BUFFER_SIZE2 <= 256
                 ;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;#else
                 ;unsigned int rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;#endif
                 ;
                 ;//Переключатель юарта
                 ;char uart_swap = 0;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 256
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 005C {
                 _usart0_rx_isr:
000ac8 93ea      	ST   -Y,R30
000ac9 93fa      	ST   -Y,R31
000aca b7ef      	IN   R30,SREG
000acb 93ea      	ST   -Y,R30
                 ; 0000 005D char status,data;
                 ; 0000 005E status=UCSR0A;
000acc 931a      	ST   -Y,R17
000acd 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000ace b11b      	IN   R17,11
                 ; 0000 005F data=UDR0;
000acf b10c      	IN   R16,12
                 ; 0000 0060 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000ad0 2fe1      	MOV  R30,R17
000ad1 71ec      	ANDI R30,LOW(0x1C)
000ad2 f591      	BRNE _0xCB
                 ; 0000 0061 {
                 ; 0000 0062    if(uart_swap) //Юарт 2
000ad3 91e0 0616 	LDS  R30,_uart_swap
000ad5 30e0      	CPI  R30,0
000ad6 f081      	BREQ _0xCC
                 ; 0000 0063    {
                 ; 0000 0064       rx_buffer2[rx_wr_index2++]=data;
000ad7 2ded      	MOV  R30,R13
000ad8 94d3      	INC  R13
000ad9 e0f0      	LDI  R31,0
000ada 5fef      	SUBI R30,LOW(-_rx_buffer2)
000adb 4ff9      	SBCI R31,HIGH(-_rx_buffer2)
000adc 8300      	ST   Z,R16
                 ; 0000 0065       if (rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
000add e1e4      	LDI  R30,LOW(20)
000ade 15ed      	CP   R30,R13
000adf f409      	BRNE _0xCD
000ae0 24dd      	CLR  R13
                 ; 0000 0066       ++rx_counter2;
                 _0xCD:
000ae1 91e0 0615 	LDS  R30,_rx_counter2
000ae3 5fef      	SUBI R30,-LOW(1)
000ae4 93e0 0615 	STS  _rx_counter2,R30
                 ; 0000 0067    }
                 ; 0000 0068    else //Юарт 0
000ae6 c01e      	RJMP _0xCE
                 _0xCC:
                 ; 0000 0069    {
                 ; 0000 006A    rx_buffer0[rx_wr_index0++]=data;
000ae7 91e0 0717 	LDS  R30,_rx_wr_index0
000ae9 5fef      	SUBI R30,-LOW(1)
000aea 93e0 0717 	STS  _rx_wr_index0,R30
000aec 940e 17b5 	CALL SUBOPT_0x2D
000aee 8300      	ST   Z,R16
                 ; 0000 006B #if RX_BUFFER_SIZE0 == 256
                 ; 0000 006C    // special case for receiver buffer size=256
                 ; 0000 006D    if (++rx_counter0 == 0)
000aef 91e0 0719 	LDS  R30,_rx_counter0
000af1 5fef      	SUBI R30,-LOW(1)
000af2 93e0 0719 	STS  _rx_counter0,R30
000af4 30e0      	CPI  R30,0
000af5 f479      	BRNE _0xCF
                 ; 0000 006E       {
                 ; 0000 006F #else
                 ; 0000 0070    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 ; 0000 0071    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 ; 0000 0072       {
                 ; 0000 0073       //rx_counter0=0;
                 ; 0000 0074 #endif
                 ; 0000 0075       rx_buffer_overflow0=1;  //Ааааа переполнение
000af6 9468      	SET
000af7 f820      	BLD  R2,0
                 ; 0000 0076       rx_counter0=RX_BUFFER_SIZE0-1;
000af8 efef      	LDI  R30,LOW(255)
000af9 93e0 0719 	STS  _rx_counter0,R30
                 ; 0000 0077       if(rx_wr_index0) rx_wr_index0--; else rx_wr_index0=rx_counter0;
000afb 91e0 0717 	LDS  R30,_rx_wr_index0
000afd 30e0      	CPI  R30,0
000afe f011      	BREQ _0xD0
000aff 50e1      	SUBI R30,LOW(1)
000b00 c002      	RJMP _0x20B
                 _0xD0:
000b01 91e0 0719 	LDS  R30,_rx_counter0
                 _0x20B:
000b03 93e0 0717 	STS  _rx_wr_index0,R30
                 ; 0000 0078       }
                 ; 0000 0079    }
                 _0xCF:
                 _0xCE:
                 ; 0000 007A }
                 ; 0000 007B }
                 _0xCB:
000b05 9109      	LD   R16,Y+
000b06 9119      	LD   R17,Y+
000b07 91e9      	LD   R30,Y+
000b08 bfef      	OUT  SREG,R30
000b09 91f9      	LD   R31,Y+
000b0a 91e9      	LD   R30,Y+
000b0b 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 0082 {
                 _getchar0:
                 ; 0000 0083 char data;
                 ; 0000 0084 while (rx_counter0==0);
000b0c 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xD2:
000b0d 91e0 0719 	LDS  R30,_rx_counter0
000b0f 30e0      	CPI  R30,0
000b10 f3e1      	BREQ _0xD2
                 ; 0000 0085 data=rx_buffer0[rx_rd_index0++];
000b11 91e0 0718 	LDS  R30,_rx_rd_index0
000b13 5fef      	SUBI R30,-LOW(1)
000b14 93e0 0718 	STS  _rx_rd_index0,R30
000b16 940e 17b5 	CALL SUBOPT_0x2D
000b18 8110      	LD   R17,Z
                 ; 0000 0086 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0087 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0088 #endif
                 ; 0000 0089 #asm("cli")
000b19 94f8      	cli
                 ; 0000 008A --rx_counter0;
000b1a 91e0 0719 	LDS  R30,_rx_counter0
000b1c 50e1      	SUBI R30,LOW(1)
000b1d 93e0 0719 	STS  _rx_counter0,R30
                 ; 0000 008B #asm("sei")
000b1f 9478      	sei
                 ; 0000 008C return data;
000b20 c21c      	RJMP _0x2080004
                 ; 0000 008D }
                 ;
                 ;
                 ;char getchar2(void) //Юарт 2
                 ; 0000 0091 {
                 _getchar2:
                 ; 0000 0092 char data;
                 ; 0000 0093 while (rx_counter2==0);
000b21 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xD5:
000b22 91e0 0615 	LDS  R30,_rx_counter2
000b24 30e0      	CPI  R30,0
000b25 f3e1      	BREQ _0xD5
                 ; 0000 0094 data=rx_buffer2[rx_rd_index2++];
000b26 2dec      	MOV  R30,R12
000b27 94c3      	INC  R12
000b28 e0f0      	LDI  R31,0
000b29 5fef      	SUBI R30,LOW(-_rx_buffer2)
000b2a 4ff9      	SBCI R31,HIGH(-_rx_buffer2)
000b2b 8110      	LD   R17,Z
                 ; 0000 0095 if (rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
000b2c e1e4      	LDI  R30,LOW(20)
000b2d 15ec      	CP   R30,R12
000b2e f409      	BRNE _0xD8
000b2f 24cc      	CLR  R12
                 ; 0000 0096 #asm("cli")
                 _0xD8:
000b30 94f8      	cli
                 ; 0000 0097 --rx_counter2;
000b31 91e0 0615 	LDS  R30,_rx_counter2
000b33 50e1      	SUBI R30,LOW(1)
000b34 93e0 0615 	STS  _rx_counter2,R30
                 ; 0000 0098 #asm("sei")
000b36 9478      	sei
                 ; 0000 0099 return data;
000b37 c205      	RJMP _0x2080004
                 ; 0000 009A }
                 ;
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 00AB {
                 _usart0_tx_isr:
000b38 940e 17ba 	CALL SUBOPT_0x2E
                 ; 0000 00AC if (tx_counter0)
000b3a 91e0 0724 	LDS  R30,_tx_counter0
000b3c 30e0      	CPI  R30,0
000b3d f099      	BREQ _0xD9
                 ; 0000 00AD    {
                 ; 0000 00AE    --tx_counter0;
000b3e 50e1      	SUBI R30,LOW(1)
000b3f 93e0 0724 	STS  _tx_counter0,R30
                 ; 0000 00AF    UDR0=tx_buffer0[tx_rd_index0++];
000b41 91e0 0723 	LDS  R30,_tx_rd_index0
000b43 5fef      	SUBI R30,-LOW(1)
000b44 93e0 0723 	STS  _tx_rd_index0,R30
000b46 940e 17c0 	CALL SUBOPT_0x2F
000b48 81e0      	LD   R30,Z
000b49 b9ec      	OUT  0xC,R30
                 ; 0000 00B0 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00B1    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000b4a 91a0 0723 	LDS  R26,_tx_rd_index0
000b4c 30a8      	CPI  R26,LOW(0x8)
000b4d f419      	BRNE _0xDA
000b4e e0e0      	LDI  R30,LOW(0)
000b4f 93e0 0723 	STS  _tx_rd_index0,R30
                 ; 0000 00B2 #endif
                 ; 0000 00B3    }
                 _0xDA:
                 ; 0000 00B4 }
                 _0xD9:
000b51 c074      	RJMP _0x211
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar0_i(char c)
                 ; 0000 00BB {
                 _putchar0_i:
                 ; 0000 00BC while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xDB:
000b52 91a0 0724 	LDS  R26,_tx_counter0
000b54 30a8      	CPI  R26,LOW(0x8)
000b55 f3e1      	BREQ _0xDB
                 ; 0000 00BD #asm("cli")
000b56 94f8      	cli
                 ; 0000 00BE if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000b57 91e0 0724 	LDS  R30,_tx_counter0
000b59 30e0      	CPI  R30,0
000b5a f411      	BRNE _0xDF
000b5b 995d      	SBIC 0xB,5
000b5c c016      	RJMP _0xDE
                 _0xDF:
                 ; 0000 00BF    {
                 ; 0000 00C0    tx_buffer0[tx_wr_index0++]=c;
000b5d 91e0 0722 	LDS  R30,_tx_wr_index0
000b5f 5fef      	SUBI R30,-LOW(1)
000b60 93e0 0722 	STS  _tx_wr_index0,R30
000b62 940e 17c0 	CALL SUBOPT_0x2F
000b64 81a8      	LD   R26,Y
000b65 83a0      	STD  Z+0,R26
                 ; 0000 00C1 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C2    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000b66 91a0 0722 	LDS  R26,_tx_wr_index0
000b68 30a8      	CPI  R26,LOW(0x8)
000b69 f419      	BRNE _0xE1
000b6a e0e0      	LDI  R30,LOW(0)
000b6b 93e0 0722 	STS  _tx_wr_index0,R30
                 ; 0000 00C3 #endif
                 ; 0000 00C4    ++tx_counter0;
                 _0xE1:
000b6d 91e0 0724 	LDS  R30,_tx_counter0
000b6f 5fef      	SUBI R30,-LOW(1)
000b70 93e0 0724 	STS  _tx_counter0,R30
                 ; 0000 00C5    }
                 ; 0000 00C6 else
000b72 c002      	RJMP _0xE2
                 _0xDE:
                 ; 0000 00C7    UDR0=c;
000b73 81e8      	LD   R30,Y
000b74 b9ec      	OUT  0xC,R30
                 ; 0000 00C8 #asm("sei")
                 _0xE2:
000b75 9478      	sei
000b76 c07e      	RJMP _0x2080007
                 ; 0000 00C9 }
                 ;
                 ;inline void putchar0(char c)
                 ; 0000 00CC {
                 _putchar0:
                 ; 0000 00CD     uart_swap = 0;
                 ;	c -> Y+0
000b77 e0e0      	LDI  R30,LOW(0)
000b78 940e 17c5 	CALL SUBOPT_0x30
                 ; 0000 00CE     putchar0_i(c);
                 ; 0000 00CF }
000b7a c07a      	RJMP _0x2080006
                 ;
                 ;inline void putchar2(char c)
                 ; 0000 00D2 {
                 _putchar2:
                 ; 0000 00D3     uart_swap = 2;
                 ;	c -> Y+0
000b7b e0e2      	LDI  R30,LOW(2)
000b7c 940e 17c5 	CALL SUBOPT_0x30
                 ; 0000 00D4     putchar0_i(c);
                 ; 0000 00D5 }
000b7e c076      	RJMP _0x2080006
                 ;
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00E9 {
                 _usart1_rx_isr:
000b7f 940e 17ba 	CALL SUBOPT_0x2E
                 ; 0000 00EA char status,data;
                 ; 0000 00EB status=UCSR1A;
000b81 931a      	ST   -Y,R17
000b82 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000b83 9110 009b 	LDS  R17,155
                 ; 0000 00EC data=UDR1;
000b85 9100 009c 	LDS  R16,156
                 ; 0000 00ED if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000b87 2fe1      	MOV  R30,R17
000b88 71ec      	ANDI R30,LOW(0x1C)
000b89 f4e9      	BRNE _0xE3
                 ; 0000 00EE    {
                 ; 0000 00EF    rx_buffer1[rx_wr_index1++]=data;
000b8a 91e0 0745 	LDS  R30,_rx_wr_index1
000b8c 5fef      	SUBI R30,-LOW(1)
000b8d 93e0 0745 	STS  _rx_wr_index1,R30
000b8f 940e 17cb 	CALL SUBOPT_0x31
000b91 5deb      	SUBI R30,LOW(-_rx_buffer1)
000b92 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
000b93 8300      	ST   Z,R16
                 ; 0000 00F0 #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00F1    // special case for receiver buffer size=256
                 ; 0000 00F2    if (++rx_counter1 == 0)
                 ; 0000 00F3       {
                 ; 0000 00F4 #else
                 ; 0000 00F5    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000b94 91a0 0745 	LDS  R26,_rx_wr_index1
000b96 32a0      	CPI  R26,LOW(0x20)
000b97 f419      	BRNE _0xE4
000b98 e0e0      	LDI  R30,LOW(0)
000b99 93e0 0745 	STS  _rx_wr_index1,R30
                 ; 0000 00F6    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0xE4:
000b9b 91a0 0747 	LDS  R26,_rx_counter1
000b9d 5faf      	SUBI R26,-LOW(1)
000b9e 93a0 0747 	STS  _rx_counter1,R26
000ba0 32a0      	CPI  R26,LOW(0x20)
000ba1 f429      	BRNE _0xE5
                 ; 0000 00F7       {
                 ; 0000 00F8       rx_counter1=0;
000ba2 e0e0      	LDI  R30,LOW(0)
000ba3 93e0 0747 	STS  _rx_counter1,R30
                 ; 0000 00F9 #endif
                 ; 0000 00FA       rx_buffer_overflow1=1;
000ba5 9468      	SET
000ba6 f821      	BLD  R2,1
                 ; 0000 00FB       }
                 ; 0000 00FC    }
                 _0xE5:
                 ; 0000 00FD }
                 _0xE3:
000ba7 9109      	LD   R16,Y+
000ba8 9119      	LD   R17,Y+
000ba9 c01c      	RJMP _0x211
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0102 {
                 ; 0000 0103 char data;
                 ; 0000 0104 while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 0105 data=rx_buffer1[rx_rd_index1++];
                 ; 0000 0106 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 0107 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 0108 #endif
                 ; 0000 0109 #asm("cli")
                 ; 0000 010A --rx_counter1;
                 ; 0000 010B #asm("sei")
                 ; 0000 010C return data;
                 ; 0000 010D }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 64
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 011B {
                 _usart1_tx_isr:
000baa 940e 17ba 	CALL SUBOPT_0x2E
                 ; 0000 011C if (tx_counter1)
000bac 91e0 078a 	LDS  R30,_tx_counter1
000bae 30e0      	CPI  R30,0
000baf f0b1      	BREQ _0xEA
                 ; 0000 011D    {
                 ; 0000 011E    --tx_counter1;
000bb0 50e1      	SUBI R30,LOW(1)
000bb1 93e0 078a 	STS  _tx_counter1,R30
                 ; 0000 011F    UDR1=tx_buffer1[tx_rd_index1++];
000bb3 91e0 0789 	LDS  R30,_tx_rd_index1
000bb5 5fef      	SUBI R30,-LOW(1)
000bb6 93e0 0789 	STS  _tx_rd_index1,R30
000bb8 940e 17cb 	CALL SUBOPT_0x31
000bba 5be8      	SUBI R30,LOW(-_tx_buffer1)
000bbb 4ff8      	SBCI R31,HIGH(-_tx_buffer1)
000bbc 81e0      	LD   R30,Z
000bbd 93e0 009c 	STS  156,R30
                 ; 0000 0120 #if TX_BUFFER_SIZE1 != 256
                 ; 0000 0121    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000bbf 91a0 0789 	LDS  R26,_tx_rd_index1
000bc1 34a0      	CPI  R26,LOW(0x40)
000bc2 f419      	BRNE _0xEB
000bc3 e0e0      	LDI  R30,LOW(0)
000bc4 93e0 0789 	STS  _tx_rd_index1,R30
                 ; 0000 0122 #endif
                 ; 0000 0123    }
                 _0xEB:
                 ; 0000 0124 }
                 _0xEA:
                 _0x211:
000bc6 91e9      	LD   R30,Y+
000bc7 bfef      	OUT  SREG,R30
000bc8 91f9      	LD   R31,Y+
000bc9 91e9      	LD   R30,Y+
000bca 91a9      	LD   R26,Y+
000bcb 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0129 {
                 _putchar:
                 ; 0000 012A while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 _0xEC:
000bcc 91a0 078a 	LDS  R26,_tx_counter1
000bce 34a0      	CPI  R26,LOW(0x40)
000bcf f3e1      	BREQ _0xEC
                 ; 0000 012B #asm("cli")
000bd0 94f8      	cli
                 ; 0000 012C if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
000bd1 91e0 078a 	LDS  R30,_tx_counter1
000bd3 30e0      	CPI  R30,0
000bd4 f421      	BRNE _0xF0
000bd5 91e0 009b 	LDS  R30,155
000bd7 72e0      	ANDI R30,LOW(0x20)
000bd8 f4c1      	BRNE _0xEF
                 _0xF0:
                 ; 0000 012D    {
                 ; 0000 012E    tx_buffer1[tx_wr_index1++]=c;
000bd9 91e0 0788 	LDS  R30,_tx_wr_index1
000bdb 5fef      	SUBI R30,-LOW(1)
000bdc 93e0 0788 	STS  _tx_wr_index1,R30
000bde 940e 17cb 	CALL SUBOPT_0x31
000be0 5be8      	SUBI R30,LOW(-_tx_buffer1)
000be1 4ff8      	SBCI R31,HIGH(-_tx_buffer1)
000be2 81a8      	LD   R26,Y
000be3 83a0      	STD  Z+0,R26
                 ; 0000 012F #if TX_BUFFER_SIZE1 != 256
                 ; 0000 0130    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
000be4 91a0 0788 	LDS  R26,_tx_wr_index1
000be6 34a0      	CPI  R26,LOW(0x40)
000be7 f419      	BRNE _0xF2
000be8 e0e0      	LDI  R30,LOW(0)
000be9 93e0 0788 	STS  _tx_wr_index1,R30
                 ; 0000 0131 #endif
                 ; 0000 0132    ++tx_counter1;
                 _0xF2:
000beb 91e0 078a 	LDS  R30,_tx_counter1
000bed 5fef      	SUBI R30,-LOW(1)
000bee 93e0 078a 	STS  _tx_counter1,R30
                 ; 0000 0133    }
                 ; 0000 0134 else
000bf0 c003      	RJMP _0xF3
                 _0xEF:
                 ; 0000 0135    UDR1=c;
000bf1 81e8      	LD   R30,Y
000bf2 93e0 009c 	STS  156,R30
                 ; 0000 0136 #asm("sei")
                 _0xF3:
000bf4 9478      	sei
                 _0x2080007:
                 ; 0000 0137 }
                 _0x2080006:
000bf5 9621      	ADIW R28,1
000bf6 9508      	RET
                 ;#pragma used-
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;#define RS485 PORTD.4
                 ;#define BACKLIGHT PORTB.7
                 ;
                 ;#define Graph_X_Min 0
                 ;#define Graph_X_Max 478
                 ;#define Graph_Y_Min 42
                 ;#define Graph_Y_Max 232
                 ;#define Graph_Step_N 2 //1..3
                 ;
                 ;flash unsigned int Graph_X_Step = (Graph_X_Max-Graph_X_Min)/72;
                 ;flash unsigned int Graph_Y_Mid = (Graph_Y_Max-Graph_Y_Min)/2 + Graph_Y_Min;
                 ;
                 ;#define Text_StartX 16
                 ;#define Text_StartY 6
                 ;
                 ;#define Value_StartX 290
                 ;#define Value_StartY 6
                 ;#define Value_Lenght (16*4)
                 ;
                 ;#define BTN_StartX 6
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;flash unsigned int BTN1_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN1_X_Begin = BTN_StartX;
                 ;flash unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;flash unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;flash unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;flash unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;flash unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;flash unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;flash unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 016E {
                 _Repaint_Button:
                 ; 0000 016F   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000bf7 81ec      	LDD  R30,Y+4
000bf8 940e 17ce 	CALL SUBOPT_0x32
                 ; 0000 0170   {
                 ; 0000 0171     case 1 :
000bfa f479      	BRNE _0xF7
                 ; 0000 0172       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bfb e0e0     +LDI R30 , LOW ( _0xF8 + ( 0 ) )
000bfc e0f5     +LDI R31 , HIGH ( _0xF8 + ( 0 ) )
                 	__POINTW1MN _0xF8,0
000bfd 93fa      	ST   -Y,R31
000bfe 93ea      	ST   -Y,R30
000bff e1e0      	LDI  R30,LOW(16)
000c00 e0f0      	LDI  R31,HIGH(16)
000c01 940e 17d3 	CALL SUBOPT_0x33
000c03 940e 16a0 	CALL SUBOPT_0x11
000c05 940e 17da 	CALL SUBOPT_0x34
                 ; 0000 0173       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c07 e1e0      	LDI  R30,LOW(16)
000c08 e0f0      	LDI  R31,HIGH(16)
000c09 c038      	RJMP _0x20C
                 ; 0000 0174     break;
                 ; 0000 0175     case 2 :
                 _0xF7:
000c0a 30e2      	CPI  R30,LOW(0x2)
000c0b e0a0      	LDI  R26,HIGH(0x2)
000c0c 07fa      	CPC  R31,R26
000c0d f479      	BRNE _0xF9
                 ; 0000 0176       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c0e e0e6     +LDI R30 , LOW ( _0xF8 + ( 6 ) )
000c0f e0f5     +LDI R31 , HIGH ( _0xF8 + ( 6 ) )
                 	__POINTW1MN _0xF8,6
000c10 93fa      	ST   -Y,R31
000c11 93ea      	ST   -Y,R30
000c12 e8e8      	LDI  R30,LOW(136)
000c13 e0f0      	LDI  R31,HIGH(136)
000c14 940e 17d3 	CALL SUBOPT_0x33
000c16 940e 16a0 	CALL SUBOPT_0x11
000c18 940e 17da 	CALL SUBOPT_0x34
                 ; 0000 0177       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c1a e8e8      	LDI  R30,LOW(136)
000c1b e0f0      	LDI  R31,HIGH(136)
000c1c c025      	RJMP _0x20C
                 ; 0000 0178     break;
                 ; 0000 0179     case 3 :
                 _0xF9:
000c1d 30e3      	CPI  R30,LOW(0x3)
000c1e e0a0      	LDI  R26,HIGH(0x3)
000c1f 07fa      	CPC  R31,R26
000c20 f479      	BRNE _0xFA
                 ; 0000 017A       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c21 e0ec     +LDI R30 , LOW ( _0xF8 + ( 12 ) )
000c22 e0f5     +LDI R31 , HIGH ( _0xF8 + ( 12 ) )
                 	__POINTW1MN _0xF8,12
000c23 93fa      	ST   -Y,R31
000c24 93ea      	ST   -Y,R30
000c25 e0e0      	LDI  R30,LOW(256)
000c26 e0f1      	LDI  R31,HIGH(256)
000c27 940e 17d3 	CALL SUBOPT_0x33
000c29 940e 16a0 	CALL SUBOPT_0x11
000c2b 940e 17da 	CALL SUBOPT_0x34
                 ; 0000 017B       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c2d e0e0      	LDI  R30,LOW(256)
000c2e e0f1      	LDI  R31,HIGH(256)
000c2f c012      	RJMP _0x20C
                 ; 0000 017C     break;
                 ; 0000 017D     case 4 :
                 _0xFA:
000c30 30e4      	CPI  R30,LOW(0x4)
000c31 e0a0      	LDI  R26,HIGH(0x4)
000c32 07fa      	CPC  R31,R26
000c33 f4c9      	BRNE _0xF6
                 ; 0000 017E       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c34 e1e2     +LDI R30 , LOW ( _0xF8 + ( 18 ) )
000c35 e0f5     +LDI R31 , HIGH ( _0xF8 + ( 18 ) )
                 	__POINTW1MN _0xF8,18
000c36 93fa      	ST   -Y,R31
000c37 93ea      	ST   -Y,R30
000c38 e7e8      	LDI  R30,LOW(376)
000c39 e0f1      	LDI  R31,HIGH(376)
000c3a 940e 17d3 	CALL SUBOPT_0x33
000c3c 940e 16a0 	CALL SUBOPT_0x11
000c3e 940e 17da 	CALL SUBOPT_0x34
                 ; 0000 017F       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c40 e7e8      	LDI  R30,LOW(376)
000c41 e0f1      	LDI  R31,HIGH(376)
                 _0x20C:
000c42 93fa      	ST   -Y,R31
000c43 93ea      	ST   -Y,R30
000c44 efe7      	LDI  R30,LOW(247)
000c45 e0f0      	LDI  R31,HIGH(247)
000c46 93fa      	ST   -Y,R31
000c47 93ea      	ST   -Y,R30
000c48 940e 16a0 	CALL SUBOPT_0x11
000c4a 940e 16a0 	CALL SUBOPT_0x11
000c4c dbf4      	RCALL _SSD1963_PutString16
                 ; 0000 0180     break;
                 ; 0000 0181   }
                 _0xF6:
                 ; 0000 0182 }
000c4d c2b8      	RJMP _0x2080003
                 
                 	.DSEG
                 _0xF8:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0185 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0186   // рисуем кнопки
                 ; 0000 0187   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000c4e e0e6      	LDI  R30,LOW(6)
000c4f e0f0      	LDI  R31,HIGH(6)
000c50 93fa      	ST   -Y,R31
000c51 93ea      	ST   -Y,R30
000c52 e6ea      	LDI  R30,LOW(106)
000c53 e0f0      	LDI  R31,HIGH(106)
000c54 940e 17e1 	CALL SUBOPT_0x35
                 ; 0000 0188   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000c56 e7ee      	LDI  R30,LOW(126)
000c57 e0f0      	LDI  R31,HIGH(126)
000c58 93fa      	ST   -Y,R31
000c59 93ea      	ST   -Y,R30
000c5a eee2      	LDI  R30,LOW(226)
000c5b e0f0      	LDI  R31,HIGH(226)
000c5c 940e 17e1 	CALL SUBOPT_0x35
                 ; 0000 0189   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000c5e efe6      	LDI  R30,LOW(246)
000c5f e0f0      	LDI  R31,HIGH(246)
000c60 93fa      	ST   -Y,R31
000c61 93ea      	ST   -Y,R30
000c62 e5ea      	LDI  R30,LOW(346)
000c63 e0f1      	LDI  R31,HIGH(346)
000c64 940e 17e1 	CALL SUBOPT_0x35
                 ; 0000 018A   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000c66 e6ee      	LDI  R30,LOW(366)
000c67 e0f1      	LDI  R31,HIGH(366)
000c68 93fa      	ST   -Y,R31
000c69 93ea      	ST   -Y,R30
000c6a ede2      	LDI  R30,LOW(466)
000c6b e0f1      	LDI  R31,HIGH(466)
000c6c 940e 17e1 	CALL SUBOPT_0x35
                 ; 0000 018B   // рисуем окантовку
                 ; 0000 018C   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000c6e e0e7      	LDI  R30,LOW(7)
000c6f e0f0      	LDI  R31,HIGH(7)
000c70 93fa      	ST   -Y,R31
000c71 93ea      	ST   -Y,R30
000c72 e6e9      	LDI  R30,LOW(105)
000c73 e0f0      	LDI  R31,HIGH(105)
000c74 940e 17f1 	CALL SUBOPT_0x36
000c76 dd20      	RCALL _SSD1963_DrawRect
                 ; 0000 018D   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000c77 e7ef      	LDI  R30,LOW(127)
000c78 e0f0      	LDI  R31,HIGH(127)
000c79 93fa      	ST   -Y,R31
000c7a 93ea      	ST   -Y,R30
000c7b eee1      	LDI  R30,LOW(225)
000c7c e0f0      	LDI  R31,HIGH(225)
000c7d 940e 17f1 	CALL SUBOPT_0x36
000c7f dd17      	RCALL _SSD1963_DrawRect
                 ; 0000 018E   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000c80 efe7      	LDI  R30,LOW(247)
000c81 e0f0      	LDI  R31,HIGH(247)
000c82 93fa      	ST   -Y,R31
000c83 93ea      	ST   -Y,R30
000c84 e5e9      	LDI  R30,LOW(345)
000c85 e0f1      	LDI  R31,HIGH(345)
000c86 940e 17f1 	CALL SUBOPT_0x36
000c88 dd0e      	RCALL _SSD1963_DrawRect
                 ; 0000 018F   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000c89 e6ef      	LDI  R30,LOW(367)
000c8a e0f1      	LDI  R31,HIGH(367)
000c8b 93fa      	ST   -Y,R31
000c8c 93ea      	ST   -Y,R30
000c8d ede1      	LDI  R30,LOW(465)
000c8e e0f1      	LDI  R31,HIGH(465)
000c8f 940e 17f1 	CALL SUBOPT_0x36
000c91 dd05      	RCALL _SSD1963_DrawRect
                 ; 0000 0190 
                 ; 0000 0191   Repaint_Button("СЛЕД", 1, BLACK, WHITE);
                +
000c92 e1e8     +LDI R30 , LOW ( _0xFC + ( 0 ) )
000c93 e0f5     +LDI R31 , HIGH ( _0xFC + ( 0 ) )
                 	__POINTW1MN _0xFC,0
000c94 93fa      	ST   -Y,R31
000c95 93ea      	ST   -Y,R30
000c96 e0e1      	LDI  R30,LOW(1)
000c97 93ea      	ST   -Y,R30
000c98 940e 168c 	CALL SUBOPT_0xD
000c9a 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0192   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000c9c e1ed     +LDI R30 , LOW ( _0xFC + ( 5 ) )
000c9d e0f5     +LDI R31 , HIGH ( _0xFC + ( 5 ) )
                 	__POINTW1MN _0xFC,5
000c9e 940e 1804 	CALL SUBOPT_0x38
000ca0 940e 168c 	CALL SUBOPT_0xD
000ca2 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0193   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000ca4 e2e1     +LDI R30 , LOW ( _0xFC + ( 9 ) )
000ca5 e0f5     +LDI R31 , HIGH ( _0xFC + ( 9 ) )
                 	__POINTW1MN _0xFC,9
000ca6 93fa      	ST   -Y,R31
000ca7 93ea      	ST   -Y,R30
000ca8 e0e3      	LDI  R30,LOW(3)
000ca9 93ea      	ST   -Y,R30
000caa 940e 168c 	CALL SUBOPT_0xD
000cac 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0194   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000cae e2e5     +LDI R30 , LOW ( _0xFC + ( 13 ) )
000caf e0f5     +LDI R31 , HIGH ( _0xFC + ( 13 ) )
                 	__POINTW1MN _0xFC,13
000cb0 940e 1809 	CALL SUBOPT_0x39
000cb2 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0195 }
000cb4 9508      	RET
                 
                 	.DSEG
                 _0xFC:
000518           	.BYTE 0x13
                 ;
                 ;///////////////////////////////////////////////
                 ;char State=0, ParameterState=0, ValueState=0, GraphState=0, ConfigState=0;
                 ;unsigned int Touch_mSec = 0, ValueUpd_mSec = 0, GraphUpd_mSec = 0;
                 ;
                 ;unsigned int GraphUpdTime = 0;
                 ;signed int Graph_X = -Graph_X_Step;
                 ;signed int ValueLast[3] = {0,0,0};
                 ;
                 ;unsigned int ConfigValue[12], old_confVal;
                 ;eeprom unsigned int ConfigValue_mem[3];
                 ;flash unsigned int ConfigParam[4][12] = {
                 ;//Графики        //АЦП                              //FastAdc
                 ;{10,  10,  10,  5,   5,   5,   5,   5,   5,   5,   5,   1}, //0 - шаг
                 ;{20,  20,  20,  5,   5,   5,   5,   5,   5,   5,   5,   0}, //1 - мин
                 ;{220, 220, 220, 500, 500, 500, 500, 500, 500, 500, 500, 1}, //2 - макс
                 ;{90,  90,  45,  100, 100, 100, 100, 100, 100, 100, 100, 0}  //3 - дефолт
                 ;};
                 ;
                 ;//////////////////////////////////////////////
                 ;
                 ;// Timer 0 overflow interrupt 1 ms
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 01AD {
                 
                 	.CSEG
                 _timer0_ovf_isr:
000cb5 93aa      	ST   -Y,R26
000cb6 93ba      	ST   -Y,R27
000cb7 93ea      	ST   -Y,R30
000cb8 93fa      	ST   -Y,R31
000cb9 b7ef      	IN   R30,SREG
000cba 93ea      	ST   -Y,R30
                 ; 0000 01AE // Reinitialize Timer 0 value
                 ; 0000 01AF TCNT0=0x06;
000cbb e0e6      	LDI  R30,LOW(6)
000cbc bfe2      	OUT  0x32,R30
                 ; 0000 01B0 // Place your code here
                 ; 0000 01B1 if(Touch_mSec < 0xFF) Touch_mSec++;
000cbd 940e 180e 	CALL SUBOPT_0x3A
000cbf 3faf      	CPI  R26,LOW(0xFF)
000cc0 e0e0      	LDI  R30,HIGH(0xFF)
000cc1 07be      	CPC  R27,R30
000cc2 f420      	BRSH _0xFE
000cc3 e9a0      	LDI  R26,LOW(_Touch_mSec)
000cc4 e0b7      	LDI  R27,HIGH(_Touch_mSec)
000cc5 940e 1813 	CALL SUBOPT_0x3B
                 ; 0000 01B2 ValueUpd_mSec++;
                 _0xFE:
000cc7 e9a2      	LDI  R26,LOW(_ValueUpd_mSec)
000cc8 e0b7      	LDI  R27,HIGH(_ValueUpd_mSec)
000cc9 940e 1813 	CALL SUBOPT_0x3B
                 ; 0000 01B3 GraphUpd_mSec++;
000ccb e9a4      	LDI  R26,LOW(_GraphUpd_mSec)
000ccc e0b7      	LDI  R27,HIGH(_GraphUpd_mSec)
000ccd 940e 1813 	CALL SUBOPT_0x3B
                 ; 0000 01B4 }
000ccf 91e9      	LD   R30,Y+
000cd0 bfef      	OUT  SREG,R30
000cd1 91f9      	LD   R31,Y+
000cd2 91e9      	LD   R30,Y+
000cd3 91b9      	LD   R27,Y+
000cd4 91a9      	LD   R26,Y+
000cd5 9518      	RETI
                 ;
                 ;char GetButton(void)
                 ; 0000 01B7 {
                 _GetButton:
                 ; 0000 01B8   char res = 0;
                 ; 0000 01B9   if (Touch_mSec > 50 && TSC2046_GetCoordinates())
000cd6 931a      	ST   -Y,R17
                 ;	res -> R17
000cd7 e010      	LDI  R17,0
000cd8 940e 180e 	CALL SUBOPT_0x3A
000cda 97d3      	SBIW R26,51
000cdb f018      	BRLO _0x100
000cdc dd64      	RCALL _TSC2046_GetCoordinates
000cdd 30e0      	CPI  R30,0
000cde f409      	BRNE _0x101
                 _0x100:
000cdf c05d      	RJMP _0xFF
                 _0x101:
                 ; 0000 01BA   {
                 ; 0000 01BB     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000ce0 e0e6      	LDI  R30,LOW(6)
000ce1 e0f0      	LDI  R31,HIGH(6)
000ce2 15e4      	CP   R30,R4
000ce3 05f5      	CPC  R31,R5
000ce4 f428      	BRSH _0x103
000ce5 e6ea      	LDI  R30,LOW(106)
000ce6 e0f0      	LDI  R31,HIGH(106)
000ce7 164e      	CP   R4,R30
000ce8 065f      	CPC  R5,R31
000ce9 f008      	BRLO _0x104
                 _0x103:
000cea c00e      	RJMP _0x102
                 _0x104:
                 ; 0000 01BC     {
                 ; 0000 01BD       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End) && (Touch_mSec > 150)) res = 1;
000ceb 940e 1819 	CALL SUBOPT_0x3C
000ced f448      	BRSH _0x106
000cee 940e 181e 	CALL SUBOPT_0x3D
000cf0 f430      	BRSH _0x106
000cf1 940e 180e 	CALL SUBOPT_0x3A
000cf3 39a7      	CPI  R26,LOW(0x97)
000cf4 e0e0      	LDI  R30,HIGH(0x97)
000cf5 07be      	CPC  R27,R30
000cf6 f408      	BRSH _0x107
                 _0x106:
000cf7 c001      	RJMP _0x105
                 _0x107:
000cf8 e011      	LDI  R17,LOW(1)
                 ; 0000 01BE     }
                 _0x105:
                 ; 0000 01BF     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0x102:
000cf9 e7ee      	LDI  R30,LOW(126)
000cfa e0f0      	LDI  R31,HIGH(126)
000cfb 15e4      	CP   R30,R4
000cfc 05f5      	CPC  R31,R5
000cfd f428      	BRSH _0x109
000cfe eee2      	LDI  R30,LOW(226)
000cff e0f0      	LDI  R31,HIGH(226)
000d00 164e      	CP   R4,R30
000d01 065f      	CPC  R5,R31
000d02 f008      	BRLO _0x10A
                 _0x109:
000d03 c008      	RJMP _0x108
                 _0x10A:
                 ; 0000 01C0     {
                 ; 0000 01C1       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000d04 940e 1819 	CALL SUBOPT_0x3C
000d06 f418      	BRSH _0x10C
000d07 940e 181e 	CALL SUBOPT_0x3D
000d09 f008      	BRLO _0x10D
                 _0x10C:
000d0a c001      	RJMP _0x10B
                 _0x10D:
000d0b e012      	LDI  R17,LOW(2)
                 ; 0000 01C2     }
                 _0x10B:
                 ; 0000 01C3     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0x108:
000d0c efe6      	LDI  R30,LOW(246)
000d0d e0f0      	LDI  R31,HIGH(246)
000d0e 15e4      	CP   R30,R4
000d0f 05f5      	CPC  R31,R5
000d10 f428      	BRSH _0x10F
000d11 e5ea      	LDI  R30,LOW(346)
000d12 e0f1      	LDI  R31,HIGH(346)
000d13 164e      	CP   R4,R30
000d14 065f      	CPC  R5,R31
000d15 f008      	BRLO _0x110
                 _0x10F:
000d16 c008      	RJMP _0x10E
                 _0x110:
                 ; 0000 01C4     {
                 ; 0000 01C5       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000d17 940e 1819 	CALL SUBOPT_0x3C
000d19 f418      	BRSH _0x112
000d1a 940e 181e 	CALL SUBOPT_0x3D
000d1c f008      	BRLO _0x113
                 _0x112:
000d1d c001      	RJMP _0x111
                 _0x113:
000d1e e013      	LDI  R17,LOW(3)
                 ; 0000 01C6     }
                 _0x111:
                 ; 0000 01C7     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x10E:
000d1f e6ee      	LDI  R30,LOW(366)
000d20 e0f1      	LDI  R31,HIGH(366)
000d21 15e4      	CP   R30,R4
000d22 05f5      	CPC  R31,R5
000d23 f428      	BRSH _0x115
000d24 ede2      	LDI  R30,LOW(466)
000d25 e0f1      	LDI  R31,HIGH(466)
000d26 164e      	CP   R4,R30
000d27 065f      	CPC  R5,R31
000d28 f008      	BRLO _0x116
                 _0x115:
000d29 c00e      	RJMP _0x114
                 _0x116:
                 ; 0000 01C8     {
                 ; 0000 01C9       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End) && (Touch_mSec > 150)) res = 4;
000d2a 940e 1819 	CALL SUBOPT_0x3C
000d2c f448      	BRSH _0x118
000d2d 940e 181e 	CALL SUBOPT_0x3D
000d2f f430      	BRSH _0x118
000d30 940e 180e 	CALL SUBOPT_0x3A
000d32 39a7      	CPI  R26,LOW(0x97)
000d33 e0e0      	LDI  R30,HIGH(0x97)
000d34 07be      	CPC  R27,R30
000d35 f408      	BRSH _0x119
                 _0x118:
000d36 c001      	RJMP _0x117
                 _0x119:
000d37 e014      	LDI  R17,LOW(4)
                 ; 0000 01CA     }
                 _0x117:
                 ; 0000 01CB       Touch_mSec = 0;
                 _0x114:
000d38 e0e0      	LDI  R30,LOW(0)
000d39 93e0 0790 	STS  _Touch_mSec,R30
000d3b 93e0 0791 	STS  _Touch_mSec+1,R30
                 ; 0000 01CC   }
                 ; 0000 01CD   return res;
                 _0xFF:
                 _0x2080004:
000d3d 2fe1      	MOV  R30,R17
                 _0x2080005:
000d3e 9119      	LD   R17,Y+
000d3f 9508      	RET
                 ; 0000 01CE }
                 ;
                 ;void PutParameterText(char Number, unsigned int Color)
                 ; 0000 01D1 {
                 _PutParameterText:
                 ; 0000 01D2   int X = Text_StartX;
                 ; 0000 01D3   int Y = Text_StartY;
                 ; 0000 01D4 
                 ; 0000 01D5   SSD1963_PutString16("                ", X, Y, Color, BLACK);
000d40 940e 1b87 	CALL __SAVELOCR4
                 ;	Number -> Y+6
                 ;	Color -> Y+4
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                +
000d42 e100     +LDI R16 , LOW ( 16 )
000d43 e010     +LDI R17 , HIGH ( 16 )
                 	__GETWRN 16,17,16
                +
000d44 e026     +LDI R18 , LOW ( 6 )
000d45 e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                +
000d46 e2eb     +LDI R30 , LOW ( _0x11A + ( 0 ) )
000d47 e0f5     +LDI R31 , HIGH ( _0x11A + ( 0 ) )
                 	__POINTW1MN _0x11A,0
000d48 940e 1823 	CALL SUBOPT_0x3E
000d4a 940e 1828 	CALL SUBOPT_0x3F
000d4c 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01D6   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d4e e3ec     +LDI R30 , LOW ( _0x11A + ( 17 ) )
000d4f e0f5     +LDI R31 , HIGH ( _0x11A + ( 17 ) )
                 	__POINTW1MN _0x11A,17
000d50 940e 1823 	CALL SUBOPT_0x3E
000d52 940e 182d 	CALL SUBOPT_0x40
000d54 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01D7   switch (Number)
000d56 81ee      	LDD  R30,Y+6
000d57 940e 1834 	CALL SUBOPT_0x41
                 ; 0000 01D8   {
                 ; 0000 01D9     case 0 :
000d59 f489      	BRNE _0x11E
                 ; 0000 01DA       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000d5a e4ed     +LDI R30 , LOW ( _0x11A + ( 34 ) )
000d5b e0f5     +LDI R31 , HIGH ( _0x11A + ( 34 ) )
                 	__POINTW1MN _0x11A,34
000d5c 940e 1823 	CALL SUBOPT_0x3E
000d5e 940e 1828 	CALL SUBOPT_0x3F
000d60 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01DB       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d62 e5e8     +LDI R30 , LOW ( _0x11A + ( 45 ) )
000d63 e0f5     +LDI R31 , HIGH ( _0x11A + ( 45 ) )
                 	__POINTW1MN _0x11A,45
000d64 940e 1823 	CALL SUBOPT_0x3E
000d66 940e 182d 	CALL SUBOPT_0x40
000d68 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01DC     break;
000d6a c199      	RJMP _0x11D
                 ; 0000 01DD     case 1 :
                 _0x11E:
000d6b 30e1      	CPI  R30,LOW(0x1)
000d6c e0a0      	LDI  R26,HIGH(0x1)
000d6d 07fa      	CPC  R31,R26
000d6e f489      	BRNE _0x11F
                 ; 0000 01DE       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000d6f e5ec     +LDI R30 , LOW ( _0x11A + ( 49 ) )
000d70 e0f5     +LDI R31 , HIGH ( _0x11A + ( 49 ) )
                 	__POINTW1MN _0x11A,49
000d71 940e 1823 	CALL SUBOPT_0x3E
000d73 940e 1828 	CALL SUBOPT_0x3F
000d75 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01DF       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d77 e6e0     +LDI R30 , LOW ( _0x11A + ( 53 ) )
000d78 e0f5     +LDI R31 , HIGH ( _0x11A + ( 53 ) )
                 	__POINTW1MN _0x11A,53
000d79 940e 1823 	CALL SUBOPT_0x3E
000d7b 940e 182d 	CALL SUBOPT_0x40
000d7d 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01E0     break;
000d7f c184      	RJMP _0x11D
                 ; 0000 01E1     case 2 :
                 _0x11F:
000d80 30e2      	CPI  R30,LOW(0x2)
000d81 e0a0      	LDI  R26,HIGH(0x2)
000d82 07fa      	CPC  R31,R26
000d83 f489      	BRNE _0x120
                 ; 0000 01E2       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000d84 e6e4     +LDI R30 , LOW ( _0x11A + ( 57 ) )
000d85 e0f5     +LDI R31 , HIGH ( _0x11A + ( 57 ) )
                 	__POINTW1MN _0x11A,57
000d86 940e 1823 	CALL SUBOPT_0x3E
000d88 940e 1828 	CALL SUBOPT_0x3F
000d8a 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01E3       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d8c e7e5     +LDI R30 , LOW ( _0x11A + ( 74 ) )
000d8d e0f5     +LDI R31 , HIGH ( _0x11A + ( 74 ) )
                 	__POINTW1MN _0x11A,74
000d8e 940e 1823 	CALL SUBOPT_0x3E
000d90 940e 182d 	CALL SUBOPT_0x40
000d92 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01E4     break;
000d94 c16f      	RJMP _0x11D
                 ; 0000 01E5     /*
                 ; 0000 01E6     case 3 :
                 ; 0000 01E7       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 01E8       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01E9     break;
                 ; 0000 01EA     case 4 :
                 ; 0000 01EB       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 01EC       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01ED     break;
                 ; 0000 01EE    */
                 ; 0000 01EF 
                 ; 0000 01F0     case 5:
                 _0x120:
000d95 30e5      	CPI  R30,LOW(0x5)
000d96 e0a0      	LDI  R26,HIGH(0x5)
000d97 07fa      	CPC  R31,R26
000d98 f021      	BREQ _0x122
                 ; 0000 01F1     case 6:
000d99 30e6      	CPI  R30,LOW(0x6)
000d9a e0a0      	LDI  R26,HIGH(0x6)
000d9b 07fa      	CPC  R31,R26
000d9c f409      	BRNE _0x123
                 _0x122:
                 ; 0000 01F2     case 7:
000d9d c006      	RJMP _0x124
                 _0x123:
000d9e 30e7      	CPI  R30,LOW(0x7)
000d9f e0a0      	LDI  R26,HIGH(0x7)
000da0 07fa      	CPC  R31,R26
000da1 f011      	BREQ PC+3
000da2 940c 0e0f 	JMP _0x125
                 _0x124:
                 ; 0000 01F3       SSD1963_PutString16("ОБН", X, Y, Color, BLACK);
                +
000da4 e8e1     +LDI R30 , LOW ( _0x11A + ( 86 ) )
000da5 e0f5     +LDI R31 , HIGH ( _0x11A + ( 86 ) )
                 	__POINTW1MN _0x11A,86
000da6 940e 1823 	CALL SUBOPT_0x3E
000da8 940e 1828 	CALL SUBOPT_0x3F
000daa 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01F4       SSD1963_PutString16("АМП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000dac e8e5     +LDI R30 , LOW ( _0x11A + ( 90 ) )
000dad e0f5     +LDI R31 , HIGH ( _0x11A + ( 90 ) )
                 	__POINTW1MN _0x11A,90
000dae 940e 1823 	CALL SUBOPT_0x3E
000db0 940e 182d 	CALL SUBOPT_0x40
000db2 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01F5 
                 ; 0000 01F6       X = Text_StartX + Value_Lenght;
                +
000db4 e500     +LDI R16 , LOW ( 80 )
000db5 e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                 ; 0000 01F7       SSD1963_PutValue16(GraphUpdTime, X, Y, 4, Color, BLACK);
000db6 91e0 0796 	LDS  R30,_GraphUpdTime
000db8 91f0 0797 	LDS  R31,_GraphUpdTime+1
000dba 940e 1823 	CALL SUBOPT_0x3E
000dbc 933a      	ST   -Y,R19
000dbd 932a      	ST   -Y,R18
000dbe e0e4      	LDI  R30,LOW(4)
000dbf 93ea      	ST   -Y,R30
000dc0 85eb      	LDD  R30,Y+11
000dc1 85fc      	LDD  R31,Y+11+1
000dc2 940e 1691 	CALL SUBOPT_0xE
000dc4 940e 085b 	CALL _SSD1963_PutValue16
                 ; 0000 01F8       X += Value_Lenght + FONT_HEIGHT + FONT_HEIGHT;
                +
000dc6 5a00     +SUBI R16 , LOW ( - 96 )
000dc7 4f1f     +SBCI R17 , HIGH ( - 96 )
                 	__ADDWRN 16,17,96
                 ; 0000 01F9       SSD1963_PutString16("ПЕР", X, Y, Color, BLACK);
                +
000dc8 e8e9     +LDI R30 , LOW ( _0x11A + ( 94 ) )
000dc9 e0f5     +LDI R31 , HIGH ( _0x11A + ( 94 ) )
                 	__POINTW1MN _0x11A,94
000dca 940e 1823 	CALL SUBOPT_0x3E
000dcc 940e 1828 	CALL SUBOPT_0x3F
000dce 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 01FA       X += Value_Lenght;
                +
000dd0 5c00     +SUBI R16 , LOW ( - 64 )
000dd1 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01FB       SSD1963_PutValue16(rx_buffer_overflow0, X, Y, 1, Color, BLACK);
000dd2 e0e0      	LDI  R30,0
000dd3 fc20      	SBRC R2,0
000dd4 e0e1      	LDI  R30,1
000dd5 940e 1837 	CALL SUBOPT_0x42
000dd7 940e 1839 	CALL SUBOPT_0x43
000dd9 940e 1691 	CALL SUBOPT_0xE
000ddb 940e 1840 	CALL SUBOPT_0x44
                 ; 0000 01FC 
                 ; 0000 01FD       X = Text_StartX + Value_Lenght;
                 ; 0000 01FE       Y = Text_StartY + FONT_HEIGHT;
                 ; 0000 01FF       SSD1963_PutValue16(ConfigValue[0], X, Y, 3, Color, (Number==5)?DGRAY:BLACK);
000ddd 91e0 07a0 	LDS  R30,_ConfigValue
000ddf 91f0 07a1 	LDS  R31,_ConfigValue+1
000de1 940e 1823 	CALL SUBOPT_0x3E
000de3 940e 1847 	CALL SUBOPT_0x45
000de5 9715      	SBIW R26,5
000de6 f419      	BRNE _0x126
000de7 e0e8      	LDI  R30,LOW(8456)
000de8 e2f1      	LDI  R31,HIGH(8456)
000de9 c002      	RJMP _0x127
                 _0x126:
000dea e0e0      	LDI  R30,LOW(0)
000deb e0f0      	LDI  R31,HIGH(0)
                 _0x127:
000dec 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 0200       X += Value_Lenght;
                 ; 0000 0201       SSD1963_PutValue16(ConfigValue[1], X, Y, 3, Color, (Number==6)?DGRAY:BLACK);
                +
000dee 91e0 07a2+LDS R30 , _ConfigValue + ( 2 )
000df0 91f0 07a3+LDS R31 , _ConfigValue + ( 2 ) + 1
                 	__GETW1MN _ConfigValue,2
000df2 940e 1823 	CALL SUBOPT_0x3E
000df4 940e 1847 	CALL SUBOPT_0x45
000df6 9716      	SBIW R26,6
000df7 f419      	BRNE _0x129
000df8 e0e8      	LDI  R30,LOW(8456)
000df9 e2f1      	LDI  R31,HIGH(8456)
000dfa c002      	RJMP _0x12A
                 _0x129:
000dfb e0e0      	LDI  R30,LOW(0)
000dfc e0f0      	LDI  R31,HIGH(0)
                 _0x12A:
000dfd 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 0202       X += Value_Lenght;
                 ; 0000 0203       SSD1963_PutValue16(ConfigValue[2], X, Y, 3, Color, (Number==7)?DGRAY:BLACK);
                +
000dff 91e0 07a4+LDS R30 , _ConfigValue + ( 4 )
000e01 91f0 07a5+LDS R31 , _ConfigValue + ( 4 ) + 1
                 	__GETW1MN _ConfigValue,4
000e03 940e 1823 	CALL SUBOPT_0x3E
000e05 940e 1847 	CALL SUBOPT_0x45
000e07 9717      	SBIW R26,7
000e08 f419      	BRNE _0x12C
000e09 e0e8      	LDI  R30,LOW(8456)
000e0a e2f1      	LDI  R31,HIGH(8456)
000e0b c002      	RJMP _0x12D
                 _0x12C:
000e0c e0e0      	LDI  R30,LOW(0)
000e0d e0f0      	LDI  R31,HIGH(0)
                 _0x12D:
000e0e c0f1      	RJMP _0x20D
                 ; 0000 0204     break;
                 ; 0000 0205     case 8:
                 _0x125:
000e0f 30e8      	CPI  R30,LOW(0x8)
000e10 e0a0      	LDI  R26,HIGH(0x8)
000e11 07fa      	CPC  R31,R26
000e12 f021      	BREQ _0x130
                 ; 0000 0206     case 9:
000e13 30e9      	CPI  R30,LOW(0x9)
000e14 e0a0      	LDI  R26,HIGH(0x9)
000e15 07fa      	CPC  R31,R26
000e16 f409      	BRNE _0x131
                 _0x130:
                 ; 0000 0207     case 10:
000e17 c004      	RJMP _0x132
                 _0x131:
000e18 30ea      	CPI  R30,LOW(0xA)
000e19 e0a0      	LDI  R26,HIGH(0xA)
000e1a 07fa      	CPC  R31,R26
000e1b f409      	BRNE _0x133
                 _0x132:
                 ; 0000 0208     case 11:
000e1c c004      	RJMP _0x134
                 _0x133:
000e1d 30eb      	CPI  R30,LOW(0xB)
000e1e e0a0      	LDI  R26,HIGH(0xB)
000e1f 07fa      	CPC  R31,R26
000e20 f409      	BRNE _0x135
                 _0x134:
                 ; 0000 0209     case 12:
000e21 c004      	RJMP _0x136
                 _0x135:
000e22 30ec      	CPI  R30,LOW(0xC)
000e23 e0a0      	LDI  R26,HIGH(0xC)
000e24 07fa      	CPC  R31,R26
000e25 f409      	BRNE _0x137
                 _0x136:
                 ; 0000 020A     case 13:
000e26 c006      	RJMP _0x138
                 _0x137:
000e27 30ed      	CPI  R30,LOW(0xD)
000e28 e0a0      	LDI  R26,HIGH(0xD)
000e29 07fa      	CPC  R31,R26
000e2a f011      	BREQ PC+3
000e2b 940c 0ea6 	JMP _0x139
                 _0x138:
                 ; 0000 020B       SSD1963_PutString16(" КН", X, Y, Color, BLACK);
                +
000e2d e8ed     +LDI R30 , LOW ( _0x11A + ( 98 ) )
000e2e e0f5     +LDI R31 , HIGH ( _0x11A + ( 98 ) )
                 	__POINTW1MN _0x11A,98
000e2f 940e 1823 	CALL SUBOPT_0x3E
000e31 940e 1828 	CALL SUBOPT_0x3F
000e33 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 020C       SSD1963_PutString16(" КТ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e35 e9e1     +LDI R30 , LOW ( _0x11A + ( 102 ) )
000e36 e0f5     +LDI R31 , HIGH ( _0x11A + ( 102 ) )
                 	__POINTW1MN _0x11A,102
000e37 940e 1823 	CALL SUBOPT_0x3E
000e39 940e 182d 	CALL SUBOPT_0x40
000e3b 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 020D 
                 ; 0000 020E       X = Text_StartX + Value_Lenght;
                +
000e3d e500     +LDI R16 , LOW ( 80 )
000e3e e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                 ; 0000 020F       SSD1963_PutValue16(ConfigValue[3], X, Y, 3, Color, (Number==8)?DGRAY:BLACK);
                +
000e3f 91e0 07a6+LDS R30 , _ConfigValue + ( 6 )
000e41 91f0 07a7+LDS R31 , _ConfigValue + ( 6 ) + 1
                 	__GETW1MN _ConfigValue,6
000e43 940e 1823 	CALL SUBOPT_0x3E
000e45 940e 1847 	CALL SUBOPT_0x45
000e47 9718      	SBIW R26,8
000e48 f419      	BRNE _0x13A
000e49 e0e8      	LDI  R30,LOW(8456)
000e4a e2f1      	LDI  R31,HIGH(8456)
000e4b c002      	RJMP _0x13B
                 _0x13A:
000e4c e0e0      	LDI  R30,LOW(0)
000e4d e0f0      	LDI  R31,HIGH(0)
                 _0x13B:
000e4e 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 0210       X += Value_Lenght;
                 ; 0000 0211       SSD1963_PutValue16(ConfigValue[4], X, Y, 3, Color, (Number==9)?DGRAY:BLACK);
                +
000e50 91e0 07a8+LDS R30 , _ConfigValue + ( 8 )
000e52 91f0 07a9+LDS R31 , _ConfigValue + ( 8 ) + 1
                 	__GETW1MN _ConfigValue,8
000e54 940e 1823 	CALL SUBOPT_0x3E
000e56 940e 1847 	CALL SUBOPT_0x45
000e58 9719      	SBIW R26,9
000e59 f419      	BRNE _0x13D
000e5a e0e8      	LDI  R30,LOW(8456)
000e5b e2f1      	LDI  R31,HIGH(8456)
000e5c c002      	RJMP _0x13E
                 _0x13D:
000e5d e0e0      	LDI  R30,LOW(0)
000e5e e0f0      	LDI  R31,HIGH(0)
                 _0x13E:
000e5f 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 0212       X += Value_Lenght;
                 ; 0000 0213       SSD1963_PutValue16(ConfigValue[5], X, Y, 3, Color, (Number==10)?DGRAY:BLACK);
                +
000e61 91e0 07aa+LDS R30 , _ConfigValue + ( 10 )
000e63 91f0 07ab+LDS R31 , _ConfigValue + ( 10 ) + 1
                 	__GETW1MN _ConfigValue,10
000e65 940e 1823 	CALL SUBOPT_0x3E
000e67 940e 1847 	CALL SUBOPT_0x45
000e69 971a      	SBIW R26,10
000e6a f419      	BRNE _0x140
000e6b e0e8      	LDI  R30,LOW(8456)
000e6c e2f1      	LDI  R31,HIGH(8456)
000e6d c002      	RJMP _0x141
                 _0x140:
000e6e e0e0      	LDI  R30,LOW(0)
000e6f e0f0      	LDI  R31,HIGH(0)
                 _0x141:
000e70 93fa      	ST   -Y,R31
000e71 93ea      	ST   -Y,R30
000e72 940e 1840 	CALL SUBOPT_0x44
                 ; 0000 0214 
                 ; 0000 0215       X = Text_StartX + Value_Lenght;
                 ; 0000 0216       Y = Text_StartY + FONT_HEIGHT;
                 ; 0000 0217       SSD1963_PutValue16(ConfigValue[6], X, Y, 3, Color, (Number==11)?DGRAY:BLACK);
                +
000e74 91e0 07ac+LDS R30 , _ConfigValue + ( 12 )
000e76 91f0 07ad+LDS R31 , _ConfigValue + ( 12 ) + 1
                 	__GETW1MN _ConfigValue,12
000e78 940e 1823 	CALL SUBOPT_0x3E
000e7a 940e 1847 	CALL SUBOPT_0x45
000e7c 971b      	SBIW R26,11
000e7d f419      	BRNE _0x143
000e7e e0e8      	LDI  R30,LOW(8456)
000e7f e2f1      	LDI  R31,HIGH(8456)
000e80 c002      	RJMP _0x144
                 _0x143:
000e81 e0e0      	LDI  R30,LOW(0)
000e82 e0f0      	LDI  R31,HIGH(0)
                 _0x144:
000e83 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 0218       X += Value_Lenght;
                 ; 0000 0219       SSD1963_PutValue16(ConfigValue[7], X, Y, 3, Color, (Number==12)?DGRAY:BLACK);
                +
000e85 91e0 07ae+LDS R30 , _ConfigValue + ( 14 )
000e87 91f0 07af+LDS R31 , _ConfigValue + ( 14 ) + 1
                 	__GETW1MN _ConfigValue,14
000e89 940e 1823 	CALL SUBOPT_0x3E
000e8b 940e 1847 	CALL SUBOPT_0x45
000e8d 971c      	SBIW R26,12
000e8e f419      	BRNE _0x146
000e8f e0e8      	LDI  R30,LOW(8456)
000e90 e2f1      	LDI  R31,HIGH(8456)
000e91 c002      	RJMP _0x147
                 _0x146:
000e92 e0e0      	LDI  R30,LOW(0)
000e93 e0f0      	LDI  R31,HIGH(0)
                 _0x147:
000e94 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 021A       X += Value_Lenght;
                 ; 0000 021B       SSD1963_PutValue16(ConfigValue[8], X, Y, 3, Color, (Number==13)?DGRAY:BLACK);
                +
000e96 91e0 07b0+LDS R30 , _ConfigValue + ( 16 )
000e98 91f0 07b1+LDS R31 , _ConfigValue + ( 16 ) + 1
                 	__GETW1MN _ConfigValue,16
000e9a 940e 1823 	CALL SUBOPT_0x3E
000e9c 940e 1847 	CALL SUBOPT_0x45
000e9e 971d      	SBIW R26,13
000e9f f419      	BRNE _0x149
000ea0 e0e8      	LDI  R30,LOW(8456)
000ea1 e2f1      	LDI  R31,HIGH(8456)
000ea2 c002      	RJMP _0x14A
                 _0x149:
000ea3 e0e0      	LDI  R30,LOW(0)
000ea4 e0f0      	LDI  R31,HIGH(0)
                 _0x14A:
000ea5 c05a      	RJMP _0x20D
                 ; 0000 021C     break;
                 ; 0000 021D     case 14:
                 _0x139:
000ea6 30ee      	CPI  R30,LOW(0xE)
000ea7 e0a0      	LDI  R26,HIGH(0xE)
000ea8 07fa      	CPC  R31,R26
000ea9 f021      	BREQ _0x14D
                 ; 0000 021E     case 15:
000eaa 30ef      	CPI  R30,LOW(0xF)
000eab e0a0      	LDI  R26,HIGH(0xF)
000eac 07fa      	CPC  R31,R26
000ead f409      	BRNE _0x14E
                 _0x14D:
                 ; 0000 021F     case 16:
000eae c006      	RJMP _0x14F
                 _0x14E:
000eaf 31e0      	CPI  R30,LOW(0x10)
000eb0 e0a0      	LDI  R26,HIGH(0x10)
000eb1 07fa      	CPC  R31,R26
000eb2 f011      	BREQ PC+3
000eb3 940c 0f04 	JMP _0x11D
                 _0x14F:
                 ; 0000 0220       SSD1963_PutString16("КНТ", X, Y, Color, BLACK);
                +
000eb5 e9e5     +LDI R30 , LOW ( _0x11A + ( 106 ) )
000eb6 e0f5     +LDI R31 , HIGH ( _0x11A + ( 106 ) )
                 	__POINTW1MN _0x11A,106
000eb7 940e 1823 	CALL SUBOPT_0x3E
000eb9 940e 1828 	CALL SUBOPT_0x3F
000ebb 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0221       SSD1963_PutString16("БЫСТАЦП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000ebd e9e9     +LDI R30 , LOW ( _0x11A + ( 110 ) )
000ebe e0f5     +LDI R31 , HIGH ( _0x11A + ( 110 ) )
                 	__POINTW1MN _0x11A,110
000ebf 940e 1823 	CALL SUBOPT_0x3E
000ec1 940e 182d 	CALL SUBOPT_0x40
000ec3 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0222       X += Value_Lenght;
                +
000ec5 5c00     +SUBI R16 , LOW ( - 64 )
000ec6 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 0223       SSD1963_PutValue16(ConfigValue[9], X, Y, 3, Color, (Number==14)?DGRAY:BLACK);
                +
000ec7 91e0 07b2+LDS R30 , _ConfigValue + ( 18 )
000ec9 91f0 07b3+LDS R31 , _ConfigValue + ( 18 ) + 1
                 	__GETW1MN _ConfigValue,18
000ecb 940e 1823 	CALL SUBOPT_0x3E
000ecd 940e 1847 	CALL SUBOPT_0x45
000ecf 971e      	SBIW R26,14
000ed0 f419      	BRNE _0x151
000ed1 e0e8      	LDI  R30,LOW(8456)
000ed2 e2f1      	LDI  R31,HIGH(8456)
000ed3 c002      	RJMP _0x152
                 _0x151:
000ed4 e0e0      	LDI  R30,LOW(0)
000ed5 e0f0      	LDI  R31,HIGH(0)
                 _0x152:
000ed6 940e 1852 	CALL SUBOPT_0x46
                 ; 0000 0224       X += Value_Lenght;
                 ; 0000 0225       SSD1963_PutValue16(ConfigValue[10], X, Y, 3, Color, (Number==15)?DGRAY:BLACK);
                +
000ed8 91e0 07b4+LDS R30 , _ConfigValue + ( 20 )
000eda 91f0 07b5+LDS R31 , _ConfigValue + ( 20 ) + 1
                 	__GETW1MN _ConfigValue,20
000edc 940e 1823 	CALL SUBOPT_0x3E
000ede 940e 1847 	CALL SUBOPT_0x45
000ee0 971f      	SBIW R26,15
000ee1 f419      	BRNE _0x154
000ee2 e0e8      	LDI  R30,LOW(8456)
000ee3 e2f1      	LDI  R31,HIGH(8456)
000ee4 c002      	RJMP _0x155
                 _0x154:
000ee5 e0e0      	LDI  R30,LOW(0)
000ee6 e0f0      	LDI  R31,HIGH(0)
                 _0x155:
000ee7 93fa      	ST   -Y,R31
000ee8 93ea      	ST   -Y,R30
000ee9 940e 085b 	CALL _SSD1963_PutValue16
                 ; 0000 0226       Y += FONT_HEIGHT;
                +
000eeb 5f20     +SUBI R18 , LOW ( - 16 )
000eec 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 0227       SSD1963_PutValue16(ConfigValue[11], X, Y, 1, Color, (Number==16)?DGRAY:BLACK);
                +
000eed 91e0 07b6+LDS R30 , _ConfigValue + ( 22 )
000eef 91f0 07b7+LDS R31 , _ConfigValue + ( 22 ) + 1
                 	__GETW1MN _ConfigValue,22
000ef1 940e 1823 	CALL SUBOPT_0x3E
000ef3 940e 1839 	CALL SUBOPT_0x43
000ef5 93fa      	ST   -Y,R31
000ef6 93ea      	ST   -Y,R30
000ef7 85af      	LDD  R26,Y+15
000ef8 e0b0      	LDI  R27,0
000ef9 9750      	SBIW R26,16
000efa f419      	BRNE _0x157
000efb e0e8      	LDI  R30,LOW(8456)
000efc e2f1      	LDI  R31,HIGH(8456)
000efd c002      	RJMP _0x158
                 _0x157:
000efe e0e0      	LDI  R30,LOW(0)
000eff e0f0      	LDI  R31,HIGH(0)
                 _0x158:
                 _0x20D:
000f00 93fa      	ST   -Y,R31
000f01 93ea      	ST   -Y,R30
000f02 940e 085b 	CALL _SSD1963_PutValue16
                 ; 0000 0228     break;
                 ; 0000 0229   }
                 _0x11D:
                 ; 0000 022A }
000f04 940e 1b8e 	CALL __LOADLOCR4
                 _0x2080003:
000f06 9627      	ADIW R28,7
000f07 9508      	RET
                 
                 	.DSEG
                 _0x11A:
00052b           	.BYTE 0x76
                 ;
                 ;//Функция вывода напряжения(тока) и частоты
                 ;void PutParameterValue(char v1, char v2, char v3, char fHz)
                 ; 0000 022E {
                 
                 	.CSEG
                 _PutParameterValue:
                 ; 0000 022F     int X = Value_StartX;
                 ; 0000 0230     int Y = Value_StartY ;
                 ; 0000 0231     unsigned int Color = BLUE;
                 ; 0000 0232 
                 ; 0000 0233     SSD1963_PutString16("            ", X, Y, Color, BLACK);
000f08 940e 1b85 	CALL __SAVELOCR6
                 ;	v1 -> Y+9
                 ;	v2 -> Y+8
                 ;	v3 -> Y+7
                 ;	fHz -> Y+6
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                 ;	Color -> R20,R21
                +
000f0a e202     +LDI R16 , LOW ( 290 )
000f0b e011     +LDI R17 , HIGH ( 290 )
                 	__GETWRN 16,17,290
                +
000f0c e026     +LDI R18 , LOW ( 6 )
000f0d e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                +
000f0e ef48     +LDI R20 , LOW ( 248 )
000f0f e050     +LDI R21 , HIGH ( 248 )
                 	__GETWRN 20,21,248
                +
000f10 eae1     +LDI R30 , LOW ( _0x15A + ( 0 ) )
000f11 e0f5     +LDI R31 , HIGH ( _0x15A + ( 0 ) )
                 	__POINTW1MN _0x15A,0
000f12 940e 1823 	CALL SUBOPT_0x3E
000f14 940e 1859 	CALL SUBOPT_0x47
000f16 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0234     SSD1963_PutString16("            ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000f18 eaee     +LDI R30 , LOW ( _0x15A + ( 13 ) )
000f19 e0f5     +LDI R31 , HIGH ( _0x15A + ( 13 ) )
                 	__POINTW1MN _0x15A,13
000f1a 940e 1823 	CALL SUBOPT_0x3E
000f1c 01f9      	MOVW R30,R18
000f1d 9670      	ADIW R30,16
000f1e 93fa      	ST   -Y,R31
000f1f 93ea      	ST   -Y,R30
000f20 940e 185e 	CALL SUBOPT_0x48
000f22 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0235 
                 ; 0000 0236     if(ParameterState != 2)
000f24 91a0 078c 	LDS  R26,_ParameterState
000f26 30a2      	CPI  R26,LOW(0x2)
000f27 f151      	BREQ _0x15B
                 ; 0000 0237     {
                 ; 0000 0238         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
000f28 85e9      	LDD  R30,Y+9
000f29 940e 1837 	CALL SUBOPT_0x42
000f2b 940e 1861 	CALL SUBOPT_0x49
000f2d 940e 1866 	CALL SUBOPT_0x4A
                 ; 0000 0239         X += Value_Lenght;
                 ; 0000 023A         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
000f2f 940e 16aa 	CALL SUBOPT_0x13
000f31 940e 1823 	CALL SUBOPT_0x3E
000f33 940e 1861 	CALL SUBOPT_0x49
000f35 940e 1866 	CALL SUBOPT_0x4A
                 ; 0000 023B         X += Value_Lenght;
                 ; 0000 023C         SSD1963_PutValue16(v3, X, Y, 3, Color, BLACK);
000f37 81ef      	LDD  R30,Y+7
000f38 940e 1837 	CALL SUBOPT_0x42
000f3a 940e 1861 	CALL SUBOPT_0x49
000f3c 940e 085b 	CALL _SSD1963_PutValue16
                 ; 0000 023D         X = Value_StartX + Value_Lenght;
                +
000f3e e602     +LDI R16 , LOW ( 354 )
000f3f e011     +LDI R17 , HIGH ( 354 )
                 	__GETWRN 16,17,354
                 ; 0000 023E         Y += FONT_HEIGHT;
                +
000f40 5f20     +SUBI R18 , LOW ( - 16 )
000f41 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 023F         SSD1963_PutValue16(fHz, X, Y, 3, Color, BLACK);
000f42 81ee      	LDD  R30,Y+6
000f43 940e 1837 	CALL SUBOPT_0x42
000f45 940e 1861 	CALL SUBOPT_0x49
000f47 940e 1866 	CALL SUBOPT_0x4A
                 ; 0000 0240         X += Value_Lenght;
                 ; 0000 0241         SSD1963_PutString16("ГЦ", X, Y, Color, BLACK);
                +
000f49 ebeb     +LDI R30 , LOW ( _0x15A + ( 26 ) )
000f4a e0f5     +LDI R31 , HIGH ( _0x15A + ( 26 ) )
                 	__POINTW1MN _0x15A,26
000f4b 940e 1823 	CALL SUBOPT_0x3E
000f4d 940e 1859 	CALL SUBOPT_0x47
000f4f 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0242     }
                 ; 0000 0243     else
000f51 c013      	RJMP _0x15C
                 _0x15B:
                 ; 0000 0244     {
                 ; 0000 0245         X += Value_Lenght;
                +
000f52 5c00     +SUBI R16 , LOW ( - 64 )
000f53 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 0246         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
000f54 85e9      	LDD  R30,Y+9
000f55 940e 1837 	CALL SUBOPT_0x42
000f57 940e 1861 	CALL SUBOPT_0x49
000f59 940e 085b 	CALL _SSD1963_PutValue16
                 ; 0000 0247         Y += FONT_HEIGHT;
                +
000f5b 5f20     +SUBI R18 , LOW ( - 16 )
000f5c 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 0248         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
000f5d 940e 16aa 	CALL SUBOPT_0x13
000f5f 940e 1823 	CALL SUBOPT_0x3E
000f61 940e 1861 	CALL SUBOPT_0x49
000f63 940e 085b 	CALL _SSD1963_PutValue16
                 ; 0000 0249     }
                 _0x15C:
                 ; 0000 024A }
000f65 940e 1b8c 	CALL __LOADLOCR6
000f67 962a      	ADIW R28,10
000f68 9508      	RET
                 
                 	.DSEG
                 _0x15A:
0005a1           	.BYTE 0x1D
                 ;
                 ;void StartPaint()
                 ; 0000 024D {
                 
                 	.CSEG
                 _StartPaint:
                 ; 0000 024E     //Чтоб первая точка легла
                 ; 0000 024F     Graph_X = -Graph_X_Step;
000f69 efea      	LDI  R30,LOW(65530)
000f6a efff      	LDI  R31,HIGH(65530)
000f6b 940e 186b 	CALL SUBOPT_0x4B
                 ; 0000 0250 }
000f6d 9508      	RET
                 ;
                 ;inline void Paint_Phase(void)
                 ; 0000 0253 {
                 _Paint_Phase:
                 ; 0000 0254     signed int Value[3];
                 ; 0000 0255     unsigned int Color[] = {RED, YELLOW, GREEN};
                 ; 0000 0256     signed int Lenght = Graph_X + (Graph_X_Step * Graph_Step_N);
                 ; 0000 0257     signed int mid = Graph_Y_Mid;
                 ; 0000 0258     char i, j;
                 ; 0000 0259 
                 ; 0000 025A     if(Graph_X > Graph_X_Max)  //Некуда дальше
000f6e 972c      	SBIW R28,12
000f6f e0e0      	LDI  R30,LOW(0)
000f70 83e8      	ST   Y,R30
000f71 e1ef      	LDI  R30,LOW(31)
000f72 83e9      	STD  Y+1,R30
000f73 e0e7      	LDI  R30,LOW(7)
000f74 83ea      	STD  Y+2,R30
000f75 efef      	LDI  R30,LOW(255)
000f76 83eb      	STD  Y+3,R30
000f77 e0e7      	LDI  R30,LOW(7)
000f78 83ec      	STD  Y+4,R30
000f79 eee0      	LDI  R30,LOW(224)
000f7a 83ed      	STD  Y+5,R30
000f7b 940e 1b85 	CALL __SAVELOCR6
                 ;	Value -> Y+12
                 ;	Color -> Y+6
                 ;	Lenght -> R16,R17
                 ;	mid -> R18,R19
                 ;	i -> R21
                 ;	j -> R20
000f7d 940e 1870 	CALL SUBOPT_0x4C
000f7f 963c      	ADIW R30,12
000f80 018f      	MOVW R16,R30
                +
000f81 e829     +LDI R18 , LOW ( 137 )
000f82 e030     +LDI R19 , HIGH ( 137 )
                 	__GETWRN 18,19,137
000f83 940e 1875 	CALL SUBOPT_0x4D
000f85 f064      	BRLT _0x15D
                 ; 0000 025B     {
                 ; 0000 025C         GraphUpdTime = GraphUpd_mSec;
000f86 940e 187d 	CALL SUBOPT_0x4E
                 ; 0000 025D         while(rx_counter0) getchar0();
                 _0x15E:
000f88 91e0 0719 	LDS  R30,_rx_counter0
000f8a 30e0      	CPI  R30,0
000f8b f019      	BREQ _0x160
000f8c 940e 0b0c 	CALL _getchar0
000f8e cff9      	RJMP _0x15E
                 _0x160:
                 ; 0000 025E GraphState = 0;
000f8f e0e0      	LDI  R30,LOW(0)
000f90 93e0 078e 	STS  _GraphState,R30
                 ; 0000 025F     }
                 ; 0000 0260 
                 ; 0000 0261     if( rx_counter0 < 2 || (rx_counter0 < 3 && ParameterState != 2))
                 _0x15D:
000f92 91a0 0719 	LDS  R26,_rx_counter0
000f94 30a2      	CPI  R26,LOW(0x2)
000f95 f038      	BRLO _0x162
000f96 30a3      	CPI  R26,LOW(0x3)
000f97 f420      	BRSH _0x163
000f98 91a0 078c 	LDS  R26,_ParameterState
000f9a 30a2      	CPI  R26,LOW(0x2)
000f9b f409      	BRNE _0x162
                 _0x163:
000f9c c014      	RJMP _0x161
                 _0x162:
                 ; 0000 0262     {
                 ; 0000 0263         if(GraphUpd_mSec > 100)
000f9d 91a0 0794 	LDS  R26,_GraphUpd_mSec
000f9f 91b0 0795 	LDS  R27,_GraphUpd_mSec+1
000fa1 36a5      	CPI  R26,LOW(0x65)
000fa2 e0e0      	LDI  R30,HIGH(0x65)
000fa3 07be      	CPC  R27,R30
000fa4 f060      	BRLO _0x166
                 ; 0000 0264         {
                 ; 0000 0265             GraphUpdTime = GraphUpd_mSec;
000fa5 940e 187d 	CALL SUBOPT_0x4E
                 ; 0000 0266             while(rx_counter0) getchar0();
                 _0x167:
000fa7 91e0 0719 	LDS  R30,_rx_counter0
000fa9 30e0      	CPI  R30,0
000faa f019      	BREQ _0x169
000fab 940e 0b0c 	CALL _getchar0
000fad cff9      	RJMP _0x167
                 _0x169:
                 ; 0000 0267 GraphState = 0;
000fae e0e0      	LDI  R30,LOW(0)
000faf 93e0 078e 	STS  _GraphState,R30
                 ; 0000 0268         }
                 ; 0000 0269     }
                 _0x166:
                 ; 0000 026A 
                 ; 0000 026B     if(GraphState == 0 || (TOUCH_IRQ < 1 && Touch_mSec > 50)) goto _return; //Увеличиваем
                 _0x161:
000fb1 91a0 078e 	LDS  R26,_GraphState
000fb3 30a0      	CPI  R26,LOW(0x0)
000fb4 f041      	BREQ _0x16B
000fb5 940e 176b 	CALL SUBOPT_0x27
000fb7 f420      	BRSH _0x16C
000fb8 940e 180e 	CALL SUBOPT_0x3A
000fba 97d3      	SBIW R26,51
000fbb f408      	BRSH _0x16B
                 _0x16C:
000fbc c001      	RJMP _0x16A
                 _0x16B:
000fbd c195      	RJMP _0x16F
                 ; 0000 026C 
                 ; 0000 026D     if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
                 _0x16A:
                +
000fbe 3d0f     +CPI R16 , LOW ( 479 )
000fbf e0e1     +LDI R30 , HIGH ( 479 )
000fc0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
000fc1 f014      	BRLT _0x170
                +
000fc2 ed0e     +LDI R16 , LOW ( 478 )
000fc3 e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 026E 
                 ; 0000 026F     if(Graph_X >= Graph_X_Min)
                 _0x170:
000fc4 91a0 0799 	LDS  R26,_Graph_X+1
000fc6 23aa      	TST  R26
000fc7 f412      	BRPL PC+3
000fc8 940c 100e 	JMP _0x171
                 ; 0000 0270     {
                 ; 0000 0271         // очищаем перед собой столбец пикселей
                 ; 0000 0272         SSD1963_DrawFillRect(Graph_X, Lenght+2, Graph_Y_Min, Graph_Y_Max+1, BLACK);
000fca 940e 1870 	CALL SUBOPT_0x4C
000fcc 93fa      	ST   -Y,R31
000fcd 93ea      	ST   -Y,R30
000fce 01f8      	MOVW R30,R16
000fcf 9632      	ADIW R30,2
000fd0 93fa      	ST   -Y,R31
000fd1 93ea      	ST   -Y,R30
000fd2 e2ea      	LDI  R30,LOW(42)
000fd3 e0f0      	LDI  R31,HIGH(42)
000fd4 93fa      	ST   -Y,R31
000fd5 93ea      	ST   -Y,R30
000fd6 eee9      	LDI  R30,LOW(233)
000fd7 e0f0      	LDI  R31,HIGH(233)
000fd8 940e 1691 	CALL SUBOPT_0xE
000fda 940e 09d1 	CALL _SSD1963_DrawFillRect
                 ; 0000 0273         //Линия нуля
                 ; 0000 0274         SSD1963_DrawFastLine(Graph_X, Lenght, mid, mid, DGRAY);
000fdc 940e 1886 	CALL SUBOPT_0x4F
000fde 933a      	ST   -Y,R19
000fdf 932a      	ST   -Y,R18
000fe0 933a      	ST   -Y,R19
000fe1 932a      	ST   -Y,R18
000fe2 940e 1888 	CALL SUBOPT_0x50
                 ; 0000 0275         SSD1963_DrawFastLine(Graph_X, Lenght, mid+45, mid+45, DGRAY);
000fe4 01f9      	MOVW R30,R18
000fe5 96bd      	ADIW R30,45
000fe6 93fa      	ST   -Y,R31
000fe7 93ea      	ST   -Y,R30
000fe8 01f9      	MOVW R30,R18
000fe9 96bd      	ADIW R30,45
000fea 940e 188f 	CALL SUBOPT_0x51
                 ; 0000 0276         SSD1963_DrawFastLine(Graph_X, Lenght, mid-45, mid-45, DGRAY);
000fec 01f9      	MOVW R30,R18
000fed 97bd      	SBIW R30,45
000fee 93fa      	ST   -Y,R31
000fef 93ea      	ST   -Y,R30
000ff0 01f9      	MOVW R30,R18
000ff1 97bd      	SBIW R30,45
000ff2 940e 188f 	CALL SUBOPT_0x51
                 ; 0000 0277         SSD1963_DrawFastLine(Graph_X, Lenght, mid+90, mid+90, DGRAY);
000ff4 01f9      	MOVW R30,R18
000ff5 5ae6      	SUBI R30,LOW(-90)
000ff6 4fff      	SBCI R31,HIGH(-90)
000ff7 93fa      	ST   -Y,R31
000ff8 93ea      	ST   -Y,R30
000ff9 01f9      	MOVW R30,R18
000ffa 5ae6      	SUBI R30,LOW(-90)
000ffb 4fff      	SBCI R31,HIGH(-90)
000ffc 940e 188f 	CALL SUBOPT_0x51
                 ; 0000 0278         SSD1963_DrawFastLine(Graph_X, Lenght, mid-90, mid-90, DGRAY);
000ffe 01f9      	MOVW R30,R18
000fff 55ea      	SUBI R30,LOW(90)
001000 40f0      	SBCI R31,HIGH(90)
001001 93fa      	ST   -Y,R31
001002 93ea      	ST   -Y,R30
001003 01f9      	MOVW R30,R18
001004 55ea      	SUBI R30,LOW(90)
001005 40f0      	SBCI R31,HIGH(90)
001006 93fa      	ST   -Y,R31
001007 93ea      	ST   -Y,R30
001008 e0e8      	LDI  R30,LOW(8456)
001009 e2f1      	LDI  R31,HIGH(8456)
00100a 93fa      	ST   -Y,R31
00100b 93ea      	ST   -Y,R30
00100c 940e 08cb 	CALL _SSD1963_DrawFastLine
                 ; 0000 0279     }
                 ; 0000 027A 
                 ; 0000 027B     if(TOUCH_IRQ < 1 && Touch_mSec > 60) goto _return; //Отзывчивость
                 _0x171:
00100e 940e 176b 	CALL SUBOPT_0x27
001010 f420      	BRSH _0x173
001011 940e 180e 	CALL SUBOPT_0x3A
001013 97dd      	SBIW R26,61
001014 f408      	BRSH _0x174
                 _0x173:
001015 c001      	RJMP _0x172
                 _0x174:
001016 c13c      	RJMP _0x16F
                 ; 0000 027C 
                 ; 0000 027D     if(ParameterState != 2)
                 _0x172:
001017 91a0 078c 	LDS  R26,_ParameterState
001019 30a2      	CPI  R26,LOW(0x2)
00101a f411      	BRNE PC+3
00101b 940c 10b3 	JMP _0x175
                 ; 0000 027E     {
                 ; 0000 027F         for(j=0; j<Graph_Step_N; j++)
00101d e040      	LDI  R20,LOW(0)
                 _0x177:
00101e 3042      	CPI  R20,2
00101f f010      	BRLO PC+3
001020 940c 10b2 	JMP _0x178
                 ; 0000 0280         {
                 ; 0000 0281             if(Graph_X > Graph_X_Max) break;
001022 940e 1875 	CALL SUBOPT_0x4D
001024 f00c      	BRLT _0x179
001025 c08c      	RJMP _0x178
                 ; 0000 0282             Lenght = Graph_X + Graph_X_Step;
                 _0x179:
001026 940e 1892 	CALL SUBOPT_0x52
                 ; 0000 0283             if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
001028 f014      	BRLT _0x17A
                +
001029 ed0e     +LDI R16 , LOW ( 478 )
00102a e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 0284 
                 ; 0000 0285             if(rx_counter0 < 3 || (TOUCH_IRQ < 1 && Touch_mSec > 70)) goto _return; //Интерфейса
                 _0x17A:
00102b 91a0 0719 	LDS  R26,_rx_counter0
00102d 30a3      	CPI  R26,LOW(0x3)
00102e f050      	BRLO _0x17C
00102f 940e 176b 	CALL SUBOPT_0x27
001031 f430      	BRSH _0x17D
001032 940e 180e 	CALL SUBOPT_0x3A
001034 34a7      	CPI  R26,LOW(0x47)
001035 e0e0      	LDI  R30,HIGH(0x47)
001036 07be      	CPC  R27,R30
001037 f408      	BRSH _0x17C
                 _0x17D:
001038 c001      	RJMP _0x17B
                 _0x17C:
001039 c119      	RJMP _0x16F
                 ; 0000 0286 
                 ; 0000 0287             Value[0] = getchar0();
                 _0x17B:
00103a 940e 1899 	CALL SUBOPT_0x53
00103c 87ec      	STD  Y+12,R30
00103d 87fd      	STD  Y+12+1,R31
                 ; 0000 0288             Value[1] = getchar0();
00103e 940e 1899 	CALL SUBOPT_0x53
001040 87ee      	STD  Y+14,R30
001041 87ff      	STD  Y+14+1,R31
                 ; 0000 0289             Value[2] = getchar0();
001042 940e 1899 	CALL SUBOPT_0x53
001044 8be8      	STD  Y+16,R30
001045 8bf9      	STD  Y+16+1,R31
                 ; 0000 028A 
                 ; 0000 028B             for(i=0; i<3; i++)
001046 e050      	LDI  R21,LOW(0)
                 _0x181:
001047 3053      	CPI  R21,3
001048 f010      	BRLO PC+3
001049 940c 10ab 	JMP _0x182
                 ; 0000 028C             {
                 ; 0000 028D                 Value[i] = 128 - Value[i];
00104b 940e 189d 	CALL SUBOPT_0x54
00104d 0fea      	ADD  R30,R26
00104e 1ffb      	ADC  R31,R27
00104f 01bf      	MOVW R22,R30
001050 940e 189d 	CALL SUBOPT_0x54
001052 940e 18a4 	CALL SUBOPT_0x55
001054 940e 18a9 	CALL SUBOPT_0x56
                 ; 0000 028E                 Value[i] *= ConfigValue[ParameterState];
001056 940e 18b3 	CALL SUBOPT_0x57
001058 940e 18c0 	CALL SUBOPT_0x58
                 ; 0000 028F                 Value[i] >>= 7;
00105a 940e 18c7 	CALL SUBOPT_0x59
00105c 940e 18cc 	CALL SUBOPT_0x5A
                 ; 0000 0290                 if(Value[i]&0x0100) Value[i] |= 0xFF00;
00105e 940e 18a4 	CALL SUBOPT_0x55
001060 70f1      	ANDI R31,HIGH(0x100)
001061 f039      	BREQ _0x183
001062 940e 189d 	CALL SUBOPT_0x54
001064 940e 18c7 	CALL SUBOPT_0x59
001066 6fff      	ORI  R31,HIGH(0xFF00)
001067 93fe      	ST   -X,R31
001068 93ee      	ST   -X,R30
                 ; 0000 0291 
                 ; 0000 0292                 Value[i] += mid;
                 _0x183:
001069 940e 189d 	CALL SUBOPT_0x54
00106b 940e 18c7 	CALL SUBOPT_0x59
00106d 0fe2      	ADD  R30,R18
00106e 1ff3      	ADC  R31,R19
00106f 93fe      	ST   -X,R31
001070 93ee      	ST   -X,R30
                 ; 0000 0293                 if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
001071 940e 189d 	CALL SUBOPT_0x54
001073 940e 18a4 	CALL SUBOPT_0x55
001075 3ee9      	CPI  R30,LOW(0xE9)
001076 e0a0      	LDI  R26,HIGH(0xE9)
001077 07fa      	CPC  R31,R26
001078 f024      	BRLT _0x184
001079 940e 189d 	CALL SUBOPT_0x54
00107b 940e 18d3 	CALL SUBOPT_0x5B
                 ; 0000 0294                 if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x184:
00107d 940e 189d 	CALL SUBOPT_0x54
00107f 940e 18a4 	CALL SUBOPT_0x55
001081 97ba      	SBIW R30,42
001082 f424      	BRGE _0x185
001083 940e 189d 	CALL SUBOPT_0x54
001085 940e 18da 	CALL SUBOPT_0x5C
                 ; 0000 0295 
                 ; 0000 0296                 if(Graph_X >= Graph_X_Min)
                 _0x185:
001087 91a0 0799 	LDS  R26,_Graph_X+1
001089 23aa      	TST  R26
00108a f092      	BRMI _0x186
                 ; 0000 0297                 {   // пишем точку в столбце
                 ; 0000 0298                     SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
00108b 940e 1886 	CALL SUBOPT_0x4F
00108d 940e 18e1 	CALL SUBOPT_0x5D
00108f 940e 18a4 	CALL SUBOPT_0x55
001091 940e 18e8 	CALL SUBOPT_0x5E
001093 940e 18ed 	CALL SUBOPT_0x5F
001095 940e 18e8 	CALL SUBOPT_0x5E
001097 940e 18f2 	CALL SUBOPT_0x60
001099 940e 1804 	CALL SUBOPT_0x38
00109b 940e 08e6 	CALL _SSD1963_DrawLine
                 ; 0000 0299                 }
                 ; 0000 029A                     // определяем предыдущую точку диограммы
                 ; 0000 029B                     ValueLast[i] = Value[i];
                 _0x186:
00109d 940e 18e1 	CALL SUBOPT_0x5D
00109f 0fea      	ADD  R30,R26
0010a0 1ffb      	ADC  R31,R27
0010a1 010f      	MOVW R0,R30
0010a2 940e 189d 	CALL SUBOPT_0x54
0010a4 940e 18a4 	CALL SUBOPT_0x55
0010a6 01d0      	MOVW R26,R0
0010a7 93ed      	ST   X+,R30
0010a8 93fc      	ST   X,R31
                 ; 0000 029C             }
0010a9 5f5f      	SUBI R21,-1
0010aa cf9c      	RJMP _0x181
                 _0x182:
                 ; 0000 029D             Graph_X += Graph_X_Step; // увеличеваем Х диограммы
0010ab 940e 1870 	CALL SUBOPT_0x4C
0010ad 9636      	ADIW R30,6
0010ae 940e 186b 	CALL SUBOPT_0x4B
                 ; 0000 029E         }
0010b0 5f4f      	SUBI R20,-1
0010b1 cf6c      	RJMP _0x177
                 _0x178:
                 ; 0000 029F     }
                 ; 0000 02A0     else
0010b2 c0a0      	RJMP _0x187
                 _0x175:
                 ; 0000 02A1     {
                 ; 0000 02A2         for(j=0; j<Graph_Step_N; j++)
0010b3 e040      	LDI  R20,LOW(0)
                 _0x189:
0010b4 3042      	CPI  R20,2
0010b5 f010      	BRLO PC+3
0010b6 940c 1153 	JMP _0x18A
                 ; 0000 02A3         {
                 ; 0000 02A4             if(Graph_X > Graph_X_Max) break;
0010b8 940e 1875 	CALL SUBOPT_0x4D
0010ba f00c      	BRLT _0x18B
0010bb c097      	RJMP _0x18A
                 ; 0000 02A5             Lenght = Graph_X + Graph_X_Step;
                 _0x18B:
0010bc 940e 1892 	CALL SUBOPT_0x52
                 ; 0000 02A6             if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
0010be f014      	BRLT _0x18C
                +
0010bf ed0e     +LDI R16 , LOW ( 478 )
0010c0 e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 02A7 
                 ; 0000 02A8             if(rx_counter0 < 2 || (TOUCH_IRQ < 1 && Touch_mSec > 70)) goto _return;
                 _0x18C:
0010c1 91a0 0719 	LDS  R26,_rx_counter0
0010c3 30a2      	CPI  R26,LOW(0x2)
0010c4 f050      	BRLO _0x18E
0010c5 940e 176b 	CALL SUBOPT_0x27
0010c7 f430      	BRSH _0x18F
0010c8 940e 180e 	CALL SUBOPT_0x3A
0010ca 34a7      	CPI  R26,LOW(0x47)
0010cb e0e0      	LDI  R30,HIGH(0x47)
0010cc 07be      	CPC  R27,R30
0010cd f408      	BRSH _0x18E
                 _0x18F:
0010ce c001      	RJMP _0x18D
                 _0x18E:
0010cf c083      	RJMP _0x16F
                 ; 0000 02A9 
                 ; 0000 02AA             Value[0] = getchar0();
                 _0x18D:
0010d0 940e 1899 	CALL SUBOPT_0x53
0010d2 87ec      	STD  Y+12,R30
0010d3 87fd      	STD  Y+12+1,R31
                 ; 0000 02AB             Value[1] = getchar0();
0010d4 940e 1899 	CALL SUBOPT_0x53
0010d6 87ee      	STD  Y+14,R30
0010d7 87ff      	STD  Y+14+1,R31
                 ; 0000 02AC 
                 ; 0000 02AD             for(i=0; i<2; i++)
0010d8 e050      	LDI  R21,LOW(0)
                 _0x193:
0010d9 3052      	CPI  R21,2
0010da f010      	BRLO PC+3
0010db 940c 114c 	JMP _0x194
                 ; 0000 02AE             {
                 ; 0000 02AF                 Value[i] = 128 - Value[i];
0010dd 940e 189d 	CALL SUBOPT_0x54
0010df 0fea      	ADD  R30,R26
0010e0 1ffb      	ADC  R31,R27
0010e1 01bf      	MOVW R22,R30
0010e2 940e 189d 	CALL SUBOPT_0x54
0010e4 940e 18a4 	CALL SUBOPT_0x55
0010e6 940e 18a9 	CALL SUBOPT_0x56
                 ; 0000 02B0                 Value[i] *= ConfigValue[ParameterState];
0010e8 940e 18b3 	CALL SUBOPT_0x57
0010ea 940e 18c0 	CALL SUBOPT_0x58
                 ; 0000 02B1                 Value[i] >>= 7;
0010ec 940e 18c7 	CALL SUBOPT_0x59
0010ee 940e 18cc 	CALL SUBOPT_0x5A
                 ; 0000 02B2                 if(Value[i]&0x0100) Value[i] |= 0xFF00;
0010f0 940e 18a4 	CALL SUBOPT_0x55
0010f2 70f1      	ANDI R31,HIGH(0x100)
0010f3 f039      	BREQ _0x195
0010f4 940e 189d 	CALL SUBOPT_0x54
0010f6 940e 18c7 	CALL SUBOPT_0x59
0010f8 6fff      	ORI  R31,HIGH(0xFF00)
0010f9 93fe      	ST   -X,R31
0010fa 93ee      	ST   -X,R30
                 ; 0000 02B3 
                 ; 0000 02B4                 Value[i] += mid + ((i==1)?(45):(-45));
                 _0x195:
0010fb 940e 189d 	CALL SUBOPT_0x54
0010fd 0fea      	ADD  R30,R26
0010fe 1ffb      	ADC  R31,R27
0010ff 01bf      	MOVW R22,R30
001100 8000      	LD   R0,Z
001101 8011      	LDD  R1,Z+1
001102 2fa5      	MOV  R26,R21
001103 e0b0      	LDI  R27,0
001104 9711      	SBIW R26,1
001105 f419      	BRNE _0x196
001106 e2ed      	LDI  R30,LOW(45)
001107 e0f0      	LDI  R31,HIGH(45)
001108 c002      	RJMP _0x197
                 _0x196:
001109 ede3      	LDI  R30,LOW(65491)
00110a efff      	LDI  R31,HIGH(65491)
                 _0x197:
00110b 0fe2      	ADD  R30,R18
00110c 1ff3      	ADC  R31,R19
00110d 0de0      	ADD  R30,R0
00110e 1df1      	ADC  R31,R1
00110f 01db      	MOVW R26,R22
001110 93ed      	ST   X+,R30
001111 93fc      	ST   X,R31
                 ; 0000 02B5                 if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
001112 940e 189d 	CALL SUBOPT_0x54
001114 940e 18a4 	CALL SUBOPT_0x55
001116 3ee9      	CPI  R30,LOW(0xE9)
001117 e0a0      	LDI  R26,HIGH(0xE9)
001118 07fa      	CPC  R31,R26
001119 f024      	BRLT _0x199
00111a 940e 189d 	CALL SUBOPT_0x54
00111c 940e 18d3 	CALL SUBOPT_0x5B
                 ; 0000 02B6                 if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x199:
00111e 940e 189d 	CALL SUBOPT_0x54
001120 940e 18a4 	CALL SUBOPT_0x55
001122 97ba      	SBIW R30,42
001123 f424      	BRGE _0x19A
001124 940e 189d 	CALL SUBOPT_0x54
001126 940e 18da 	CALL SUBOPT_0x5C
                 ; 0000 02B7 
                 ; 0000 02B8                 if(Graph_X >= Graph_X_Min)
                 _0x19A:
001128 91a0 0799 	LDS  R26,_Graph_X+1
00112a 23aa      	TST  R26
00112b f092      	BRMI _0x19B
                 ; 0000 02B9                 {   // пишем точку в столбце
                 ; 0000 02BA                     SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
00112c 940e 1886 	CALL SUBOPT_0x4F
00112e 940e 18e1 	CALL SUBOPT_0x5D
001130 940e 18a4 	CALL SUBOPT_0x55
001132 940e 18e8 	CALL SUBOPT_0x5E
001134 940e 18ed 	CALL SUBOPT_0x5F
001136 940e 18e8 	CALL SUBOPT_0x5E
001138 940e 18f2 	CALL SUBOPT_0x60
00113a 940e 1804 	CALL SUBOPT_0x38
00113c 940e 08e6 	CALL _SSD1963_DrawLine
                 ; 0000 02BB                 }
                 ; 0000 02BC                     // определяем предыдущую точку диограммы
                 ; 0000 02BD                     ValueLast[i] = Value[i];
                 _0x19B:
00113e 940e 18e1 	CALL SUBOPT_0x5D
001140 0fea      	ADD  R30,R26
001141 1ffb      	ADC  R31,R27
001142 010f      	MOVW R0,R30
001143 940e 189d 	CALL SUBOPT_0x54
001145 940e 18a4 	CALL SUBOPT_0x55
001147 01d0      	MOVW R26,R0
001148 93ed      	ST   X+,R30
001149 93fc      	ST   X,R31
                 ; 0000 02BE             }
00114a 5f5f      	SUBI R21,-1
00114b cf8d      	RJMP _0x193
                 _0x194:
                 ; 0000 02BF             Graph_X += Graph_X_Step; // увеличеваем Х диограммы
00114c 940e 1870 	CALL SUBOPT_0x4C
00114e 9636      	ADIW R30,6
00114f 940e 186b 	CALL SUBOPT_0x4B
                 ; 0000 02C0         }
001151 5f4f      	SUBI R20,-1
001152 cf61      	RJMP _0x189
                 _0x18A:
                 ; 0000 02C1     }
                 _0x187:
                 ; 0000 02C2     _return:;
                 _0x16F:
                 ; 0000 02C3 }
001153 940e 1b8c 	CALL __LOADLOCR6
001155 9662      	ADIW R28,18
001156 9508      	RET
                 ;
                 ;//Функция посылающаа управление куда подальше
                 ;void TestParameterFun(char a, char b, char c, char fHz)
                 ; 0000 02C7 {
                 _TestParameterFun:
                 ; 0000 02C8     RS485 = 1; //Передача
                 ;	a -> Y+3
                 ;	b -> Y+2
                 ;	c -> Y+1
                 ;	fHz -> Y+0
001157 9a94      	SBI  0x12,4
                 ; 0000 02C9     if(b > 110) printf("Напругу убавь \n");
001158 81aa      	LDD  R26,Y+2
001159 36af      	CPI  R26,LOW(0x6F)
00115a f020      	BRLO _0x19E
                +
00115b ebef     +LDI R30 , LOW ( 2 * _0x0 + ( 125 ) )
00115c e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW1FN _0x0,125
00115d 940e 18f7 	CALL SUBOPT_0x61
                 ; 0000 02CA     if(b < 90)  printf("Напруги прибавь \n");
                 _0x19E:
00115f 81aa      	LDD  R26,Y+2
001160 35aa      	CPI  R26,LOW(0x5A)
001161 f420      	BRSH _0x19F
                +
001162 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 141 ) )
001163 e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 141 ) )
                 	__POINTW1FN _0x0,141
001164 940e 18f7 	CALL SUBOPT_0x61
                 ; 0000 02CB     if(fHz < 50)printf("Поддай оборотов \n");
                 _0x19F:
001166 81a8      	LD   R26,Y
001167 33a2      	CPI  R26,LOW(0x32)
001168 f420      	BRSH _0x1A0
                +
001169 eee1     +LDI R30 , LOW ( 2 * _0x0 + ( 159 ) )
00116a e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW1FN _0x0,159
00116b 940e 18f7 	CALL SUBOPT_0x61
                 ; 0000 02CC     if(fHz > 50)printf("Не гони, помедленнее \n");
                 _0x1A0:
00116d 81a8      	LD   R26,Y
00116e 33a3      	CPI  R26,LOW(0x33)
00116f f020      	BRLO _0x1A1
                +
001170 efe3     +LDI R30 , LOW ( 2 * _0x0 + ( 177 ) )
001171 e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 177 ) )
                 	__POINTW1FN _0x0,177
001172 940e 18f7 	CALL SUBOPT_0x61
                 ; 0000 02CD }
                 _0x1A1:
001174 c1e6      	RJMP _0x2080002
                 ;
                 ;void Save_Eeprom(char Number)
                 ; 0000 02D0 {
                 _Save_Eeprom:
                 ; 0000 02D1     if(Number > 2)
                 ;	Number -> Y+0
001175 81a8      	LD   R26,Y
001176 30a3      	CPI  R26,LOW(0x3)
001177 f0b0      	BRLO _0x1A2
                 ; 0000 02D2     {
                 ; 0000 02D3         putchar0_i('K');
001178 e4eb      	LDI  R30,LOW(75)
001179 93ea      	ST   -Y,R30
00117a 940e 0b52 	CALL _putchar0_i
                 ; 0000 02D4         putchar0_i(Number-3);
00117c 940e 1643 	CALL SUBOPT_0x0
00117e 9733      	SBIW R30,3
00117f 940e 18fe 	CALL SUBOPT_0x62
                 ; 0000 02D5         putchar0_i(ConfigValue[Number] & 0xFF);
001181 0fae      	ADD  R26,R30
001182 1fbf      	ADC  R27,R31
001183 91ec      	LD   R30,X
001184 940e 18fe 	CALL SUBOPT_0x62
                 ; 0000 02D6         putchar0_i(ConfigValue[Number] >> 8);
001186 940e 18a4 	CALL SUBOPT_0x55
001188 2fef      	MOV  R30,R31
001189 e0f0      	LDI  R31,0
00118a 93ea      	ST   -Y,R30
00118b 940e 0b52 	CALL _putchar0_i
                 ; 0000 02D7     }
                 ; 0000 02D8     else
00118d c00e      	RJMP _0x1A3
                 _0x1A2:
                 ; 0000 02D9     {
                 ; 0000 02DA         ConfigValue_mem[Number] = ConfigValue[Number];
00118e 81e8      	LD   R30,Y
00118f 940e 1908 	CALL SUBOPT_0x63
001191 0fea      	ADD  R30,R26
001192 1ffb      	ADC  R31,R27
001193 010f      	MOVW R0,R30
001194 81e8      	LD   R30,Y
001195 940e 190e 	CALL SUBOPT_0x64
001197 940e 18a4 	CALL SUBOPT_0x55
001199 01d0      	MOVW R26,R0
00119a 940e 1b67 	CALL __EEPROMWRW
                 ; 0000 02DB     }
                 _0x1A3:
                 ; 0000 02DC 
                 ; 0000 02DD }
00119c 940c 14c8 	JMP  _0x2080001
                 ;
                 ;inline void main_loop()  // основной рабочий режим
                 ; 0000 02E0 {
                 _main_loop:
                 ; 0000 02E1     char fHz, a, b, c;
                 ; 0000 02E2 
                 ; 0000 02E3             switch(ValueState)
00119e 940e 1b87 	CALL __SAVELOCR4
                 ;	fHz -> R17
                 ;	a -> R16
                 ;	b -> R19
                 ;	c -> R18
0011a0 91e0 078d 	LDS  R30,_ValueState
0011a2 940e 1834 	CALL SUBOPT_0x41
                 ; 0000 02E4             {
                 ; 0000 02E5                 case 0:
0011a4 f011      	BREQ PC+3
0011a5 940c 11fb 	JMP _0x1A7
                 ; 0000 02E6                   if(ValueUpd_mSec > 300) //Надо обновить значения, но как?
0011a7 91a0 0792 	LDS  R26,_ValueUpd_mSec
0011a9 91b0 0793 	LDS  R27,_ValueUpd_mSec+1
0011ab 32ad      	CPI  R26,LOW(0x12D)
0011ac e0e1      	LDI  R30,HIGH(0x12D)
0011ad 07be      	CPC  R27,R30
0011ae f0b0      	BRLO _0x1A8
                 ; 0000 02E7                   {
                 ; 0000 02E8                       if(ValueState < 2)
0011af 91a0 078d 	LDS  R26,_ValueState
0011b1 30a2      	CPI  R26,LOW(0x2)
0011b2 f490      	BRSH _0x1A9
                 ; 0000 02E9                       {
                 ; 0000 02EA                           while(rx_counter2) getchar2();
                 _0x1AA:
0011b3 91e0 0615 	LDS  R30,_rx_counter2
0011b5 30e0      	CPI  R30,0
0011b6 f019      	BREQ _0x1AC
0011b7 940e 0b21 	CALL _getchar2
0011b9 cff9      	RJMP _0x1AA
                 _0x1AC:
                 ; 0000 02EB putchar2('S');
0011ba e5e3      	LDI  R30,LOW(83)
0011bb 93ea      	ST   -Y,R30
0011bc d9be      	RCALL _putchar2
                 ; 0000 02EC                           ValueState = 1;
0011bd e0e1      	LDI  R30,LOW(1)
0011be 93e0 078d 	STS  _ValueState,R30
                 ; 0000 02ED                           ValueUpd_mSec = 0;
0011c0 e0e0      	LDI  R30,LOW(0)
0011c1 93e0 0792 	STS  _ValueUpd_mSec,R30
0011c3 93e0 0793 	STS  _ValueUpd_mSec+1,R30
                 ; 0000 02EE                       }
                 ; 0000 02EF                   }
                 _0x1A9:
                 ; 0000 02F0                   if(GraphState == 0 && State == 0 && ValueState == 0) //Надо обновить график
                 _0x1A8:
0011c5 91a0 078e 	LDS  R26,_GraphState
0011c7 30a0      	CPI  R26,LOW(0x0)
0011c8 f441      	BRNE _0x1AE
0011c9 91a0 078b 	LDS  R26,_State
0011cb 30a0      	CPI  R26,LOW(0x0)
0011cc f421      	BRNE _0x1AE
0011cd 91a0 078d 	LDS  R26,_ValueState
0011cf 30a0      	CPI  R26,LOW(0x0)
0011d0 f009      	BREQ _0x1AF
                 _0x1AE:
0011d1 c028      	RJMP _0x1AD
                 _0x1AF:
                 ; 0000 02F1                   {
                 ; 0000 02F2                       StartPaint();
0011d2 dd96      	RCALL _StartPaint
                 ; 0000 02F3                       while(rx_counter0) getchar0();
                 _0x1B0:
0011d3 91e0 0719 	LDS  R30,_rx_counter0
0011d5 30e0      	CPI  R30,0
0011d6 f019      	BREQ _0x1B2
0011d7 940e 0b0c 	CALL _getchar0
0011d9 cff9      	RJMP _0x1B0
                 _0x1B2:
                 ; 0000 02F4 switch(ParameterState)
0011da 91e0 078c 	LDS  R30,_ParameterState
0011dc 940e 1834 	CALL SUBOPT_0x41
                 ; 0000 02F5                       {
                 ; 0000 02F6                           case 0: putchar0('U'); break;
0011de f411      	BRNE _0x1B6
0011df e5e5      	LDI  R30,LOW(85)
0011e0 c00b      	RJMP _0x20E
                 ; 0000 02F7                           case 1: putchar0('I'); break;
                 _0x1B6:
0011e1 30e1      	CPI  R30,LOW(0x1)
0011e2 e0a0      	LDI  R26,HIGH(0x1)
0011e3 07fa      	CPC  R31,R26
0011e4 f411      	BRNE _0x1B7
0011e5 e4e9      	LDI  R30,LOW(73)
0011e6 c005      	RJMP _0x20E
                 ; 0000 02F8                           case 2: putchar0('Z'); break;
                 _0x1B7:
0011e7 30e2      	CPI  R30,LOW(0x2)
0011e8 e0a0      	LDI  R26,HIGH(0x2)
0011e9 07fa      	CPC  R31,R26
0011ea f421      	BRNE _0x1B5
0011eb e5ea      	LDI  R30,LOW(90)
                 _0x20E:
0011ec 93ea      	ST   -Y,R30
0011ed 940e 0b77 	CALL _putchar0
                 ; 0000 02F9                       }
                 _0x1B5:
                 ; 0000 02FA                       ValueState = 2;
0011ef e0e2      	LDI  R30,LOW(2)
0011f0 93e0 078d 	STS  _ValueState,R30
                 ; 0000 02FB                       GraphState = 1;
0011f2 e0e1      	LDI  R30,LOW(1)
0011f3 93e0 078e 	STS  _GraphState,R30
                 ; 0000 02FC                       GraphUpd_mSec = 0;
0011f5 e0e0      	LDI  R30,LOW(0)
0011f6 93e0 0794 	STS  _GraphUpd_mSec,R30
0011f8 93e0 0795 	STS  _GraphUpd_mSec+1,R30
                 ; 0000 02FD                   }
                 ; 0000 02FE                 break;
                 _0x1AD:
0011fa c051      	RJMP _0x1A6
                 ; 0000 02FF                 case 1:
                 _0x1A7:
0011fb 30e1      	CPI  R30,LOW(0x1)
0011fc e0a0      	LDI  R26,HIGH(0x1)
0011fd 07fa      	CPC  R31,R26
0011fe f5f1      	BRNE _0x1B9
                 ; 0000 0300                   if(rx_counter2 > 8)
0011ff 91a0 0615 	LDS  R26,_rx_counter2
001201 30a9      	CPI  R26,LOW(0x9)
001202 f1c8      	BRLO _0x1BA
                 ; 0000 0301                   {
                 ; 0000 0302                       fHz = getchar2();
001203 940e 0b21 	CALL _getchar2
001205 2f1e      	MOV  R17,R30
                 ; 0000 0303                       a = getchar2();
001206 940e 1914 	CALL SUBOPT_0x65
                 ; 0000 0304                       b = getchar2();
                 ; 0000 0305                       c = getchar2();
                 ; 0000 0306                       TestParameterFun(a, b, c, fHz);
001208 930a      	ST   -Y,R16
001209 933a      	ST   -Y,R19
00120a 932a      	ST   -Y,R18
00120b 931a      	ST   -Y,R17
00120c df4a      	RCALL _TestParameterFun
                 ; 0000 0307 
                 ; 0000 0308                       if(State == 0) //Надо обновить значения на дисплее
00120d 91e0 078b 	LDS  R30,_State
00120f 30e0      	CPI  R30,0
001210 f509      	BRNE _0x1BB
                 ; 0000 0309                       {
                 ; 0000 030A                         switch(ParameterState)
001211 940e 191e 	CALL SUBOPT_0x66
                 ; 0000 030B                         {
                 ; 0000 030C                           case 2:
001213 30e2      	CPI  R30,LOW(0x2)
001214 e0a0      	LDI  R26,HIGH(0x2)
001215 07fa      	CPC  R31,R26
001216 f469      	BRNE _0x1BF
                 ; 0000 030D                               {
                 ; 0000 030E                               getchar2();
001217 940e 0b21 	CALL _getchar2
                 ; 0000 030F                               getchar2();
001219 940e 0b21 	CALL _getchar2
                 ; 0000 0310                               getchar2();
00121b 940e 0b21 	CALL _getchar2
                 ; 0000 0311                               }
                 ; 0000 0312                               a = getchar2();
00121d 940e 0b21 	CALL _getchar2
00121f 2f0e      	MOV  R16,R30
                 ; 0000 0313                               b = getchar2();
001220 940e 0b21 	CALL _getchar2
001222 2f3e      	MOV  R19,R30
                 ; 0000 0314                               PutParameterValue(a, b, c, fHz);
001223 c009      	RJMP _0x20F
                 ; 0000 0315                           break;
                 ; 0000 0316                           case 1:
                 _0x1BF:
001224 30e1      	CPI  R30,LOW(0x1)
001225 e0a0      	LDI  R26,HIGH(0x1)
001226 07fa      	CPC  R31,R26
001227 f419      	BRNE _0x1C0
                 ; 0000 0317                               a = getchar2();
001228 940e 1914 	CALL SUBOPT_0x65
                 ; 0000 0318                               b = getchar2();
                 ; 0000 0319                               c = getchar2();
                 ; 0000 031A                           case 0:
00122a c002      	RJMP _0x1C1
                 _0x1C0:
00122b 9730      	SBIW R30,0
00122c f429      	BRNE _0x1BE
                 _0x1C1:
                 ; 0000 031B                               PutParameterValue(a, b, c, fHz);
                 _0x20F:
00122d 930a      	ST   -Y,R16
00122e 933a      	ST   -Y,R19
00122f 932a      	ST   -Y,R18
001230 931a      	ST   -Y,R17
001231 dcd6      	RCALL _PutParameterValue
                 ; 0000 031C                           break;
                 ; 0000 031D                         }
                 _0x1BE:
                 ; 0000 031E                       }
                 ; 0000 031F 
                 ; 0000 0320                       while(rx_counter2) getchar2();
                 _0x1BB:
                 _0x1C3:
001232 91e0 0615 	LDS  R30,_rx_counter2
001234 30e0      	CPI  R30,0
001235 f019      	BREQ _0x1C5
001236 940e 0b21 	CALL _getchar2
001238 cff9      	RJMP _0x1C3
                 _0x1C5:
                 ; 0000 0321 ValueState = 0;
001239 e0e0      	LDI  R30,LOW(0)
00123a 93e0 078d 	STS  _ValueState,R30
                 ; 0000 0322                   }
                 ; 0000 0323                 break;
                 _0x1BA:
00123c c00f      	RJMP _0x1A6
                 ; 0000 0324                 case 2:
                 _0x1B9:
00123d 30e2      	CPI  R30,LOW(0x2)
00123e e0a0      	LDI  R26,HIGH(0x2)
00123f 07fa      	CPC  R31,R26
001240 f459      	BRNE _0x1A6
                 ; 0000 0325                     if(GraphUpd_mSec > 200)
001241 91a0 0794 	LDS  R26,_GraphUpd_mSec
001243 91b0 0795 	LDS  R27,_GraphUpd_mSec+1
001245 3ca9      	CPI  R26,LOW(0xC9)
001246 e0e0      	LDI  R30,HIGH(0xC9)
001247 07be      	CPC  R27,R30
001248 f018      	BRLO _0x1C7
                 ; 0000 0326                     {
                 ; 0000 0327                         ValueState = 0;
001249 e0e0      	LDI  R30,LOW(0)
00124a 93e0 078d 	STS  _ValueState,R30
                 ; 0000 0328                     }
                 ; 0000 0329                 break;
                 _0x1C7:
                 ; 0000 032A             }
                 _0x1A6:
                 ; 0000 032B 
                 ; 0000 032C             switch(State)
00124c 91e0 078b 	LDS  R30,_State
00124e 940e 17ce 	CALL SUBOPT_0x32
                 ; 0000 032D             {
                 ; 0000 032E                 case 1:
001250 f461      	BRNE _0x1CB
                 ; 0000 032F                     State = 0;
001251 e0e0      	LDI  R30,LOW(0)
001252 93e0 078b 	STS  _State,R30
                 ; 0000 0330                     Repaint_Button("МЕНЮ", 4, BLACK, WHITE);
                +
001254 ebee     +LDI R30 , LOW ( _0x1CC + ( 0 ) )
001255 e0f5     +LDI R31 , HIGH ( _0x1CC + ( 0 ) )
                 	__POINTW1MN _0x1CC,0
001256 940e 1809 	CALL SUBOPT_0x39
001258 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0331                     PutParameterText(ParameterState, BLUE);
00125a 940e 1922 	CALL SUBOPT_0x67
                 ; 0000 0332 
                 ; 0000 0333                 case 0: // основной рабочий режим
00125c c004      	RJMP _0x1CD
                 _0x1CB:
00125d 9730      	SBIW R30,0
00125e f011      	BREQ PC+3
00125f 940c 12b5 	JMP _0x1CE
                 _0x1CD:
                 ; 0000 0334                 {
                 ; 0000 0335                       if(GraphState) Paint_Phase(); //Рисуем график
001261 91e0 078e 	LDS  R30,_GraphState
001263 30e0      	CPI  R30,0
001264 f009      	BREQ _0x1CF
001265 dd08      	RCALL _Paint_Phase
                 ; 0000 0336 
                 ; 0000 0337                       switch (GetButton())
                 _0x1CF:
001266 da6f      	RCALL _GetButton
                 ; 0000 0338                       {
                 ; 0000 0339                           case 1:  //Переключение графиков
001267 30e1      	CPI  R30,LOW(0x1)
001268 f469      	BRNE _0x1D3
                 ; 0000 033A                               if(++ParameterState > 2) ParameterState = 0;
001269 91a0 078c 	LDS  R26,_ParameterState
00126b 5faf      	SUBI R26,-LOW(1)
00126c 93a0 078c 	STS  _ParameterState,R26
00126e 30a3      	CPI  R26,LOW(0x3)
00126f f018      	BRLO _0x1D4
001270 e0e0      	LDI  R30,LOW(0)
001271 93e0 078c 	STS  _ParameterState,R30
                 ; 0000 033B                               PutParameterText(ParameterState, BLUE);
                 _0x1D4:
001273 940e 1922 	CALL SUBOPT_0x67
                 ; 0000 033C                           break;
001275 c03e      	RJMP _0x1D2
                 ; 0000 033D                           case 2:
                 _0x1D3:
001276 30e2      	CPI  R30,LOW(0x2)
001277 f4e9      	BRNE _0x1D5
                 ; 0000 033E                               if(ConfigValue[ParameterState] < ConfigParam[2][ParameterState])
001278 940e 192b 	CALL SUBOPT_0x68
00127a 940e 192e 	CALL SUBOPT_0x69
                +
00127c efec     +LDI R30 , LOW ( 2 * _ConfigParam + ( 48 ) )
00127d e0f7     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 48 ) )
                 	__POINTW1FN _ConfigParam,48
00127e 01df      	MOVW R26,R30
00127f 940e 191e 	CALL SUBOPT_0x66
001281 940e 1933 	CALL SUBOPT_0x6A
001283 176e      	CP   R22,R30
001284 077f      	CPC  R23,R31
001285 f470      	BRSH _0x1D6
                 ; 0000 033F                               {
                 ; 0000 0340                                   ConfigValue[ParameterState] += ConfigParam[0][ParameterState];
001286 940e 192b 	CALL SUBOPT_0x68
001288 0fea      	ADD  R30,R26
001289 1ffb      	ADC  R31,R27
00128a 01cf      	MOVW R24,R30
00128b 940e 193a 	CALL SUBOPT_0x6B
00128d 940e 1933 	CALL SUBOPT_0x6A
00128f 0fe6      	ADD  R30,R22
001290 1ff7      	ADC  R31,R23
001291 01dc      	MOVW R26,R24
001292 93ed      	ST   X+,R30
001293 93fc      	ST   X,R31
                 ; 0000 0341                               }
                 ; 0000 0342                           break;
                 _0x1D6:
001294 c01f      	RJMP _0x1D2
                 ; 0000 0343                           case 3:
                 _0x1D5:
001295 30e3      	CPI  R30,LOW(0x3)
001296 f4c1      	BRNE _0x1D7
                 ; 0000 0344                               if(ConfigValue[ParameterState] > ConfigParam[1][ParameterState])
001297 940e 192b 	CALL SUBOPT_0x68
001299 940e 192e 	CALL SUBOPT_0x69
                +
00129b eee4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 24 ) )
00129c e0f7     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 24 ) )
                 	__POINTW1FN _ConfigParam,24
00129d 01df      	MOVW R26,R30
00129e 940e 191e 	CALL SUBOPT_0x66
0012a0 940e 1933 	CALL SUBOPT_0x6A
0012a2 17e6      	CP   R30,R22
0012a3 07f7      	CPC  R31,R23
0012a4 f448      	BRSH _0x1D8
                 ; 0000 0345                               {
                 ; 0000 0346                                   ConfigValue[ParameterState] -= ConfigParam[0][ParameterState];
0012a5 940e 192b 	CALL SUBOPT_0x68
0012a7 0fea      	ADD  R30,R26
0012a8 1ffb      	ADC  R31,R27
0012a9 010f      	MOVW R0,R30
0012aa 940e 193a 	CALL SUBOPT_0x6B
0012ac 940e 1942 	CALL SUBOPT_0x6C
                 ; 0000 0347                               }
                 ; 0000 0348                           break;
                 _0x1D8:
0012ae c005      	RJMP _0x1D2
                 ; 0000 0349                           case 4:  //Уходим в настройки
                 _0x1D7:
0012af 30e4      	CPI  R30,LOW(0x4)
0012b0 f419      	BRNE _0x1D2
                 ; 0000 034A                                State = 4;
0012b1 e0e4      	LDI  R30,LOW(4)
0012b2 93e0 078b 	STS  _State,R30
                 ; 0000 034B                           break;
                 ; 0000 034C                       }
                 _0x1D2:
                 ; 0000 034D                 }
                 ; 0000 034E                 break;
0012b4 c0a4      	RJMP _0x1CA
                 ; 0000 034F                 case 4:
                 _0x1CE:
0012b5 30e4      	CPI  R30,LOW(0x4)
0012b6 e0a0      	LDI  R26,HIGH(0x4)
0012b7 07fa      	CPC  R31,R26
0012b8 f4b9      	BRNE _0x1DA
                 ; 0000 0350                     State = 5;
0012b9 e0e5      	LDI  R30,LOW(5)
0012ba 93e0 078b 	STS  _State,R30
                 ; 0000 0351                     ConfigState = 0;
0012bc e0e0      	LDI  R30,LOW(0)
0012bd 93e0 078f 	STS  _ConfigState,R30
                 ; 0000 0352                     Repaint_Button("НАЗАД", 4, BLACK, WHITE);
                +
0012bf ece3     +LDI R30 , LOW ( _0x1CC + ( 5 ) )
0012c0 e0f5     +LDI R31 , HIGH ( _0x1CC + ( 5 ) )
                 	__POINTW1MN _0x1CC,5
0012c1 940e 1809 	CALL SUBOPT_0x39
0012c3 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0353                     PutParameterText(ConfigState + State, PURPLE);
0012c5 940e 194f 	CALL SUBOPT_0x6D
                 ; 0000 0354                     old_confVal = ConfigValue[ConfigState];
0012c7 940e 195b 	CALL SUBOPT_0x6E
0012c9 940e 18a4 	CALL SUBOPT_0x55
0012cb 93e0 07b8 	STS  _old_confVal,R30
0012cd 93f0 07b9 	STS  _old_confVal+1,R31
                 ; 0000 0355 
                 ; 0000 0356                 case 5: // настройки
0012cf c006      	RJMP _0x1DB
                 _0x1DA:
0012d0 30e5      	CPI  R30,LOW(0x5)
0012d1 e0a0      	LDI  R26,HIGH(0x5)
0012d2 07fa      	CPC  R31,R26
0012d3 f011      	BREQ PC+3
0012d4 940c 1332 	JMP _0x1DC
                 _0x1DB:
                 ; 0000 0357                 {
                 ; 0000 0358                     switch (GetButton())
0012d6 d9ff      	RCALL _GetButton
                 ; 0000 0359                     {
                 ; 0000 035A                         case 1:
0012d7 30e1      	CPI  R30,LOW(0x1)
0012d8 f4e1      	BRNE _0x1E0
                 ; 0000 035B                             if(old_confVal != ConfigValue[ConfigState])
0012d9 940e 195b 	CALL SUBOPT_0x6E
0012db 940e 18a4 	CALL SUBOPT_0x55
0012dd 91a0 07b8 	LDS  R26,_old_confVal
0012df 91b0 07b9 	LDS  R27,_old_confVal+1
0012e1 17ea      	CP   R30,R26
0012e2 07fb      	CPC  R31,R27
0012e3 f021      	BREQ _0x1E1
                 ; 0000 035C                             {
                 ; 0000 035D                                 //Сохраняем значение
                 ; 0000 035E                                 Save_Eeprom(ConfigState);
0012e4 91e0 078f 	LDS  R30,_ConfigState
0012e6 93ea      	ST   -Y,R30
0012e7 de8d      	RCALL _Save_Eeprom
                 ; 0000 035F                             }
                 ; 0000 0360 
                 ; 0000 0361                             if(++ConfigState > 11) ConfigState = 0;
                 _0x1E1:
0012e8 91a0 078f 	LDS  R26,_ConfigState
0012ea 5faf      	SUBI R26,-LOW(1)
0012eb 93a0 078f 	STS  _ConfigState,R26
0012ed 30ac      	CPI  R26,LOW(0xC)
0012ee f018      	BRLO _0x1E2
0012ef e0e0      	LDI  R30,LOW(0)
0012f0 93e0 078f 	STS  _ConfigState,R30
                 ; 0000 0362                             PutParameterText(ConfigState + State, PURPLE);
                 _0x1E2:
0012f2 940e 194f 	CALL SUBOPT_0x6D
                 ; 0000 0363                         break;
0012f4 c03c      	RJMP _0x1DF
                 ; 0000 0364                         case 2:
                 _0x1E0:
0012f5 30e2      	CPI  R30,LOW(0x2)
0012f6 f4e1      	BRNE _0x1E3
                 ; 0000 0365                               if(ConfigValue[ConfigState] < ConfigParam[2][ConfigState])
0012f7 940e 195b 	CALL SUBOPT_0x6E
0012f9 940e 192e 	CALL SUBOPT_0x69
                +
0012fb efec     +LDI R30 , LOW ( 2 * _ConfigParam + ( 48 ) )
0012fc e0f7     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 48 ) )
                 	__POINTW1FN _ConfigParam,48
0012fd 940e 195e 	CALL SUBOPT_0x6F
0012ff 176e      	CP   R22,R30
001300 077f      	CPC  R23,R31
001301 f480      	BRSH _0x1E4
                 ; 0000 0366                               {
                 ; 0000 0367                                   ConfigValue[ConfigState] += ConfigParam[0][ConfigState];
001302 940e 195b 	CALL SUBOPT_0x6E
001304 0fea      	ADD  R30,R26
001305 1ffb      	ADC  R31,R27
001306 01cf      	MOVW R24,R30
001307 940e 1963 	CALL SUBOPT_0x70
001309 940e 1933 	CALL SUBOPT_0x6A
00130b 0fe6      	ADD  R30,R22
00130c 1ff7      	ADC  R31,R23
00130d 01dc      	MOVW R26,R24
00130e 93ed      	ST   X+,R30
00130f 93fc      	ST   X,R31
                 ; 0000 0368                                   PutParameterText(ConfigState + State, PURPLE);
001310 940e 194f 	CALL SUBOPT_0x6D
                 ; 0000 0369                               }
                 ; 0000 036A                         break;
                 _0x1E4:
001312 c01e      	RJMP _0x1DF
                 ; 0000 036B                         case 3:
                 _0x1E3:
001313 30e3      	CPI  R30,LOW(0x3)
001314 f4b9      	BRNE _0x1E5
                 ; 0000 036C                               if(ConfigValue[ConfigState] > ConfigParam[1][ConfigState])
001315 940e 195b 	CALL SUBOPT_0x6E
001317 940e 192e 	CALL SUBOPT_0x69
                +
001319 eee4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 24 ) )
00131a e0f7     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 24 ) )
                 	__POINTW1FN _ConfigParam,24
00131b 940e 195e 	CALL SUBOPT_0x6F
00131d 17e6      	CP   R30,R22
00131e 07f7      	CPC  R31,R23
00131f f458      	BRSH _0x1E6
                 ; 0000 036D                               {
                 ; 0000 036E                                   ConfigValue[ConfigState] -= ConfigParam[0][ConfigState];
001320 940e 195b 	CALL SUBOPT_0x6E
001322 0fea      	ADD  R30,R26
001323 1ffb      	ADC  R31,R27
001324 010f      	MOVW R0,R30
001325 940e 1963 	CALL SUBOPT_0x70
001327 940e 1942 	CALL SUBOPT_0x6C
                 ; 0000 036F                                   PutParameterText(ConfigState + State, PURPLE);
001329 940e 194f 	CALL SUBOPT_0x6D
                 ; 0000 0370                               }
                 ; 0000 0371                         break;
                 _0x1E6:
00132b c005      	RJMP _0x1DF
                 ; 0000 0372                         case 4:
                 _0x1E5:
00132c 30e4      	CPI  R30,LOW(0x4)
00132d f419      	BRNE _0x1DF
                 ; 0000 0373                             State = 1;
00132e e0e1      	LDI  R30,LOW(1)
00132f 93e0 078b 	STS  _State,R30
                 ; 0000 0374                         break;
                 ; 0000 0375                     }
                 _0x1DF:
                 ; 0000 0376                 }
                 ; 0000 0377                 break;
001331 c027      	RJMP _0x1CA
                 ; 0000 0378                 case 200 : // пауза
                 _0x1DC:
001332 3ce8      	CPI  R30,LOW(0xC8)
001333 e0a0      	LDI  R26,HIGH(0xC8)
001334 07fa      	CPC  R31,R26
001335 f4b9      	BRNE _0x1E8
                 ; 0000 0379                 //Sleep_mSec = 0;
                 ; 0000 037A                     switch (GetButton())
001336 d99f      	RCALL _GetButton
                 ; 0000 037B                     {
                 ; 0000 037C                         case 1:
001337 30e1      	CPI  R30,LOW(0x1)
001338 f099      	BREQ _0x1EB
                 ; 0000 037D                         break;
                 ; 0000 037E                         case 2:
001339 30e2      	CPI  R30,LOW(0x2)
00133a f089      	BREQ _0x1EB
                 ; 0000 037F                         break;
                 ; 0000 0380                         case 3:
00133b 30e3      	CPI  R30,LOW(0x3)
00133c f079      	BREQ _0x1EB
                 ; 0000 0381                         break;
                 ; 0000 0382                         case 4:
00133d 30e4      	CPI  R30,LOW(0x4)
00133e f469      	BRNE _0x1EB
                 ; 0000 0383                             State = 0;
00133f e0e0      	LDI  R30,LOW(0)
001340 93e0 078b 	STS  _State,R30
                 ; 0000 0384                             Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
001342 ece9     +LDI R30 , LOW ( _0x1CC + ( 11 ) )
001343 e0f5     +LDI R31 , HIGH ( _0x1CC + ( 11 ) )
                 	__POINTW1MN _0x1CC,11
001344 940e 1809 	CALL SUBOPT_0x39
001346 940e 17fe 	CALL SUBOPT_0x37
                 ; 0000 0385                             delay_ms(250);
001348 efea      	LDI  R30,LOW(250)
001349 e0f0      	LDI  R31,HIGH(250)
00134a 940e 1679 	CALL SUBOPT_0x9
                 ; 0000 0386                         break;
                 ; 0000 0387                     }
                 _0x1EB:
                 ; 0000 0388 
                 ; 0000 0389                 break;
00134c c00c      	RJMP _0x1CA
                 ; 0000 038A                 case 250 : // сп¤щий режим
                 _0x1E8:
00134d 3fea      	CPI  R30,LOW(0xFA)
00134e e0a0      	LDI  R26,HIGH(0xFA)
00134f 07fa      	CPC  R31,R26
001350 f441      	BRNE _0x1CA
                 ; 0000 038B                 {
                 ; 0000 038C                     if (TSC2046_GetCoordinates() > 0)
001351 940e 0a41 	CALL _TSC2046_GetCoordinates
001353 30e1      	CPI  R30,LOW(0x1)
001354 f020      	BRLO _0x1F1
                 ; 0000 038D                     {
                 ; 0000 038E                         State = 0;
001355 e0e0      	LDI  R30,LOW(0)
001356 93e0 078b 	STS  _State,R30
                 ; 0000 038F                         BACKLIGHT = 0; //On
001358 98c7      	CBI  0x18,7
                 ; 0000 0390                     }
                 ; 0000 0391                 }
                 _0x1F1:
                 ; 0000 0392                 break;
                 ; 0000 0393             }
                 _0x1CA:
                 ; 0000 0394 }
001359 940e 1b8e 	CALL __LOADLOCR4
                 _0x2080002:
00135b 9624      	ADIW R28,4
00135c 9508      	RET
                 
                 	.DSEG
                 _0x1CC:
0005be           	.BYTE 0x11
                 ;
                 ;
                 ;void Load_Config(void)
                 ; 0000 0398 {
                 
                 	.CSEG
                 _Load_Config:
                 ; 0000 0399     char i;
                 ; 0000 039A     //Читаем настройки
                 ; 0000 039B     putchar2('G');
00135d 931a      	ST   -Y,R17
                 ;	i -> R17
00135e e4e7      	LDI  R30,LOW(71)
00135f 93ea      	ST   -Y,R30
001360 940e 0b7b 	CALL _putchar2
                 ; 0000 039C     ValueUpd_mSec = 0;
001362 e0e0      	LDI  R30,LOW(0)
001363 93e0 0792 	STS  _ValueUpd_mSec,R30
001365 93e0 0793 	STS  _ValueUpd_mSec+1,R30
                 ; 0000 039D     ValueState = 5;
001367 e0e5      	LDI  R30,LOW(5)
001368 93e0 078d 	STS  _ValueState,R30
                 ; 0000 039E     while(rx_counter2 < (9*2) && ValueUpd_mSec < 100); //ждем
                 _0x1F4:
00136a 91a0 0615 	LDS  R26,_rx_counter2
00136c 31a2      	CPI  R26,LOW(0x12)
00136d f440      	BRSH _0x1F7
00136e 91a0 0792 	LDS  R26,_ValueUpd_mSec
001370 91b0 0793 	LDS  R27,_ValueUpd_mSec+1
001372 36a4      	CPI  R26,LOW(0x64)
001373 e0e0      	LDI  R30,HIGH(0x64)
001374 07be      	CPC  R27,R30
001375 f008      	BRLO _0x1F8
                 _0x1F7:
001376 c001      	RJMP _0x1F6
                 _0x1F8:
001377 cff2      	RJMP _0x1F4
                 _0x1F6:
                 ; 0000 039F 
                 ; 0000 03A0     for(i=0; i<12; i++)
001378 e010      	LDI  R17,LOW(0)
                 _0x1FA:
001379 301c      	CPI  R17,12
00137a f010      	BRLO PC+3
00137b 940c 13df 	JMP _0x1FB
                 ; 0000 03A1     {
                 ; 0000 03A2         if(i<3)
00137d 3013      	CPI  R17,3
00137e f478      	BRSH _0x1FC
                 ; 0000 03A3         {
                 ; 0000 03A4             ConfigValue[i] = ConfigValue_mem[i];
00137f 2fe1      	MOV  R30,R17
001380 940e 190e 	CALL SUBOPT_0x64
001382 0fea      	ADD  R30,R26
001383 1ffb      	ADC  R31,R27
001384 010f      	MOVW R0,R30
001385 2fe1      	MOV  R30,R17
001386 940e 1908 	CALL SUBOPT_0x63
001388 0fae      	ADD  R26,R30
001389 1fbf      	ADC  R27,R31
00138a 940e 1b57 	CALL __EEPROMRDW
00138c 01d0      	MOVW R26,R0
00138d c028      	RJMP _0x210
                 ; 0000 03A5         }
                 ; 0000 03A6         else if(rx_counter2 > 1)
                 _0x1FC:
00138e 91a0 0615 	LDS  R26,_rx_counter2
001390 30a2      	CPI  R26,LOW(0x2)
001391 f130      	BRLO _0x1FE
                 ; 0000 03A7         {
                 ; 0000 03A8             ConfigValue[i] = getchar2() & 0x00FF;
001392 2fe1      	MOV  R30,R17
001393 940e 190e 	CALL SUBOPT_0x64
001395 0fea      	ADD  R30,R26
001396 1ffb      	ADC  R31,R27
001397 93ff      	PUSH R31
001398 93ef      	PUSH R30
001399 940e 0b21 	CALL _getchar2
00139b 91af      	POP  R26
00139c 91bf      	POP  R27
00139d e0f0      	LDI  R31,0
00139e 93ed      	ST   X+,R30
00139f 93fc      	ST   X,R31
                 ; 0000 03A9             ConfigValue[i] |= (unsigned int)getchar2() << 8;
0013a0 2fe1      	MOV  R30,R17
0013a1 940e 190e 	CALL SUBOPT_0x64
0013a3 0fea      	ADD  R30,R26
0013a4 1ffb      	ADC  R31,R27
0013a5 93ff      	PUSH R31
0013a6 93ef      	PUSH R30
0013a7 01df      	MOVW R26,R30
0013a8 940e 1b45 	CALL __GETW1P
0013aa 93ff      	PUSH R31
0013ab 93ef      	PUSH R30
0013ac 940e 0b21 	CALL _getchar2
0013ae 2ffe      	MOV  R31,R30
0013af e0e0      	LDI  R30,0
0013b0 91af      	POP  R26
0013b1 91bf      	POP  R27
0013b2 2bea      	OR   R30,R26
0013b3 2bfb      	OR   R31,R27
0013b4 91af      	POP  R26
0013b5 91bf      	POP  R27
                 _0x210:
0013b6 93ed      	ST   X+,R30
0013b7 93fc      	ST   X,R31
                 ; 0000 03AA         }
                 ; 0000 03AB 
                 ; 0000 03AC         if(ConfigValue[i] < ConfigParam[1][i] || ConfigValue[i] > ConfigParam[2][i])
                 _0x1FE:
0013b8 2fe1      	MOV  R30,R17
0013b9 940e 190e 	CALL SUBOPT_0x64
0013bb 940e 192e 	CALL SUBOPT_0x69
                +
0013bd eee4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 24 ) )
0013be e0f7     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 24 ) )
                 	__POINTW1FN _ConfigParam,24
0013bf 940e 196b 	CALL SUBOPT_0x71
0013c1 176e      	CP   R22,R30
0013c2 077f      	CPC  R23,R31
0013c3 f060      	BRLO _0x200
0013c4 2fe1      	MOV  R30,R17
0013c5 940e 190e 	CALL SUBOPT_0x64
0013c7 940e 192e 	CALL SUBOPT_0x69
                +
0013c9 efec     +LDI R30 , LOW ( 2 * _ConfigParam + ( 48 ) )
0013ca e0f7     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 48 ) )
                 	__POINTW1FN _ConfigParam,48
0013cb 940e 196b 	CALL SUBOPT_0x71
0013cd 17e6      	CP   R30,R22
0013ce 07f7      	CPC  R31,R23
0013cf f468      	BRSH _0x1FF
                 _0x200:
                 ; 0000 03AD         {
                 ; 0000 03AE             ConfigValue[i] = ConfigParam[3][i];
0013d0 2fe1      	MOV  R30,R17
0013d1 940e 190e 	CALL SUBOPT_0x64
0013d3 0fea      	ADD  R30,R26
0013d4 1ffb      	ADC  R31,R27
0013d5 01bf      	MOVW R22,R30
                +
0013d6 e1e4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 72 ) )
0013d7 e0f8     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 72 ) )
                 	__POINTW1FN _ConfigParam,72
0013d8 940e 196b 	CALL SUBOPT_0x71
0013da 01db      	MOVW R26,R22
0013db 93ed      	ST   X+,R30
0013dc 93fc      	ST   X,R31
                 ; 0000 03AF         }
                 ; 0000 03B0     }
                 _0x1FF:
0013dd 5f1f      	SUBI R17,-1
0013de cf9a      	RJMP _0x1FA
                 _0x1FB:
                 ; 0000 03B1 
                 ; 0000 03B2     ValueState = 0;
0013df e0e0      	LDI  R30,LOW(0)
0013e0 93e0 078d 	STS  _ValueState,R30
                 ; 0000 03B3 }
0013e2 9119      	LD   R17,Y+
0013e3 9508      	RET
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 03B8 {
                 _main:
                 ; 0000 03B9 // Declare your local variables here
                 ; 0000 03BA {
                 ; 0000 03BB // Input/Output Ports initialization
                 ; 0000 03BC // Port A initialization
                 ; 0000 03BD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03BE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03BF PORTA=0x00;
0013e4 e0e0      	LDI  R30,LOW(0)
0013e5 bbeb      	OUT  0x1B,R30
                 ; 0000 03C0 DDRA=0x00;
0013e6 bbea      	OUT  0x1A,R30
                 ; 0000 03C1 
                 ; 0000 03C2 // Port B initialization
                 ; 0000 03C3 // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 03C4 // State7=1 State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
                 ; 0000 03C5 PORTB=0x80;
0013e7 e8e0      	LDI  R30,LOW(128)
0013e8 bbe8      	OUT  0x18,R30
                 ; 0000 03C6 DDRB=0x87;
0013e9 e8e7      	LDI  R30,LOW(135)
0013ea bbe7      	OUT  0x17,R30
                 ; 0000 03C7 
                 ; 0000 03C8 // Port C initialization
                 ; 0000 03C9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03CA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03CB PORTC=0x00;
0013eb e0e0      	LDI  R30,LOW(0)
0013ec bbe5      	OUT  0x15,R30
                 ; 0000 03CC DDRC=0x00;
0013ed bbe4      	OUT  0x14,R30
                 ; 0000 03CD 
                 ; 0000 03CE // Port D initialization
                 ; 0000 03CF // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03D0 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 03D1 PORTD=0x00;
0013ee bbe2      	OUT  0x12,R30
                 ; 0000 03D2 DDRD=0x10;
0013ef e1e0      	LDI  R30,LOW(16)
0013f0 bbe1      	OUT  0x11,R30
                 ; 0000 03D3 
                 ; 0000 03D4 // Port E initialization
                 ; 0000 03D5 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03D6 // State7=T State6=T State5=T State4=1 State3=T State2=T State1=T State0=T
                 ; 0000 03D7 PORTE=0x10;
0013f1 b9e3      	OUT  0x3,R30
                 ; 0000 03D8 DDRE=0x10;  //PE4 - CD off
0013f2 b9e2      	OUT  0x2,R30
                 ; 0000 03D9 
                 ; 0000 03DA // Port F initialization
                 ; 0000 03DB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03DC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03DD PORTF=0x00;
0013f3 e0e0      	LDI  R30,LOW(0)
0013f4 93e0 0062 	STS  98,R30
                 ; 0000 03DE DDRF=0x00;
0013f6 93e0 0061 	STS  97,R30
                 ; 0000 03DF 
                 ; 0000 03E0 // Port G initialization
                 ; 0000 03E1 // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03E2 // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03E3 PORTG=0x00;
0013f8 93e0 0065 	STS  101,R30
                 ; 0000 03E4 DDRG=0x00;
0013fa 93e0 0064 	STS  100,R30
                 ; 0000 03E5 
                 ; 0000 03E6 // Timer/Counter 0 initialization
                 ; 0000 03E7 // Clock source: System Clock
                 ; 0000 03E8 // Clock value: 250,000 kHz
                 ; 0000 03E9 // Mode: Normal top=0xFF
                 ; 0000 03EA // OC0 output: Disconnected
                 ; 0000 03EB ASSR=0x00;
0013fc bfe0      	OUT  0x30,R30
                 ; 0000 03EC TCCR0=0x04;
0013fd e0e4      	LDI  R30,LOW(4)
0013fe bfe3      	OUT  0x33,R30
                 ; 0000 03ED TCNT0=0x06;
0013ff e0e6      	LDI  R30,LOW(6)
001400 bfe2      	OUT  0x32,R30
                 ; 0000 03EE OCR0=0x00;
001401 e0e0      	LDI  R30,LOW(0)
001402 bfe1      	OUT  0x31,R30
                 ; 0000 03EF 
                 ; 0000 03F0 // Timer/Counter 1 initialization
                 ; 0000 03F1 // Clock source: System Clock
                 ; 0000 03F2 // Clock value: Timer1 Stopped
                 ; 0000 03F3 // Mode: Normal top=0xFFFF
                 ; 0000 03F4 // OC1A output: Discon.
                 ; 0000 03F5 // OC1B output: Discon.
                 ; 0000 03F6 // OC1C output: Discon.
                 ; 0000 03F7 // Noise Canceler: Off
                 ; 0000 03F8 // Input Capture on Falling Edge
                 ; 0000 03F9 // Timer1 Overflow Interrupt: Off
                 ; 0000 03FA // Input Capture Interrupt: Off
                 ; 0000 03FB // Compare A Match Interrupt: Off
                 ; 0000 03FC // Compare B Match Interrupt: Off
                 ; 0000 03FD // Compare C Match Interrupt: Off
                 ; 0000 03FE TCCR1A=0x00;
001403 bdef      	OUT  0x2F,R30
                 ; 0000 03FF TCCR1B=0x00;
001404 bdee      	OUT  0x2E,R30
                 ; 0000 0400 TCNT1H=0x00;
001405 bded      	OUT  0x2D,R30
                 ; 0000 0401 TCNT1L=0x00;
001406 bdec      	OUT  0x2C,R30
                 ; 0000 0402 ICR1H=0x00;
001407 bde7      	OUT  0x27,R30
                 ; 0000 0403 ICR1L=0x00;
001408 bde6      	OUT  0x26,R30
                 ; 0000 0404 OCR1AH=0x00;
001409 bdeb      	OUT  0x2B,R30
                 ; 0000 0405 OCR1AL=0x00;
00140a bdea      	OUT  0x2A,R30
                 ; 0000 0406 OCR1BH=0x00;
00140b bde9      	OUT  0x29,R30
                 ; 0000 0407 OCR1BL=0x00;
00140c bde8      	OUT  0x28,R30
                 ; 0000 0408 OCR1CH=0x00;
00140d 93e0 0079 	STS  121,R30
                 ; 0000 0409 OCR1CL=0x00;
00140f 93e0 0078 	STS  120,R30
                 ; 0000 040A 
                 ; 0000 040B // Timer/Counter 2 initialization
                 ; 0000 040C // Clock source: System Clock
                 ; 0000 040D // Clock value: Timer2 Stopped
                 ; 0000 040E // Mode: Normal top=0xFF
                 ; 0000 040F // OC2 output: Disconnected
                 ; 0000 0410 TCCR2=0x00;
001411 bde5      	OUT  0x25,R30
                 ; 0000 0411 TCNT2=0x00;
001412 bde4      	OUT  0x24,R30
                 ; 0000 0412 OCR2=0x00;
001413 bde3      	OUT  0x23,R30
                 ; 0000 0413 
                 ; 0000 0414 // Timer/Counter 3 initialization
                 ; 0000 0415 // Clock source: System Clock
                 ; 0000 0416 // Clock value: Timer3 Stopped
                 ; 0000 0417 // Mode: Normal top=0xFFFF
                 ; 0000 0418 // OC3A output: Discon.
                 ; 0000 0419 // OC3B output: Discon.
                 ; 0000 041A // OC3C output: Discon.
                 ; 0000 041B // Noise Canceler: Off
                 ; 0000 041C // Input Capture on Falling Edge
                 ; 0000 041D // Timer3 Overflow Interrupt: Off
                 ; 0000 041E // Input Capture Interrupt: Off
                 ; 0000 041F // Compare A Match Interrupt: Off
                 ; 0000 0420 // Compare B Match Interrupt: Off
                 ; 0000 0421 // Compare C Match Interrupt: Off
                 ; 0000 0422 TCCR3A=0x00;
001414 93e0 008b 	STS  139,R30
                 ; 0000 0423 TCCR3B=0x00;
001416 93e0 008a 	STS  138,R30
                 ; 0000 0424 TCNT3H=0x00;
001418 93e0 0089 	STS  137,R30
                 ; 0000 0425 TCNT3L=0x00;
00141a 93e0 0088 	STS  136,R30
                 ; 0000 0426 ICR3H=0x00;
00141c 93e0 0081 	STS  129,R30
                 ; 0000 0427 ICR3L=0x00;
00141e 93e0 0080 	STS  128,R30
                 ; 0000 0428 OCR3AH=0x00;
001420 93e0 0087 	STS  135,R30
                 ; 0000 0429 OCR3AL=0x00;
001422 93e0 0086 	STS  134,R30
                 ; 0000 042A OCR3BH=0x00;
001424 93e0 0085 	STS  133,R30
                 ; 0000 042B OCR3BL=0x00;
001426 93e0 0084 	STS  132,R30
                 ; 0000 042C OCR3CH=0x00;
001428 93e0 0083 	STS  131,R30
                 ; 0000 042D OCR3CL=0x00;
00142a 93e0 0082 	STS  130,R30
                 ; 0000 042E 
                 ; 0000 042F // External Interrupt(s) initialization
                 ; 0000 0430 // INT0: Off
                 ; 0000 0431 // INT1: Off
                 ; 0000 0432 // INT2: Off
                 ; 0000 0433 // INT3: Off
                 ; 0000 0434 // INT4: Off
                 ; 0000 0435 // INT5: Off
                 ; 0000 0436 // INT6: Off
                 ; 0000 0437 // INT7: Off
                 ; 0000 0438 EICRA=0x00;
00142c 93e0 006a 	STS  106,R30
                 ; 0000 0439 EICRB=0x00;
00142e bfea      	OUT  0x3A,R30
                 ; 0000 043A EIMSK=0x00;
00142f bfe9      	OUT  0x39,R30
                 ; 0000 043B 
                 ; 0000 043C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 043D TIMSK=0x01;
001430 e0e1      	LDI  R30,LOW(1)
001431 bfe7      	OUT  0x37,R30
                 ; 0000 043E 
                 ; 0000 043F ETIMSK=0x00;
001432 e0e0      	LDI  R30,LOW(0)
001433 93e0 007d 	STS  125,R30
                 ; 0000 0440 
                 ; 0000 0441 // USART0 initialization
                 ; 0000 0442 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0443 // USART0 Receiver: On
                 ; 0000 0444 // USART0 Transmitter: On
                 ; 0000 0445 // USART0 Mode: Asynchronous
                 ; 0000 0446 // USART0 Baud Rate: 115200
                 ; 0000 0447 UCSR0A=0x00;
001435 b9eb      	OUT  0xB,R30
                 ; 0000 0448 UCSR0B=0xD8;
001436 ede8      	LDI  R30,LOW(216)
001437 b9ea      	OUT  0xA,R30
                 ; 0000 0449 UCSR0C=0x06;
001438 e0e6      	LDI  R30,LOW(6)
001439 93e0 0095 	STS  149,R30
                 ; 0000 044A UBRR0H=0x00;
00143b e0e0      	LDI  R30,LOW(0)
00143c 93e0 0090 	STS  144,R30
                 ; 0000 044B UBRR0L=0x08;
00143e e0e8      	LDI  R30,LOW(8)
00143f b9e9      	OUT  0x9,R30
                 ; 0000 044C 
                 ; 0000 044D // USART1 initialization
                 ; 0000 044E // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 044F // USART1 Receiver: On
                 ; 0000 0450 // USART1 Transmitter: On
                 ; 0000 0451 // USART1 Mode: Asynchronous
                 ; 0000 0452 // USART1 Baud Rate: 9600
                 ; 0000 0453 UCSR1A=0x00;
001440 e0e0      	LDI  R30,LOW(0)
001441 93e0 009b 	STS  155,R30
                 ; 0000 0454 UCSR1B=0xD8;
001443 ede8      	LDI  R30,LOW(216)
001444 93e0 009a 	STS  154,R30
                 ; 0000 0455 UCSR1C=0x06;
001446 e0e6      	LDI  R30,LOW(6)
001447 93e0 009d 	STS  157,R30
                 ; 0000 0456 UBRR1H=0x00;
001449 e0e0      	LDI  R30,LOW(0)
00144a 93e0 0098 	STS  152,R30
                 ; 0000 0457 UBRR1L=0x67;
00144c e6e7      	LDI  R30,LOW(103)
00144d 93e0 0099 	STS  153,R30
                 ; 0000 0458 
                 ; 0000 0459 // Analog Comparator initialization
                 ; 0000 045A // Analog Comparator: Off
                 ; 0000 045B // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 045C ACSR=0x80;
00144f e8e0      	LDI  R30,LOW(128)
001450 b9e8      	OUT  0x8,R30
                 ; 0000 045D SFIOR=0x00;
001451 e0e0      	LDI  R30,LOW(0)
001452 bde0      	OUT  0x20,R30
                 ; 0000 045E 
                 ; 0000 045F // ADC initialization
                 ; 0000 0460 // ADC disabled
                 ; 0000 0461 ADCSRA=0x00;
001453 b9e6      	OUT  0x6,R30
                 ; 0000 0462 
                 ; 0000 0463 // SPI initialization
                 ; 0000 0464 // SPI Type: Master
                 ; 0000 0465 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 0466 // SPI Clock Phase: Cycle Start
                 ; 0000 0467 // SPI Clock Polarity: Low
                 ; 0000 0468 // SPI Data Order: MSB First
                 ; 0000 0469 SPCR=0x52;
001454 e5e2      	LDI  R30,LOW(82)
001455 b9ed      	OUT  0xD,R30
                 ; 0000 046A SPSR=0x00;
001456 e0e0      	LDI  R30,LOW(0)
001457 b9ee      	OUT  0xE,R30
                 ; 0000 046B 
                 ; 0000 046C // TWI initialization
                 ; 0000 046D // TWI disabled
                 ; 0000 046E TWCR=0x00;
001458 93e0 0074 	STS  116,R30
                 ; 0000 046F }
                 ; 0000 0470 {
                 ; 0000 0471 // Global enable interrupts
                 ; 0000 0472 #asm("sei")
00145a 9478      	sei
                 ; 0000 0473 
                 ; 0000 0474 SSD1963_Init();
00145b 940e 0596 	CALL _SSD1963_Init
                 ; 0000 0475 TSC2046_Init();
00145d 940e 0a98 	CALL _TSC2046_Init
                 ; 0000 0476 SSD1963_ClearScreen(BLACK);
00145f 940e 168c 	CALL SUBOPT_0xD
001461 940e 0638 	CALL _SSD1963_ClearScreen
                 ; 0000 0477 
                 ; 0000 0478   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLUE, BLACK);
                +
001463 ecef     +LDI R30 , LOW ( _0x202 + ( 0 ) )
001464 e0f5     +LDI R31 , HIGH ( _0x202 + ( 0 ) )
                 	__POINTW1MN _0x202,0
001465 940e 196f 	CALL SUBOPT_0x72
001467 e7e0      	LDI  R30,LOW(112)
001468 e0f0      	LDI  R31,HIGH(112)
001469 93fa      	ST   -Y,R31
00146a 93ea      	ST   -Y,R30
00146b efe8      	LDI  R30,LOW(248)
00146c e0f0      	LDI  R31,HIGH(248)
00146d 940e 1691 	CALL SUBOPT_0xE
00146f 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0479   BACKLIGHT = 0; //On
001471 98c7      	CBI  0x18,7
                 ; 0000 047A   delay_ms(200);
001472 940e 1658 	CALL SUBOPT_0x4
                 ; 0000 047B   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), RED, BLACK);
                +
001474 ede6     +LDI R30 , LOW ( _0x202 + ( 7 ) )
001475 e0f5     +LDI R31 , HIGH ( _0x202 + ( 7 ) )
                 	__POINTW1MN _0x202,7
001476 940e 196f 	CALL SUBOPT_0x72
001478 e8e0      	LDI  R30,LOW(128)
001479 e0f0      	LDI  R31,HIGH(128)
00147a 93fa      	ST   -Y,R31
00147b 93ea      	ST   -Y,R30
00147c e0e0      	LDI  R30,LOW(7936)
00147d e1ff      	LDI  R31,HIGH(7936)
00147e 940e 1691 	CALL SUBOPT_0xE
001480 940e 1976 	CALL SUBOPT_0x73
                 ; 0000 047C   delay_ms(200);
                 ; 0000 047D   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, GREEN, BLACK);
                +
001482 eded     +LDI R30 , LOW ( _0x202 + ( 14 ) )
001483 e0f5     +LDI R31 , HIGH ( _0x202 + ( 14 ) )
                 	__POINTW1MN _0x202,14
001484 940e 196f 	CALL SUBOPT_0x72
001486 e9e0      	LDI  R30,LOW(144)
001487 e0f0      	LDI  R31,HIGH(144)
001488 93fa      	ST   -Y,R31
001489 93ea      	ST   -Y,R30
00148a e0e7      	LDI  R30,LOW(57351)
00148b eef0      	LDI  R31,HIGH(57351)
00148c 940e 1691 	CALL SUBOPT_0xE
00148e 940e 1976 	CALL SUBOPT_0x73
                 ; 0000 047E   delay_ms(200);
                 ; 0000 047F   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
001490 eee4     +LDI R30 , LOW ( _0x202 + ( 21 ) )
001491 e0f5     +LDI R31 , HIGH ( _0x202 + ( 21 ) )
                 	__POINTW1MN _0x202,21
001492 940e 196f 	CALL SUBOPT_0x72
001494 e7e0      	LDI  R30,LOW(112)
001495 e0f0      	LDI  R31,HIGH(112)
001496 940e 1691 	CALL SUBOPT_0xE
001498 940e 168c 	CALL SUBOPT_0xD
00149a 940e 1976 	CALL SUBOPT_0x73
                 ; 0000 0480   delay_ms(200);
                 ; 0000 0481   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
00149c eeeb     +LDI R30 , LOW ( _0x202 + ( 28 ) )
00149d e0f5     +LDI R31 , HIGH ( _0x202 + ( 28 ) )
                 	__POINTW1MN _0x202,28
00149e 940e 196f 	CALL SUBOPT_0x72
0014a0 e8e0      	LDI  R30,LOW(128)
0014a1 e0f0      	LDI  R31,HIGH(128)
0014a2 940e 1691 	CALL SUBOPT_0xE
0014a4 940e 168c 	CALL SUBOPT_0xD
0014a6 940e 1976 	CALL SUBOPT_0x73
                 ; 0000 0482   delay_ms(200);
                 ; 0000 0483   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
0014a8 efe2     +LDI R30 , LOW ( _0x202 + ( 35 ) )
0014a9 e0f5     +LDI R31 , HIGH ( _0x202 + ( 35 ) )
                 	__POINTW1MN _0x202,35
0014aa 940e 196f 	CALL SUBOPT_0x72
0014ac e9e0      	LDI  R30,LOW(144)
0014ad e0f0      	LDI  R31,HIGH(144)
0014ae 940e 1691 	CALL SUBOPT_0xE
0014b0 940e 168c 	CALL SUBOPT_0xD
0014b2 940e 0841 	CALL _SSD1963_PutString16
                 ; 0000 0484 
                 ; 0000 0485 Prepare_Screen();
0014b4 940e 0c4e 	CALL _Prepare_Screen
                 ; 0000 0486 State = 1;
0014b6 e0e1      	LDI  R30,LOW(1)
0014b7 93e0 078b 	STS  _State,R30
                 ; 0000 0487 Load_Config();
0014b9 dea3      	RCALL _Load_Config
                 ; 0000 0488 
                 ; 0000 0489 // Watchdog Timer initialization
                 ; 0000 048A // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 048B #pragma optsize-
                 ; 0000 048C #asm("wdr")
0014ba 95a8      	wdr
                 ; 0000 048D WDTCR=0x1F;
0014bb e1ef      	LDI  R30,LOW(31)
0014bc bde1      	OUT  0x21,R30
                 ; 0000 048E WDTCR=0x0F;
0014bd e0ef      	LDI  R30,LOW(15)
0014be bde1      	OUT  0x21,R30
                 ; 0000 048F #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0490 #pragma optsize+
                 ; 0000 0491 #endif
                 ; 0000 0492 }
                 ; 0000 0493 
                 ; 0000 0494 while (1)
                 _0x205:
                 ; 0000 0495       {
                 ; 0000 0496       #asm("wdr")
0014bf 95a8      	wdr
                 ; 0000 0497       main_loop();
0014c0 dcdd      	RCALL _main_loop
                 ; 0000 0498       }
0014c1 cffd      	RJMP _0x205
                 ; 0000 0499 }
                 _0x208:
0014c2 cfff      	RJMP _0x208
                 
                 	.DSEG
                 _0x202:
0005cf           	.BYTE 0x2A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
0014c3 81e8      	LD   R30,Y
0014c4 b9ef      	OUT  0xF,R30
                 _0x2000003:
0014c5 9b77      	SBIS 0xE,7
0014c6 cffe      	RJMP _0x2000003
0014c7 b1ef      	IN   R30,0xF
                 _0x2080001:
0014c8 9621      	ADIW R28,1
0014c9 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G101:
0014ca 81ea      	LDD  R30,Y+2
0014cb 93ea      	ST   -Y,R30
0014cc 940e 0bcc 	CALL _putchar
0014ce 81a8      	LD   R26,Y
0014cf 81b9      	LDD  R27,Y+1
0014d0 940e 1813 	CALL SUBOPT_0x3B
0014d2 9623      	ADIW R28,3
0014d3 9508      	RET
                 __print_G101:
0014d4 9726      	SBIW R28,6
0014d5 940e 1b85 	CALL __SAVELOCR6
0014d7 e010      	LDI  R17,0
0014d8 85ac      	LDD  R26,Y+12
0014d9 85bd      	LDD  R27,Y+12+1
0014da e0e0      	LDI  R30,LOW(0)
0014db e0f0      	LDI  R31,HIGH(0)
0014dc 93ed      	ST   X+,R30
0014dd 93fc      	ST   X,R31
                 _0x2020016:
0014de 89ea      	LDD  R30,Y+18
0014df 89fb      	LDD  R31,Y+18+1
0014e0 9631      	ADIW R30,1
0014e1 8bea      	STD  Y+18,R30
0014e2 8bfb      	STD  Y+18+1,R31
0014e3 9731      	SBIW R30,1
0014e4 91e4      	LPM  R30,Z
0014e5 2f2e      	MOV  R18,R30
0014e6 30e0      	CPI  R30,0
0014e7 f411      	BRNE PC+3
0014e8 940c 1601 	JMP _0x2020018
0014ea 2fe1      	MOV  R30,R17
0014eb 30e0      	CPI  R30,0
0014ec f439      	BRNE _0x202001C
0014ed 3225      	CPI  R18,37
0014ee f411      	BRNE _0x202001D
0014ef e011      	LDI  R17,LOW(1)
0014f0 c002      	RJMP _0x202001E
                 _0x202001D:
0014f1 940e 1979 	CALL SUBOPT_0x74
                 _0x202001E:
0014f3 c10c      	RJMP _0x202001B
                 _0x202001C:
0014f4 30e1      	CPI  R30,LOW(0x1)
0014f5 f4a9      	BRNE _0x202001F
0014f6 3225      	CPI  R18,37
0014f7 f419      	BRNE _0x2020020
0014f8 940e 1979 	CALL SUBOPT_0x74
0014fa c104      	RJMP _0x20200C9
                 _0x2020020:
0014fb e012      	LDI  R17,LOW(2)
0014fc e040      	LDI  R20,LOW(0)
0014fd e000      	LDI  R16,LOW(0)
0014fe 322d      	CPI  R18,45
0014ff f411      	BRNE _0x2020021
001500 e001      	LDI  R16,LOW(1)
001501 c0fe      	RJMP _0x202001B
                 _0x2020021:
001502 322b      	CPI  R18,43
001503 f411      	BRNE _0x2020022
001504 e24b      	LDI  R20,LOW(43)
001505 c0fa      	RJMP _0x202001B
                 _0x2020022:
001506 3220      	CPI  R18,32
001507 f411      	BRNE _0x2020023
001508 e240      	LDI  R20,LOW(32)
001509 c0f6      	RJMP _0x202001B
                 _0x2020023:
00150a c002      	RJMP _0x2020024
                 _0x202001F:
00150b 30e2      	CPI  R30,LOW(0x2)
00150c f439      	BRNE _0x2020025
                 _0x2020024:
00150d e050      	LDI  R21,LOW(0)
00150e e013      	LDI  R17,LOW(3)
00150f 3320      	CPI  R18,48
001510 f411      	BRNE _0x2020026
001511 6800      	ORI  R16,LOW(128)
001512 c0ed      	RJMP _0x202001B
                 _0x2020026:
001513 c004      	RJMP _0x2020027
                 _0x2020025:
001514 30e3      	CPI  R30,LOW(0x3)
001515 f011      	BREQ PC+3
001516 940c 1600 	JMP _0x202001B
                 _0x2020027:
001518 3320      	CPI  R18,48
001519 f010      	BRLO _0x202002A
00151a 332a      	CPI  R18,58
00151b f008      	BRLO _0x202002B
                 _0x202002A:
00151c c007      	RJMP _0x2020029
                 _0x202002B:
00151d e0aa      	LDI  R26,LOW(10)
00151e 9f5a      	MUL  R21,R26
00151f 2d50      	MOV  R21,R0
001520 2fe2      	MOV  R30,R18
001521 53e0      	SUBI R30,LOW(48)
001522 0f5e      	ADD  R21,R30
001523 c0dc      	RJMP _0x202001B
                 _0x2020029:
001524 2fe2      	MOV  R30,R18
001525 36e3      	CPI  R30,LOW(0x63)
001526 f449      	BRNE _0x202002F
001527 940e 1982 	CALL SUBOPT_0x75
001529 89e8      	LDD  R30,Y+16
00152a 89f9      	LDD  R31,Y+16+1
00152b 81a4      	LDD  R26,Z+4
00152c 93aa      	ST   -Y,R26
00152d 940e 1988 	CALL SUBOPT_0x76
00152f c0cf      	RJMP _0x2020030
                 _0x202002F:
001530 37e3      	CPI  R30,LOW(0x73)
001531 f441      	BRNE _0x2020032
001532 940e 1982 	CALL SUBOPT_0x75
001534 940e 1990 	CALL SUBOPT_0x77
001536 940e 162e 	CALL _strlen
001538 2f1e      	MOV  R17,R30
001539 c00a      	RJMP _0x2020033
                 _0x2020032:
00153a 37e0      	CPI  R30,LOW(0x70)
00153b f461      	BRNE _0x2020035
00153c 940e 1982 	CALL SUBOPT_0x75
00153e 940e 1990 	CALL SUBOPT_0x77
001540 940e 1638 	CALL _strlenf
001542 2f1e      	MOV  R17,R30
001543 6008      	ORI  R16,LOW(8)
                 _0x2020033:
001544 6002      	ORI  R16,LOW(2)
001545 770f      	ANDI R16,LOW(127)
001546 e030      	LDI  R19,LOW(0)
001547 c035      	RJMP _0x2020036
                 _0x2020035:
001548 36e4      	CPI  R30,LOW(0x64)
001549 f011      	BREQ _0x2020039
00154a 36e9      	CPI  R30,LOW(0x69)
00154b f411      	BRNE _0x202003A
                 _0x2020039:
00154c 6004      	ORI  R16,LOW(4)
00154d c002      	RJMP _0x202003B
                 _0x202003A:
00154e 37e5      	CPI  R30,LOW(0x75)
00154f f431      	BRNE _0x202003C
                 _0x202003B:
001550 e2ec      	LDI  R30,LOW(_tbl10_G101*2)
001551 e0f8      	LDI  R31,HIGH(_tbl10_G101*2)
001552 83ee      	STD  Y+6,R30
001553 83ff      	STD  Y+6+1,R31
001554 e015      	LDI  R17,LOW(5)
001555 c00d      	RJMP _0x202003D
                 _0x202003C:
001556 35e8      	CPI  R30,LOW(0x58)
001557 f411      	BRNE _0x202003F
001558 6008      	ORI  R16,LOW(8)
001559 c004      	RJMP _0x2020040
                 _0x202003F:
00155a 37e8      	CPI  R30,LOW(0x78)
00155b f011      	BREQ PC+3
00155c 940c 15ff 	JMP _0x2020071
                 _0x2020040:
00155e e3e6      	LDI  R30,LOW(_tbl16_G101*2)
00155f e0f8      	LDI  R31,HIGH(_tbl16_G101*2)
001560 83ee      	STD  Y+6,R30
001561 83ff      	STD  Y+6+1,R31
001562 e014      	LDI  R17,LOW(4)
                 _0x202003D:
001563 ff02      	SBRS R16,2
001564 c014      	RJMP _0x2020042
001565 940e 1982 	CALL SUBOPT_0x75
001567 940e 199a 	CALL SUBOPT_0x78
001569 85ab      	LDD  R26,Y+11
00156a 23aa      	TST  R26
00156b f43a      	BRPL _0x2020043
00156c 85ea      	LDD  R30,Y+10
00156d 85fb      	LDD  R31,Y+10+1
00156e 940e 1a90 	CALL __ANEGW1
001570 87ea      	STD  Y+10,R30
001571 87fb      	STD  Y+10+1,R31
001572 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
001573 3040      	CPI  R20,0
001574 f011      	BREQ _0x2020044
001575 5f1f      	SUBI R17,-LOW(1)
001576 c001      	RJMP _0x2020045
                 _0x2020044:
001577 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
001578 c004      	RJMP _0x2020046
                 _0x2020042:
001579 940e 1982 	CALL SUBOPT_0x75
00157b 940e 199a 	CALL SUBOPT_0x78
                 _0x2020046:
                 _0x2020036:
00157d fd00      	SBRC R16,0
00157e c011      	RJMP _0x2020047
                 _0x2020048:
00157f 1715      	CP   R17,R21
001580 f478      	BRSH _0x202004A
001581 ff07      	SBRS R16,7
001582 c008      	RJMP _0x202004B
001583 ff02      	SBRS R16,2
001584 c004      	RJMP _0x202004C
001585 7f0b      	ANDI R16,LOW(251)
001586 2f24      	MOV  R18,R20
001587 5011      	SUBI R17,LOW(1)
001588 c001      	RJMP _0x202004D
                 _0x202004C:
001589 e320      	LDI  R18,LOW(48)
                 _0x202004D:
00158a c001      	RJMP _0x202004E
                 _0x202004B:
00158b e220      	LDI  R18,LOW(32)
                 _0x202004E:
00158c 940e 1979 	CALL SUBOPT_0x74
00158e 5051      	SUBI R21,LOW(1)
00158f cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
001590 2f31      	MOV  R19,R17
001591 ff01      	SBRS R16,1
001592 c017      	RJMP _0x202004F
                 _0x2020050:
001593 3030      	CPI  R19,0
001594 f0a1      	BREQ _0x2020052
001595 ff03      	SBRS R16,3
001596 c006      	RJMP _0x2020053
001597 81ee      	LDD  R30,Y+6
001598 81ff      	LDD  R31,Y+6+1
001599 9125      	LPM  R18,Z+
00159a 83ee      	STD  Y+6,R30
00159b 83ff      	STD  Y+6+1,R31
00159c c005      	RJMP _0x2020054
                 _0x2020053:
00159d 81ae      	LDD  R26,Y+6
00159e 81bf      	LDD  R27,Y+6+1
00159f 912d      	LD   R18,X+
0015a0 83ae      	STD  Y+6,R26
0015a1 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0015a2 940e 1979 	CALL SUBOPT_0x74
0015a4 3050      	CPI  R21,0
0015a5 f009      	BREQ _0x2020055
0015a6 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0015a7 5031      	SUBI R19,LOW(1)
0015a8 cfea      	RJMP _0x2020050
                 _0x2020052:
0015a9 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0015aa e320      	LDI  R18,LOW(48)
0015ab 81ee      	LDD  R30,Y+6
0015ac 81ff      	LDD  R31,Y+6+1
0015ad 940e 1b49 	CALL __GETW1PF
0015af 87e8      	STD  Y+8,R30
0015b0 87f9      	STD  Y+8+1,R31
0015b1 81ee      	LDD  R30,Y+6
0015b2 81ff      	LDD  R31,Y+6+1
0015b3 9632      	ADIW R30,2
0015b4 83ee      	STD  Y+6,R30
0015b5 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0015b6 85e8      	LDD  R30,Y+8
0015b7 85f9      	LDD  R31,Y+8+1
0015b8 85aa      	LDD  R26,Y+10
0015b9 85bb      	LDD  R27,Y+10+1
0015ba 17ae      	CP   R26,R30
0015bb 07bf      	CPC  R27,R31
0015bc f050      	BRLO _0x202005C
0015bd 5f2f      	SUBI R18,-LOW(1)
0015be 85a8      	LDD  R26,Y+8
0015bf 85b9      	LDD  R27,Y+8+1
0015c0 85ea      	LDD  R30,Y+10
0015c1 85fb      	LDD  R31,Y+10+1
0015c2 1bea      	SUB  R30,R26
0015c3 0bfb      	SBC  R31,R27
0015c4 87ea      	STD  Y+10,R30
0015c5 87fb      	STD  Y+10+1,R31
0015c6 cfef      	RJMP _0x202005A
                 _0x202005C:
0015c7 332a      	CPI  R18,58
0015c8 f028      	BRLO _0x202005D
0015c9 ff03      	SBRS R16,3
0015ca c002      	RJMP _0x202005E
0015cb 5f29      	SUBI R18,-LOW(7)
0015cc c001      	RJMP _0x202005F
                 _0x202005E:
0015cd 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0015ce fd04      	SBRC R16,4
0015cf c01a      	RJMP _0x2020061
0015d0 3321      	CPI  R18,49
0015d1 f420      	BRSH _0x2020063
0015d2 85a8      	LDD  R26,Y+8
0015d3 85b9      	LDD  R27,Y+8+1
0015d4 9711      	SBIW R26,1
0015d5 f409      	BRNE _0x2020062
                 _0x2020063:
0015d6 c009      	RJMP _0x20200CA
                 _0x2020062:
0015d7 1753      	CP   R21,R19
0015d8 f010      	BRLO _0x2020067
0015d9 ff00      	SBRS R16,0
0015da c001      	RJMP _0x2020068
                 _0x2020067:
0015db c013      	RJMP _0x2020066
                 _0x2020068:
0015dc e220      	LDI  R18,LOW(32)
0015dd ff07      	SBRS R16,7
0015de c00b      	RJMP _0x2020069
0015df e320      	LDI  R18,LOW(48)
                 _0x20200CA:
0015e0 6100      	ORI  R16,LOW(16)
0015e1 ff02      	SBRS R16,2
0015e2 c007      	RJMP _0x202006A
0015e3 7f0b      	ANDI R16,LOW(251)
0015e4 934a      	ST   -Y,R20
0015e5 940e 1988 	CALL SUBOPT_0x76
0015e7 3050      	CPI  R21,0
0015e8 f009      	BREQ _0x202006B
0015e9 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0015ea 940e 1979 	CALL SUBOPT_0x74
0015ec 3050      	CPI  R21,0
0015ed f009      	BREQ _0x202006C
0015ee 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0015ef 5031      	SUBI R19,LOW(1)
0015f0 85a8      	LDD  R26,Y+8
0015f1 85b9      	LDD  R27,Y+8+1
0015f2 9712      	SBIW R26,2
0015f3 f008      	BRLO _0x2020059
0015f4 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0015f5 ff00      	SBRS R16,0
0015f6 c008      	RJMP _0x202006D
                 _0x202006E:
0015f7 3050      	CPI  R21,0
0015f8 f031      	BREQ _0x2020070
0015f9 5051      	SUBI R21,LOW(1)
0015fa e2e0      	LDI  R30,LOW(32)
0015fb 93ea      	ST   -Y,R30
0015fc 940e 1988 	CALL SUBOPT_0x76
0015fe cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200C9:
0015ff e010      	LDI  R17,LOW(0)
                 _0x202001B:
001600 cedd      	RJMP _0x2020016
                 _0x2020018:
001601 85ac      	LDD  R26,Y+12
001602 85bd      	LDD  R27,Y+12+1
001603 940e 1b45 	CALL __GETW1P
001605 940e 1b8c 	CALL __LOADLOCR6
001607 9664      	ADIW R28,20
001608 9508      	RET
                 _printf:
001609 92ff      	PUSH R15
00160a 2ef8      	MOV  R15,R24
00160b 9726      	SBIW R28,6
00160c 931a      	ST   -Y,R17
00160d 930a      	ST   -Y,R16
00160e 01de      	MOVW R26,R28
00160f 9614      	ADIW R26,4
001610 940e 1a87 	CALL __ADDW2R15
001612 018d      	MOVW R16,R26
001613 e0e0      	LDI  R30,LOW(0)
001614 83ec      	STD  Y+4,R30
001615 83ed      	STD  Y+4+1,R30
001616 83ee      	STD  Y+6,R30
001617 83ef      	STD  Y+6+1,R30
001618 01de      	MOVW R26,R28
001619 9618      	ADIW R26,8
00161a 940e 1a87 	CALL __ADDW2R15
00161c 940e 1b45 	CALL __GETW1P
00161e 940e 1823 	CALL SUBOPT_0x3E
001620 ecea      	LDI  R30,LOW(_put_usart_G101)
001621 e1f4      	LDI  R31,HIGH(_put_usart_G101)
001622 93fa      	ST   -Y,R31
001623 93ea      	ST   -Y,R30
001624 01fe      	MOVW R30,R28
001625 9638      	ADIW R30,8
001626 93fa      	ST   -Y,R31
001627 93ea      	ST   -Y,R30
001628 deab      	RCALL __print_G101
001629 8119      	LDD  R17,Y+1
00162a 8108      	LDD  R16,Y+0
00162b 9628      	ADIW R28,8
00162c 90ff      	POP  R15
00162d 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00162e 91a9          ld   r26,y+
00162f 91b9          ld   r27,y+
001630 27ee          clr  r30
001631 27ff          clr  r31
                 strlen0:
001632 916d          ld   r22,x+
001633 2366          tst  r22
001634 f011          breq strlen1
001635 9631          adiw r30,1
001636 cffb          rjmp strlen0
                 strlen1:
001637 9508          ret
                 _strlenf:
001638 27aa          clr  r26
001639 27bb          clr  r27
00163a 91e9          ld   r30,y+
00163b 91f9          ld   r31,y+
                 strlenf0:
00163c 9005      	lpm  r0,z+
00163d 2000          tst  r0
00163e f011          breq strlenf1
00163f 9611          adiw r26,1
001640 cffb          rjmp strlenf0
                 strlenf1:
001641 01fd          movw r30,r26
001642 9508          ret
                 
                 	.DSEG
                 _tempX:
0005f9           	.BYTE 0x4
                 _tempY:
0005fd           	.BYTE 0x4
                 _rx_buffer2:
000601           	.BYTE 0x14
                 _rx_counter2:
000615           	.BYTE 0x1
                 _uart_swap:
000616           	.BYTE 0x1
                 _rx_buffer0:
000617           	.BYTE 0x100
                 _rx_wr_index0:
000717           	.BYTE 0x1
                 _rx_rd_index0:
000718           	.BYTE 0x1
                 _rx_counter0:
000719           	.BYTE 0x1
                 _tx_buffer0:
00071a           	.BYTE 0x8
                 _tx_wr_index0:
000722           	.BYTE 0x1
                 _tx_rd_index0:
000723           	.BYTE 0x1
                 _tx_counter0:
000724           	.BYTE 0x1
                 _rx_buffer1:
000725           	.BYTE 0x20
                 _rx_wr_index1:
000745           	.BYTE 0x1
                 _rx_rd_index1:
000746           	.BYTE 0x1
                 _rx_counter1:
000747           	.BYTE 0x1
                 _tx_buffer1:
000748           	.BYTE 0x40
                 _tx_wr_index1:
000788           	.BYTE 0x1
                 _tx_rd_index1:
000789           	.BYTE 0x1
                 _tx_counter1:
00078a           	.BYTE 0x1
                 _State:
00078b           	.BYTE 0x1
                 _ParameterState:
00078c           	.BYTE 0x1
                 _ValueState:
00078d           	.BYTE 0x1
                 _GraphState:
00078e           	.BYTE 0x1
                 _ConfigState:
00078f           	.BYTE 0x1
                 _Touch_mSec:
000790           	.BYTE 0x2
                 _ValueUpd_mSec:
000792           	.BYTE 0x2
                 _GraphUpd_mSec:
000794           	.BYTE 0x2
                 _GraphUpdTime:
000796           	.BYTE 0x2
                 _Graph_X:
000798           	.BYTE 0x2
                 _ValueLast:
00079a           	.BYTE 0x6
                 _ConfigValue:
0007a0           	.BYTE 0x18
                 _old_confVal:
0007b8           	.BYTE 0x2
                 
                 	.ESEG
                 _ConfigValue_mem:
000000           	.BYTE 0x6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
001643 81e8      	LD   R30,Y
001644 e0f0      	LDI  R31,0
001645 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
001646 e6e4      	LDI  R30,LOW(100)
001647 e0f0      	LDI  R31,HIGH(100)
001648 93fa      	ST   -Y,R31
001649 93ea      	ST   -Y,R30
00164a 940c 19a2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00164c 81e8      	LD   R30,Y
00164d 93ea      	ST   -Y,R30
00164e 940e 053b 	CALL _RotateByte
001650 bbeb      	OUT  0x1B,R30
001651 e0e0      	LDI  R30,LOW(0)
001652 bbe5      	OUT  0x15,R30
001653 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
001654 e0e1      	LDI  R30,LOW(1)
001655 93ea      	ST   -Y,R30
001656 940c 056a 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4:
001658 ece8      	LDI  R30,LOW(200)
001659 e0f0      	LDI  R31,HIGH(200)
00165a 93fa      	ST   -Y,R31
00165b 93ea      	ST   -Y,R30
00165c 940c 19a2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00165e 93ea      	ST   -Y,R30
00165f 940e 0576 	CALL _SSD1963_WriteData_b8
001661 e0e4      	LDI  R30,LOW(4)
001662 93ea      	ST   -Y,R30
001663 940c 0576 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
001665 93ea      	ST   -Y,R30
001666 940e 056a 	CALL _SSD1963_WriteCmd
001668 e0e1      	LDI  R30,LOW(1)
001669 93ea      	ST   -Y,R30
00166a 940c 0576 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00166c e0e1      	LDI  R30,LOW(1)
00166d e0f0      	LDI  R31,HIGH(1)
00166e 93fa      	ST   -Y,R31
00166f 93ea      	ST   -Y,R30
001670 940c 19a2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
001672 93ea      	ST   -Y,R30
001673 940e 056a 	CALL _SSD1963_WriteCmd
001675 e0e3      	LDI  R30,LOW(3)
001676 93ea      	ST   -Y,R30
001677 940c 0576 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
001679 93fa      	ST   -Y,R31
00167a 93ea      	ST   -Y,R30
00167b 940c 19a2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
00167d 93ea      	ST   -Y,R30
00167e 940e 0576 	CALL _SSD1963_WriteData_b8
001680 e0e0      	LDI  R30,LOW(0)
001681 93ea      	ST   -Y,R30
001682 940c 0576 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
001684 e0e1      	LDI  R30,LOW(1)
001685 93ea      	ST   -Y,R30
001686 940c 0576 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
001688 93ea      	ST   -Y,R30
001689 940e 0576 	CALL _SSD1963_WriteData_b8
00168b cff8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 50 TIMES, CODE SIZE REDUCTION:95 WORDS
                 SUBOPT_0xD:
00168c e0e0      	LDI  R30,LOW(0)
00168d e0f0      	LDI  R31,HIGH(0)
00168e 93fa      	ST   -Y,R31
00168f 93ea      	ST   -Y,R30
001690 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 29 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0xE:
001691 93fa      	ST   -Y,R31
001692 93ea      	ST   -Y,R30
001693 cff8      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xF:
001694 93fa      	ST   -Y,R31
001695 93ea      	ST   -Y,R30
001696 940e 0618 	CALL _SSD1963_SetArea
001698 e2ec      	LDI  R30,LOW(44)
001699 93ea      	ST   -Y,R30
00169a 940c 056a 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
00169c 93fa      	ST   -Y,R31
00169d 93ea      	ST   -Y,R30
00169e 940c 0583 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 29 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x11:
0016a0 85e8      	LDD  R30,Y+8
0016a1 85f9      	LDD  R31,Y+8+1
0016a2 93fa      	ST   -Y,R31
0016a3 93ea      	ST   -Y,R30
0016a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
0016a5 85ea      	LDD  R30,Y+10
0016a6 85fb      	LDD  R31,Y+10+1
0016a7 93fa      	ST   -Y,R31
0016a8 93ea      	ST   -Y,R30
0016a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0016aa 85e8      	LDD  R30,Y+8
0016ab e0f0      	LDI  R31,0
0016ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x14:
0016ad 81ef      	LDD  R30,Y+7
0016ae 85f8      	LDD  R31,Y+7+1
0016af 93fa      	ST   -Y,R31
0016b0 93ea      	ST   -Y,R30
0016b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
0016b2 940e 1ae4 	CALL __DIVW21U
0016b4 5de0      	SUBI R30,-LOW(48)
0016b5 93ea      	ST   -Y,R30
0016b6 cfe9      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
0016b7 940e 069d 	CALL _SSD1963_PutChar16
0016b9 85a9      	LDD  R26,Y+9
0016ba 85ba      	LDD  R27,Y+9+1
0016bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x17:
0016bc 940e 1b21 	CALL __MODW21U
0016be 87e9      	STD  Y+9,R30
0016bf 87fa      	STD  Y+9+1,R31
0016c0 81ef      	LDD  R30,Y+7
0016c1 85f8      	LDD  R31,Y+7+1
0016c2 9670      	ADIW R30,16
0016c3 83ef      	STD  Y+7,R30
0016c4 87f8      	STD  Y+7+1,R31
0016c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x18:
0016c6 9728      	SBIW R28,8
0016c7 931a      	ST   -Y,R17
0016c8 930a      	ST   -Y,R16
0016c9 89ea      	LDD  R30,Y+18
0016ca 89fb      	LDD  R31,Y+18+1
0016cb 93fa      	ST   -Y,R31
0016cc 93ea      	ST   -Y,R30
0016cd 89ea      	LDD  R30,Y+18
0016ce 89fb      	LDD  R31,Y+18+1
0016cf 93fa      	ST   -Y,R31
0016d0 93ea      	ST   -Y,R30
0016d1 89ea      	LDD  R30,Y+18
0016d2 89fb      	LDD  R31,Y+18+1
0016d3 93fa      	ST   -Y,R31
0016d4 93ea      	ST   -Y,R30
0016d5 89ea      	LDD  R30,Y+18
0016d6 89fb      	LDD  R31,Y+18+1
0016d7 cfbc      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
0016d8 89aa      	LDD  R26,Y+18
0016d9 89bb      	LDD  R27,Y+18+1
0016da 89e8      	LDD  R30,Y+16
0016db 89f9      	LDD  R31,Y+16+1
0016dc 1bea      	SUB  R30,R26
0016dd 0bfb      	SBC  R31,R27
0016de 9631      	ADIW R30,1
0016df 018f      	MOVW R16,R30
0016e0 2311      	TST  R17
0016e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0016e2 01f8      	MOVW R30,R16
0016e3 efaf      	LDI  R26,LOW(65535)
0016e4 efbf      	LDI  R27,HIGH(65535)
0016e5 940e 1ada 	CALL __MULW12
0016e7 018f      	MOVW R16,R30
0016e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1B:
0016e9 85ae      	LDD  R26,Y+14
0016ea 85bf      	LDD  R27,Y+14+1
0016eb 85ec      	LDD  R30,Y+12
0016ec 85fd      	LDD  R31,Y+12+1
0016ed 1bea      	SUB  R30,R26
0016ee 0bfb      	SBC  R31,R27
0016ef 9631      	ADIW R30,1
0016f0 2766      	CLR  R22
0016f1 2777      	CLR  R23
                +
0016f2 83ea     +STD Y + 2 , R30
0016f3 83fb     +STD Y + 2 + 1 , R31
0016f4 836c     +STD Y + 2 + 2 , R22
0016f5 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0016f6 81ad      	LDD  R26,Y+5
0016f7 23aa      	TST  R26
0016f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
                +
0016f9 81ea     +LDD R30 , Y + 2
0016fa 81fb     +LDD R31 , Y + 2 + 1
0016fb 816c     +LDD R22 , Y + 2 + 2
0016fc 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0016fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
                +
0016fe efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
0016ff efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
001700 ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
001701 ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
001702 940e 1adf 	CALL __MULD12
                +
001704 83ea     +STD Y + 2 , R30
001705 83fb     +STD Y + 2 + 1 , R31
001706 836c     +STD Y + 2 + 2 , R22
001707 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001708 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1E:
001709 01f8      	MOVW R30,R16
                +
00170a 81aa     +LDD R26 , Y + 2
00170b 81bb     +LDD R27 , Y + 2 + 1
00170c 818c     +LDD R24 , Y + 2 + 2
00170d 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00170e 940e 1aad 	CALL __CWD1
001710 940e 1adf 	CALL __MULD12
                +
001712 83ea     +STD Y + 2 , R30
001713 83fb     +STD Y + 2 + 1 , R31
001714 836c     +STD Y + 2 + 2 , R22
001715 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001716 e0e0      	LDI  R30,LOW(0)
                +
001717 83ee     +STD Y + 6 , R30
001718 83ef     +STD Y + 6 + 1 , R30
001719 87e8     +STD Y + 6 + 2 , R30
00171a 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
00171b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
00171c dfdc      	RCALL SUBOPT_0x1C
                +
00171d 81ae     +LDD R26 , Y + 6
00171e 81bf     +LDD R27 , Y + 6 + 1
00171f 8588     +LDD R24 , Y + 6 + 2
001720 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
001721 940e 1b80 	CALL __CPD21
001723 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
                +
001724 81ee     +LDD R30 , Y + 6
001725 81ff     +LDD R31 , Y + 6 + 1
001726 8568     +LDD R22 , Y + 6 + 2
001727 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
001728 5fef     +SUBI R30 , LOW ( - 1 )
001729 4fff     +SBCI R31 , HIGH ( - 1 )
00172a 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00172b 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
00172c 83ee     +STD Y + 6 , R30
00172d 83ff     +STD Y + 6 + 1 , R31
00172e 8768     +STD Y + 6 + 2 , R22
00172f 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
001730 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
001731 e0f0      	LDI  R31,0
001732 8dab      	LDD  R26,Y+27
001733 8dbc      	LDD  R27,Y+27+1
001734 0fea      	ADD  R30,R26
001735 1ffb      	ADC  R31,R27
001736 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
001737 85e8      	LDD  R30,Y+8
001738 85f9      	LDD  R31,Y+8+1
001739 1bea      	SUB  R30,R26
00173a 0bfb      	SBC  R31,R27
00173b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
00173c 85ac      	LDD  R26,Y+12
00173d 85bd      	LDD  R27,Y+12+1
00173e 0fea      	ADD  R30,R26
00173f 1ffb      	ADC  R31,R27
001740 93fa      	ST   -Y,R31
001741 93ea      	ST   -Y,R30
001742 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x24:
001743 93ea      	ST   -Y,R30
001744 940e 14c3 	CALL _spi
                +
001746 e980     +LDI R24 , LOW ( 400 )
001747 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
001748 9701     +SBIW R24 , 1
001749 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00174a e0e0      	LDI  R30,LOW(0)
00174b 93ea      	ST   -Y,R30
00174c 940e 14c3 	CALL _spi
00174e 2f0e      	MOV  R16,R30
00174f 2711      	CLR  R17
001750 2f10      	MOV  R17,R16
001751 2700      	CLR  R16
001752 e0e0      	LDI  R30,LOW(0)
001753 93ea      	ST   -Y,R30
001754 940e 14c3 	CALL _spi
001756 e0f0      	LDI  R31,0
                +
001757 0f0e     +ADD R16 , R30
001758 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
001759 9a1a      	SBI  0x3,2
00175a 01f8      	MOVW R30,R16
00175b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
00175c 01f8      	MOVW R30,R16
00175d 940e 1aad 	CALL __CWD1
00175f 940e 1a14 	CALL __CDF1
001761 01df      	MOVW R26,R30
001762 01cb      	MOVW R24,R22
001763 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
001764 940e 1a42 	CALL __DIVF21
001766 940e 19dd 	CALL __CFD1
001768 018f      	MOVW R16,R30
001769 01f8      	MOVW R30,R16
00176a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
00176b e0a0      	LDI  R26,0
00176c 990b      	SBIC 0x1,3
00176d e0a1      	LDI  R26,1
00176e 30a1      	CPI  R26,LOW(0x1)
00176f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x28:
001770 e0e0      	LDI  R30,LOW(0)
001771 93e0 05f9 	STS  _tempX,R30
001773 93e0 05fa 	STS  _tempX+1,R30
001775 93e0 05fb 	STS  _tempX+2,R30
001777 93e0 05fc 	STS  _tempX+3,R30
001779 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x29:
00177a e0e0      	LDI  R30,LOW(0)
00177b 93e0 05fd 	STS  _tempY,R30
00177d 93e0 05fe 	STS  _tempY+1,R30
00177f 93e0 05ff 	STS  _tempY+2,R30
001781 93e0 0600 	STS  _tempY+3,R30
001783 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2A:
001784 91a0 05f9 	LDS  R26,_tempX
001786 91b0 05fa 	LDS  R27,_tempX+1
001788 9180 05fb 	LDS  R24,_tempX+2
00178a 9190 05fc 	LDS  R25,_tempX+3
00178c 2766      	CLR  R22
00178d 2777      	CLR  R23
00178e 940e 1a8b 	CALL __ADDD12
001790 93e0 05f9 	STS  _tempX,R30
001792 93f0 05fa 	STS  _tempX+1,R31
001794 9360 05fb 	STS  _tempX+2,R22
001796 9370 05fc 	STS  _tempX+3,R23
001798 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2B:
001799 91a0 05fd 	LDS  R26,_tempY
00179b 91b0 05fe 	LDS  R27,_tempY+1
00179d 9180 05ff 	LDS  R24,_tempY+2
00179f 9190 0600 	LDS  R25,_tempY+3
0017a1 2766      	CLR  R22
0017a2 2777      	CLR  R23
0017a3 940e 1a8b 	CALL __ADDD12
0017a5 93e0 05fd 	STS  _tempY,R30
0017a7 93f0 05fe 	STS  _tempY+1,R31
0017a9 9360 05ff 	STS  _tempY+2,R22
0017ab 9370 0600 	STS  _tempY+3,R23
0017ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
                +
0017ae e1e0     +LDI R30 , LOW ( 0x10 )
0017af e0f0     +LDI R31 , HIGH ( 0x10 )
0017b0 e060     +LDI R22 , BYTE3 ( 0x10 )
0017b1 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0017b2 940e 1b1c 	CALL __DIVD21
0017b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
0017b5 50e1      	SUBI R30,LOW(1)
0017b6 e0f0      	LDI  R31,0
0017b7 5ee9      	SUBI R30,LOW(-_rx_buffer0)
0017b8 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0017b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
0017ba 93aa      	ST   -Y,R26
0017bb 93ea      	ST   -Y,R30
0017bc 93fa      	ST   -Y,R31
0017bd b7ef      	IN   R30,SREG
0017be 93ea      	ST   -Y,R30
0017bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
0017c0 50e1      	SUBI R30,LOW(1)
0017c1 e0f0      	LDI  R31,0
0017c2 5ee6      	SUBI R30,LOW(-_tx_buffer0)
0017c3 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0017c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
0017c5 93e0 0616 	STS  _uart_swap,R30
0017c7 81e8      	LD   R30,Y
0017c8 93ea      	ST   -Y,R30
0017c9 940c 0b52 	JMP  _putchar0_i
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
0017cb 50e1      	SUBI R30,LOW(1)
0017cc e0f0      	LDI  R31,0
0017cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
0017ce e0f0      	LDI  R31,0
0017cf 30e1      	CPI  R30,LOW(0x1)
0017d0 e0a0      	LDI  R26,HIGH(0x1)
0017d1 07fa      	CPC  R31,R26
0017d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x33:
0017d3 93fa      	ST   -Y,R31
0017d4 93ea      	ST   -Y,R30
0017d5 efe7      	LDI  R30,LOW(247)
0017d6 e0f0      	LDI  R31,HIGH(247)
0017d7 93fa      	ST   -Y,R31
0017d8 93ea      	ST   -Y,R30
0017d9 cec6      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x34:
0017da 940e 0841 	CALL _SSD1963_PutString16
0017dc 81ed      	LDD  R30,Y+5
0017dd 81fe      	LDD  R31,Y+5+1
0017de 93fa      	ST   -Y,R31
0017df 93ea      	ST   -Y,R30
0017e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x35:
0017e1 93fa      	ST   -Y,R31
0017e2 93ea      	ST   -Y,R30
0017e3 efe0      	LDI  R30,LOW(240)
0017e4 e0f0      	LDI  R31,HIGH(240)
0017e5 93fa      	ST   -Y,R31
0017e6 93ea      	ST   -Y,R30
0017e7 e0ee      	LDI  R30,LOW(270)
0017e8 e0f1      	LDI  R31,HIGH(270)
0017e9 93fa      	ST   -Y,R31
0017ea 93ea      	ST   -Y,R30
0017eb efef      	LDI  R30,LOW(65535)
0017ec efff      	LDI  R31,HIGH(65535)
0017ed 93fa      	ST   -Y,R31
0017ee 93ea      	ST   -Y,R30
0017ef 940c 09d1 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x36:
0017f1 93fa      	ST   -Y,R31
0017f2 93ea      	ST   -Y,R30
0017f3 efe1      	LDI  R30,LOW(241)
0017f4 e0f0      	LDI  R31,HIGH(241)
0017f5 93fa      	ST   -Y,R31
0017f6 93ea      	ST   -Y,R30
0017f7 e0ed      	LDI  R30,LOW(269)
0017f8 e0f1      	LDI  R31,HIGH(269)
0017f9 93fa      	ST   -Y,R31
0017fa 93ea      	ST   -Y,R30
0017fb e0e1      	LDI  R30,LOW(1)
0017fc e0f0      	LDI  R31,HIGH(1)
0017fd ce93      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x37:
0017fe efef      	LDI  R30,LOW(65535)
0017ff efff      	LDI  R31,HIGH(65535)
001800 93fa      	ST   -Y,R31
001801 93ea      	ST   -Y,R30
001802 940c 0bf7 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
001804 93fa      	ST   -Y,R31
001805 93ea      	ST   -Y,R30
001806 e0e2      	LDI  R30,LOW(2)
001807 93ea      	ST   -Y,R30
001808 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x39:
001809 93fa      	ST   -Y,R31
00180a 93ea      	ST   -Y,R30
00180b e0e4      	LDI  R30,LOW(4)
00180c 93ea      	ST   -Y,R30
00180d ce7e      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3A:
00180e 91a0 0790 	LDS  R26,_Touch_mSec
001810 91b0 0791 	LDS  R27,_Touch_mSec+1
001812 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3B:
001813 91ed      	LD   R30,X+
001814 91fd      	LD   R31,X+
001815 9631      	ADIW R30,1
001816 93fe      	ST   -X,R31
001817 93ee      	ST   -X,R30
001818 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
001819 efe0      	LDI  R30,LOW(240)
00181a e0f0      	LDI  R31,HIGH(240)
00181b 15e6      	CP   R30,R6
00181c 05f7      	CPC  R31,R7
00181d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
00181e e0ee      	LDI  R30,LOW(270)
00181f e0f1      	LDI  R31,HIGH(270)
001820 166e      	CP   R6,R30
001821 067f      	CPC  R7,R31
001822 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 46 TIMES, CODE SIZE REDUCTION:87 WORDS
                 SUBOPT_0x3E:
001823 93fa      	ST   -Y,R31
001824 93ea      	ST   -Y,R30
001825 931a      	ST   -Y,R17
001826 930a      	ST   -Y,R16
001827 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x3F:
001828 933a      	ST   -Y,R19
001829 932a      	ST   -Y,R18
00182a 85ea      	LDD  R30,Y+10
00182b 85fb      	LDD  R31,Y+10+1
00182c ce64      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x40:
00182d 01f9      	MOVW R30,R18
00182e 9670      	ADIW R30,16
00182f 93fa      	ST   -Y,R31
001830 93ea      	ST   -Y,R30
001831 85ea      	LDD  R30,Y+10
001832 85fb      	LDD  R31,Y+10+1
001833 ce5d      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x41:
001834 e0f0      	LDI  R31,0
001835 9730      	SBIW R30,0
001836 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x42:
001837 e0f0      	LDI  R31,0
001838 cfea      	RJMP SUBOPT_0x3E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
001839 933a      	ST   -Y,R19
00183a 932a      	ST   -Y,R18
00183b e0e1      	LDI  R30,LOW(1)
00183c 93ea      	ST   -Y,R30
00183d 85eb      	LDD  R30,Y+11
00183e 85fc      	LDD  R31,Y+11+1
00183f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x44:
001840 940e 085b 	CALL _SSD1963_PutValue16
                +
001842 e500     +LDI R16 , LOW ( 80 )
001843 e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                +
001844 e126     +LDI R18 , LOW ( 22 )
001845 e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
001846 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0x45:
001847 933a      	ST   -Y,R19
001848 932a      	ST   -Y,R18
001849 e0e3      	LDI  R30,LOW(3)
00184a 93ea      	ST   -Y,R30
00184b 85eb      	LDD  R30,Y+11
00184c 85fc      	LDD  R31,Y+11+1
00184d 93fa      	ST   -Y,R31
00184e 93ea      	ST   -Y,R30
00184f 85af      	LDD  R26,Y+15
001850 e0b0      	LDI  R27,0
001851 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x46:
001852 93fa      	ST   -Y,R31
001853 93ea      	ST   -Y,R30
001854 940e 085b 	CALL _SSD1963_PutValue16
                +
001856 5c00     +SUBI R16 , LOW ( - 64 )
001857 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
001858 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
001859 933a      	ST   -Y,R19
00185a 932a      	ST   -Y,R18
00185b 935a      	ST   -Y,R21
00185c 934a      	ST   -Y,R20
00185d ce2e      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x48:
00185e 935a      	ST   -Y,R21
00185f 934a      	ST   -Y,R20
001860 ce2b      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x49:
001861 933a      	ST   -Y,R19
001862 932a      	ST   -Y,R18
001863 e0e3      	LDI  R30,LOW(3)
001864 93ea      	ST   -Y,R30
001865 cff8      	RJMP SUBOPT_0x48
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4A:
001866 940e 085b 	CALL _SSD1963_PutValue16
                +
001868 5c00     +SUBI R16 , LOW ( - 64 )
001869 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
00186a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
00186b 93e0 0798 	STS  _Graph_X,R30
00186d 93f0 0799 	STS  _Graph_X+1,R31
00186f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4C:
001870 91e0 0798 	LDS  R30,_Graph_X
001872 91f0 0799 	LDS  R31,_Graph_X+1
001874 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4D:
001875 91a0 0798 	LDS  R26,_Graph_X
001877 91b0 0799 	LDS  R27,_Graph_X+1
001879 3daf      	CPI  R26,LOW(0x1DF)
00187a e0e1      	LDI  R30,HIGH(0x1DF)
00187b 07be      	CPC  R27,R30
00187c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
00187d 91e0 0794 	LDS  R30,_GraphUpd_mSec
00187f 91f0 0795 	LDS  R31,_GraphUpd_mSec+1
001881 93e0 0796 	STS  _GraphUpdTime,R30
001883 93f0 0797 	STS  _GraphUpdTime+1,R31
001885 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4F:
001886 dfe9      	RCALL SUBOPT_0x4C
001887 cf9b      	RJMP SUBOPT_0x3E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x50:
001888 e0e8      	LDI  R30,LOW(8456)
001889 e2f1      	LDI  R31,HIGH(8456)
00188a 93fa      	ST   -Y,R31
00188b 93ea      	ST   -Y,R30
00188c 940e 08cb 	CALL _SSD1963_DrawFastLine
00188e cff7      	RJMP SUBOPT_0x4F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x51:
00188f 93fa      	ST   -Y,R31
001890 93ea      	ST   -Y,R30
001891 cff6      	RJMP SUBOPT_0x50
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x52:
001892 dfdd      	RCALL SUBOPT_0x4C
001893 9636      	ADIW R30,6
001894 018f      	MOVW R16,R30
                +
001895 3d0f     +CPI R16 , LOW ( 479 )
001896 e0e1     +LDI R30 , HIGH ( 479 )
001897 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
001898 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x53:
001899 940e 0b0c 	CALL _getchar0
00189b e0f0      	LDI  R31,0
00189c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:135 WORDS
                 SUBOPT_0x54:
00189d 2fe5      	MOV  R30,R21
00189e e0f0      	LDI  R31,0
00189f 01de      	MOVW R26,R28
0018a0 961c      	ADIW R26,12
0018a1 0fee      	LSL  R30
0018a2 1fff      	ROL  R31
0018a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x55:
0018a4 0fae      	ADD  R26,R30
0018a5 1fbf      	ADC  R27,R31
0018a6 940e 1b45 	CALL __GETW1P
0018a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x56:
0018a9 e8a0      	LDI  R26,LOW(128)
0018aa e0b0      	LDI  R27,HIGH(128)
0018ab 940e 1b50 	CALL __SWAPW12
0018ad 1bea      	SUB  R30,R26
0018ae 0bfb      	SBC  R31,R27
0018af 01db      	MOVW R26,R22
0018b0 93ed      	ST   X+,R30
0018b1 93fc      	ST   X,R31
0018b2 cfea      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x57:
0018b3 0fea      	ADD  R30,R26
0018b4 1ffb      	ADC  R31,R27
0018b5 01bf      	MOVW R22,R30
0018b6 8000      	LD   R0,Z
0018b7 8011      	LDD  R1,Z+1
0018b8 91e0 078c 	LDS  R30,_ParameterState
0018ba eaa0      	LDI  R26,LOW(_ConfigValue)
0018bb e0b7      	LDI  R27,HIGH(_ConfigValue)
0018bc e0f0      	LDI  R31,0
0018bd 0fee      	LSL  R30
0018be 1fff      	ROL  R31
0018bf cfe4      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x58:
0018c0 01d0      	MOVW R26,R0
0018c1 940e 1ab2 	CALL __MULW12U
0018c3 01db      	MOVW R26,R22
0018c4 93ed      	ST   X+,R30
0018c5 93fc      	ST   X,R31
0018c6 cfd6      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x59:
0018c7 0fae      	ADD  R26,R30
0018c8 1fbf      	ADC  R27,R31
0018c9 91ed      	LD   R30,X+
0018ca 91fd      	LD   R31,X+
0018cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5A:
0018cc 940e 1aa6 	CALL __ASRW3
0018ce 940e 1aa4 	CALL __ASRW4
0018d0 93fe      	ST   -X,R31
0018d1 93ee      	ST   -X,R30
0018d2 cfca      	RJMP SUBOPT_0x54
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5B:
0018d3 0fae      	ADD  R26,R30
0018d4 1fbf      	ADC  R27,R31
0018d5 eee8      	LDI  R30,LOW(232)
0018d6 e0f0      	LDI  R31,HIGH(232)
0018d7 93ed      	ST   X+,R30
0018d8 93fc      	ST   X,R31
0018d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5C:
0018da 0fae      	ADD  R26,R30
0018db 1fbf      	ADC  R27,R31
0018dc e2ea      	LDI  R30,LOW(42)
0018dd e0f0      	LDI  R31,HIGH(42)
0018de 93ed      	ST   X+,R30
0018df 93fc      	ST   X,R31
0018e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5D:
0018e1 2fe5      	MOV  R30,R21
0018e2 e9aa      	LDI  R26,LOW(_ValueLast)
0018e3 e0b7      	LDI  R27,HIGH(_ValueLast)
0018e4 e0f0      	LDI  R31,0
0018e5 0fee      	LSL  R30
0018e6 1fff      	ROL  R31
0018e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5E:
0018e8 93fa      	ST   -Y,R31
0018e9 93ea      	ST   -Y,R30
0018ea 2fe5      	MOV  R30,R21
0018eb e0f0      	LDI  R31,0
0018ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5F:
0018ed 01de      	MOVW R26,R28
0018ee 9652      	ADIW R26,18
0018ef 0fee      	LSL  R30
0018f0 1fff      	ROL  R31
0018f1 cfb2      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x60:
0018f2 01de      	MOVW R26,R28
0018f3 961e      	ADIW R26,14
0018f4 0fee      	LSL  R30
0018f5 1fff      	ROL  R31
0018f6 cfad      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x61:
0018f7 93fa      	ST   -Y,R31
0018f8 93ea      	ST   -Y,R30
0018f9 e080      	LDI  R24,0
0018fa 940e 1609 	CALL _printf
0018fc 9622      	ADIW R28,2
0018fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x62:
0018fe 93ea      	ST   -Y,R30
0018ff 940e 0b52 	CALL _putchar0_i
001901 81e8      	LD   R30,Y
001902 eaa0      	LDI  R26,LOW(_ConfigValue)
001903 e0b7      	LDI  R27,HIGH(_ConfigValue)
001904 e0f0      	LDI  R31,0
001905 0fee      	LSL  R30
001906 1fff      	ROL  R31
001907 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x63:
001908 e0a0      	LDI  R26,LOW(_ConfigValue_mem)
001909 e0b0      	LDI  R27,HIGH(_ConfigValue_mem)
00190a e0f0      	LDI  R31,0
00190b 0fee      	LSL  R30
00190c 1fff      	ROL  R31
00190d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:77 WORDS
                 SUBOPT_0x64:
00190e eaa0      	LDI  R26,LOW(_ConfigValue)
00190f e0b7      	LDI  R27,HIGH(_ConfigValue)
001910 e0f0      	LDI  R31,0
001911 0fee      	LSL  R30
001912 1fff      	ROL  R31
001913 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x65:
001914 940e 0b21 	CALL _getchar2
001916 2f0e      	MOV  R16,R30
001917 940e 0b21 	CALL _getchar2
001919 2f3e      	MOV  R19,R30
00191a 940e 0b21 	CALL _getchar2
00191c 2f2e      	MOV  R18,R30
00191d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x66:
00191e 91e0 078c 	LDS  R30,_ParameterState
001920 e0f0      	LDI  R31,0
001921 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x67:
001922 91e0 078c 	LDS  R30,_ParameterState
001924 93ea      	ST   -Y,R30
001925 efe8      	LDI  R30,LOW(248)
001926 e0f0      	LDI  R31,HIGH(248)
001927 93fa      	ST   -Y,R31
001928 93ea      	ST   -Y,R30
001929 940c 0d40 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x68:
00192b 91e0 078c 	LDS  R30,_ParameterState
00192d cfe0      	RJMP SUBOPT_0x64
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x69:
00192e 0fae      	ADD  R26,R30
00192f 1fbf      	ADC  R27,R31
001930 916d      	LD   R22,X+
001931 917c      	LD   R23,X
001932 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x6A:
001933 0fee      	LSL  R30
001934 1fff      	ROL  R31
001935 0fea      	ADD  R30,R26
001936 1ffb      	ADC  R31,R27
001937 940e 1b49 	CALL __GETW1PF
001939 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6B:
00193a 8160      	LD   R22,Z
00193b 8171      	LDD  R23,Z+1
00193c 91e0 078c 	LDS  R30,_ParameterState
00193e ecac      	LDI  R26,LOW(_ConfigParam*2)
00193f e0b7      	LDI  R27,HIGH(_ConfigParam*2)
001940 e0f0      	LDI  R31,0
001941 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6C:
001942 0fee      	LSL  R30
001943 1fff      	ROL  R31
001944 0fea      	ADD  R30,R26
001945 1ffb      	ADC  R31,R27
001946 940e 1b4d 	CALL __GETW2PF
001948 01fb      	MOVW R30,R22
001949 1bea      	SUB  R30,R26
00194a 0bfb      	SBC  R31,R27
00194b 01d0      	MOVW R26,R0
00194c 93ed      	ST   X+,R30
00194d 93fc      	ST   X,R31
00194e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x6D:
00194f 91e0 078b 	LDS  R30,_State
001951 91a0 078f 	LDS  R26,_ConfigState
001953 0fea      	ADD  R30,R26
001954 93ea      	ST   -Y,R30
001955 e0ef      	LDI  R30,LOW(30735)
001956 e7f8      	LDI  R31,HIGH(30735)
001957 93fa      	ST   -Y,R31
001958 93ea      	ST   -Y,R30
001959 940c 0d40 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6E:
00195b 91e0 078f 	LDS  R30,_ConfigState
00195d cfb0      	RJMP SUBOPT_0x64
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6F:
00195e 01df      	MOVW R26,R30
00195f 91e0 078f 	LDS  R30,_ConfigState
001961 e0f0      	LDI  R31,0
001962 cfd0      	RJMP SUBOPT_0x6A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x70:
001963 8160      	LD   R22,Z
001964 8171      	LDD  R23,Z+1
001965 91e0 078f 	LDS  R30,_ConfigState
001967 ecac      	LDI  R26,LOW(_ConfigParam*2)
001968 e0b7      	LDI  R27,HIGH(_ConfigParam*2)
001969 e0f0      	LDI  R31,0
00196a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x71:
00196b 01df      	MOVW R26,R30
00196c 2fe1      	MOV  R30,R17
00196d e0f0      	LDI  R31,0
00196e cfc4      	RJMP SUBOPT_0x6A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x72:
00196f 93fa      	ST   -Y,R31
001970 93ea      	ST   -Y,R30
001971 ece0      	LDI  R30,LOW(192)
001972 e0f0      	LDI  R31,HIGH(192)
001973 93fa      	ST   -Y,R31
001974 93ea      	ST   -Y,R30
001975 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x73:
001976 940e 0841 	CALL _SSD1963_PutString16
001978 ccdf      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x74:
001979 932a      	ST   -Y,R18
00197a 85ed      	LDD  R30,Y+13
00197b 85fe      	LDD  R31,Y+13+1
00197c 93fa      	ST   -Y,R31
00197d 93ea      	ST   -Y,R30
00197e 89e9      	LDD  R30,Y+17
00197f 89fa      	LDD  R31,Y+17+1
001980 9509      	ICALL
001981 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x75:
001982 89e8      	LDD  R30,Y+16
001983 89f9      	LDD  R31,Y+16+1
001984 9734      	SBIW R30,4
001985 8be8      	STD  Y+16,R30
001986 8bf9      	STD  Y+16+1,R31
001987 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x76:
001988 85ed      	LDD  R30,Y+13
001989 85fe      	LDD  R31,Y+13+1
00198a 93fa      	ST   -Y,R31
00198b 93ea      	ST   -Y,R30
00198c 89e9      	LDD  R30,Y+17
00198d 89fa      	LDD  R31,Y+17+1
00198e 9509      	ICALL
00198f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x77:
001990 89a8      	LDD  R26,Y+16
001991 89b9      	LDD  R27,Y+16+1
001992 9614      	ADIW R26,4
001993 940e 1b45 	CALL __GETW1P
001995 83ee      	STD  Y+6,R30
001996 83ff      	STD  Y+6+1,R31
001997 93fa      	ST   -Y,R31
001998 93ea      	ST   -Y,R30
001999 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x78:
00199a 89a8      	LDD  R26,Y+16
00199b 89b9      	LDD  R27,Y+16+1
00199c 9614      	ADIW R26,4
00199d 940e 1b45 	CALL __GETW1P
00199f 87ea      	STD  Y+10,R30
0019a0 87fb      	STD  Y+10+1,R31
0019a1 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0019a2 91e9      	ld   r30,y+
0019a3 91f9      	ld   r31,y+
0019a4 9630      	adiw r30,0
0019a5 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0019a6 ea80     +LDI R24 , LOW ( 0xFA0 )
0019a7 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0019a8 9701     +SBIW R24 , 1
0019a9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0019aa 95a8      	wdr
0019ab 9731      	sbiw r30,1
0019ac f7c9      	brne __delay_ms0
                 __delay_ms1:
0019ad 9508      	ret
                 
                 __ROUND_REPACK:
0019ae 2355      	TST  R21
0019af f442      	BRPL __REPACK
0019b0 3850      	CPI  R21,0x80
0019b1 f411      	BRNE __ROUND_REPACK0
0019b2 ffe0      	SBRS R30,0
0019b3 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0019b4 9631      	ADIW R30,1
0019b5 1f69      	ADC  R22,R25
0019b6 1f79      	ADC  R23,R25
0019b7 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0019b8 e850      	LDI  R21,0x80
0019b9 2757      	EOR  R21,R23
0019ba f411      	BRNE __REPACK0
0019bb 935f      	PUSH R21
0019bc c073      	RJMP __ZERORES
                 __REPACK0:
0019bd 3f5f      	CPI  R21,0xFF
0019be f031      	BREQ __REPACK1
0019bf 0f66      	LSL  R22
0019c0 0c00      	LSL  R0
0019c1 9557      	ROR  R21
0019c2 9567      	ROR  R22
0019c3 2f75      	MOV  R23,R21
0019c4 9508      	RET
                 __REPACK1:
0019c5 935f      	PUSH R21
0019c6 2000      	TST  R0
0019c7 f00a      	BRMI __REPACK2
0019c8 c073      	RJMP __MAXRES
                 __REPACK2:
0019c9 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0019ca e850      	LDI  R21,0x80
0019cb 2e19      	MOV  R1,R25
0019cc 2215      	AND  R1,R21
0019cd 0f88      	LSL  R24
0019ce 1f99      	ROL  R25
0019cf 2795      	EOR  R25,R21
0019d0 0f55      	LSL  R21
0019d1 9587      	ROR  R24
                 
                 __UNPACK1:
0019d2 e850      	LDI  R21,0x80
0019d3 2e07      	MOV  R0,R23
0019d4 2205      	AND  R0,R21
0019d5 0f66      	LSL  R22
0019d6 1f77      	ROL  R23
0019d7 2775      	EOR  R23,R21
0019d8 0f55      	LSL  R21
0019d9 9567      	ROR  R22
0019da 9508      	RET
                 
                 __CFD1U:
0019db 9468      	SET
0019dc c001      	RJMP __CFD1U0
                 __CFD1:
0019dd 94e8      	CLT
                 __CFD1U0:
0019de 935f      	PUSH R21
0019df dff2      	RCALL __UNPACK1
0019e0 3870      	CPI  R23,0x80
0019e1 f018      	BRLO __CFD10
0019e2 3f7f      	CPI  R23,0xFF
0019e3 f408      	BRCC __CFD10
0019e4 c04b      	RJMP __ZERORES
                 __CFD10:
0019e5 e156      	LDI  R21,22
0019e6 1b57      	SUB  R21,R23
0019e7 f4aa      	BRPL __CFD11
0019e8 9551      	NEG  R21
0019e9 3058      	CPI  R21,8
0019ea f40e      	BRTC __CFD19
0019eb 3059      	CPI  R21,9
                 __CFD19:
0019ec f030      	BRLO __CFD17
0019ed efef      	SER  R30
0019ee efff      	SER  R31
0019ef ef6f      	SER  R22
0019f0 e77f      	LDI  R23,0x7F
0019f1 f977      	BLD  R23,7
0019f2 c01a      	RJMP __CFD15
                 __CFD17:
0019f3 2777      	CLR  R23
0019f4 2355      	TST  R21
0019f5 f0b9      	BREQ __CFD15
                 __CFD18:
0019f6 0fee      	LSL  R30
0019f7 1fff      	ROL  R31
0019f8 1f66      	ROL  R22
0019f9 1f77      	ROL  R23
0019fa 955a      	DEC  R21
0019fb f7d1      	BRNE __CFD18
0019fc c010      	RJMP __CFD15
                 __CFD11:
0019fd 2777      	CLR  R23
                 __CFD12:
0019fe 3058      	CPI  R21,8
0019ff f028      	BRLO __CFD13
001a00 2fef      	MOV  R30,R31
001a01 2ff6      	MOV  R31,R22
001a02 2f67      	MOV  R22,R23
001a03 5058      	SUBI R21,8
001a04 cff9      	RJMP __CFD12
                 __CFD13:
001a05 2355      	TST  R21
001a06 f031      	BREQ __CFD15
                 __CFD14:
001a07 9576      	LSR  R23
001a08 9567      	ROR  R22
001a09 95f7      	ROR  R31
001a0a 95e7      	ROR  R30
001a0b 955a      	DEC  R21
001a0c f7d1      	BRNE __CFD14
                 __CFD15:
001a0d 2000      	TST  R0
001a0e f40a      	BRPL __CFD16
001a0f d084      	RCALL __ANEGD1
                 __CFD16:
001a10 915f      	POP  R21
001a11 9508      	RET
                 
                 __CDF1U:
001a12 9468      	SET
001a13 c001      	RJMP __CDF1U0
                 __CDF1:
001a14 94e8      	CLT
                 __CDF1U0:
001a15 9730      	SBIW R30,0
001a16 4060      	SBCI R22,0
001a17 4070      	SBCI R23,0
001a18 f0b1      	BREQ __CDF10
001a19 2400      	CLR  R0
001a1a f026      	BRTS __CDF11
001a1b 2377      	TST  R23
001a1c f412      	BRPL __CDF11
001a1d 9400      	COM  R0
001a1e d075      	RCALL __ANEGD1
                 __CDF11:
001a1f 2e17      	MOV  R1,R23
001a20 e17e      	LDI  R23,30
001a21 2011      	TST  R1
                 __CDF12:
001a22 f032      	BRMI __CDF13
001a23 957a      	DEC  R23
001a24 0fee      	LSL  R30
001a25 1fff      	ROL  R31
001a26 1f66      	ROL  R22
001a27 1c11      	ROL  R1
001a28 cff9      	RJMP __CDF12
                 __CDF13:
001a29 2fef      	MOV  R30,R31
001a2a 2ff6      	MOV  R31,R22
001a2b 2d61      	MOV  R22,R1
001a2c 935f      	PUSH R21
001a2d df8a      	RCALL __REPACK
001a2e 915f      	POP  R21
                 __CDF10:
001a2f 9508      	RET
                 
                 __ZERORES:
001a30 27ee      	CLR  R30
001a31 27ff      	CLR  R31
001a32 2766      	CLR  R22
001a33 2777      	CLR  R23
001a34 915f      	POP  R21
001a35 9508      	RET
                 
                 __MINRES:
001a36 efef      	SER  R30
001a37 efff      	SER  R31
001a38 e76f      	LDI  R22,0x7F
001a39 ef7f      	SER  R23
001a3a 915f      	POP  R21
001a3b 9508      	RET
                 
                 __MAXRES:
001a3c efef      	SER  R30
001a3d efff      	SER  R31
001a3e e76f      	LDI  R22,0x7F
001a3f e77f      	LDI  R23,0x7F
001a40 915f      	POP  R21
001a41 9508      	RET
                 
                 __DIVF21:
001a42 935f      	PUSH R21
001a43 df86      	RCALL __UNPACK
001a44 3870      	CPI  R23,0x80
001a45 f421      	BRNE __DIVF210
001a46 2011      	TST  R1
                 __DIVF211:
001a47 f40a      	BRPL __DIVF219
001a48 cfed      	RJMP __MINRES
                 __DIVF219:
001a49 cff2      	RJMP __MAXRES
                 __DIVF210:
001a4a 3890      	CPI  R25,0x80
001a4b f409      	BRNE __DIVF218
                 __DIVF217:
001a4c cfe3      	RJMP __ZERORES
                 __DIVF218:
001a4d 2401      	EOR  R0,R1
001a4e 9408      	SEC
001a4f 0b97      	SBC  R25,R23
001a50 f41b      	BRVC __DIVF216
001a51 f3d4      	BRLT __DIVF217
001a52 2000      	TST  R0
001a53 cff3      	RJMP __DIVF211
                 __DIVF216:
001a54 2f79      	MOV  R23,R25
001a55 931f      	PUSH R17
001a56 932f      	PUSH R18
001a57 933f      	PUSH R19
001a58 934f      	PUSH R20
001a59 2411      	CLR  R1
001a5a 2711      	CLR  R17
001a5b 2722      	CLR  R18
001a5c 2733      	CLR  R19
001a5d 2744      	CLR  R20
001a5e 2755      	CLR  R21
001a5f e290      	LDI  R25,32
                 __DIVF212:
001a60 17ae      	CP   R26,R30
001a61 07bf      	CPC  R27,R31
001a62 0786      	CPC  R24,R22
001a63 0741      	CPC  R20,R17
001a64 f030      	BRLO __DIVF213
001a65 1bae      	SUB  R26,R30
001a66 0bbf      	SBC  R27,R31
001a67 0b86      	SBC  R24,R22
001a68 0b41      	SBC  R20,R17
001a69 9408      	SEC
001a6a c001      	RJMP __DIVF214
                 __DIVF213:
001a6b 9488      	CLC
                 __DIVF214:
001a6c 1f55      	ROL  R21
001a6d 1f22      	ROL  R18
001a6e 1f33      	ROL  R19
001a6f 1c11      	ROL  R1
001a70 1faa      	ROL  R26
001a71 1fbb      	ROL  R27
001a72 1f88      	ROL  R24
001a73 1f44      	ROL  R20
001a74 959a      	DEC  R25
001a75 f751      	BRNE __DIVF212
001a76 01f9      	MOVW R30,R18
001a77 2d61      	MOV  R22,R1
001a78 914f      	POP  R20
001a79 913f      	POP  R19
001a7a 912f      	POP  R18
001a7b 911f      	POP  R17
001a7c 2366      	TST  R22
001a7d f032      	BRMI __DIVF215
001a7e 0f55      	LSL  R21
001a7f 1fee      	ROL  R30
001a80 1fff      	ROL  R31
001a81 1f66      	ROL  R22
001a82 957a      	DEC  R23
001a83 f243      	BRVS __DIVF217
                 __DIVF215:
001a84 df29      	RCALL __ROUND_REPACK
001a85 915f      	POP  R21
001a86 9508      	RET
                 
                 __ADDW2R15:
001a87 2400      	CLR  R0
001a88 0daf      	ADD  R26,R15
001a89 1db0      	ADC  R27,R0
001a8a 9508      	RET
                 
                 __ADDD12:
001a8b 0fea      	ADD  R30,R26
001a8c 1ffb      	ADC  R31,R27
001a8d 1f68      	ADC  R22,R24
001a8e 1f79      	ADC  R23,R25
001a8f 9508      	RET
                 
                 __ANEGW1:
001a90 95f1      	NEG  R31
001a91 95e1      	NEG  R30
001a92 40f0      	SBCI R31,0
001a93 9508      	RET
                 
                 __ANEGD1:
001a94 95f0      	COM  R31
001a95 9560      	COM  R22
001a96 9570      	COM  R23
001a97 95e1      	NEG  R30
001a98 4fff      	SBCI R31,-1
001a99 4f6f      	SBCI R22,-1
001a9a 4f7f      	SBCI R23,-1
001a9b 9508      	RET
                 
                 __LSRB12:
001a9c 23ee      	TST  R30
001a9d 2e0e      	MOV  R0,R30
001a9e 2fea      	MOV  R30,R26
001a9f f019      	BREQ __LSRB12R
                 __LSRB12L:
001aa0 95e6      	LSR  R30
001aa1 940a      	DEC  R0
001aa2 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
001aa3 9508      	RET
                 
                 __ASRW4:
001aa4 95f5      	ASR  R31
001aa5 95e7      	ROR  R30
                 __ASRW3:
001aa6 95f5      	ASR  R31
001aa7 95e7      	ROR  R30
                 __ASRW2:
001aa8 95f5      	ASR  R31
001aa9 95e7      	ROR  R30
001aaa 95f5      	ASR  R31
001aab 95e7      	ROR  R30
001aac 9508      	RET
                 
                 __CWD1:
001aad 2f6f      	MOV  R22,R31
001aae 0f66      	ADD  R22,R22
001aaf 0b66      	SBC  R22,R22
001ab0 2f76      	MOV  R23,R22
001ab1 9508      	RET
                 
                 __MULW12U:
001ab2 9ffa      	MUL  R31,R26
001ab3 2df0      	MOV  R31,R0
001ab4 9feb      	MUL  R30,R27
001ab5 0df0      	ADD  R31,R0
001ab6 9fea      	MUL  R30,R26
001ab7 2de0      	MOV  R30,R0
001ab8 0df1      	ADD  R31,R1
001ab9 9508      	RET
                 
                 __MULD12U:
001aba 9f7a      	MUL  R23,R26
001abb 2d70      	MOV  R23,R0
001abc 9f6b      	MUL  R22,R27
001abd 0d70      	ADD  R23,R0
001abe 9ff8      	MUL  R31,R24
001abf 0d70      	ADD  R23,R0
001ac0 9fe9      	MUL  R30,R25
001ac1 0d70      	ADD  R23,R0
001ac2 9f6a      	MUL  R22,R26
001ac3 2d60      	MOV  R22,R0
001ac4 0d71      	ADD  R23,R1
001ac5 9ffb      	MUL  R31,R27
001ac6 0d60      	ADD  R22,R0
001ac7 1d71      	ADC  R23,R1
001ac8 9fe8      	MUL  R30,R24
001ac9 0d60      	ADD  R22,R0
001aca 1d71      	ADC  R23,R1
001acb 2788      	CLR  R24
001acc 9ffa      	MUL  R31,R26
001acd 2df0      	MOV  R31,R0
001ace 0d61      	ADD  R22,R1
001acf 1f78      	ADC  R23,R24
001ad0 9feb      	MUL  R30,R27
001ad1 0df0      	ADD  R31,R0
001ad2 1d61      	ADC  R22,R1
001ad3 1f78      	ADC  R23,R24
001ad4 9fea      	MUL  R30,R26
001ad5 2de0      	MOV  R30,R0
001ad6 0df1      	ADD  R31,R1
001ad7 1f68      	ADC  R22,R24
001ad8 1f78      	ADC  R23,R24
001ad9 9508      	RET
                 
                 __MULW12:
001ada d049      	RCALL __CHKSIGNW
001adb dfd6      	RCALL __MULW12U
001adc f40e      	BRTC __MULW121
001add dfb2      	RCALL __ANEGW1
                 __MULW121:
001ade 9508      	RET
                 
                 __MULD12:
001adf d052      	RCALL __CHKSIGND
001ae0 dfd9      	RCALL __MULD12U
001ae1 f40e      	BRTC __MULD121
001ae2 dfb1      	RCALL __ANEGD1
                 __MULD121:
001ae3 9508      	RET
                 
                 __DIVW21U:
001ae4 2400      	CLR  R0
001ae5 2411      	CLR  R1
001ae6 e190      	LDI  R25,16
                 __DIVW21U1:
001ae7 0faa      	LSL  R26
001ae8 1fbb      	ROL  R27
001ae9 1c00      	ROL  R0
001aea 1c11      	ROL  R1
001aeb 1a0e      	SUB  R0,R30
001aec 0a1f      	SBC  R1,R31
001aed f418      	BRCC __DIVW21U2
001aee 0e0e      	ADD  R0,R30
001aef 1e1f      	ADC  R1,R31
001af0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001af1 60a1      	SBR  R26,1
                 __DIVW21U3:
001af2 959a      	DEC  R25
001af3 f799      	BRNE __DIVW21U1
001af4 01fd      	MOVW R30,R26
001af5 01d0      	MOVW R26,R0
001af6 9508      	RET
                 
                 __DIVD21U:
001af7 933f      	PUSH R19
001af8 934f      	PUSH R20
001af9 935f      	PUSH R21
001afa 2400      	CLR  R0
001afb 2411      	CLR  R1
001afc 2744      	CLR  R20
001afd 2755      	CLR  R21
001afe e230      	LDI  R19,32
                 __DIVD21U1:
001aff 0faa      	LSL  R26
001b00 1fbb      	ROL  R27
001b01 1f88      	ROL  R24
001b02 1f99      	ROL  R25
001b03 1c00      	ROL  R0
001b04 1c11      	ROL  R1
001b05 1f44      	ROL  R20
001b06 1f55      	ROL  R21
001b07 1a0e      	SUB  R0,R30
001b08 0a1f      	SBC  R1,R31
001b09 0b46      	SBC  R20,R22
001b0a 0b57      	SBC  R21,R23
001b0b f428      	BRCC __DIVD21U2
001b0c 0e0e      	ADD  R0,R30
001b0d 1e1f      	ADC  R1,R31
001b0e 1f46      	ADC  R20,R22
001b0f 1f57      	ADC  R21,R23
001b10 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001b11 60a1      	SBR  R26,1
                 __DIVD21U3:
001b12 953a      	DEC  R19
001b13 f759      	BRNE __DIVD21U1
001b14 01fd      	MOVW R30,R26
001b15 01bc      	MOVW R22,R24
001b16 01d0      	MOVW R26,R0
001b17 01ca      	MOVW R24,R20
001b18 915f      	POP  R21
001b19 914f      	POP  R20
001b1a 913f      	POP  R19
001b1b 9508      	RET
                 
                 __DIVD21:
001b1c d015      	RCALL __CHKSIGND
001b1d dfd9      	RCALL __DIVD21U
001b1e f40e      	BRTC __DIVD211
001b1f df74      	RCALL __ANEGD1
                 __DIVD211:
001b20 9508      	RET
                 
                 __MODW21U:
001b21 dfc2      	RCALL __DIVW21U
001b22 01fd      	MOVW R30,R26
001b23 9508      	RET
                 
                 __CHKSIGNW:
001b24 94e8      	CLT
001b25 fff7      	SBRS R31,7
001b26 c002      	RJMP __CHKSW1
001b27 df68      	RCALL __ANEGW1
001b28 9468      	SET
                 __CHKSW1:
001b29 ffb7      	SBRS R27,7
001b2a c006      	RJMP __CHKSW2
001b2b 95a0      	COM  R26
001b2c 95b0      	COM  R27
001b2d 9611      	ADIW R26,1
001b2e f800      	BLD  R0,0
001b2f 9403      	INC  R0
001b30 fa00      	BST  R0,0
                 __CHKSW2:
001b31 9508      	RET
                 
                 __CHKSIGND:
001b32 94e8      	CLT
001b33 ff77      	SBRS R23,7
001b34 c002      	RJMP __CHKSD1
001b35 df5e      	RCALL __ANEGD1
001b36 9468      	SET
                 __CHKSD1:
001b37 ff97      	SBRS R25,7
001b38 c00b      	RJMP __CHKSD2
001b39 2400      	CLR  R0
001b3a 95a0      	COM  R26
001b3b 95b0      	COM  R27
001b3c 9580      	COM  R24
001b3d 9590      	COM  R25
001b3e 9611      	ADIW R26,1
001b3f 1d80      	ADC  R24,R0
001b40 1d90      	ADC  R25,R0
001b41 f800      	BLD  R0,0
001b42 9403      	INC  R0
001b43 fa00      	BST  R0,0
                 __CHKSD2:
001b44 9508      	RET
                 
                 __GETW1P:
001b45 91ed      	LD   R30,X+
001b46 91fc      	LD   R31,X
001b47 9711      	SBIW R26,1
001b48 9508      	RET
                 
                 __GETW1PF:
001b49 9005      	LPM  R0,Z+
001b4a 91f4      	LPM  R31,Z
001b4b 2de0      	MOV  R30,R0
001b4c 9508      	RET
                 
                 __GETW2PF:
001b4d 91a5      	LPM  R26,Z+
001b4e 91b4      	LPM  R27,Z
001b4f 9508      	RET
                 
                 __SWAPW12:
001b50 2e1b      	MOV  R1,R27
001b51 2fbf      	MOV  R27,R31
001b52 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001b53 2e1a      	MOV  R1,R26
001b54 2fae      	MOV  R26,R30
001b55 2de1      	MOV  R30,R1
001b56 9508      	RET
                 
                 __EEPROMRDW:
001b57 9611      	ADIW R26,1
001b58 d002      	RCALL __EEPROMRDB
001b59 2ffe      	MOV  R31,R30
001b5a 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001b5b 99e1      	SBIC EECR,EEWE
001b5c cffe      	RJMP __EEPROMRDB
001b5d 93ff      	PUSH R31
001b5e b7ff      	IN   R31,SREG
001b5f 94f8      	CLI
001b60 bbae      	OUT  EEARL,R26
001b61 bbbf      	OUT  EEARH,R27
001b62 9ae0      	SBI  EECR,EERE
001b63 b3ed      	IN   R30,EEDR
001b64 bfff      	OUT  SREG,R31
001b65 91ff      	POP  R31
001b66 9508      	RET
                 
                 __EEPROMWRW:
001b67 d007      	RCALL __EEPROMWRB
001b68 9611      	ADIW R26,1
001b69 93ef      	PUSH R30
001b6a 2fef      	MOV  R30,R31
001b6b d003      	RCALL __EEPROMWRB
001b6c 91ef      	POP  R30
001b6d 9711      	SBIW R26,1
001b6e 9508      	RET
                 
                 __EEPROMWRB:
001b6f 9be1      	SBIS EECR,EEWE
001b70 c002      	RJMP __EEPROMWRB1
001b71 95a8      	WDR
001b72 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
001b73 b79f      	IN   R25,SREG
001b74 94f8      	CLI
001b75 bbae      	OUT  EEARL,R26
001b76 bbbf      	OUT  EEARH,R27
001b77 9ae0      	SBI  EECR,EERE
001b78 b38d      	IN   R24,EEDR
001b79 17e8      	CP   R30,R24
001b7a f019      	BREQ __EEPROMWRB0
001b7b bbed      	OUT  EEDR,R30
001b7c 9ae2      	SBI  EECR,EEMWE
001b7d 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
001b7e bf9f      	OUT  SREG,R25
001b7f 9508      	RET
                 
                 __CPD21:
001b80 17ae      	CP   R26,R30
001b81 07bf      	CPC  R27,R31
001b82 0786      	CPC  R24,R22
001b83 0797      	CPC  R25,R23
001b84 9508      	RET
                 
                 __SAVELOCR6:
001b85 935a      	ST   -Y,R21
                 __SAVELOCR5:
001b86 934a      	ST   -Y,R20
                 __SAVELOCR4:
001b87 933a      	ST   -Y,R19
                 __SAVELOCR3:
001b88 932a      	ST   -Y,R18
                 __SAVELOCR2:
001b89 931a      	ST   -Y,R17
001b8a 930a      	ST   -Y,R16
001b8b 9508      	RET
                 
                 __LOADLOCR6:
001b8c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001b8d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001b8e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001b8f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001b90 8119      	LDD  R17,Y+1
001b91 8108      	LD   R16,Y
001b92 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  69 r1 :  36 r2 :   3 r3 :   0 r4 :  10 r5 :   8 r6 :   4 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   4 r13:   4 r14:   0 r15:   4 
r16: 106 r17: 117 r18:  67 r19:  41 r20:  37 r21:  78 r22:  90 r23:  77 
r24:  53 r25:  33 r26: 524 r27: 162 r28:  32 r29:   1 r30:1420 r31: 730 
x  :  54 y  : 701 z  :  33 
Registers used: 29 out of 35 (82.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  55 add   :  54 
adiw  :  54 and   :   3 andi  :  15 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  53 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  40 
brlt  :  10 brmi  :   5 brne  : 166 brpl  :  17 brsh  :  42 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 644 
cbi   :  17 cbr   :   0 clc   :   1 clh   :   0 cli   :   7 cln   :   0 
clr   :  39 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  32 cpc   : 138 cpi   : 218 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :  12 inc   :   4 jmp   :  71 ld    :  67 ldd   : 241 
ldi   : 885 lds   : 143 lpm   :  19 lsl   :  25 lsr   :   2 mov   :  74 
movw  :  89 mul   :  14 muls  :   0 mulsu :   0 neg   :   4 nop   :   9 
or    :   5 ori   :  10 out   :  70 pop   :  22 push  :  21 rcall :  92 
ret   : 144 reti  :   3 rjmp  : 283 rol   :  40 ror   :  12 sbc   :  18 
sbci  :  36 sbi   :  24 sbic  :   3 sbis  :   2 sbiw  :  46 sbr   :   2 
sbrc  :   3 sbrs  :  15 sec   :   2 seh   :   0 sei   :   5 sen   :   0 
ser   :   8 ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 372 std   :  93 sts   : 107 sub   :  13 subi  :  75 
swap  :   1 tst   :  25 wdr   :   4 
Instructions used: 81 out of 117 (69.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003726  11702   2416  14118  131072  10.8%
[.dseg] 0x000100 0x0007ba      0    698    698    4351  16.0%
[.eseg] 0x000000 0x000006      0      6      6    4096   0.1%

Assembly complete, 0 errors, 6 warnings
