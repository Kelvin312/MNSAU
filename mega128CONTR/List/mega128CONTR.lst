
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm Mon Oct 12 20:27:19 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1061): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1065): warning: Register r13 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TOUCH_X=R4
                 	.DEF _TOUCH_Y=R6
                 	.DEF _TOUCH_X_LAST=R8
                 	.DEF _TOUCH_Y_LAST=R10
                 	.DEF _rx_wr_index1=R13
                 	.DEF _rx_rd_index1=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 05df 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 112f 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0ebd 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0f48 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0da8 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0df8 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _auchCRCHi:
0003e6 c100
0003e7 4081
0003e8 c001
0003e9 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
0003ea c001
0003eb 4180
0003ec c100
0003ed 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
0003ee c001
0003ef 4180
0003f0 c100
0003f1 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
0003f2 c100
0003f3 4081
0003f4 c001
0003f5 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
0003f6 c001
0003f7 4180
0003f8 c100
0003f9 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
0003fa c100
0003fb 4081
0003fc c001
0003fd 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
0003fe c100
0003ff 4081
000400 c001
000401 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000402 c001
000403 4180
000404 c100
000405 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
000406 c001
000407 4180
000408 c100
000409 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
00040a c100
00040b 4081
00040c c001
00040d 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
00040e c100
00040f 4081
000410 c001
000411 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000412 c001
000413 4180
000414 c100
000415 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
000416 c100
000417 4081
000418 c001
000419 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
00041a c001
00041b 4180
00041c c100
00041d 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
00041e c001
00041f 4180
000420 c100
000421 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
000422 c100
000423 4081
000424 c001
000425 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000426 c001
000427 4180
000428 c100
000429 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
00042a c100
00042b 4081
00042c c001
00042d 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
00042e c100
00042f 4081
000430 c001
000431 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000432 c001
000433 4180
000434 c100
000435 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
000436 c100
000437 4081
000438 c001
000439 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
00043a c001
00043b 4180
00043c c100
00043d 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
00043e c001
00043f 4180
000440 c100
000441 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
000442 c100
000443 4081
000444 c001
000445 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000446 c100
000447 4081
000448 c001
000449 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
00044a c001
00044b 4180
00044c c100
00044d 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
00044e c001
00044f 4180
000450 c100
000451 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
000452 c100
000453 4081
000454 c001
000455 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000456 c001
000457 4180
000458 c100
000459 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
00045a c100
00045b 4081
00045c c001
00045d 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
00045e c100
00045f 4081
000460 c001
000461 4180      	.DB  0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41
000462 c001
000463 4180
000464 c100
000465 4081      	.DB  0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40
                 _auchCRCLo:
000466 c000
000467 01c1
000468 03c3
000469 c202      	.DB  0x0,0xC0,0xC1,0x1,0xC3,0x3,0x2,0xC2
00046a 06c6
00046b c707
00046c c505
00046d 04c4      	.DB  0xC6,0x6,0x7,0xC7,0x5,0xC5,0xC4,0x4
00046e 0ccc
00046f cd0d
000470 cf0f
000471 0ece      	.DB  0xCC,0xC,0xD,0xCD,0xF,0xCF,0xCE,0xE
000472 ca0a
000473 0bcb
000474 09c9
000475 c808      	.DB  0xA,0xCA,0xCB,0xB,0xC9,0x9,0x8,0xC8
000476 18d8
000477 d919
000478 db1b
000479 1ada      	.DB  0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A
00047a de1e
00047b 1fdf
00047c 1ddd
00047d dc1c      	.DB  0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC
00047e d414
00047f 15d5
000480 17d7
000481 d616      	.DB  0x14,0xD4,0xD5,0x15,0xD7,0x17,0x16,0xD6
000482 12d2
000483 d313
000484 d111
000485 10d0      	.DB  0xD2,0x12,0x13,0xD3,0x11,0xD1,0xD0,0x10
000486 30f0
000487 f131
000488 f333
000489 32f2      	.DB  0xF0,0x30,0x31,0xF1,0x33,0xF3,0xF2,0x32
00048a f636
00048b 37f7
00048c 35f5
00048d f434      	.DB  0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4
00048e fc3c
00048f 3dfd
000490 3fff
000491 fe3e      	.DB  0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE
000492 3afa
000493 fb3b
000494 f939
000495 38f8      	.DB  0xFA,0x3A,0x3B,0xFB,0x39,0xF9,0xF8,0x38
000496 e828
000497 29e9
000498 2beb
000499 ea2a      	.DB  0x28,0xE8,0xE9,0x29,0xEB,0x2B,0x2A,0xEA
00049a 2eee
00049b ef2f
00049c ed2d
00049d 2cec      	.DB  0xEE,0x2E,0x2F,0xEF,0x2D,0xED,0xEC,0x2C
00049e 24e4
00049f e525
0004a0 e727
0004a1 26e6      	.DB  0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26
0004a2 e222
0004a3 23e3
0004a4 21e1
0004a5 e020      	.DB  0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0
0004a6 60a0
0004a7 a161
0004a8 a363
0004a9 62a2      	.DB  0xA0,0x60,0x61,0xA1,0x63,0xA3,0xA2,0x62
0004aa a666
0004ab 67a7
0004ac 65a5
0004ad a464      	.DB  0x66,0xA6,0xA7,0x67,0xA5,0x65,0x64,0xA4
0004ae ac6c
0004af 6dad
0004b0 6faf
0004b1 ae6e      	.DB  0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,0x6E,0xAE
0004b2 6aaa
0004b3 ab6b
0004b4 a969
0004b5 68a8      	.DB  0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68
0004b6 b878
0004b7 79b9
0004b8 7bbb
0004b9 ba7a      	.DB  0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA
0004ba 7ebe
0004bb bf7f
0004bc bd7d
0004bd 7cbc      	.DB  0xBE,0x7E,0x7F,0xBF,0x7D,0xBD,0xBC,0x7C
0004be 74b4
0004bf b575
0004c0 b777
0004c1 76b6      	.DB  0xB4,0x74,0x75,0xB5,0x77,0xB7,0xB6,0x76
0004c2 b272
0004c3 73b3
0004c4 71b1
0004c5 b070      	.DB  0x72,0xB2,0xB3,0x73,0xB1,0x71,0x70,0xB0
0004c6 9050
0004c7 5191
0004c8 5393
0004c9 9252      	.DB  0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92
0004ca 5696
0004cb 9757
0004cc 9555
0004cd 5494      	.DB  0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54
0004ce 5c9c
0004cf 9d5d
0004d0 9f5f
0004d1 5e9e      	.DB  0x9C,0x5C,0x5D,0x9D,0x5F,0x9F,0x9E,0x5E
0004d2 9a5a
0004d3 5b9b
0004d4 5999
0004d5 9858      	.DB  0x5A,0x9A,0x9B,0x5B,0x99,0x59,0x58,0x98
0004d6 4888
0004d7 8949
0004d8 8b4b
0004d9 4a8a      	.DB  0x88,0x48,0x49,0x89,0x4B,0x8B,0x8A,0x4A
0004da 8e4e
0004db 4f8f
0004dc 4d8d
0004dd 8c4c      	.DB  0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C
0004de 8444
0004df 4585
0004e0 4787
0004e1 8646      	.DB  0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86
0004e2 4282
0004e3 8343
0004e4 8141
0004e5 4080      	.DB  0x82,0x42,0x43,0x83,0x41,0x81,0x80,0x40
                 _ConfigParam:
0004e6 000a
0004e7 000a
0004e8 000a
0004e9 0005      	.DB  0xA,0x0,0xA,0x0,0xA,0x0,0x5,0x0
0004ea 0005
0004eb 0005
0004ec 0005
0004ed 0005      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x5,0x0
0004ee 0005
0004ef 0005
0004f0 0005
0004f1 0001      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x1,0x0
0004f2 0014
0004f3 0014
0004f4 0014
0004f5 0005      	.DB  0x14,0x0,0x14,0x0,0x14,0x0,0x5,0x0
0004f6 0005
0004f7 0005
0004f8 0005
0004f9 0005      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x5,0x0
0004fa 0005
0004fb 0005
0004fc 0005
0004fd 0000      	.DB  0x5,0x0,0x5,0x0,0x5,0x0,0x0,0x0
0004fe 00dc
0004ff 00dc
000500 00dc
000501 0258      	.DB  0xDC,0x0,0xDC,0x0,0xDC,0x0,0x58,0x2
000502 0258
000503 0258
000504 0258
000505 0258      	.DB  0x58,0x2,0x58,0x2,0x58,0x2,0x58,0x2
000506 0258
000507 0258
000508 0258
000509 0001      	.DB  0x58,0x2,0x58,0x2,0x58,0x2,0x1,0x0
00050a 005a
00050b 005a
00050c 002d
00050d 0064      	.DB  0x5A,0x0,0x5A,0x0,0x2D,0x0,0x64,0x0
00050e 0064
00050f 0064
000510 0064
000511 0064      	.DB  0x64,0x0,0x64,0x0,0x64,0x0,0x64,0x0
000512 0064
000513 0064
000514 0064
000515 0000      	.DB  0x64,0x0,0x64,0x0,0x64,0x0,0x0,0x0
                 
                 _0xCC:
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1482): warning: .cseg .db misalignment - padding zero byte
000516 0001      	.DB  0x1
                 _0x105:
000517 fffa      	.DB  0xFA,0xFF
                 _0x0:
000518 2020
000519 2020
00051a 0020
00051b cbd1      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xD1,0xCB
00051c c4c5
00051d 2000
00051e 2b20
00051f 2000      	.DB  0xC5,0xC4,0x0,0x20,0x20,0x2B,0x0,0x20
000520 2d20
000521 cf00
000522 d3c0
000523 c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
000524 2000
000525 2020
000526 2020
000527 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000528 2020
000529 2020
00052a 2020
00052b 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00052c 0020
00052d c0cd
00052e d0cf
00052f c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
000530 cdc5
000531 c5c8
000532 d400
000533 c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
000534 c300
000535 00d6
000536 ced2
000537 00ca      	.DB  0x0,0xC3,0xD6,0x0,0xD2,0xCE,0xCA,0x0
000538 c0cd
000539 d0cf
00053a c6df
00053b cdc5      	.DB  0xCD,0xC0,0xCF,0xD0,0xDF,0xC6,0xC5,0xCD
00053c c5c8
00053d c820
00053e d220
00053f cace      	.DB  0xC8,0xC5,0x20,0xC8,0x20,0xD2,0xCE,0xCA
000540 c200
000541 c7ce
000542 d3c1
000543 c4c6      	.DB  0x0,0xC2,0xCE,0xC7,0xC1,0xD3,0xC6,0xC4
000544 cdc5
000545 dfc8
000546 ce00
000547 cdc1      	.DB  0xC5,0xCD,0xC8,0xDF,0x0,0xCE,0xC1,0xCD
000548 c000
000549 cfcc
00054a cf00
00054b d0c5      	.DB  0x0,0xC0,0xCC,0xCF,0x0,0xCF,0xC5,0xD0
00054c 2000
00054d cdca
00054e 2000
00054f d2ca      	.DB  0x0,0x20,0xCA,0xCD,0x0,0x20,0xCA,0xD2
000550 ca00
000551 d2cd
000552 c100
000553 d1db      	.DB  0x0,0xCA,0xCD,0xD2,0x0,0xC1,0xDB,0xD1
000554 c0d2
000555 cfd6
000556 cc00
000557 cdc5      	.DB  0xD2,0xC0,0xD6,0xCF,0x0,0xCC,0xC5,0xCD
000558 00de
000559 c0cd
00055a c0c7
00055b 00c4      	.DB  0xDE,0x0,0xCD,0xC0,0xC7,0xC0,0xC4,0x0
00055c c5c4
00055d cad1
00055e ccce
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1503): warning: .cseg .db misalignment - padding zero byte
00055f 0000      	.DB  0xC4,0xC5,0xD1,0xCA,0xCE,0xCC,0x0
                 
                 __GLOBAL_INI_TBL:
000560 0001      	.DW  0x01
000561 069f      	.DW  _isNewData
000562 0a2c      	.DW  _0xCC*2
                 
000563 0006      	.DW  0x06
000564 0500      	.DW  _0x100
000565 0a30      	.DW  _0x0*2
                 
000566 0006      	.DW  0x06
000567 0506      	.DW  _0x100+6
000568 0a30      	.DW  _0x0*2
                 
000569 0006      	.DW  0x06
00056a 050c      	.DW  _0x100+12
00056b 0a30      	.DW  _0x0*2
                 
00056c 0006      	.DW  0x06
00056d 0512      	.DW  _0x100+18
00056e 0a30      	.DW  _0x0*2
                 
00056f 0005      	.DW  0x05
000570 0518      	.DW  _0x104
000571 0a36      	.DW  _0x0*2+6
                 
000572 0004      	.DW  0x04
000573 051d      	.DW  _0x104+5
000574 0a3b      	.DW  _0x0*2+11
                 
000575 0004      	.DW  0x04
000576 0521      	.DW  _0x104+9
000577 0a3f      	.DW  _0x0*2+15
                 
000578 0006      	.DW  0x06
000579 0525      	.DW  _0x104+13
00057a 0a43      	.DW  _0x0*2+19
                 
00057b 0002      	.DW  0x02
00057c 07d7      	.DW  _Graph_X
00057d 0a2e      	.DW  _0x105*2
                 
00057e 0011      	.DW  0x11
00057f 052b      	.DW  _0x123
000580 0a49      	.DW  _0x0*2+25
                 
000581 0011      	.DW  0x11
000582 053c      	.DW  _0x123+17
000583 0a49      	.DW  _0x0*2+25
                 
000584 000b      	.DW  0x0B
000585 054d      	.DW  _0x123+34
000586 0a5a      	.DW  _0x0*2+42
                 
000587 0004      	.DW  0x04
000588 0558      	.DW  _0x123+45
000589 0a65      	.DW  _0x0*2+53
                 
00058a 000d      	.DW  0x0D
00058b 055c      	.DW  _0x123+49
00058c 0a4d      	.DW  _0x0*2+29
                 
00058d 000d      	.DW  0x0D
00058e 0569      	.DW  _0x123+62
00058f 0a4d      	.DW  _0x0*2+29
                 
000590 0003      	.DW  0x03
000591 0576      	.DW  _0x123+75
000592 0a69      	.DW  _0x0*2+57
                 
000593 0004      	.DW  0x04
000594 0579      	.DW  _0x123+78
000595 0a6c      	.DW  _0x0*2+60
                 
000596 0004      	.DW  0x04
000597 057d      	.DW  _0x123+82
000598 0a65      	.DW  _0x0*2+53
                 
000599 000d      	.DW  0x0D
00059a 0581      	.DW  _0x123+86
00059b 0a4d      	.DW  _0x0*2+29
                 
00059c 000d      	.DW  0x0D
00059d 058e      	.DW  _0x123+99
00059e 0a4d      	.DW  _0x0*2+29
                 
00059f 0003      	.DW  0x03
0005a0 059b      	.DW  _0x123+112
0005a1 0a69      	.DW  _0x0*2+57
                 
0005a2 0011      	.DW  0x11
0005a3 059e      	.DW  _0x123+115
0005a4 0a70      	.DW  _0x0*2+64
                 
0005a5 000c      	.DW  0x0C
0005a6 05af      	.DW  _0x123+132
0005a7 0a81      	.DW  _0x0*2+81
                 
0005a8 000d      	.DW  0x0D
0005a9 05bb      	.DW  _0x123+144
0005aa 0a4d      	.DW  _0x0*2+29
                 
0005ab 000d      	.DW  0x0D
0005ac 05c8      	.DW  _0x123+157
0005ad 0a4d      	.DW  _0x0*2+29
                 
0005ae 0004      	.DW  0x04
0005af 05d5      	.DW  _0x123+170
0005b0 0a8d      	.DW  _0x0*2+93
                 
0005b1 0004      	.DW  0x04
0005b2 05d9      	.DW  _0x123+174
0005b3 0a91      	.DW  _0x0*2+97
                 
0005b4 0004      	.DW  0x04
0005b5 05dd      	.DW  _0x123+178
0005b6 0a95      	.DW  _0x0*2+101
                 
0005b7 0004      	.DW  0x04
0005b8 05e1      	.DW  _0x123+182
0005b9 0a99      	.DW  _0x0*2+105
                 
0005ba 0004      	.DW  0x04
0005bb 05e5      	.DW  _0x123+186
0005bc 0a9d      	.DW  _0x0*2+109
                 
0005bd 0004      	.DW  0x04
0005be 05e9      	.DW  _0x123+190
0005bf 0aa1      	.DW  _0x0*2+113
                 
0005c0 0008      	.DW  0x08
0005c1 05ed      	.DW  _0x123+194
0005c2 0aa5      	.DW  _0x0*2+117
                 
0005c3 0005      	.DW  0x05
0005c4 05f5      	.DW  _0x1DA
0005c5 0aad      	.DW  _0x0*2+125
                 
0005c6 0006      	.DW  0x06
0005c7 05fa      	.DW  _0x1DA+5
0005c8 0ab2      	.DW  _0x0*2+130
                 
0005c9 0006      	.DW  0x06
0005ca 0600      	.DW  _0x1DA+11
0005cb 0a43      	.DW  _0x0*2+19
                 
0005cc 0007      	.DW  0x07
0005cd 0606      	.DW  _0x210
0005ce 0ab8      	.DW  _0x0*2+136
                 
0005cf 0007      	.DW  0x07
0005d0 060d      	.DW  _0x210+7
0005d1 0ab8      	.DW  _0x0*2+136
                 
0005d2 0007      	.DW  0x07
0005d3 0614      	.DW  _0x210+14
0005d4 0ab8      	.DW  _0x0*2+136
                 
0005d5 0007      	.DW  0x07
0005d6 061b      	.DW  _0x210+21
0005d7 0a53      	.DW  _0x0*2+35
                 
0005d8 0007      	.DW  0x07
0005d9 0622      	.DW  _0x210+28
0005da 0a53      	.DW  _0x0*2+35
                 
0005db 0007      	.DW  0x07
0005dc 0629      	.DW  _0x210+35
0005dd 0a53      	.DW  _0x0*2+35
                 
                 _0xFFFFFFFF:
0005de 0000      	.DW  0
                 
                 __RESET:
0005df 94f8      	CLI
0005e0 27ee      	CLR  R30
0005e1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0005e2 e0f1      	LDI  R31,1
0005e3 bff5      	OUT  MCUCR,R31
0005e4 bfe5      	OUT  MCUCR,R30
0005e5 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0005e7 e1f8      	LDI  R31,0x18
0005e8 bdf1      	OUT  WDTCR,R31
0005e9 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0005ea e08d      	LDI  R24,(14-2)+1
0005eb e0a2      	LDI  R26,2
0005ec 27bb      	CLR  R27
                 __CLEAR_REG:
0005ed 93ed      	ST   X+,R30
0005ee 958a      	DEC  R24
0005ef f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0005f0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0005f1 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0005f2 e0a0      	LDI  R26,LOW(__SRAM_START)
0005f3 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0005f4 93ed      	ST   X+,R30
0005f5 9701      	SBIW R24,1
0005f6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0005f7 ece0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0005f8 e0fa      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0005f9 9185      	LPM  R24,Z+
0005fa 9195      	LPM  R25,Z+
0005fb 9700      	SBIW R24,0
0005fc f061      	BREQ __GLOBAL_INI_END
0005fd 91a5      	LPM  R26,Z+
0005fe 91b5      	LPM  R27,Z+
0005ff 9005      	LPM  R0,Z+
000600 9015      	LPM  R1,Z+
000601 01bf      	MOVW R22,R30
000602 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000603 9005      	LPM  R0,Z+
000604 920d      	ST   X+,R0
000605 9701      	SBIW R24,1
000606 f7e1      	BRNE __GLOBAL_INI_LOOP
000607 01fb      	MOVW R30,R22
000608 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000609 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00060a efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00060b bfed      	OUT  SPL,R30
00060c e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00060d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00060e e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00060f e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000610 940c 1e09 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;void SSD1963_PortInit(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _SSD1963_PortInit:
                 ;    //SSD1963_PORT
                 ;    DDRA = 0xFF;
000612 efef      	LDI  R30,LOW(255)
000613 bbea      	OUT  0x1A,R30
                 ;    DDRC = 0xFF;
000614 bbe4      	OUT  0x14,R30
                 ;    //SSD1963 76543210
                 ;    DDRD |= 0b11100000;
000615 b3e1      	IN   R30,0x11
000616 6ee0      	ORI  R30,LOW(0xE0)
000617 bbe1      	OUT  0x11,R30
                 ;    DDRE |= 0b10100000;
000618 b1e2      	IN   R30,0x2
000619 6ae0      	ORI  R30,LOW(0xA0)
00061a b9e2      	OUT  0x2,R30
                 ;}
00061b 9508      	RET
                 ;
                 ;#pragma used+
                 ;
                 ;unsigned char RotateByte(unsigned char Value)
                 ;{
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
00061c 81e8      	LD   R30,Y
00061d e0f0      	LDI  R31,0
00061e 95f5      	ASR  R31
00061f 95e7      	ROR  R30
000620 75e5      	ANDI R30,LOW(0x55)
000621 2fae      	MOV  R26,R30
000622 81e8      	LD   R30,Y
000623 0fee      	LSL  R30
000624 7aea      	ANDI R30,LOW(0xAA)
000625 2bea      	OR   R30,R26
000626 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
000627 e0f0      	LDI  R31,0
000628 940e 203f 	CALL __ASRW2
00062a 73e3      	ANDI R30,LOW(0x33)
00062b 2fae      	MOV  R26,R30
00062c 81e8      	LD   R30,Y
00062d 0fee      	LSL  R30
00062e 0fee      	LSL  R30
00062f 7cec      	ANDI R30,LOW(0xCC)
000630 2bea      	OR   R30,R26
000631 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
000632 e0f0      	LDI  R31,0
000633 940e 203b 	CALL __ASRW4
000635 70ef      	ANDI R30,LOW(0xF)
000636 2fae      	MOV  R26,R30
000637 81e8      	LD   R30,Y
000638 95e2      	SWAP R30
000639 7fe0      	ANDI R30,LOW(0xF0)
00063a 2bea      	OR   R30,R26
00063b 83e8      	ST   Y,R30
                 ;  return Value;
00063c c037      	RJMP _0x202000C
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
00063d 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
00063e 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
00063f e6e4      	LDI  R30,LOW(100)
000640 e0f0      	LDI  R31,HIGH(100)
000641 93fa      	ST   -Y,R31
000642 93ea      	ST   -Y,R30
000643 940e 1f3d 	CALL _delay_ms
                 ;  SSD1963_RESET = 0;
000645 981d      	CBI  0x3,5
                 ;  delay_ms(100);
000646 e6e4      	LDI  R30,LOW(100)
000647 e0f0      	LDI  R31,HIGH(100)
000648 93fa      	ST   -Y,R31
000649 93ea      	ST   -Y,R30
00064a 940e 1f3d 	CALL _delay_ms
                 ;  SSD1963_RESET = 1;
00064c 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
00064d 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
00064e e6e4      	LDI  R30,LOW(100)
00064f e0f0      	LDI  R31,HIGH(100)
000650 93fa      	ST   -Y,R31
000651 93ea      	ST   -Y,R30
000652 940e 1f3d 	CALL _delay_ms
                 ;}
000654 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
000655 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
000656 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
000657 81e8      	LD   R30,Y
000658 93ea      	ST   -Y,R30
000659 dfc2      	RCALL _RotateByte
00065a bbeb      	OUT  0x1B,R30
                 ;  SSD1963_PORT2 = 0x00;
00065b e0e0      	LDI  R30,LOW(0)
00065c bbe5      	OUT  0x15,R30
                 ;  #asm("nop")
00065d 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00065e 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00065f 9896      	CBI  0x12,6
                 ;  #asm("nop")
000660 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000661 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000662 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000663 0000      	nop
000664 c00f      	RJMP _0x202000B
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
000665 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
000666 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
000667 81e8      	LD   R30,Y
000668 93ea      	ST   -Y,R30
000669 dfb2      	RCALL _RotateByte
00066a bbeb      	OUT  0x1B,R30
                 ;  SSD1963_PORT2 = 0x00;
00066b e0e0      	LDI  R30,LOW(0)
00066c bbe5      	OUT  0x15,R30
                 ;  #asm("nop")
00066d 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00066e 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
00066f 9896      	CBI  0x12,6
                 ;  #asm("nop")
000670 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000671 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000672 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000673 0000      	nop
                 _0x202000B:
                 ;} // SSD1963_Writedata
                 _0x202000C:
000674 9621      	ADIW R28,1
000675 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000676 931a      	ST   -Y,R17
000677 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
000678 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
000679 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
00067a 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
00067b 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
00067c bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
00067d bb05      	OUT  0x15,R16
                 ;  #asm("nop")
00067e 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
00067f 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000680 9896      	CBI  0x12,6
                 ;  #asm("nop")
000681 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000682 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000683 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000684 0000      	nop
                 ;} // SSD1963_Writedata
000685 8119      	LDD  R17,Y+1
000686 8108      	LDD  R16,Y+0
000687 9624      	ADIW R28,4
000688 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_PortInit();
000689 df88      	RCALL _SSD1963_PortInit
                 ;  SSD1963_Reset();
00068a dfb2      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
00068b e0e1      	LDI  R30,LOW(1)
00068c 93ea      	ST   -Y,R30
00068d dfc7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteCmd(0x01); //software reset
00068e e0e1      	LDI  R30,LOW(1)
00068f 93ea      	ST   -Y,R30
000690 dfc4      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteCmd(0x01); //software reset
000691 e0e1      	LDI  R30,LOW(1)
000692 93ea      	ST   -Y,R30
000693 dfc1      	RCALL _SSD1963_WriteCmd
                 ;  delay_ms(200); //задержка
000694 ece8      	LDI  R30,LOW(200)
000695 e0f0      	LDI  R31,HIGH(200)
000696 93fa      	ST   -Y,R31
000697 93ea      	ST   -Y,R30
000698 940e 1f3d 	CALL _delay_ms
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
00069a eee2      	LDI  R30,LOW(226)
00069b 93ea      	ST   -Y,R30
00069c dfb8      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
00069d e2e3      	LDI  R30,LOW(35)
00069e 93ea      	ST   -Y,R30
00069f dfc5      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
0006a0 e0e2      	LDI  R30,LOW(2)
0006a1 93ea      	ST   -Y,R30
0006a2 dfc2      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
0006a3 e0e4      	LDI  R30,LOW(4)
0006a4 93ea      	ST   -Y,R30
0006a5 dfbf      	RCALL _SSD1963_WriteData_b8
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
0006a6 eee0      	LDI  R30,LOW(224)
0006a7 93ea      	ST   -Y,R30
0006a8 dfac      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
0006a9 e0e1      	LDI  R30,LOW(1)
0006aa 93ea      	ST   -Y,R30
0006ab dfb9      	RCALL _SSD1963_WriteData_b8
                 ;  delay_ms(1);//ожидание запуска PLL
0006ac e0e1      	LDI  R30,LOW(1)
0006ad e0f0      	LDI  R31,HIGH(1)
0006ae 93fa      	ST   -Y,R31
0006af 93ea      	ST   -Y,R30
0006b0 940e 1f3d 	CALL _delay_ms
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
0006b2 eee0      	LDI  R30,LOW(224)
0006b3 93ea      	ST   -Y,R30
0006b4 dfa0      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x03);
0006b5 e0e3      	LDI  R30,LOW(3)
0006b6 93ea      	ST   -Y,R30
0006b7 dfad      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0x01); //software reset
0006b8 e0e1      	LDI  R30,LOW(1)
0006b9 93ea      	ST   -Y,R30
0006ba df9a      	RCALL _SSD1963_WriteCmd
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
0006bb e7e8      	LDI  R30,LOW(120)
0006bc e0f0      	LDI  R31,HIGH(120)
0006bd 93fa      	ST   -Y,R31
0006be 93ea      	ST   -Y,R30
0006bf 940e 1f3d 	CALL _delay_ms
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
0006c1 eee6      	LDI  R30,LOW(230)
0006c2 93ea      	ST   -Y,R30
0006c3 df91      	RCALL _SSD1963_WriteCmd
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
0006c4 e0e1      	LDI  R30,LOW(1)
0006c5 93ea      	ST   -Y,R30
0006c6 df9e      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
0006c7 edea      	LDI  R30,LOW(218)
0006c8 93ea      	ST   -Y,R30
0006c9 df9b      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
0006ca e7e3      	LDI  R30,LOW(115)
0006cb 93ea      	ST   -Y,R30
0006cc df98      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
0006cd ebe0      	LDI  R30,LOW(176)
0006ce 93ea      	ST   -Y,R30
0006cf df85      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
0006d0 e2e4      	LDI  R30,LOW(36)
0006d1 93ea      	ST   -Y,R30
0006d2 df92      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
0006d3 e0e0      	LDI  R30,LOW(0)
0006d4 93ea      	ST   -Y,R30
0006d5 df8f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
0006d6 e0e1      	LDI  R30,LOW(1)
0006d7 93ea      	ST   -Y,R30
0006d8 df8c      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
0006d9 edef      	LDI  R30,LOW(223)
0006da 93ea      	ST   -Y,R30
0006db df89      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
0006dc e0e1      	LDI  R30,LOW(1)
0006dd 93ea      	ST   -Y,R30
0006de df86      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
0006df e0ef      	LDI  R30,LOW(15)
0006e0 93ea      	ST   -Y,R30
0006e1 df83      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
0006e2 e0e0      	LDI  R30,LOW(0)
0006e3 93ea      	ST   -Y,R30
0006e4 df80      	RCALL _SSD1963_WriteData_b8
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
0006e5 ebe4      	LDI  R30,LOW(180)
0006e6 93ea      	ST   -Y,R30
0006e7 df6d      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
0006e8 e0e3      	LDI  R30,LOW(3)
0006e9 93ea      	ST   -Y,R30
0006ea df7a      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HT&0xFF);
0006eb e8e4      	LDI  R30,LOW(132)
0006ec 93ea      	ST   -Y,R30
0006ed df77      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
0006ee e0e0      	LDI  R30,LOW(0)
0006ef 93ea      	ST   -Y,R30
0006f0 df74      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
0006f1 e5ea      	LDI  R30,LOW(90)
0006f2 93ea      	ST   -Y,R30
0006f3 df71      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
0006f4 e0ea      	LDI  R30,LOW(10)
0006f5 93ea      	ST   -Y,R30
0006f6 df6e      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
0006f7 e0e0      	LDI  R30,LOW(0)
0006f8 93ea      	ST   -Y,R30
0006f9 df6b      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
0006fa e0e8      	LDI  R30,LOW(8)
0006fb 93ea      	ST   -Y,R30
0006fc df68      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x00);
0006fd e0e0      	LDI  R30,LOW(0)
0006fe 93ea      	ST   -Y,R30
0006ff df65      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
000700 ebe6      	LDI  R30,LOW(182)
000701 93ea      	ST   -Y,R30
000702 df52      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
000703 e0e1      	LDI  R30,LOW(1)
000704 93ea      	ST   -Y,R30
000705 df5f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VT&0xFF);
000706 e2ec      	LDI  R30,LOW(44)
000707 93ea      	ST   -Y,R30
000708 df5c      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
000709 e0e0      	LDI  R30,LOW(0)
00070a 93ea      	ST   -Y,R30
00070b df59      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
00070c e0ec      	LDI  R30,LOW(12)
00070d 93ea      	ST   -Y,R30
00070e df56      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
00070f e0ea      	LDI  R30,LOW(10)
000710 93ea      	ST   -Y,R30
000711 df53      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
000712 e0e0      	LDI  R30,LOW(0)
000713 93ea      	ST   -Y,R30
000714 df50      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
000715 e0e4      	LDI  R30,LOW(4)
000716 93ea      	ST   -Y,R30
000717 df4d      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
000718 ebea      	LDI  R30,LOW(186)
000719 93ea      	ST   -Y,R30
00071a df3a      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
00071b e0ef      	LDI  R30,LOW(15)
00071c 93ea      	ST   -Y,R30
00071d df47      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
00071e ebe8      	LDI  R30,LOW(184)
00071f 93ea      	ST   -Y,R30
000720 df34      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
000721 e0e7      	LDI  R30,LOW(7)
000722 93ea      	ST   -Y,R30
000723 df41      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
000724 e0e1      	LDI  R30,LOW(1)
000725 93ea      	ST   -Y,R30
000726 df3e      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
000727 e3e6      	LDI  R30,LOW(54)
000728 93ea      	ST   -Y,R30
000729 df2b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
00072a e0e3      	LDI  R30,LOW(3)
00072b 93ea      	ST   -Y,R30
00072c df38      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
00072d ebec      	LDI  R30,LOW(188)
00072e 93ea      	ST   -Y,R30
00072f df25      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
000730 e5e0      	LDI  R30,LOW(80)
000731 93ea      	ST   -Y,R30
000732 df32      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
000733 e9e0      	LDI  R30,LOW(144)
000734 93ea      	ST   -Y,R30
000735 df2f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
000736 e5e0      	LDI  R30,LOW(80)
000737 93ea      	ST   -Y,R30
000738 df2c      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
000739 e0e1      	LDI  R30,LOW(1)
00073a 93ea      	ST   -Y,R30
00073b df29      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
00073c efe0      	LDI  R30,LOW(240)
00073d 93ea      	ST   -Y,R30
00073e df16      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
00073f e0e3      	LDI  R30,LOW(3)
000740 93ea      	ST   -Y,R30
000741 df23      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  delay_ms(5);
000742 e0e5      	LDI  R30,LOW(5)
000743 e0f0      	LDI  R31,HIGH(5)
000744 93fa      	ST   -Y,R31
000745 93ea      	ST   -Y,R30
000746 940e 1f3d 	CALL _delay_ms
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
000748 e2e9      	LDI  R30,LOW(41)
000749 93ea      	ST   -Y,R30
00074a df0a      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
00074b ede0      	LDI  R30,LOW(208)
00074c 93ea      	ST   -Y,R30
00074d df07      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
00074e e0ed      	LDI  R30,LOW(13)
00074f 93ea      	ST   -Y,R30
000750 df14      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
000751 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
000752 e2ea      	LDI  R30,LOW(42)
000753 93ea      	ST   -Y,R30
000754 df00      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
000755 81ef      	LDD  R30,Y+7
000756 93ea      	ST   -Y,R30
000757 df0d      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
000758 81ee      	LDD  R30,Y+6
000759 93ea      	ST   -Y,R30
00075a df0a      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
00075b 81ed      	LDD  R30,Y+5
00075c 93ea      	ST   -Y,R30
00075d df07      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
00075e 81ec      	LDD  R30,Y+4
00075f 93ea      	ST   -Y,R30
000760 df04      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
000761 e2eb      	LDI  R30,LOW(43)
000762 93ea      	ST   -Y,R30
000763 def1      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
000764 81eb      	LDD  R30,Y+3
000765 93ea      	ST   -Y,R30
000766 defe      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
000767 81ea      	LDD  R30,Y+2
000768 93ea      	ST   -Y,R30
000769 defb      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
00076a 81e9      	LDD  R30,Y+1
00076b 93ea      	ST   -Y,R30
00076c def8      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
00076d 81e8      	LD   R30,Y
00076e 93ea      	ST   -Y,R30
00076f def5      	RCALL _SSD1963_WriteData_b8
                 ;}
000770 9628      	ADIW R28,8
000771 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
000772 940e 211e 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
000774 e2e8      	LDI  R30,LOW(40)
000775 93ea      	ST   -Y,R30
000776 dede      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
000777 e0e0      	LDI  R30,LOW(0)
000778 e0f0      	LDI  R31,HIGH(0)
000779 93fa      	ST   -Y,R31
00077a 93ea      	ST   -Y,R30
00077b edef      	LDI  R30,LOW(479)
00077c e0f1      	LDI  R31,HIGH(479)
00077d 93fa      	ST   -Y,R31
00077e 93ea      	ST   -Y,R30
00077f e0e0      	LDI  R30,LOW(0)
000780 e0f0      	LDI  R31,HIGH(0)
000781 93fa      	ST   -Y,R31
000782 93ea      	ST   -Y,R30
000783 e0ef      	LDI  R30,LOW(271)
000784 e0f1      	LDI  R31,HIGH(271)
000785 93fa      	ST   -Y,R31
000786 93ea      	ST   -Y,R30
000787 dfca      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
000788 e2ec      	LDI  R30,LOW(44)
000789 93ea      	ST   -Y,R30
00078a deca      	RCALL _SSD1963_WriteCmd
                 ;  x=0;
                +
00078b e000     +LDI R16 , LOW ( 0 )
00078c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x31:
                +
00078d 3100     +CPI R16 , LOW ( 272 )
00078e e0e1     +LDI R30 , HIGH ( 272 )
00078f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
000790 f488      	BRSH _0x33
                 ;  {
                 ;    y=0;
                +
000791 e020     +LDI R18 , LOW ( 0 )
000792 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x34:
                +
000793 3e20     +CPI R18 , LOW ( 480 )
000794 e0e1     +LDI R30 , HIGH ( 480 )
000795 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
000796 f440      	BRSH _0x36
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
000797 81ec      	LDD  R30,Y+4
000798 81fd      	LDD  R31,Y+4+1
000799 93fa      	ST   -Y,R31
00079a 93ea      	ST   -Y,R30
00079b deda      	RCALL _SSD1963_WriteData_b16
                 ;      y++;
                +
00079c 5f2f     +SUBI R18 , LOW ( - 1 )
00079d 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
00079e cff4      	RJMP _0x34
                 _0x36:
                 ;  x++;
                +
00079f 5f0f     +SUBI R16 , LOW ( - 1 )
0007a0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
0007a1 cfeb      	RJMP _0x31
                 _0x33:
                 ;  SSD1963_WriteCmd(0x29);
0007a2 e2e9      	LDI  R30,LOW(41)
0007a3 93ea      	ST   -Y,R30
0007a4 deb0      	RCALL _SSD1963_WriteCmd
                 ;}
0007a5 940e 2125 	CALL __LOADLOCR4
0007a7 9626      	ADIW R28,6
0007a8 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
0007a9 931a      	ST   -Y,R17
0007aa 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
0007ab 85e8      	LDD  R30,Y+8
0007ac 85f9      	LDD  R31,Y+8+1
0007ad 93fa      	ST   -Y,R31
0007ae 93ea      	ST   -Y,R30
0007af 85aa      	LDD  R26,Y+10
0007b0 85bb      	LDD  R27,Y+10+1
0007b1 9650      	ADIW R26,16
0007b2 9711      	SBIW R26,1
0007b3 93ba      	ST   -Y,R27
0007b4 93aa      	ST   -Y,R26
0007b5 85ea      	LDD  R30,Y+10
0007b6 85fb      	LDD  R31,Y+10+1
0007b7 93fa      	ST   -Y,R31
0007b8 93ea      	ST   -Y,R30
0007b9 85ac      	LDD  R26,Y+12
0007ba 85bd      	LDD  R27,Y+12+1
0007bb 9650      	ADIW R26,16
0007bc 9711      	SBIW R26,1
0007bd 93ba      	ST   -Y,R27
0007be 93aa      	ST   -Y,R26
0007bf df92      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
0007c0 e2ec      	LDI  R30,LOW(44)
0007c1 93ea      	ST   -Y,R30
0007c2 de92      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
0007c3 e010      	LDI  R17,LOW(0)
                 _0x38:
0007c4 3210      	CPI  R17,32
0007c5 f4e8      	BRSH _0x39
                 ;  {
                 ;    for (j = 0; j < 8; j++)
0007c6 e000      	LDI  R16,LOW(0)
                 _0x3B:
0007c7 3008      	CPI  R16,8
0007c8 f4c0      	BRSH _0x3C
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
0007c9 2fe1      	MOV  R30,R17
0007ca 85aa      	LDD  R26,Y+10
0007cb 85bb      	LDD  R27,Y+10+1
0007cc e0f0      	LDI  R31,0
0007cd 0fea      	ADD  R30,R26
0007ce 1ffb      	ADC  R31,R27
0007cf 9014      	LPM  R1,Z
0007d0 2fe0      	MOV  R30,R16
0007d1 e8a0      	LDI  R26,LOW(128)
0007d2 940e 2033 	CALL __LSRB12
0007d4 21e1      	AND  R30,R1
0007d5 30e1      	CPI  R30,LOW(0x1)
0007d6 f018      	BRLO _0x3D
0007d7 81ec      	LDD  R30,Y+4
0007d8 81fd      	LDD  R31,Y+4+1
0007d9 c002      	RJMP _0x217
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3D:
0007da 81ea      	LDD  R30,Y+2
0007db 81fb      	LDD  R31,Y+2+1
                 _0x217:
0007dc 93fa      	ST   -Y,R31
0007dd 93ea      	ST   -Y,R30
0007de de97      	RCALL _SSD1963_WriteData_b16
                 ;    }
0007df 5f0f      	SUBI R16,-1
0007e0 cfe6      	RJMP _0x3B
                 _0x3C:
                 ;  }
0007e1 5f1f      	SUBI R17,-1
0007e2 cfe1      	RJMP _0x38
                 _0x39:
                 ;}
0007e3 8119      	LDD  R17,Y+1
0007e4 8108      	LDD  R16,Y+0
0007e5 c3b0      	RJMP _0x202000A
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
0007e6 85e8      	LDD  R30,Y+8
0007e7 e0f0      	LDI  R31,0
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
0007e8 33e0      	CPI  R30,LOW(0x30)
0007e9 e0a0      	LDI  R26,HIGH(0x30)
0007ea 07fa      	CPC  R31,R26
0007eb f419      	BRNE _0x42
0007ec e0ec      	LDI  R30,LOW(_S_48*2)
0007ed e0f1      	LDI  R31,HIGH(_S_48*2)
0007ee c18e      	RJMP _0x218
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x42:
0007ef 33e1      	CPI  R30,LOW(0x31)
0007f0 e0a0      	LDI  R26,HIGH(0x31)
0007f1 07fa      	CPC  R31,R26
0007f2 f419      	BRNE _0x43
0007f3 e2ec      	LDI  R30,LOW(_S_49*2)
0007f4 e0f1      	LDI  R31,HIGH(_S_49*2)
0007f5 c187      	RJMP _0x218
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x43:
0007f6 33e2      	CPI  R30,LOW(0x32)
0007f7 e0a0      	LDI  R26,HIGH(0x32)
0007f8 07fa      	CPC  R31,R26
0007f9 f419      	BRNE _0x44
0007fa e4ec      	LDI  R30,LOW(_S_50*2)
0007fb e0f1      	LDI  R31,HIGH(_S_50*2)
0007fc c180      	RJMP _0x218
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x44:
0007fd 33e3      	CPI  R30,LOW(0x33)
0007fe e0a0      	LDI  R26,HIGH(0x33)
0007ff 07fa      	CPC  R31,R26
000800 f419      	BRNE _0x45
000801 e6ec      	LDI  R30,LOW(_S_51*2)
000802 e0f1      	LDI  R31,HIGH(_S_51*2)
000803 c179      	RJMP _0x218
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x45:
000804 33e4      	CPI  R30,LOW(0x34)
000805 e0a0      	LDI  R26,HIGH(0x34)
000806 07fa      	CPC  R31,R26
000807 f419      	BRNE _0x46
000808 e8ec      	LDI  R30,LOW(_S_52*2)
000809 e0f1      	LDI  R31,HIGH(_S_52*2)
00080a c172      	RJMP _0x218
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x46:
00080b 33e5      	CPI  R30,LOW(0x35)
00080c e0a0      	LDI  R26,HIGH(0x35)
00080d 07fa      	CPC  R31,R26
00080e f419      	BRNE _0x47
00080f eaec      	LDI  R30,LOW(_S_53*2)
000810 e0f1      	LDI  R31,HIGH(_S_53*2)
000811 c16b      	RJMP _0x218
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x47:
000812 33e6      	CPI  R30,LOW(0x36)
000813 e0a0      	LDI  R26,HIGH(0x36)
000814 07fa      	CPC  R31,R26
000815 f419      	BRNE _0x48
000816 ecec      	LDI  R30,LOW(_S_54*2)
000817 e0f1      	LDI  R31,HIGH(_S_54*2)
000818 c164      	RJMP _0x218
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x48:
000819 33e7      	CPI  R30,LOW(0x37)
00081a e0a0      	LDI  R26,HIGH(0x37)
00081b 07fa      	CPC  R31,R26
00081c f419      	BRNE _0x49
00081d eeec      	LDI  R30,LOW(_S_55*2)
00081e e0f1      	LDI  R31,HIGH(_S_55*2)
00081f c15d      	RJMP _0x218
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x49:
000820 33e8      	CPI  R30,LOW(0x38)
000821 e0a0      	LDI  R26,HIGH(0x38)
000822 07fa      	CPC  R31,R26
000823 f419      	BRNE _0x4A
000824 e0ec      	LDI  R30,LOW(_S_56*2)
000825 e0f2      	LDI  R31,HIGH(_S_56*2)
000826 c156      	RJMP _0x218
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4A:
000827 33e9      	CPI  R30,LOW(0x39)
000828 e0a0      	LDI  R26,HIGH(0x39)
000829 07fa      	CPC  R31,R26
00082a f419      	BRNE _0x4B
00082b e2ec      	LDI  R30,LOW(_S_57*2)
00082c e0f2      	LDI  R31,HIGH(_S_57*2)
00082d c14f      	RJMP _0x218
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4B:
00082e 32e1      	CPI  R30,LOW(0x21)
00082f e0a0      	LDI  R26,HIGH(0x21)
000830 07fa      	CPC  R31,R26
000831 f419      	BRNE _0x4C
000832 e6ec      	LDI  R30,LOW(_S_33*2)
000833 e0f2      	LDI  R31,HIGH(_S_33*2)
000834 c148      	RJMP _0x218
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4C:
000835 32e8      	CPI  R30,LOW(0x28)
000836 e0a0      	LDI  R26,HIGH(0x28)
000837 07fa      	CPC  R31,R26
000838 f419      	BRNE _0x4D
000839 e8ec      	LDI  R30,LOW(_S_40*2)
00083a e0f2      	LDI  R31,HIGH(_S_40*2)
00083b c141      	RJMP _0x218
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4D:
00083c 32e9      	CPI  R30,LOW(0x29)
00083d e0a0      	LDI  R26,HIGH(0x29)
00083e 07fa      	CPC  R31,R26
00083f f419      	BRNE _0x4E
000840 eaec      	LDI  R30,LOW(_S_41*2)
000841 e0f2      	LDI  R31,HIGH(_S_41*2)
000842 c13a      	RJMP _0x218
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x4E:
000843 32ef      	CPI  R30,LOW(0x2F)
000844 e0a0      	LDI  R26,HIGH(0x2F)
000845 07fa      	CPC  R31,R26
000846 f419      	BRNE _0x4F
000847 ecec      	LDI  R30,LOW(_S_47*2)
000848 e0f2      	LDI  R31,HIGH(_S_47*2)
000849 c133      	RJMP _0x218
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x4F:
00084a 33ea      	CPI  R30,LOW(0x3A)
00084b e0a0      	LDI  R26,HIGH(0x3A)
00084c 07fa      	CPC  R31,R26
00084d f419      	BRNE _0x50
00084e e2ec      	LDI  R30,LOW(_S_58*2)
00084f e0f3      	LDI  R31,HIGH(_S_58*2)
000850 c12c      	RJMP _0x218
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x50:
000851 33ec      	CPI  R30,LOW(0x3C)
000852 e0a0      	LDI  R26,HIGH(0x3C)
000853 07fa      	CPC  R31,R26
000854 f419      	BRNE _0x51
000855 e4ec      	LDI  R30,LOW(_S_60*2)
000856 e0f3      	LDI  R31,HIGH(_S_60*2)
000857 c125      	RJMP _0x218
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x51:
000858 33ed      	CPI  R30,LOW(0x3D)
000859 e0a0      	LDI  R26,HIGH(0x3D)
00085a 07fa      	CPC  R31,R26
00085b f419      	BRNE _0x52
00085c e6ec      	LDI  R30,LOW(_S_61*2)
00085d e0f3      	LDI  R31,HIGH(_S_61*2)
00085e c11e      	RJMP _0x218
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x52:
00085f 33ee      	CPI  R30,LOW(0x3E)
000860 e0a0      	LDI  R26,HIGH(0x3E)
000861 07fa      	CPC  R31,R26
000862 f419      	BRNE _0x53
000863 e8ec      	LDI  R30,LOW(_S_62*2)
000864 e0f3      	LDI  R31,HIGH(_S_62*2)
000865 c117      	RJMP _0x218
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x53:
000866 33ef      	CPI  R30,LOW(0x3F)
000867 e0a0      	LDI  R26,HIGH(0x3F)
000868 07fa      	CPC  R31,R26
000869 f419      	BRNE _0x54
00086a eaec      	LDI  R30,LOW(_S_63*2)
00086b e0f3      	LDI  R31,HIGH(_S_63*2)
00086c c110      	RJMP _0x218
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x54:
00086d 32eb      	CPI  R30,LOW(0x2B)
00086e e0a0      	LDI  R26,HIGH(0x2B)
00086f 07fa      	CPC  R31,R26
000870 f419      	BRNE _0x55
000871 eeec      	LDI  R30,LOW(_S_43*2)
000872 e0f2      	LDI  R31,HIGH(_S_43*2)
000873 c109      	RJMP _0x218
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x55:
000874 32ed      	CPI  R30,LOW(0x2D)
000875 e0a0      	LDI  R26,HIGH(0x2D)
000876 07fa      	CPC  R31,R26
000877 f419      	BRNE _0x56
000878 e0ec      	LDI  R30,LOW(_S_45*2)
000879 e0f3      	LDI  R31,HIGH(_S_45*2)
00087a c102      	RJMP _0x218
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x56:
00087b 3ce0      	CPI  R30,LOW(0xC0)
00087c e0a0      	LDI  R26,HIGH(0xC0)
00087d 07fa      	CPC  R31,R26
00087e f419      	BRNE _0x57
00087f ecec      	LDI  R30,LOW(_S_192*2)
000880 e0f3      	LDI  R31,HIGH(_S_192*2)
000881 c0fb      	RJMP _0x218
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x57:
000882 3ce1      	CPI  R30,LOW(0xC1)
000883 e0a0      	LDI  R26,HIGH(0xC1)
000884 07fa      	CPC  R31,R26
000885 f419      	BRNE _0x58
000886 eeec      	LDI  R30,LOW(_S_193*2)
000887 e0f3      	LDI  R31,HIGH(_S_193*2)
000888 c0f4      	RJMP _0x218
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x58:
000889 3ce2      	CPI  R30,LOW(0xC2)
00088a e0a0      	LDI  R26,HIGH(0xC2)
00088b 07fa      	CPC  R31,R26
00088c f419      	BRNE _0x59
00088d e0ec      	LDI  R30,LOW(_S_194*2)
00088e e0f4      	LDI  R31,HIGH(_S_194*2)
00088f c0ed      	RJMP _0x218
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x59:
000890 3ce3      	CPI  R30,LOW(0xC3)
000891 e0a0      	LDI  R26,HIGH(0xC3)
000892 07fa      	CPC  R31,R26
000893 f419      	BRNE _0x5A
000894 e2ec      	LDI  R30,LOW(_S_195*2)
000895 e0f4      	LDI  R31,HIGH(_S_195*2)
000896 c0e6      	RJMP _0x218
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5A:
000897 3ce4      	CPI  R30,LOW(0xC4)
000898 e0a0      	LDI  R26,HIGH(0xC4)
000899 07fa      	CPC  R31,R26
00089a f419      	BRNE _0x5B
00089b e4ec      	LDI  R30,LOW(_S_196*2)
00089c e0f4      	LDI  R31,HIGH(_S_196*2)
00089d c0df      	RJMP _0x218
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5B:
00089e 3ce5      	CPI  R30,LOW(0xC5)
00089f e0a0      	LDI  R26,HIGH(0xC5)
0008a0 07fa      	CPC  R31,R26
0008a1 f419      	BRNE _0x5C
0008a2 e6ec      	LDI  R30,LOW(_S_197*2)
0008a3 e0f4      	LDI  R31,HIGH(_S_197*2)
0008a4 c0d8      	RJMP _0x218
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5C:
0008a5 3ce6      	CPI  R30,LOW(0xC6)
0008a6 e0a0      	LDI  R26,HIGH(0xC6)
0008a7 07fa      	CPC  R31,R26
0008a8 f419      	BRNE _0x5D
0008a9 e8ec      	LDI  R30,LOW(_S_198*2)
0008aa e0f4      	LDI  R31,HIGH(_S_198*2)
0008ab c0d1      	RJMP _0x218
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5D:
0008ac 3ce7      	CPI  R30,LOW(0xC7)
0008ad e0a0      	LDI  R26,HIGH(0xC7)
0008ae 07fa      	CPC  R31,R26
0008af f419      	BRNE _0x5E
0008b0 eaec      	LDI  R30,LOW(_S_199*2)
0008b1 e0f4      	LDI  R31,HIGH(_S_199*2)
0008b2 c0ca      	RJMP _0x218
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x5E:
0008b3 3ce8      	CPI  R30,LOW(0xC8)
0008b4 e0a0      	LDI  R26,HIGH(0xC8)
0008b5 07fa      	CPC  R31,R26
0008b6 f419      	BRNE _0x5F
0008b7 ecec      	LDI  R30,LOW(_S_200*2)
0008b8 e0f4      	LDI  R31,HIGH(_S_200*2)
0008b9 c0c3      	RJMP _0x218
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x5F:
0008ba 3ce9      	CPI  R30,LOW(0xC9)
0008bb e0a0      	LDI  R26,HIGH(0xC9)
0008bc 07fa      	CPC  R31,R26
0008bd f419      	BRNE _0x60
0008be eeec      	LDI  R30,LOW(_S_201*2)
0008bf e0f4      	LDI  R31,HIGH(_S_201*2)
0008c0 c0bc      	RJMP _0x218
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x60:
0008c1 3cea      	CPI  R30,LOW(0xCA)
0008c2 e0a0      	LDI  R26,HIGH(0xCA)
0008c3 07fa      	CPC  R31,R26
0008c4 f419      	BRNE _0x61
0008c5 e0ec      	LDI  R30,LOW(_S_202*2)
0008c6 e0f5      	LDI  R31,HIGH(_S_202*2)
0008c7 c0b5      	RJMP _0x218
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x61:
0008c8 3ceb      	CPI  R30,LOW(0xCB)
0008c9 e0a0      	LDI  R26,HIGH(0xCB)
0008ca 07fa      	CPC  R31,R26
0008cb f419      	BRNE _0x62
0008cc e2ec      	LDI  R30,LOW(_S_203*2)
0008cd e0f5      	LDI  R31,HIGH(_S_203*2)
0008ce c0ae      	RJMP _0x218
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x62:
0008cf 3cec      	CPI  R30,LOW(0xCC)
0008d0 e0a0      	LDI  R26,HIGH(0xCC)
0008d1 07fa      	CPC  R31,R26
0008d2 f419      	BRNE _0x63
0008d3 e4ec      	LDI  R30,LOW(_S_204*2)
0008d4 e0f5      	LDI  R31,HIGH(_S_204*2)
0008d5 c0a7      	RJMP _0x218
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x63:
0008d6 3ced      	CPI  R30,LOW(0xCD)
0008d7 e0a0      	LDI  R26,HIGH(0xCD)
0008d8 07fa      	CPC  R31,R26
0008d9 f419      	BRNE _0x64
0008da e6ec      	LDI  R30,LOW(_S_205*2)
0008db e0f5      	LDI  R31,HIGH(_S_205*2)
0008dc c0a0      	RJMP _0x218
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x64:
0008dd 3cee      	CPI  R30,LOW(0xCE)
0008de e0a0      	LDI  R26,HIGH(0xCE)
0008df 07fa      	CPC  R31,R26
0008e0 f419      	BRNE _0x65
0008e1 e8ec      	LDI  R30,LOW(_S_206*2)
0008e2 e0f5      	LDI  R31,HIGH(_S_206*2)
0008e3 c099      	RJMP _0x218
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x65:
0008e4 3cef      	CPI  R30,LOW(0xCF)
0008e5 e0a0      	LDI  R26,HIGH(0xCF)
0008e6 07fa      	CPC  R31,R26
0008e7 f419      	BRNE _0x66
0008e8 eaec      	LDI  R30,LOW(_S_207*2)
0008e9 e0f5      	LDI  R31,HIGH(_S_207*2)
0008ea c092      	RJMP _0x218
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x66:
0008eb 3de0      	CPI  R30,LOW(0xD0)
0008ec e0a0      	LDI  R26,HIGH(0xD0)
0008ed 07fa      	CPC  R31,R26
0008ee f419      	BRNE _0x67
0008ef ecec      	LDI  R30,LOW(_S_208*2)
0008f0 e0f5      	LDI  R31,HIGH(_S_208*2)
0008f1 c08b      	RJMP _0x218
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x67:
0008f2 3de1      	CPI  R30,LOW(0xD1)
0008f3 e0a0      	LDI  R26,HIGH(0xD1)
0008f4 07fa      	CPC  R31,R26
0008f5 f419      	BRNE _0x68
0008f6 eeec      	LDI  R30,LOW(_S_209*2)
0008f7 e0f5      	LDI  R31,HIGH(_S_209*2)
0008f8 c084      	RJMP _0x218
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x68:
0008f9 3de2      	CPI  R30,LOW(0xD2)
0008fa e0a0      	LDI  R26,HIGH(0xD2)
0008fb 07fa      	CPC  R31,R26
0008fc f419      	BRNE _0x69
0008fd e0ec      	LDI  R30,LOW(_S_210*2)
0008fe e0f6      	LDI  R31,HIGH(_S_210*2)
0008ff c07d      	RJMP _0x218
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x69:
000900 3de3      	CPI  R30,LOW(0xD3)
000901 e0a0      	LDI  R26,HIGH(0xD3)
000902 07fa      	CPC  R31,R26
000903 f419      	BRNE _0x6A
000904 e2ec      	LDI  R30,LOW(_S_211*2)
000905 e0f6      	LDI  R31,HIGH(_S_211*2)
000906 c076      	RJMP _0x218
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6A:
000907 3de4      	CPI  R30,LOW(0xD4)
000908 e0a0      	LDI  R26,HIGH(0xD4)
000909 07fa      	CPC  R31,R26
00090a f419      	BRNE _0x6B
00090b e4ec      	LDI  R30,LOW(_S_212*2)
00090c e0f6      	LDI  R31,HIGH(_S_212*2)
00090d c06f      	RJMP _0x218
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6B:
00090e 3de5      	CPI  R30,LOW(0xD5)
00090f e0a0      	LDI  R26,HIGH(0xD5)
000910 07fa      	CPC  R31,R26
000911 f419      	BRNE _0x6C
000912 e6ec      	LDI  R30,LOW(_S_213*2)
000913 e0f6      	LDI  R31,HIGH(_S_213*2)
000914 c068      	RJMP _0x218
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6C:
000915 3de6      	CPI  R30,LOW(0xD6)
000916 e0a0      	LDI  R26,HIGH(0xD6)
000917 07fa      	CPC  R31,R26
000918 f419      	BRNE _0x6D
000919 e8ec      	LDI  R30,LOW(_S_214*2)
00091a e0f6      	LDI  R31,HIGH(_S_214*2)
00091b c061      	RJMP _0x218
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6D:
00091c 3de7      	CPI  R30,LOW(0xD7)
00091d e0a0      	LDI  R26,HIGH(0xD7)
00091e 07fa      	CPC  R31,R26
00091f f419      	BRNE _0x6E
000920 eaec      	LDI  R30,LOW(_S_215*2)
000921 e0f6      	LDI  R31,HIGH(_S_215*2)
000922 c05a      	RJMP _0x218
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x6E:
000923 3de8      	CPI  R30,LOW(0xD8)
000924 e0a0      	LDI  R26,HIGH(0xD8)
000925 07fa      	CPC  R31,R26
000926 f419      	BRNE _0x6F
000927 ecec      	LDI  R30,LOW(_S_216*2)
000928 e0f6      	LDI  R31,HIGH(_S_216*2)
000929 c053      	RJMP _0x218
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x6F:
00092a 3de9      	CPI  R30,LOW(0xD9)
00092b e0a0      	LDI  R26,HIGH(0xD9)
00092c 07fa      	CPC  R31,R26
00092d f419      	BRNE _0x70
00092e eeec      	LDI  R30,LOW(_S_217*2)
00092f e0f6      	LDI  R31,HIGH(_S_217*2)
000930 c04c      	RJMP _0x218
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x70:
000931 3dea      	CPI  R30,LOW(0xDA)
000932 e0a0      	LDI  R26,HIGH(0xDA)
000933 07fa      	CPC  R31,R26
000934 f419      	BRNE _0x71
000935 e0ec      	LDI  R30,LOW(_S_218*2)
000936 e0f7      	LDI  R31,HIGH(_S_218*2)
000937 c045      	RJMP _0x218
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x71:
000938 3deb      	CPI  R30,LOW(0xDB)
000939 e0a0      	LDI  R26,HIGH(0xDB)
00093a 07fa      	CPC  R31,R26
00093b f419      	BRNE _0x72
00093c e2ec      	LDI  R30,LOW(_S_219*2)
00093d e0f7      	LDI  R31,HIGH(_S_219*2)
00093e c03e      	RJMP _0x218
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x72:
00093f 3dec      	CPI  R30,LOW(0xDC)
000940 e0a0      	LDI  R26,HIGH(0xDC)
000941 07fa      	CPC  R31,R26
000942 f419      	BRNE _0x73
000943 e4ec      	LDI  R30,LOW(_S_220*2)
000944 e0f7      	LDI  R31,HIGH(_S_220*2)
000945 c037      	RJMP _0x218
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x73:
000946 3ded      	CPI  R30,LOW(0xDD)
000947 e0a0      	LDI  R26,HIGH(0xDD)
000948 07fa      	CPC  R31,R26
000949 f419      	BRNE _0x74
00094a e6ec      	LDI  R30,LOW(_S_221*2)
00094b e0f7      	LDI  R31,HIGH(_S_221*2)
00094c c030      	RJMP _0x218
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x74:
00094d 3dee      	CPI  R30,LOW(0xDE)
00094e e0a0      	LDI  R26,HIGH(0xDE)
00094f 07fa      	CPC  R31,R26
000950 f419      	BRNE _0x75
000951 e8ec      	LDI  R30,LOW(_S_222*2)
000952 e0f7      	LDI  R31,HIGH(_S_222*2)
000953 c029      	RJMP _0x218
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x75:
000954 3def      	CPI  R30,LOW(0xDF)
000955 e0a0      	LDI  R26,HIGH(0xDF)
000956 07fa      	CPC  R31,R26
000957 f419      	BRNE _0x76
000958 eaec      	LDI  R30,LOW(_S_223*2)
000959 e0f7      	LDI  R31,HIGH(_S_223*2)
00095a c022      	RJMP _0x218
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x76:
00095b 32ee      	CPI  R30,LOW(0x2E)
00095c e0a0      	LDI  R26,HIGH(0x2E)
00095d 07fa      	CPC  R31,R26
00095e f419      	BRNE _0x77
00095f eaec      	LDI  R30,LOW(_S_46*2)
000960 e0f0      	LDI  R31,HIGH(_S_46*2)
000961 c01b      	RJMP _0x218
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x77:
000962 32e0      	CPI  R30,LOW(0x20)
000963 e0a0      	LDI  R26,HIGH(0x20)
000964 07fa      	CPC  R31,R26
000965 f419      	BRNE _0x78
000966 e4ec      	LDI  R30,LOW(_S_32*2)
000967 e0f2      	LDI  R31,HIGH(_S_32*2)
000968 c014      	RJMP _0x218
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x78:
000969 30e1      	CPI  R30,LOW(0x1)
00096a e0a0      	LDI  R26,HIGH(0x1)
00096b 07fa      	CPC  R31,R26
00096c f419      	BRNE _0x79
00096d ecec      	LDI  R30,LOW(_S_UP*2)
00096e e0f0      	LDI  R31,HIGH(_S_UP*2)
00096f c00d      	RJMP _0x218
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x79:
000970 30e2      	CPI  R30,LOW(0x2)
000971 e0a0      	LDI  R26,HIGH(0x2)
000972 07fa      	CPC  R31,R26
000973 f419      	BRNE _0x7A
000974 eeec      	LDI  R30,LOW(_S_DOWN*2)
000975 e0f0      	LDI  R31,HIGH(_S_DOWN*2)
000976 c006      	RJMP _0x218
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7A:
000977 30e3      	CPI  R30,LOW(0x3)
000978 e0a0      	LDI  R26,HIGH(0x3)
000979 07fa      	CPC  R31,R26
00097a f4a9      	BRNE _0x41
00097b e8ec      	LDI  R30,LOW(_blank_symb*2)
00097c e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x218:
00097d 93fa      	ST   -Y,R31
00097e 93ea      	ST   -Y,R30
00097f 85e8      	LDD  R30,Y+8
000980 85f9      	LDD  R31,Y+8+1
000981 93fa      	ST   -Y,R31
000982 93ea      	ST   -Y,R30
000983 85e8      	LDD  R30,Y+8
000984 85f9      	LDD  R31,Y+8+1
000985 93fa      	ST   -Y,R31
000986 93ea      	ST   -Y,R30
000987 85e8      	LDD  R30,Y+8
000988 85f9      	LDD  R31,Y+8+1
000989 93fa      	ST   -Y,R31
00098a 93ea      	ST   -Y,R30
00098b 85e8      	LDD  R30,Y+8
00098c 85f9      	LDD  R31,Y+8+1
00098d 93fa      	ST   -Y,R31
00098e 93ea      	ST   -Y,R30
00098f de19      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x41:
                 ;}
000990 9629      	ADIW R28,9
000991 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7C:
000992 85a8      	LDD  R26,Y+8
000993 85b9      	LDD  R27,Y+8+1
000994 91ec      	LD   R30,X
000995 30e0      	CPI  R30,0
000996 f0d9      	BREQ _0x7E
000997 91ed      	LD   R30,X+
000998 87a8      	STD  Y+8,R26
000999 87b9      	STD  Y+8+1,R27
00099a 93ea      	ST   -Y,R30
00099b 81ef      	LDD  R30,Y+7
00099c 85f8      	LDD  R31,Y+7+1
00099d 93fa      	ST   -Y,R31
00099e 93ea      	ST   -Y,R30
00099f 81ef      	LDD  R30,Y+7
0009a0 85f8      	LDD  R31,Y+7+1
0009a1 93fa      	ST   -Y,R31
0009a2 93ea      	ST   -Y,R30
0009a3 81ef      	LDD  R30,Y+7
0009a4 85f8      	LDD  R31,Y+7+1
0009a5 93fa      	ST   -Y,R31
0009a6 93ea      	ST   -Y,R30
0009a7 81ef      	LDD  R30,Y+7
0009a8 85f8      	LDD  R31,Y+7+1
0009a9 93fa      	ST   -Y,R31
0009aa 93ea      	ST   -Y,R30
0009ab de3a      	RCALL _SSD1963_PutChar16
0009ac 81ee      	LDD  R30,Y+6
0009ad 81ff      	LDD  R31,Y+6+1
0009ae 9670      	ADIW R30,16
0009af 83ee      	STD  Y+6,R30
0009b0 83ff      	STD  Y+6+1,R31
0009b1 cfe0      	RJMP _0x7C
                 _0x7E:
                 ;}
0009b2 962a      	ADIW R28,10
0009b3 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutValue16:
                 ;  char strVal[5] = {'0', '0', ' ', ' ', ' '};
                 ;  char i=0;
                 ;  while(Value)
0009b4 9725      	SBIW R28,5
0009b5 e3e0      	LDI  R30,LOW(48)
0009b6 83e8      	ST   Y,R30
0009b7 83e9      	STD  Y+1,R30
0009b8 e2e0      	LDI  R30,LOW(32)
0009b9 83ea      	STD  Y+2,R30
0009ba 83eb      	STD  Y+3,R30
0009bb 83ec      	STD  Y+4,R30
0009bc 931a      	ST   -Y,R17
                 ;	Value -> Y+15
                 ;	X -> Y+13
                 ;	Y -> Y+11
                 ;	N -> Y+10
                 ;	Color -> Y+8
                 ;	BackColor -> Y+6
                 ;	strVal -> Y+1
                 ;	i -> R17
0009bd e010      	LDI  R17,0
                 _0x7F:
0009be 85ef      	LDD  R30,Y+15
0009bf 89f8      	LDD  R31,Y+15+1
0009c0 9730      	SBIW R30,0
0009c1 f0d1      	BREQ _0x81
                 ;  {
                 ;      strVal[i] = (Value%10) + 48;
0009c2 2fe1      	MOV  R30,R17
0009c3 e0f0      	LDI  R31,0
0009c4 01de      	MOVW R26,R28
0009c5 9611      	ADIW R26,1
0009c6 0fea      	ADD  R30,R26
0009c7 1ffb      	ADC  R31,R27
0009c8 01bf      	MOVW R22,R30
0009c9 85af      	LDD  R26,Y+15
0009ca 89b8      	LDD  R27,Y+15+1
0009cb e0ea      	LDI  R30,LOW(10)
0009cc e0f0      	LDI  R31,HIGH(10)
0009cd 940e 20b8 	CALL __MODW21U
0009cf 5de0      	SUBI R30,-LOW(48)
0009d0 01db      	MOVW R26,R22
0009d1 93ec      	ST   X,R30
                 ;      Value /= 10;
0009d2 85af      	LDD  R26,Y+15
0009d3 89b8      	LDD  R27,Y+15+1
0009d4 e0ea      	LDI  R30,LOW(10)
0009d5 e0f0      	LDI  R31,HIGH(10)
0009d6 940e 207b 	CALL __DIVW21U
0009d8 87ef      	STD  Y+15,R30
0009d9 8bf8      	STD  Y+15+1,R31
                 ;      i++;
0009da 5f1f      	SUBI R17,-1
                 ;  }
0009db cfe2      	RJMP _0x7F
                 _0x81:
                 ;
                 ;  while(N)
                 _0x82:
0009dc 85ea      	LDD  R30,Y+10
0009dd 30e0      	CPI  R30,0
0009de f101      	BREQ _0x84
                 ;  {
                 ;      --N;
0009df 50e1      	SUBI R30,LOW(1)
0009e0 87ea      	STD  Y+10,R30
                 ;      SSD1963_PutChar16(strVal[N], X, Y, Color, BackColor);
0009e1 e0f0      	LDI  R31,0
0009e2 01de      	MOVW R26,R28
0009e3 9611      	ADIW R26,1
0009e4 0fae      	ADD  R26,R30
0009e5 1fbf      	ADC  R27,R31
0009e6 91ec      	LD   R30,X
0009e7 93ea      	ST   -Y,R30
0009e8 85ee      	LDD  R30,Y+14
0009e9 85ff      	LDD  R31,Y+14+1
0009ea 93fa      	ST   -Y,R31
0009eb 93ea      	ST   -Y,R30
0009ec 85ee      	LDD  R30,Y+14
0009ed 85ff      	LDD  R31,Y+14+1
0009ee 93fa      	ST   -Y,R31
0009ef 93ea      	ST   -Y,R30
0009f0 85ed      	LDD  R30,Y+13
0009f1 85fe      	LDD  R31,Y+13+1
0009f2 93fa      	ST   -Y,R31
0009f3 93ea      	ST   -Y,R30
0009f4 85ed      	LDD  R30,Y+13
0009f5 85fe      	LDD  R31,Y+13+1
0009f6 93fa      	ST   -Y,R31
0009f7 93ea      	ST   -Y,R30
0009f8 dded      	RCALL _SSD1963_PutChar16
                 ;      X += FONT_WIDTH;
0009f9 85ed      	LDD  R30,Y+13
0009fa 85fe      	LDD  R31,Y+13+1
0009fb 9670      	ADIW R30,16
0009fc 87ed      	STD  Y+13,R30
0009fd 87fe      	STD  Y+13+1,R31
                 ;  }
0009fe cfdd      	RJMP _0x82
                 _0x84:
                 ;}
0009ff 8118      	LDD  R17,Y+0
000a00 9661      	ADIW R28,17
000a01 9508      	RET
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000a02 9728      	SBIW R28,8
000a03 931a      	ST   -Y,R17
000a04 930a      	ST   -Y,R16
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
000a05 89ea      	LDD  R30,Y+18
000a06 89fb      	LDD  R31,Y+18+1
000a07 93fa      	ST   -Y,R31
000a08 93ea      	ST   -Y,R30
000a09 89ea      	LDD  R30,Y+18
000a0a 89fb      	LDD  R31,Y+18+1
000a0b 93fa      	ST   -Y,R31
000a0c 93ea      	ST   -Y,R30
000a0d 89ea      	LDD  R30,Y+18
000a0e 89fb      	LDD  R31,Y+18+1
000a0f 93fa      	ST   -Y,R31
000a10 93ea      	ST   -Y,R30
000a11 89ea      	LDD  R30,Y+18
000a12 89fb      	LDD  R31,Y+18+1
000a13 93fa      	ST   -Y,R31
000a14 93ea      	ST   -Y,R30
000a15 dd3c      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
000a16 e2ec      	LDI  R30,LOW(44)
000a17 93ea      	ST   -Y,R30
000a18 dc3c      	RCALL _SSD1963_WriteCmd
                 ;  j = StopX - StartX + 1;
000a19 89aa      	LDD  R26,Y+18
000a1a 89bb      	LDD  R27,Y+18+1
000a1b 89e8      	LDD  R30,Y+16
000a1c 89f9      	LDD  R31,Y+16+1
000a1d 1bea      	SUB  R30,R26
000a1e 0bfb      	SBC  R31,R27
000a1f 9631      	ADIW R30,1
000a20 018f      	MOVW R16,R30
                 ;  if (j < 0) j *= -1;
000a21 2311      	TST  R17
000a22 f432      	BRPL _0x85
000a23 01f8      	MOVW R30,R16
000a24 efaf      	LDI  R26,LOW(65535)
000a25 efbf      	LDI  R27,HIGH(65535)
000a26 940e 2071 	CALL __MULW12
000a28 018f      	MOVW R16,R30
                 ;  k = StopY - StartY + 1;
                 _0x85:
000a29 85ae      	LDD  R26,Y+14
000a2a 85bf      	LDD  R27,Y+14+1
000a2b 85ec      	LDD  R30,Y+12
000a2c 85fd      	LDD  R31,Y+12+1
000a2d 1bea      	SUB  R30,R26
000a2e 0bfb      	SBC  R31,R27
000a2f 9631      	ADIW R30,1
000a30 2766      	CLR  R22
000a31 2777      	CLR  R23
                +
000a32 83ea     +STD Y + 2 , R30
000a33 83fb     +STD Y + 2 + 1 , R31
000a34 836c     +STD Y + 2 + 2 , R22
000a35 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ;  if (k < 0) k *= -1;
000a36 81ad      	LDD  R26,Y+5
000a37 23aa      	TST  R26
000a38 f452      	BRPL _0x86
                +
000a39 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
000a3a efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
000a3b ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
000a3c ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
000a3d 940e 2076 	CALL __MULD12
                +
000a3f 83ea     +STD Y + 2 , R30
000a40 83fb     +STD Y + 2 + 1 , R31
000a41 836c     +STD Y + 2 + 2 , R22
000a42 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ;  k = k * j;
                 _0x86:
000a43 01f8      	MOVW R30,R16
                +
000a44 81aa     +LDD R26 , Y + 2
000a45 81bb     +LDD R27 , Y + 2 + 1
000a46 818c     +LDD R24 , Y + 2 + 2
000a47 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000a48 940e 2044 	CALL __CWD1
000a4a 940e 2076 	CALL __MULD12
                +
000a4c 83ea     +STD Y + 2 , R30
000a4d 83fb     +STD Y + 2 + 1 , R31
000a4e 836c     +STD Y + 2 + 2 , R22
000a4f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
000a50 e0e0      	LDI  R30,LOW(0)
                +
000a51 83ee     +STD Y + 6 , R30
000a52 83ef     +STD Y + 6 + 1 , R30
000a53 87e8     +STD Y + 6 + 2 , R30
000a54 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
                 _0x88:
                +
000a55 81ea     +LDD R30 , Y + 2
000a56 81fb     +LDD R31 , Y + 2 + 1
000a57 816c     +LDD R22 , Y + 2 + 2
000a58 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000a59 81ae     +LDD R26 , Y + 6
000a5a 81bf     +LDD R27 , Y + 6 + 1
000a5b 8588     +LDD R24 , Y + 6 + 2
000a5c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000a5d 940e 2117 	CALL __CPD21
000a5f f494      	BRGE _0x89
000a60 85ea      	LDD  R30,Y+10
000a61 85fb      	LDD  R31,Y+10+1
000a62 93fa      	ST   -Y,R31
000a63 93ea      	ST   -Y,R30
000a64 dc11      	RCALL _SSD1963_WriteData_b16
                +
000a65 81ee     +LDD R30 , Y + 6
000a66 81ff     +LDD R31 , Y + 6 + 1
000a67 8568     +LDD R22 , Y + 6 + 2
000a68 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000a69 5fef     +SUBI R30 , LOW ( - 1 )
000a6a 4fff     +SBCI R31 , HIGH ( - 1 )
000a6b 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000a6c 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000a6d 83ee     +STD Y + 6 , R30
000a6e 83ff     +STD Y + 6 + 1 , R31
000a6f 8768     +STD Y + 6 + 2 , R22
000a70 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000a71 cfe3      	RJMP _0x88
                 _0x89:
000a72 c196      	RJMP _0x2020009
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
000a73 972a      	SBIW R28,10
000a74 940e 211c 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
000a76 8da9      	LDD  R26,Y+25
000a77 8dba      	LDD  R27,Y+25+1
000a78 89ef      	LDD  R30,Y+23
000a79 8df8      	LDD  R31,Y+23+1
000a7a 1bea      	SUB  R30,R26
000a7b 0bfb      	SBC  R31,R27
000a7c 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
000a7d 2355      	TST  R21
000a7e f432      	BRPL _0x8A
000a7f 01fa      	MOVW R30,R20
000a80 efaf      	LDI  R26,LOW(65535)
000a81 efbf      	LDI  R27,HIGH(65535)
000a82 940e 2071 	CALL __MULW12
000a84 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x8A:
000a85 89ad      	LDD  R26,Y+21
000a86 89be      	LDD  R27,Y+21+1
000a87 89eb      	LDD  R30,Y+19
000a88 89fc      	LDD  R31,Y+19+1
000a89 1bea      	SUB  R30,R26
000a8a 0bfb      	SBC  R31,R27
000a8b 87ee      	STD  Y+14,R30
000a8c 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
000a8d 85af      	LDD  R26,Y+15
000a8e 23aa      	TST  R26
000a8f f432      	BRPL _0x8B
000a90 efaf      	LDI  R26,LOW(65535)
000a91 efbf      	LDI  R27,HIGH(65535)
000a92 940e 2071 	CALL __MULW12
000a94 87ee      	STD  Y+14,R30
000a95 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x8B:
000a96 89ef      	LDD  R30,Y+23
000a97 8df8      	LDD  R31,Y+23+1
000a98 8da9      	LDD  R26,Y+25
000a99 8dba      	LDD  R27,Y+25+1
000a9a 17ae      	CP   R26,R30
000a9b 07bf      	CPC  R27,R31
000a9c f418      	BRSH _0x8C
000a9d e0e1      	LDI  R30,LOW(1)
000a9e e0f0      	LDI  R31,HIGH(1)
000a9f c002      	RJMP _0x8D
                 _0x8C:
000aa0 efef      	LDI  R30,LOW(65535)
000aa1 efff      	LDI  R31,HIGH(65535)
                 _0x8D:
000aa2 87ec      	STD  Y+12,R30
000aa3 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
000aa4 89eb      	LDD  R30,Y+19
000aa5 89fc      	LDD  R31,Y+19+1
000aa6 89ad      	LDD  R26,Y+21
000aa7 89be      	LDD  R27,Y+21+1
000aa8 17ae      	CP   R26,R30
000aa9 07bf      	CPC  R27,R31
000aaa f418      	BRSH _0x8F
000aab e0e1      	LDI  R30,LOW(1)
000aac e0f0      	LDI  R31,HIGH(1)
000aad c002      	RJMP _0x90
                 _0x8F:
000aae efef      	LDI  R30,LOW(65535)
000aaf efff      	LDI  R31,HIGH(65535)
                 _0x90:
000ab0 87ea      	STD  Y+10,R30
000ab1 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
000ab2 85ae      	LDD  R26,Y+14
000ab3 85bf      	LDD  R27,Y+14+1
000ab4 01fa      	MOVW R30,R20
000ab5 1bea      	SUB  R30,R26
000ab6 0bfb      	SBC  R31,R27
000ab7 87e8      	STD  Y+8,R30
000ab8 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x92:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
000ab9 8de9      	LDD  R30,Y+25
000aba 8dfa      	LDD  R31,Y+25+1
000abb 93fa      	ST   -Y,R31
000abc 93ea      	ST   -Y,R30
000abd 89ea      	LDD  R30,Y+18
000abe e0f0      	LDI  R31,0
000abf 8dab      	LDD  R26,Y+27
000ac0 8dbc      	LDD  R27,Y+27+1
000ac1 0fea      	ADD  R30,R26
000ac2 1ffb      	ADC  R31,R27
000ac3 93fa      	ST   -Y,R31
000ac4 93ea      	ST   -Y,R30
000ac5 8de9      	LDD  R30,Y+25
000ac6 8dfa      	LDD  R31,Y+25+1
000ac7 93fa      	ST   -Y,R31
000ac8 93ea      	ST   -Y,R30
000ac9 89ee      	LDD  R30,Y+22
000aca e0f0      	LDI  R31,0
000acb 8dab      	LDD  R26,Y+27
000acc 8dbc      	LDD  R27,Y+27+1
000acd 0fea      	ADD  R30,R26
000ace 1ffb      	ADC  R31,R27
000acf 93fa      	ST   -Y,R31
000ad0 93ea      	ST   -Y,R30
000ad1 dc80      	RCALL _SSD1963_SetArea
                 ;    SSD1963_WriteCmd(0x2c);
000ad2 e2ec      	LDI  R30,LOW(44)
000ad3 93ea      	ST   -Y,R30
000ad4 940e 0655 	CALL _SSD1963_WriteCmd
                 ;    k = Width * Width;
000ad6 89a8      	LDD  R26,Y+16
000ad7 27bb      	CLR  R27
000ad8 89e8      	LDD  R30,Y+16
000ad9 e0f0      	LDI  R31,0
000ada 940e 2071 	CALL __MULW12
000adc 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
000add e000     +LDI R16 , LOW ( 0 )
000ade e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x96:
                +
000adf 1720     +CP R18 , R16
000ae0 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000ae1 f044      	BRLT _0x97
000ae2 89e9      	LDD  R30,Y+17
000ae3 89fa      	LDD  R31,Y+17+1
000ae4 93fa      	ST   -Y,R31
000ae5 93ea      	ST   -Y,R30
000ae6 db8f      	RCALL _SSD1963_WriteData_b16
                +
000ae7 5f0f     +SUBI R16 , LOW ( - 1 )
000ae8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ae9 cff5      	RJMP _0x96
                 _0x97:
000aea 89ef      	LDD  R30,Y+23
000aeb 8df8      	LDD  R31,Y+23+1
000aec 8da9      	LDD  R26,Y+25
000aed 8dba      	LDD  R27,Y+25+1
000aee 17ea      	CP   R30,R26
000aef 07fb      	CPC  R31,R27
000af0 f439      	BRNE _0x99
000af1 89eb      	LDD  R30,Y+19
000af2 89fc      	LDD  R31,Y+19+1
000af3 89ad      	LDD  R26,Y+21
000af4 89be      	LDD  R27,Y+21+1
000af5 17ea      	CP   R30,R26
000af6 07fb      	CPC  R31,R27
000af7 f009      	BREQ _0x9A
                 _0x99:
000af8 c001      	RJMP _0x98
                 _0x9A:
                 ;		break;
000af9 c034      	RJMP _0x94
                 ;
                 ;		error2 = error * 2;
                 _0x98:
000afa 85e8      	LDD  R30,Y+8
000afb 85f9      	LDD  R31,Y+8+1
000afc 0fee      	LSL  R30
000afd 1fff      	ROL  R31
000afe 83ee      	STD  Y+6,R30
000aff 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
000b00 85ee      	LDD  R30,Y+14
000b01 85ff      	LDD  R31,Y+14+1
000b02 940e 2027 	CALL __ANEGW1
000b04 81ae      	LDD  R26,Y+6
000b05 81bf      	LDD  R27,Y+6+1
000b06 17ea      	CP   R30,R26
000b07 07fb      	CPC  R31,R27
000b08 f484      	BRGE _0x9B
                 ;		{
                 ;			error -= deltaY;
000b09 85ae      	LDD  R26,Y+14
000b0a 85bf      	LDD  R27,Y+14+1
000b0b 85e8      	LDD  R30,Y+8
000b0c 85f9      	LDD  R31,Y+8+1
000b0d 1bea      	SUB  R30,R26
000b0e 0bfb      	SBC  R31,R27
000b0f 87e8      	STD  Y+8,R30
000b10 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
000b11 85ec      	LDD  R30,Y+12
000b12 85fd      	LDD  R31,Y+12+1
000b13 8da9      	LDD  R26,Y+25
000b14 8dba      	LDD  R27,Y+25+1
000b15 0fea      	ADD  R30,R26
000b16 1ffb      	ADC  R31,R27
000b17 8fe9      	STD  Y+25,R30
000b18 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0x9B:
000b19 81ae      	LDD  R26,Y+6
000b1a 81bf      	LDD  R27,Y+6+1
000b1b 17a4      	CP   R26,R20
000b1c 07b5      	CPC  R27,R21
000b1d f47c      	BRGE _0x9C
                 ;		{
                 ;			error += deltaX;
000b1e 01fa      	MOVW R30,R20
000b1f 85a8      	LDD  R26,Y+8
000b20 85b9      	LDD  R27,Y+8+1
000b21 0fea      	ADD  R30,R26
000b22 1ffb      	ADC  R31,R27
000b23 87e8      	STD  Y+8,R30
000b24 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
000b25 85ea      	LDD  R30,Y+10
000b26 85fb      	LDD  R31,Y+10+1
000b27 89ad      	LDD  R26,Y+21
000b28 89be      	LDD  R27,Y+21+1
000b29 0fea      	ADD  R30,R26
000b2a 1ffb      	ADC  R31,R27
000b2b 8bed      	STD  Y+21,R30
000b2c 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0x9C:
000b2d cf8b      	RJMP _0x92
                 _0x94:
                 ;}
000b2e 940e 2123 	CALL __LOADLOCR6
000b30 966b      	ADIW R28,27
000b31 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
000b32 85ea      	LDD  R30,Y+10
000b33 85fb      	LDD  R31,Y+10+1
000b34 93fa      	ST   -Y,R31
000b35 93ea      	ST   -Y,R30
000b36 85ea      	LDD  R30,Y+10
000b37 85fb      	LDD  R31,Y+10+1
000b38 93fa      	ST   -Y,R31
000b39 93ea      	ST   -Y,R30
000b3a 85ea      	LDD  R30,Y+10
000b3b 85fb      	LDD  R31,Y+10+1
000b3c 93fa      	ST   -Y,R31
000b3d 93ea      	ST   -Y,R30
000b3e 85e8      	LDD  R30,Y+8
000b3f 85f9      	LDD  R31,Y+8+1
000b40 85ac      	LDD  R26,Y+12
000b41 85bd      	LDD  R27,Y+12+1
000b42 0fea      	ADD  R30,R26
000b43 1ffb      	ADC  R31,R27
000b44 93fa      	ST   -Y,R31
000b45 93ea      	ST   -Y,R30
000b46 85e8      	LDD  R30,Y+8
000b47 85f9      	LDD  R31,Y+8+1
000b48 93fa      	ST   -Y,R31
000b49 93ea      	ST   -Y,R30
000b4a deb7      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
000b4b 85ea      	LDD  R30,Y+10
000b4c 85fb      	LDD  R31,Y+10+1
000b4d 93fa      	ST   -Y,R31
000b4e 93ea      	ST   -Y,R30
000b4f 81ec      	LDD  R30,Y+4
000b50 81fd      	LDD  R31,Y+4+1
000b51 85ac      	LDD  R26,Y+12
000b52 85bd      	LDD  R27,Y+12+1
000b53 0fea      	ADD  R30,R26
000b54 1ffb      	ADC  R31,R27
000b55 93fa      	ST   -Y,R31
000b56 93ea      	ST   -Y,R30
000b57 85ea      	LDD  R30,Y+10
000b58 85fb      	LDD  R31,Y+10+1
000b59 93fa      	ST   -Y,R31
000b5a 93ea      	ST   -Y,R30
000b5b 85ea      	LDD  R30,Y+10
000b5c 85fb      	LDD  R31,Y+10+1
000b5d 93fa      	ST   -Y,R31
000b5e 93ea      	ST   -Y,R30
000b5f 85e8      	LDD  R30,Y+8
000b60 85f9      	LDD  R31,Y+8+1
000b61 93fa      	ST   -Y,R31
000b62 93ea      	ST   -Y,R30
000b63 de9e      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
000b64 85ea      	LDD  R30,Y+10
000b65 85fb      	LDD  R31,Y+10+1
000b66 93fa      	ST   -Y,R31
000b67 93ea      	ST   -Y,R30
000b68 85ea      	LDD  R30,Y+10
000b69 85fb      	LDD  R31,Y+10+1
000b6a 93fa      	ST   -Y,R31
000b6b 93ea      	ST   -Y,R30
000b6c 81ae      	LDD  R26,Y+6
000b6d 81bf      	LDD  R27,Y+6+1
000b6e 85e8      	LDD  R30,Y+8
000b6f 85f9      	LDD  R31,Y+8+1
000b70 1bea      	SUB  R30,R26
000b71 0bfb      	SBC  R31,R27
000b72 93fa      	ST   -Y,R31
000b73 93ea      	ST   -Y,R30
000b74 85ea      	LDD  R30,Y+10
000b75 85fb      	LDD  R31,Y+10+1
000b76 93fa      	ST   -Y,R31
000b77 93ea      	ST   -Y,R30
000b78 85e8      	LDD  R30,Y+8
000b79 85f9      	LDD  R31,Y+8+1
000b7a 93fa      	ST   -Y,R31
000b7b 93ea      	ST   -Y,R30
000b7c de85      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
000b7d 81aa      	LDD  R26,Y+2
000b7e 81bb      	LDD  R27,Y+2+1
000b7f 85e8      	LDD  R30,Y+8
000b80 85f9      	LDD  R31,Y+8+1
000b81 1bea      	SUB  R30,R26
000b82 0bfb      	SBC  R31,R27
000b83 93fa      	ST   -Y,R31
000b84 93ea      	ST   -Y,R30
000b85 85ea      	LDD  R30,Y+10
000b86 85fb      	LDD  R31,Y+10+1
000b87 93fa      	ST   -Y,R31
000b88 93ea      	ST   -Y,R30
000b89 85ea      	LDD  R30,Y+10
000b8a 85fb      	LDD  R31,Y+10+1
000b8b 93fa      	ST   -Y,R31
000b8c 93ea      	ST   -Y,R30
000b8d 85ea      	LDD  R30,Y+10
000b8e 85fb      	LDD  R31,Y+10+1
000b8f 93fa      	ST   -Y,R31
000b90 93ea      	ST   -Y,R30
000b91 85e8      	LDD  R30,Y+8
000b92 85f9      	LDD  R31,Y+8+1
000b93 93fa      	ST   -Y,R31
000b94 93ea      	ST   -Y,R30
000b95 de6c      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x202000A:
000b96 962c      	ADIW R28,12
000b97 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
000b98 9728      	SBIW R28,8
000b99 931a      	ST   -Y,R17
000b9a 930a      	ST   -Y,R16
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
000b9b 89ea      	LDD  R30,Y+18
000b9c 89fb      	LDD  R31,Y+18+1
000b9d 93fa      	ST   -Y,R31
000b9e 93ea      	ST   -Y,R30
000b9f 89ea      	LDD  R30,Y+18
000ba0 89fb      	LDD  R31,Y+18+1
000ba1 93fa      	ST   -Y,R31
000ba2 93ea      	ST   -Y,R30
000ba3 89ea      	LDD  R30,Y+18
000ba4 89fb      	LDD  R31,Y+18+1
000ba5 93fa      	ST   -Y,R31
000ba6 93ea      	ST   -Y,R30
000ba7 89ea      	LDD  R30,Y+18
000ba8 89fb      	LDD  R31,Y+18+1
000ba9 93fa      	ST   -Y,R31
000baa 93ea      	ST   -Y,R30
000bab dba6      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
000bac e2ec      	LDI  R30,LOW(44)
000bad 93ea      	ST   -Y,R30
000bae 940e 0655 	CALL _SSD1963_WriteCmd
                 ;  j = StopX - StartX + 1;
000bb0 89aa      	LDD  R26,Y+18
000bb1 89bb      	LDD  R27,Y+18+1
000bb2 89e8      	LDD  R30,Y+16
000bb3 89f9      	LDD  R31,Y+16+1
000bb4 1bea      	SUB  R30,R26
000bb5 0bfb      	SBC  R31,R27
000bb6 9631      	ADIW R30,1
000bb7 018f      	MOVW R16,R30
                 ;  if (j < 0) j *= -1;
000bb8 2311      	TST  R17
000bb9 f432      	BRPL _0x9D
000bba 01f8      	MOVW R30,R16
000bbb efaf      	LDI  R26,LOW(65535)
000bbc efbf      	LDI  R27,HIGH(65535)
000bbd 940e 2071 	CALL __MULW12
000bbf 018f      	MOVW R16,R30
                 ;  k = StopY - StartY + 1;
                 _0x9D:
000bc0 85ae      	LDD  R26,Y+14
000bc1 85bf      	LDD  R27,Y+14+1
000bc2 85ec      	LDD  R30,Y+12
000bc3 85fd      	LDD  R31,Y+12+1
000bc4 1bea      	SUB  R30,R26
000bc5 0bfb      	SBC  R31,R27
000bc6 9631      	ADIW R30,1
000bc7 2766      	CLR  R22
000bc8 2777      	CLR  R23
                +
000bc9 83ea     +STD Y + 2 , R30
000bca 83fb     +STD Y + 2 + 1 , R31
000bcb 836c     +STD Y + 2 + 2 , R22
000bcc 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ;  if (k < 0) k *= -1;
000bcd 81ad      	LDD  R26,Y+5
000bce 23aa      	TST  R26
000bcf f452      	BRPL _0x9E
                +
000bd0 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
000bd1 efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
000bd2 ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
000bd3 ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
000bd4 940e 2076 	CALL __MULD12
                +
000bd6 83ea     +STD Y + 2 , R30
000bd7 83fb     +STD Y + 2 + 1 , R31
000bd8 836c     +STD Y + 2 + 2 , R22
000bd9 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ;  k = k * j;
                 _0x9E:
000bda 01f8      	MOVW R30,R16
                +
000bdb 81aa     +LDD R26 , Y + 2
000bdc 81bb     +LDD R27 , Y + 2 + 1
000bdd 818c     +LDD R24 , Y + 2 + 2
000bde 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000bdf 940e 2044 	CALL __CWD1
000be1 940e 2076 	CALL __MULD12
                +
000be3 83ea     +STD Y + 2 , R30
000be4 83fb     +STD Y + 2 + 1 , R31
000be5 836c     +STD Y + 2 + 2 , R22
000be6 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
000be7 e0e0      	LDI  R30,LOW(0)
                +
000be8 83ee     +STD Y + 6 , R30
000be9 83ef     +STD Y + 6 + 1 , R30
000bea 87e8     +STD Y + 6 + 2 , R30
000beb 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
                 _0xA0:
                +
000bec 81ea     +LDD R30 , Y + 2
000bed 81fb     +LDD R31 , Y + 2 + 1
000bee 816c     +LDD R22 , Y + 2 + 2
000bef 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000bf0 81ae     +LDD R26 , Y + 6
000bf1 81bf     +LDD R27 , Y + 6 + 1
000bf2 8588     +LDD R24 , Y + 6 + 2
000bf3 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000bf4 940e 2117 	CALL __CPD21
000bf6 f494      	BRGE _0xA1
000bf7 85ea      	LDD  R30,Y+10
000bf8 85fb      	LDD  R31,Y+10+1
000bf9 93fa      	ST   -Y,R31
000bfa 93ea      	ST   -Y,R30
000bfb da7a      	RCALL _SSD1963_WriteData_b16
                +
000bfc 81ee     +LDD R30 , Y + 6
000bfd 81ff     +LDD R31 , Y + 6 + 1
000bfe 8568     +LDD R22 , Y + 6 + 2
000bff 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000c00 5fef     +SUBI R30 , LOW ( - 1 )
000c01 4fff     +SBCI R31 , HIGH ( - 1 )
000c02 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000c03 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000c04 83ee     +STD Y + 6 , R30
000c05 83ff     +STD Y + 6 + 1 , R31
000c06 8768     +STD Y + 6 + 2 , R22
000c07 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000c08 cfe3      	RJMP _0xA0
                 _0xA1:
                 _0x2020009:
000c09 8119      	LDD  R17,Y+1
000c0a 8108      	LDD  R16,Y+0
000c0b 9664      	ADIW R28,20
000c0c 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#pragma used-
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;void TSC2046_PortInit(void)
                 ; 0000 001C {
                 _TSC2046_PortInit:
                 ;  DDRE |= 0b00000100;
000c0d 9a12      	SBI  0x2,2
                 ;  DDRE &= 0b11110111;
000c0e 9813      	CBI  0x2,3
                 ;}
000c0f 9508      	RET
                 ;
                 ;#pragma used+
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ;{
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000c10 931a      	ST   -Y,R17
000c11 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000c12 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000c13 e0e1      	LDI  R30,LOW(1)
000c14 e0f0      	LDI  R31,HIGH(1)
000c15 93fa      	ST   -Y,R31
000c16 93ea      	ST   -Y,R30
000c17 940e 1f3d 	CALL _delay_ms
                 ;  spi(0b11010011);
000c19 ede3      	LDI  R30,LOW(211)
000c1a 93ea      	ST   -Y,R30
000c1b 940e 1f36 	CALL _spi
                 ;  delay_us(100);
                +
000c1d e980     +LDI R24 , LOW ( 400 )
000c1e e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000c1f 9701     +SBIW R24 , 1
000c20 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  res = spi(0x00);
000c21 e0e0      	LDI  R30,LOW(0)
000c22 93ea      	ST   -Y,R30
000c23 940e 1f36 	CALL _spi
000c25 2f0e      	MOV  R16,R30
000c26 2711      	CLR  R17
                 ;  res = res << 8;
000c27 2f10      	MOV  R17,R16
000c28 2700      	CLR  R16
                 ;  res += spi(0x00);
000c29 e0e0      	LDI  R30,LOW(0)
000c2a 93ea      	ST   -Y,R30
000c2b 940e 1f36 	CALL _spi
000c2d e0f0      	LDI  R31,0
                +
000c2e 0f0e     +ADD R16 , R30
000c2f 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
000c30 9a1a      	SBI  0x3,2
                 ;  return res;
000c31 01f8      	MOVW R30,R16
000c32 c109      	RJMP _0x2020008
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000c33 931a      	ST   -Y,R17
000c34 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000c35 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000c36 e0e1      	LDI  R30,LOW(1)
000c37 e0f0      	LDI  R31,HIGH(1)
000c38 93fa      	ST   -Y,R31
000c39 93ea      	ST   -Y,R30
000c3a 940e 1f3d 	CALL _delay_ms
                 ;  spi(0b10010011);
000c3c e9e3      	LDI  R30,LOW(147)
000c3d 93ea      	ST   -Y,R30
000c3e 940e 1f36 	CALL _spi
                 ;  delay_us(100);
                +
000c40 e980     +LDI R24 , LOW ( 400 )
000c41 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000c42 9701     +SBIW R24 , 1
000c43 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  res = spi(0x00);
000c44 e0e0      	LDI  R30,LOW(0)
000c45 93ea      	ST   -Y,R30
000c46 940e 1f36 	CALL _spi
000c48 2f0e      	MOV  R16,R30
000c49 2711      	CLR  R17
                 ;  res = res << 8;
000c4a 2f10      	MOV  R17,R16
000c4b 2700      	CLR  R16
                 ;  res += spi(0x00);
000c4c e0e0      	LDI  R30,LOW(0)
000c4d 93ea      	ST   -Y,R30
000c4e 940e 1f36 	CALL _spi
000c50 e0f0      	LDI  R31,0
                +
000c51 0f0e     +ADD R16 , R30
000c52 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
000c53 9a1a      	SBI  0x3,2
                 ;  return res;
000c54 01f8      	MOVW R30,R16
000c55 c0e6      	RJMP _0x2020008
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
000c56 981a      	CBI  0x3,2
                 ;  delay_ms(5);
000c57 e0e5      	LDI  R30,LOW(5)
000c58 e0f0      	LDI  R31,HIGH(5)
000c59 93fa      	ST   -Y,R31
000c5a 93ea      	ST   -Y,R30
000c5b 940e 1f3d 	CALL _delay_ms
                 ;  spi(0b10010000);
000c5d e9e0      	LDI  R30,LOW(144)
000c5e 93ea      	ST   -Y,R30
000c5f 940e 1f36 	CALL _spi
                 ;  delay_us(100);
                +
000c61 e980     +LDI R24 , LOW ( 400 )
000c62 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000c63 9701     +SBIW R24 , 1
000c64 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
000c65 e0e0      	LDI  R30,LOW(0)
000c66 93ea      	ST   -Y,R30
000c67 940e 1f36 	CALL _spi
                 ;  spi(0x00);
000c69 e0e0      	LDI  R30,LOW(0)
000c6a 93ea      	ST   -Y,R30
000c6b 940e 1f36 	CALL _spi
                 ;  TOUCH_CS = 1;
000c6d 9a1a      	SBI  0x3,2
                 ;}
000c6e 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
000c6f 931a      	ST   -Y,R17
000c70 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000c71 df9e      	RCALL _TSC2046_getADC_X
000c72 51e4      	SUBI R30,LOW(1300)
000c73 40f5      	SBCI R31,HIGH(1300)
000c74 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000c75 2311      	TST  R17
000c76 f412      	BRPL _0xB2
                +
000c77 e000     +LDI R16 , LOW ( 0 )
000c78 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xB2:
000c79 01f8      	MOVW R30,R16
000c7a 940e 2044 	CALL __CWD1
000c7c 940e 1faf 	CALL __CDF1
000c7e 01df      	MOVW R26,R30
000c7f 01cb      	MOVW R24,R22
                +
000c80 e5e5     +LDI R30 , LOW ( 0x4275D555 )
000c81 edf5     +LDI R31 , HIGH ( 0x4275D555 )
000c82 e765     +LDI R22 , BYTE3 ( 0x4275D555 )
000c83 e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
000c84 940e 1fdd 	CALL __DIVF21
000c86 940e 1f78 	CALL __CFD1
000c88 018f      	MOVW R16,R30
                 ;  return res;
000c89 01f8      	MOVW R30,R16
000c8a c0b1      	RJMP _0x2020008
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
000c8b 931a      	ST   -Y,R17
000c8c 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000c8d dfa5      	RCALL _TSC2046_getADC_Y
000c8e 53e4      	SUBI R30,LOW(2100)
000c8f 40f8      	SBCI R31,HIGH(2100)
000c90 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000c91 2311      	TST  R17
000c92 f412      	BRPL _0xB3
                +
000c93 e000     +LDI R16 , LOW ( 0 )
000c94 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xB3:
000c95 01f8      	MOVW R30,R16
000c96 940e 2044 	CALL __CWD1
000c98 940e 1faf 	CALL __CDF1
000c9a 01df      	MOVW R26,R30
000c9b 01cb      	MOVW R24,R22
                +
000c9c e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
000c9d e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
000c9e ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
000c9f e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
000ca0 940e 1fdd 	CALL __DIVF21
000ca2 940e 1f78 	CALL __CFD1
000ca4 018f      	MOVW R16,R30
                 ;  return res;
000ca5 01f8      	MOVW R30,R16
000ca6 c095      	RJMP _0x2020008
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;
                 ;  if (TOUCH_IRQ < 1)
000ca7 931a      	ST   -Y,R17
000ca8 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
000ca9 e010      	LDI  R17,0
000caa e0a0      	LDI  R26,0
000cab 990b      	SBIC 0x1,3
000cac e0a1      	LDI  R26,1
000cad 30a1      	CPI  R26,LOW(0x1)
000cae f010      	BRLO PC+3
000caf 940c 0d3b 	JMP _0xB4
                 ;  {
                 ;    tempX = 0;
000cb1 e0e0      	LDI  R30,LOW(0)
000cb2 93e0 0630 	STS  _tempX,R30
000cb4 93e0 0631 	STS  _tempX+1,R30
000cb6 93e0 0632 	STS  _tempX+2,R30
000cb8 93e0 0633 	STS  _tempX+3,R30
                 ;    tempY = 0;
000cba 93e0 0634 	STS  _tempY,R30
000cbc 93e0 0635 	STS  _tempY+1,R30
000cbe 93e0 0636 	STS  _tempY+2,R30
000cc0 93e0 0637 	STS  _tempY+3,R30
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000cc2 e000      	LDI  R16,LOW(0)
                 _0xB6:
000cc3 3100      	CPI  R16,16
000cc4 f580      	BRSH _0xB7
                 ;    {
                 ;        tempX += TSC2046_getADC_X() - ADC_X_MIN;
000cc5 df4a      	RCALL _TSC2046_getADC_X
000cc6 51e4      	SUBI R30,LOW(1300)
000cc7 40f5      	SBCI R31,HIGH(1300)
000cc8 91a0 0630 	LDS  R26,_tempX
000cca 91b0 0631 	LDS  R27,_tempX+1
000ccc 9180 0632 	LDS  R24,_tempX+2
000cce 9190 0633 	LDS  R25,_tempX+3
000cd0 2766      	CLR  R22
000cd1 2777      	CLR  R23
000cd2 940e 2022 	CALL __ADDD12
000cd4 93e0 0630 	STS  _tempX,R30
000cd6 93f0 0631 	STS  _tempX+1,R31
000cd8 9360 0632 	STS  _tempX+2,R22
000cda 9370 0633 	STS  _tempX+3,R23
                 ;        tempY += TSC2046_getADC_Y() - ADC_Y_MIN;
000cdc df56      	RCALL _TSC2046_getADC_Y
000cdd 53e4      	SUBI R30,LOW(2100)
000cde 40f8      	SBCI R31,HIGH(2100)
000cdf 91a0 0634 	LDS  R26,_tempY
000ce1 91b0 0635 	LDS  R27,_tempY+1
000ce3 9180 0636 	LDS  R24,_tempY+2
000ce5 9190 0637 	LDS  R25,_tempY+3
000ce7 2766      	CLR  R22
000ce8 2777      	CLR  R23
000ce9 940e 2022 	CALL __ADDD12
000ceb 93e0 0634 	STS  _tempY,R30
000ced 93f0 0635 	STS  _tempY+1,R31
000cef 9360 0636 	STS  _tempY+2,R22
000cf1 9370 0637 	STS  _tempY+3,R23
                 ;    }
000cf3 5f0f      	SUBI R16,-1
000cf4 cfce      	RJMP _0xB6
                 _0xB7:
                 ;    if (tempX < 0) tempX = 0;
000cf5 91a0 0633 	LDS  R26,_tempX+3
000cf7 23aa      	TST  R26
000cf8 f44a      	BRPL _0xB8
000cf9 e0e0      	LDI  R30,LOW(0)
000cfa 93e0 0630 	STS  _tempX,R30
000cfc 93e0 0631 	STS  _tempX+1,R30
000cfe 93e0 0632 	STS  _tempX+2,R30
000d00 93e0 0633 	STS  _tempX+3,R30
                 ;    if (tempY < 0) tempY = 0;
                 _0xB8:
000d02 91a0 0637 	LDS  R26,_tempY+3
000d04 23aa      	TST  R26
000d05 f44a      	BRPL _0xB9
000d06 e0e0      	LDI  R30,LOW(0)
000d07 93e0 0634 	STS  _tempY,R30
000d09 93e0 0635 	STS  _tempY+1,R30
000d0b 93e0 0636 	STS  _tempY+2,R30
000d0d 93e0 0637 	STS  _tempY+3,R30
                 ;
                 ;    TOUCH_X = tempX / (TOUCH_Calc_Max * ADC_X_K);
                 _0xB9:
000d0f 91e0 0630 	LDS  R30,_tempX
000d11 91f0 0631 	LDS  R31,_tempX+1
000d13 9160 0632 	LDS  R22,_tempX+2
000d15 9170 0633 	LDS  R23,_tempX+3
000d17 940e 1faf 	CALL __CDF1
000d19 01df      	MOVW R26,R30
000d1a 01cb      	MOVW R24,R22
                +
000d1b e5e5     +LDI R30 , LOW ( 0x4475D555 )
000d1c edf5     +LDI R31 , HIGH ( 0x4475D555 )
000d1d e765     +LDI R22 , BYTE3 ( 0x4475D555 )
000d1e e474     +LDI R23 , BYTE4 ( 0x4475D555 )
                 	__GETD1N 0x4475D555
000d1f 940e 1fdd 	CALL __DIVF21
000d21 940e 1f76 	CALL __CFD1U
000d23 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / (TOUCH_Calc_Max * ADC_Y_K);
000d24 91e0 0634 	LDS  R30,_tempY
000d26 91f0 0635 	LDS  R31,_tempY+1
000d28 9160 0636 	LDS  R22,_tempY+2
000d2a 9170 0637 	LDS  R23,_tempY+3
000d2c 940e 1faf 	CALL __CDF1
000d2e 01df      	MOVW R26,R30
000d2f 01cb      	MOVW R24,R22
                +
000d30 e1ee     +LDI R30 , LOW ( 0x44CE9E1E )
000d31 e9fe     +LDI R31 , HIGH ( 0x44CE9E1E )
000d32 ec6e     +LDI R22 , BYTE3 ( 0x44CE9E1E )
000d33 e474     +LDI R23 , BYTE4 ( 0x44CE9E1E )
                 	__GETD1N 0x44CE9E1E
000d34 940e 1fdd 	CALL __DIVF21
000d36 940e 1f76 	CALL __CFD1U
000d38 013f      	MOVW R6,R30
                 ;
                 ;    TSC2046_Stop();
000d39 df1c      	RCALL _TSC2046_Stop
                 ;    res = 1;
000d3a e011      	LDI  R17,LOW(1)
                 ;  }
                 ;
                 ;  return res;
                 _0xB4:
000d3b 2fe1      	MOV  R30,R17
                 _0x2020008:
000d3c 9109      	LD   R16,Y+
000d3d 9119      	LD   R17,Y+
000d3e 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  char i;
                 ;  TSC2046_PortInit();
000d3f 931a      	ST   -Y,R17
                 ;	i -> R17
000d40 decc      	RCALL _TSC2046_PortInit
                 ;  TOUCH_CS = 0;
000d41 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
000d42 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
000d43 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000d44 958a     +DEC R24
000d45 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
000d46 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
000d47 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
000d48 e0e0      	LDI  R30,LOW(0)
000d49 93e0 0630 	STS  _tempX,R30
000d4b 93e0 0631 	STS  _tempX+1,R30
000d4d 93e0 0632 	STS  _tempX+2,R30
000d4f 93e0 0633 	STS  _tempX+3,R30
                 ;    tempY = 0;
000d51 93e0 0634 	STS  _tempY,R30
000d53 93e0 0635 	STS  _tempY+1,R30
000d55 93e0 0636 	STS  _tempY+2,R30
000d57 93e0 0637 	STS  _tempY+3,R30
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000d59 e010      	LDI  R17,LOW(0)
                 _0xC3:
000d5a 3110      	CPI  R17,16
000d5b f560      	BRSH _0xC4
                 ;    {
                 ;      tempX += TSC2046_getX();
000d5c df12      	RCALL _TSC2046_getX
000d5d 91a0 0630 	LDS  R26,_tempX
000d5f 91b0 0631 	LDS  R27,_tempX+1
000d61 9180 0632 	LDS  R24,_tempX+2
000d63 9190 0633 	LDS  R25,_tempX+3
000d65 2766      	CLR  R22
000d66 2777      	CLR  R23
000d67 940e 2022 	CALL __ADDD12
000d69 93e0 0630 	STS  _tempX,R30
000d6b 93f0 0631 	STS  _tempX+1,R31
000d6d 9360 0632 	STS  _tempX+2,R22
000d6f 9370 0633 	STS  _tempX+3,R23
                 ;      tempY += TSC2046_getY();
000d71 df19      	RCALL _TSC2046_getY
000d72 91a0 0634 	LDS  R26,_tempY
000d74 91b0 0635 	LDS  R27,_tempY+1
000d76 9180 0636 	LDS  R24,_tempY+2
000d78 9190 0637 	LDS  R25,_tempY+3
000d7a 2766      	CLR  R22
000d7b 2777      	CLR  R23
000d7c 940e 2022 	CALL __ADDD12
000d7e 93e0 0634 	STS  _tempY,R30
000d80 93f0 0635 	STS  _tempY+1,R31
000d82 9360 0636 	STS  _tempY+2,R22
000d84 9370 0637 	STS  _tempY+3,R23
                 ;    }
000d86 5f1f      	SUBI R17,-1
000d87 cfd2      	RJMP _0xC3
                 _0xC4:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
000d88 91a0 0630 	LDS  R26,_tempX
000d8a 91b0 0631 	LDS  R27,_tempX+1
000d8c 9180 0632 	LDS  R24,_tempX+2
000d8e 9190 0633 	LDS  R25,_tempX+3
                +
000d90 e1e0     +LDI R30 , LOW ( 0x10 )
000d91 e0f0     +LDI R31 , HIGH ( 0x10 )
000d92 e060     +LDI R22 , BYTE3 ( 0x10 )
000d93 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
000d94 940e 20b3 	CALL __DIVD21
000d96 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
000d97 91a0 0634 	LDS  R26,_tempY
000d99 91b0 0635 	LDS  R27,_tempY+1
000d9b 9180 0636 	LDS  R24,_tempY+2
000d9d 9190 0637 	LDS  R25,_tempY+3
                +
000d9f e1e0     +LDI R30 , LOW ( 0x10 )
000da0 e0f0     +LDI R31 , HIGH ( 0x10 )
000da1 e060     +LDI R22 , BYTE3 ( 0x10 )
000da2 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
000da3 940e 20b3 	CALL __DIVD21
000da5 013f      	MOVW R6,R30
                 ;    TSC2046_Stop();
000da6 deaf      	RCALL _TSC2046_Stop
                 ;}
000da7 c44a      	RJMP _0x2020005
                 ;
                 ;#pragma used-
                 ;#include "UART1.c"
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;char rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 001D {
                 _usart1_rx_isr:
000da8 93aa      	ST   -Y,R26
000da9 93ea      	ST   -Y,R30
000daa 93fa      	ST   -Y,R31
000dab b7ef      	IN   R30,SREG
000dac 93ea      	ST   -Y,R30
                 ;char status,data;
                 ;status=UCSR1A;
000dad 931a      	ST   -Y,R17
000dae 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000daf 9110 009b 	LDS  R17,155
                 ;data=UDR1;
000db1 9100 009c 	LDS  R16,156
                 ;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000db3 2fe1      	MOV  R30,R17
000db4 71ec      	ANDI R30,LOW(0x1C)
000db5 f4b9      	BRNE _0xC5
                 ;   {
                 ;   rx_buffer1[rx_wr_index1++]=data;
000db6 2ded      	MOV  R30,R13
000db7 94d3      	INC  R13
000db8 e0f0      	LDI  R31,0
000db9 5ce8      	SUBI R30,LOW(-_rx_buffer1)
000dba 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000dbb 8300      	ST   Z,R16
                 ;#if RX_BUFFER_SIZE1 == 256
                 ;   // special case for receiver buffer size=256
                 ;   if (++rx_counter1 == 0)
                 ;      {
                 ;#else
                 ;   if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000dbc e2e0      	LDI  R30,LOW(32)
000dbd 15ed      	CP   R30,R13
000dbe f409      	BRNE _0xC6
000dbf 24dd      	CLR  R13
                 ;   if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0xC6:
000dc0 91a0 0658 	LDS  R26,_rx_counter1
000dc2 5faf      	SUBI R26,-LOW(1)
000dc3 93a0 0658 	STS  _rx_counter1,R26
000dc5 32a0      	CPI  R26,LOW(0x20)
000dc6 f431      	BRNE _0xC7
                 ;      {
                 ;      rx_counter1=0;
000dc7 e0e0      	LDI  R30,LOW(0)
000dc8 93e0 0658 	STS  _rx_counter1,R30
                 ;#endif
                 ;      rx_buffer_overflow1=1;
000dca e0e1      	LDI  R30,LOW(1)
000dcb 93e0 0659 	STS  _rx_buffer_overflow1,R30
                 ;      }
                 ;   }
                 _0xC7:
                 ;}
                 _0xC5:
000dcd c13d      	RJMP _0x21F
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar(void)
                 ;{
                 ;char data;
                 ;while (rx_counter1==0);
                 ;	data -> R17
                 ;data=rx_buffer1[rx_rd_index1++];
                 ;#if RX_BUFFER_SIZE1 != 256
                 ;if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ;#endif
                 ;#asm("cli")
                 ;--rx_counter1;
                 ;#asm("sei")
                 ;return data;
                 ;}
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 64
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ; /*
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;#asm("cli")
                 ;if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
                 ;   {
                 ;   tx_buffer1[tx_wr_index1++]=c;
                 ;#if TX_BUFFER_SIZE1 != 256
                 ;   if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
                 ;#endif
                 ;   ++tx_counter1;
                 ;   }
                 ;else
                 ;   UDR1=c;
                 ;#asm("sei")
                 ;}
                 ;#pragma used-
                 ;
                 ; */
                 ;
                 ;
                 ;flash unsigned char auchCRCHi[256]=
                 ;{
                 ;        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                 ;        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                 ;        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
                 ;        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
                 ;        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
                 ;        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                 ;        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
                 ;        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
                 ;        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                 ;        0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                 ;        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
                 ;        0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                 ;        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                 ;        0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
                 ;        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
                 ;        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
                 ;        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
                 ;        0x40
                 ;};
                 ;
                 ;flash unsigned char auchCRCLo[256]=
                 ;{
                 ;        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
                 ;        0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
                 ;        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
                 ;        0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
                 ;        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
                 ;        0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
                 ;        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
                 ;        0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
                 ;        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
                 ;        0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
                 ;        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
                 ;        0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
                 ;        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
                 ;        0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
                 ;        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
                 ;        0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
                 ;        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
                 ;        0x40
                 ;};
                 ;
                 ;#define RS485 PORTD.4
                 ;
                 ;#define TX_WR_OFF 0
                 ;#define TX_WR_INIT 1
                 ;#define TX_WR_PROCESS 2
                 ;#define TX_WR_END 3
                 ;
                 ;unsigned char uchCRCHi;
                 ;unsigned char uchCRCLo;
                 ;char isNewData = 1;
                 
                 	.DSEG
                 ;char transmitStatus = TX_WR_OFF;
                 ;extern char transmitDelayMs = 0;
                 ;char tx_current_counter = 0;
                 ;
                 ;
                 ;inline void usart_tx_fun()
                 ;{
                 
                 	.CSEG
                 _usart_tx_fun:
                 ;    if (tx_current_counter && transmitStatus == TX_WR_PROCESS)
000dce 91e0 06a2 	LDS  R30,_tx_current_counter
000dd0 30e0      	CPI  R30,0
000dd1 f021      	BREQ _0xCE
000dd2 91a0 06a0 	LDS  R26,_transmitStatus
000dd4 30a2      	CPI  R26,LOW(0x2)
000dd5 f009      	BREQ _0xCF
                 _0xCE:
000dd6 c020      	RJMP _0xCD
                 _0xCF:
                 ;    {
                 ;        UDR1=tx_buffer1[tx_rd_index1++];
000dd7 91e0 069b 	LDS  R30,_tx_rd_index1
000dd9 5fef      	SUBI R30,-LOW(1)
000dda 93e0 069b 	STS  _tx_rd_index1,R30
000ddc 50e1      	SUBI R30,LOW(1)
000ddd e0f0      	LDI  R31,0
000dde 5ae6      	SUBI R30,LOW(-_tx_buffer1)
000ddf 4ff9      	SBCI R31,HIGH(-_tx_buffer1)
000de0 81e0      	LD   R30,Z
000de1 93e0 009c 	STS  156,R30
                 ;        if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000de3 91a0 069b 	LDS  R26,_tx_rd_index1
000de5 34a0      	CPI  R26,LOW(0x40)
000de6 f419      	BRNE _0xD0
000de7 e0e0      	LDI  R30,LOW(0)
000de8 93e0 069b 	STS  _tx_rd_index1,R30
                 ;
                 ;        if(--tx_current_counter == 0)
                 _0xD0:
000dea 91e0 06a2 	LDS  R30,_tx_current_counter
000dec 50e1      	SUBI R30,LOW(1)
000ded 93e0 06a2 	STS  _tx_current_counter,R30
000def 30e0      	CPI  R30,0
000df0 f431      	BRNE _0xD1
                 ;        {
                 ;            transmitStatus = TX_WR_END;
000df1 e0e3      	LDI  R30,LOW(3)
000df2 93e0 06a0 	STS  _transmitStatus,R30
                 ;            transmitDelayMs = 0;
000df4 e0e0      	LDI  R30,LOW(0)
000df5 93e0 06a1 	STS  _transmitDelayMs,R30
                 ;        }
                 ;    }
                 _0xD1:
                 ;}
                 _0xCD:
000df7 9508      	RET
                 ;
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ;{
                 _usart1_tx_isr:
000df8 920a      	ST   -Y,R0
000df9 921a      	ST   -Y,R1
000dfa 92fa      	ST   -Y,R15
000dfb 936a      	ST   -Y,R22
000dfc 937a      	ST   -Y,R23
000dfd 938a      	ST   -Y,R24
000dfe 939a      	ST   -Y,R25
000dff 93aa      	ST   -Y,R26
000e00 93ba      	ST   -Y,R27
000e01 93ea      	ST   -Y,R30
000e02 93fa      	ST   -Y,R31
000e03 b7ef      	IN   R30,SREG
000e04 93ea      	ST   -Y,R30
                 ;    usart_tx_fun();
000e05 dfc8      	RCALL _usart_tx_fun
                 ;}
000e06 91e9      	LD   R30,Y+
000e07 bfef      	OUT  SREG,R30
000e08 91f9      	LD   R31,Y+
000e09 91e9      	LD   R30,Y+
000e0a 91b9      	LD   R27,Y+
000e0b 91a9      	LD   R26,Y+
000e0c 9199      	LD   R25,Y+
000e0d 9189      	LD   R24,Y+
000e0e 9179      	LD   R23,Y+
000e0f 9169      	LD   R22,Y+
000e10 90f9      	LD   R15,Y+
000e11 9019      	LD   R1,Y+
000e12 9009      	LD   R0,Y+
000e13 9518      	RETI
                 ;
                 ;inline void TransmitRound()
                 ;{
                 _TransmitRound:
                 ;    if(transmitStatus == TX_WR_OFF && tx_counter1 > 7 && transmitDelayMs > 50)
000e14 91a0 06a0 	LDS  R26,_transmitStatus
000e16 30a0      	CPI  R26,LOW(0x0)
000e17 f441      	BRNE _0xD3
000e18 91a0 069c 	LDS  R26,_tx_counter1
000e1a 30a8      	CPI  R26,LOW(0x8)
000e1b f020      	BRLO _0xD3
000e1c 91a0 06a1 	LDS  R26,_transmitDelayMs
000e1e 33a3      	CPI  R26,LOW(0x33)
000e1f f408      	BRSH _0xD4
                 _0xD3:
000e20 c00a      	RJMP _0xD2
                 _0xD4:
                 ;    {
                 ;        transmitStatus = TX_WR_INIT;
000e21 e0e1      	LDI  R30,LOW(1)
000e22 93e0 06a0 	STS  _transmitStatus,R30
                 ;        RS485 = 1; //Передача
000e24 9a94      	SBI  0x12,4
                 ;        tx_current_counter = 8;
000e25 e0e8      	LDI  R30,LOW(8)
000e26 93e0 06a2 	STS  _tx_current_counter,R30
                 ;        transmitDelayMs = 0;
000e28 e0e0      	LDI  R30,LOW(0)
000e29 93e0 06a1 	STS  _transmitDelayMs,R30
                 ;    }
                 ;
                 ;    if(transmitStatus == TX_WR_INIT && transmitDelayMs > 10)
                 _0xD2:
000e2b 91a0 06a0 	LDS  R26,_transmitStatus
000e2d 30a1      	CPI  R26,LOW(0x1)
000e2e f421      	BRNE _0xD8
000e2f 91a0 06a1 	LDS  R26,_transmitDelayMs
000e31 30ab      	CPI  R26,LOW(0xB)
000e32 f408      	BRSH _0xD9
                 _0xD8:
000e33 c00d      	RJMP _0xD7
                 _0xD9:
                 ;    {
                 ;        transmitStatus = TX_WR_PROCESS;
000e34 e0e2      	LDI  R30,LOW(2)
000e35 93e0 06a0 	STS  _transmitStatus,R30
                 ;        usart_tx_fun();
000e37 df96      	RCALL _usart_tx_fun
                 ;        tx_counter1 -= 8;
000e38 91e0 069c 	LDS  R30,_tx_counter1
000e3a e0f0      	LDI  R31,0
000e3b 9738      	SBIW R30,8
000e3c 93e0 069c 	STS  _tx_counter1,R30
                 ;        transmitDelayMs = 0;
000e3e e0e0      	LDI  R30,LOW(0)
000e3f 93e0 06a1 	STS  _transmitDelayMs,R30
                 ;    }
                 ;
                 ;    if(transmitStatus == TX_WR_END && transmitDelayMs > 5)
                 _0xD7:
000e41 91a0 06a0 	LDS  R26,_transmitStatus
000e43 30a3      	CPI  R26,LOW(0x3)
000e44 f421      	BRNE _0xDB
000e45 91a0 06a1 	LDS  R26,_transmitDelayMs
000e47 30a6      	CPI  R26,LOW(0x6)
000e48 f408      	BRSH _0xDC
                 _0xDB:
000e49 c006      	RJMP _0xDA
                 _0xDC:
                 ;    {
                 ;        transmitStatus =  TX_WR_OFF;
000e4a e0e0      	LDI  R30,LOW(0)
000e4b 93e0 06a0 	STS  _transmitStatus,R30
                 ;        RS485 = 0;
000e4d 9894      	CBI  0x12,4
                 ;        transmitDelayMs = 0;
000e4e 93e0 06a1 	STS  _transmitDelayMs,R30
                 ;    }
                 ;
                 ;    if(transmitDelayMs > 100)
                 _0xDA:
000e50 91a0 06a1 	LDS  R26,_transmitDelayMs
000e52 36a5      	CPI  R26,LOW(0x65)
000e53 f020      	BRLO _0xDF
                 ;    {
                 ;        transmitStatus =  TX_WR_OFF;
000e54 e0e0      	LDI  R30,LOW(0)
000e55 93e0 06a0 	STS  _transmitStatus,R30
                 ;        RS485 = 0;
000e57 9894      	CBI  0x12,4
                 ;    }
                 ;}
                 _0xDF:
000e58 9508      	RET
                 ;
                 ;
                 ;
                 ;void CRC16_Clear()
                 ;{
                 _CRC16_Clear:
                 ;    uchCRCHi = 0xFF;  /* high byte of CRC initialized */
000e59 efef      	LDI  R30,LOW(255)
000e5a 93e0 069d 	STS  _uchCRCHi,R30
                 ;    uchCRCLo = 0xFF;  /* low byte of CRC initialized */
000e5c 93e0 069e 	STS  _uchCRCLo,R30
                 ;}
000e5e 9508      	RET
                 ;
                 ;void CRC16_Add(char value)
                 ;{
                 _CRC16_Add:
                 ;    unsigned char i = uchCRCHi ^ value;
                 ;    uchCRCHi = uchCRCLo ^ auchCRCHi[i];
000e5f 931a      	ST   -Y,R17
                 ;	value -> Y+1
                 ;	i -> R17
000e60 81e9      	LDD  R30,Y+1
000e61 91a0 069d 	LDS  R26,_uchCRCHi
000e63 27ea      	EOR  R30,R26
000e64 2f1e      	MOV  R17,R30
000e65 2fe1      	MOV  R30,R17
000e66 e0f0      	LDI  R31,0
000e67 53e4      	SUBI R30,LOW(-_auchCRCHi*2)
000e68 4ff8      	SBCI R31,HIGH(-_auchCRCHi*2)
000e69 91e4      	LPM  R30,Z
000e6a 91a0 069e 	LDS  R26,_uchCRCLo
000e6c 27ea      	EOR  R30,R26
000e6d 93e0 069d 	STS  _uchCRCHi,R30
                 ;    uchCRCLo =            auchCRCLo[i];
000e6f 2fe1      	MOV  R30,R17
000e70 e0f0      	LDI  R31,0
000e71 53e4      	SUBI R30,LOW(-_auchCRCLo*2)
000e72 4ff7      	SBCI R31,HIGH(-_auchCRCLo*2)
000e73 9004      	LPM  R0,Z
000e74 9200 069e 	STS  _uchCRCLo,R0
                 ;}
000e76 8118      	LDD  R17,Y+0
000e77 9622      	ADIW R28,2
000e78 9508      	RET
                 ;
                 ;void AddCRC16()
                 ;{
                 _AddCRC16:
                 ;    tx_buffer1[tx_wr_index1++] = uchCRCHi;
000e79 91e0 069a 	LDS  R30,_tx_wr_index1
000e7b 5fef      	SUBI R30,-LOW(1)
000e7c 93e0 069a 	STS  _tx_wr_index1,R30
000e7e 50e1      	SUBI R30,LOW(1)
000e7f e0f0      	LDI  R31,0
000e80 5ae6      	SUBI R30,LOW(-_tx_buffer1)
000e81 4ff9      	SBCI R31,HIGH(-_tx_buffer1)
000e82 91a0 069d 	LDS  R26,_uchCRCHi
000e84 83a0      	STD  Z+0,R26
                 ;    ++tx_counter1;
000e85 91e0 069c 	LDS  R30,_tx_counter1
000e87 5fef      	SUBI R30,-LOW(1)
000e88 93e0 069c 	STS  _tx_counter1,R30
                 ;    tx_buffer1[tx_wr_index1++] = uchCRCLo;
000e8a 91e0 069a 	LDS  R30,_tx_wr_index1
000e8c 5fef      	SUBI R30,-LOW(1)
000e8d 93e0 069a 	STS  _tx_wr_index1,R30
000e8f 50e1      	SUBI R30,LOW(1)
000e90 e0f0      	LDI  R31,0
000e91 5ae6      	SUBI R30,LOW(-_tx_buffer1)
000e92 4ff9      	SBCI R31,HIGH(-_tx_buffer1)
000e93 91a0 069e 	LDS  R26,_uchCRCLo
000e95 83a0      	STD  Z+0,R26
                 ;    ++tx_counter1;
000e96 91e0 069c 	LDS  R30,_tx_counter1
000e98 5fef      	SUBI R30,-LOW(1)
000e99 93e0 069c 	STS  _tx_counter1,R30
                 ;}
000e9b 9508      	RET
                 ;
                 ;
                 ;void StartTransmit()
                 ;{
                 _StartTransmit:
                 ;     AddCRC16();
000e9c dfdc      	RCALL _AddCRC16
                 ;     isNewData = 1;
000e9d e0e1      	LDI  R30,LOW(1)
000e9e 93e0 069f 	STS  _isNewData,R30
                 ;}
000ea0 9508      	RET
                 ;
                 ;
                 ;void AddTxData(char data)
                 ;{
                 _AddTxData:
                 ;    if(isNewData) CRC16_Clear();
                 ;	data -> Y+0
000ea1 91e0 069f 	LDS  R30,_isNewData
000ea3 30e0      	CPI  R30,0
000ea4 f009      	BREQ _0xE2
000ea5 dfb3      	RCALL _CRC16_Clear
                 ;    isNewData = 0;
                 _0xE2:
000ea6 e0e0      	LDI  R30,LOW(0)
000ea7 93e0 069f 	STS  _isNewData,R30
                 ;    tx_buffer1[tx_wr_index1++] = data;
000ea9 91e0 069a 	LDS  R30,_tx_wr_index1
000eab 5fef      	SUBI R30,-LOW(1)
000eac 93e0 069a 	STS  _tx_wr_index1,R30
000eae 50e1      	SUBI R30,LOW(1)
000eaf e0f0      	LDI  R31,0
000eb0 5ae6      	SUBI R30,LOW(-_tx_buffer1)
000eb1 4ff9      	SBCI R31,HIGH(-_tx_buffer1)
000eb2 81a8      	LD   R26,Y
000eb3 83a0      	STD  Z+0,R26
                 ;    ++tx_counter1;
000eb4 91e0 069c 	LDS  R30,_tx_counter1
000eb6 5fef      	SUBI R30,-LOW(1)
000eb7 93e0 069c 	STS  _tx_counter1,R30
                 ;    CRC16_Add(data);
000eb9 81e8      	LD   R30,Y
000eba 93ea      	ST   -Y,R30
000ebb dfa3      	RCALL _CRC16_Add
                 ;}
000ebc c0de      	RJMP _0x2020007
                 ;/*
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;*/
                 ;// USART2 Receiver buffer
                 ;#define RX_BUFFER_SIZE2 20
                 ;char rx_buffer2[RX_BUFFER_SIZE2];
                 ;
                 ;#if RX_BUFFER_SIZE2 <= 256
                 ;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;#else
                 ;unsigned int rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;#endif
                 ;
                 ;//Переключатель юарта
                 ;char uart_swap = 0;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 256
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;char rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 005D {
                 _usart0_rx_isr:
000ebd 93aa      	ST   -Y,R26
000ebe 93ea      	ST   -Y,R30
000ebf 93fa      	ST   -Y,R31
000ec0 b7ef      	IN   R30,SREG
000ec1 93ea      	ST   -Y,R30
                 ; 0000 005E char status,data;
                 ; 0000 005F status=UCSR0A;
000ec2 931a      	ST   -Y,R17
000ec3 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000ec4 b11b      	IN   R17,11
                 ; 0000 0060 data=UDR0;
000ec5 b10c      	IN   R16,12
                 ; 0000 0061 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000ec6 2fe1      	MOV  R30,R17
000ec7 71ec      	ANDI R30,LOW(0x1C)
000ec8 f011      	BREQ PC+3
000ec9 940c 0f0b 	JMP _0xE3
                 ; 0000 0062 {
                 ; 0000 0063    if(uart_swap) //Юарт 2
000ecb 91e0 06ba 	LDS  R30,_uart_swap
000ecd 30e0      	CPI  R30,0
000ece f0b9      	BREQ _0xE4
                 ; 0000 0064    {
                 ; 0000 0065       rx_buffer2[rx_wr_index2++]=data;
000ecf 91e0 06b7 	LDS  R30,_rx_wr_index2
000ed1 5fef      	SUBI R30,-LOW(1)
000ed2 93e0 06b7 	STS  _rx_wr_index2,R30
000ed4 50e1      	SUBI R30,LOW(1)
000ed5 e0f0      	LDI  R31,0
000ed6 55ed      	SUBI R30,LOW(-_rx_buffer2)
000ed7 4ff9      	SBCI R31,HIGH(-_rx_buffer2)
000ed8 8300      	ST   Z,R16
                 ; 0000 0066       if (rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
000ed9 91a0 06b7 	LDS  R26,_rx_wr_index2
000edb 31a4      	CPI  R26,LOW(0x14)
000edc f419      	BRNE _0xE5
000edd e0e0      	LDI  R30,LOW(0)
000ede 93e0 06b7 	STS  _rx_wr_index2,R30
                 ; 0000 0067       ++rx_counter2;
                 _0xE5:
000ee0 91e0 06b9 	LDS  R30,_rx_counter2
000ee2 5fef      	SUBI R30,-LOW(1)
000ee3 93e0 06b9 	STS  _rx_counter2,R30
                 ; 0000 0068    }
                 ; 0000 0069    else if(!rx_buffer_overflow0) //Юарт 0
000ee5 c025      	RJMP _0xE6
                 _0xE4:
000ee6 91e0 07be 	LDS  R30,_rx_buffer_overflow0
000ee8 30e0      	CPI  R30,0
000ee9 f509      	BRNE _0xE7
                 ; 0000 006A    {
                 ; 0000 006B    rx_buffer0[rx_wr_index0++]=data;
000eea 91e0 07bb 	LDS  R30,_rx_wr_index0
000eec 5fef      	SUBI R30,-LOW(1)
000eed 93e0 07bb 	STS  _rx_wr_index0,R30
000eef 50e1      	SUBI R30,LOW(1)
000ef0 e0f0      	LDI  R31,0
000ef1 54e5      	SUBI R30,LOW(-_rx_buffer0)
000ef2 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
000ef3 8300      	ST   Z,R16
                 ; 0000 006C #if RX_BUFFER_SIZE0 == 256
                 ; 0000 006D    // special case for receiver buffer size=256
                 ; 0000 006E    if (++rx_counter0 == 0)
000ef4 91e0 07bd 	LDS  R30,_rx_counter0
000ef6 5fef      	SUBI R30,-LOW(1)
000ef7 93e0 07bd 	STS  _rx_counter0,R30
000ef9 30e0      	CPI  R30,0
000efa f481      	BRNE _0xE8
                 ; 0000 006F       {
                 ; 0000 0070 #else
                 ; 0000 0071    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 ; 0000 0072    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 ; 0000 0073       {
                 ; 0000 0074       //rx_counter0=0;
                 ; 0000 0075 #endif
                 ; 0000 0076       rx_buffer_overflow0=1;  //Ааааа переполнение
000efb e0e1      	LDI  R30,LOW(1)
000efc 93e0 07be 	STS  _rx_buffer_overflow0,R30
                 ; 0000 0077       rx_counter0=RX_BUFFER_SIZE0-1;
000efe efef      	LDI  R30,LOW(255)
000eff 93e0 07bd 	STS  _rx_counter0,R30
                 ; 0000 0078       if(rx_wr_index0) rx_wr_index0--; else rx_wr_index0=rx_counter0;
000f01 91e0 07bb 	LDS  R30,_rx_wr_index0
000f03 30e0      	CPI  R30,0
000f04 f011      	BREQ _0xE9
000f05 50e1      	SUBI R30,LOW(1)
000f06 c002      	RJMP _0x219
                 _0xE9:
000f07 91e0 07bd 	LDS  R30,_rx_counter0
                 _0x219:
000f09 93e0 07bb 	STS  _rx_wr_index0,R30
                 ; 0000 0079       }
                 ; 0000 007A    }
                 _0xE8:
                 ; 0000 007B }
                 _0xE7:
                 _0xE6:
                 ; 0000 007C }
                 _0xE3:
                 _0x21F:
000f0b 9109      	LD   R16,Y+
000f0c 9119      	LD   R17,Y+
000f0d 91e9      	LD   R30,Y+
000f0e bfef      	OUT  SREG,R30
000f0f 91f9      	LD   R31,Y+
000f10 91e9      	LD   R30,Y+
000f11 91a9      	LD   R26,Y+
000f12 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 0083 {
                 _getchar0:
                 ; 0000 0084 char data;
                 ; 0000 0085 while (rx_counter0==0);
000f13 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xEB:
000f14 91e0 07bd 	LDS  R30,_rx_counter0
000f16 30e0      	CPI  R30,0
000f17 f3e1      	BREQ _0xEB
                 ; 0000 0086 data=rx_buffer0[rx_rd_index0++];
000f18 91e0 07bc 	LDS  R30,_rx_rd_index0
000f1a 5fef      	SUBI R30,-LOW(1)
000f1b 93e0 07bc 	STS  _rx_rd_index0,R30
000f1d 50e1      	SUBI R30,LOW(1)
000f1e e0f0      	LDI  R31,0
000f1f 54e5      	SUBI R30,LOW(-_rx_buffer0)
000f20 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
000f21 8110      	LD   R17,Z
                 ; 0000 0087 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0088 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0089 #endif
                 ; 0000 008A #asm("cli")
000f22 94f8      	cli
                 ; 0000 008B --rx_counter0;
000f23 91e0 07bd 	LDS  R30,_rx_counter0
000f25 50e1      	SUBI R30,LOW(1)
000f26 93e0 07bd 	STS  _rx_counter0,R30
                 ; 0000 008C #asm("sei")
000f28 9478      	sei
                 ; 0000 008D return data;
000f29 c2c7      	RJMP _0x2020004
                 ; 0000 008E }
                 ;
                 ;
                 ;char getchar2(void) //Юарт 2
                 ; 0000 0092 {
                 _getchar2:
                 ; 0000 0093 char data;
                 ; 0000 0094 while (rx_counter2==0);
000f2a 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xEE:
000f2b 91e0 06b9 	LDS  R30,_rx_counter2
000f2d 30e0      	CPI  R30,0
000f2e f3e1      	BREQ _0xEE
                 ; 0000 0095 data=rx_buffer2[rx_rd_index2++];
000f2f 91e0 06b8 	LDS  R30,_rx_rd_index2
000f31 5fef      	SUBI R30,-LOW(1)
000f32 93e0 06b8 	STS  _rx_rd_index2,R30
000f34 50e1      	SUBI R30,LOW(1)
000f35 e0f0      	LDI  R31,0
000f36 55ed      	SUBI R30,LOW(-_rx_buffer2)
000f37 4ff9      	SBCI R31,HIGH(-_rx_buffer2)
000f38 8110      	LD   R17,Z
                 ; 0000 0096 if (rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
000f39 91a0 06b8 	LDS  R26,_rx_rd_index2
000f3b 31a4      	CPI  R26,LOW(0x14)
000f3c f419      	BRNE _0xF1
000f3d e0e0      	LDI  R30,LOW(0)
000f3e 93e0 06b8 	STS  _rx_rd_index2,R30
                 ; 0000 0097 #asm("cli")
                 _0xF1:
000f40 94f8      	cli
                 ; 0000 0098 --rx_counter2;
000f41 91e0 06b9 	LDS  R30,_rx_counter2
000f43 50e1      	SUBI R30,LOW(1)
000f44 93e0 06b9 	STS  _rx_counter2,R30
                 ; 0000 0099 #asm("sei")
000f46 9478      	sei
                 ; 0000 009A return data;
000f47 c2a9      	RJMP _0x2020004
                 ; 0000 009B }
                 ;
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 00AC {
                 _usart0_tx_isr:
000f48 93aa      	ST   -Y,R26
000f49 93ea      	ST   -Y,R30
000f4a 93fa      	ST   -Y,R31
000f4b b7ef      	IN   R30,SREG
000f4c 93ea      	ST   -Y,R30
                 ; 0000 00AD if (tx_counter0)
000f4d 91e0 07c9 	LDS  R30,_tx_counter0
000f4f 30e0      	CPI  R30,0
000f50 f0a9      	BREQ _0xF2
                 ; 0000 00AE    {
                 ; 0000 00AF    --tx_counter0;
000f51 50e1      	SUBI R30,LOW(1)
000f52 93e0 07c9 	STS  _tx_counter0,R30
                 ; 0000 00B0    UDR0=tx_buffer0[tx_rd_index0++];
000f54 91e0 07c8 	LDS  R30,_tx_rd_index0
000f56 5fef      	SUBI R30,-LOW(1)
000f57 93e0 07c8 	STS  _tx_rd_index0,R30
000f59 50e1      	SUBI R30,LOW(1)
000f5a e0f0      	LDI  R31,0
000f5b 54e1      	SUBI R30,LOW(-_tx_buffer0)
000f5c 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
000f5d 81e0      	LD   R30,Z
000f5e b9ec      	OUT  0xC,R30
                 ; 0000 00B1 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00B2    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000f5f 91a0 07c8 	LDS  R26,_tx_rd_index0
000f61 30a8      	CPI  R26,LOW(0x8)
000f62 f419      	BRNE _0xF3
000f63 e0e0      	LDI  R30,LOW(0)
000f64 93e0 07c8 	STS  _tx_rd_index0,R30
                 ; 0000 00B3 #endif
                 ; 0000 00B4    }
                 _0xF3:
                 ; 0000 00B5 }
                 _0xF2:
000f66 91e9      	LD   R30,Y+
000f67 bfef      	OUT  SREG,R30
000f68 91f9      	LD   R31,Y+
000f69 91e9      	LD   R30,Y+
000f6a 91a9      	LD   R26,Y+
000f6b 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar0_i(char c)
                 ; 0000 00BC {
                 _putchar0_i:
                 ; 0000 00BD while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xF4:
000f6c 91a0 07c9 	LDS  R26,_tx_counter0
000f6e 30a8      	CPI  R26,LOW(0x8)
000f6f f3e1      	BREQ _0xF4
                 ; 0000 00BE #asm("cli")
000f70 94f8      	cli
                 ; 0000 00BF if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000f71 91e0 07c9 	LDS  R30,_tx_counter0
000f73 30e0      	CPI  R30,0
000f74 f411      	BRNE _0xF8
000f75 995d      	SBIC 0xB,5
000f76 c018      	RJMP _0xF7
                 _0xF8:
                 ; 0000 00C0    {
                 ; 0000 00C1    tx_buffer0[tx_wr_index0++]=c;
000f77 91e0 07c7 	LDS  R30,_tx_wr_index0
000f79 5fef      	SUBI R30,-LOW(1)
000f7a 93e0 07c7 	STS  _tx_wr_index0,R30
000f7c 50e1      	SUBI R30,LOW(1)
000f7d e0f0      	LDI  R31,0
000f7e 54e1      	SUBI R30,LOW(-_tx_buffer0)
000f7f 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
000f80 81a8      	LD   R26,Y
000f81 83a0      	STD  Z+0,R26
                 ; 0000 00C2 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C3    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000f82 91a0 07c7 	LDS  R26,_tx_wr_index0
000f84 30a8      	CPI  R26,LOW(0x8)
000f85 f419      	BRNE _0xFA
000f86 e0e0      	LDI  R30,LOW(0)
000f87 93e0 07c7 	STS  _tx_wr_index0,R30
                 ; 0000 00C4 #endif
                 ; 0000 00C5    ++tx_counter0;
                 _0xFA:
000f89 91e0 07c9 	LDS  R30,_tx_counter0
000f8b 5fef      	SUBI R30,-LOW(1)
000f8c 93e0 07c9 	STS  _tx_counter0,R30
                 ; 0000 00C6    }
                 ; 0000 00C7 else
000f8e c002      	RJMP _0xFB
                 _0xF7:
                 ; 0000 00C8    UDR0=c;
000f8f 81e8      	LD   R30,Y
000f90 b9ec      	OUT  0xC,R30
                 ; 0000 00C9 #asm("sei")
                 _0xFB:
000f91 9478      	sei
                 ; 0000 00CA }
000f92 c008      	RJMP _0x2020007
                 ;
                 ;inline void putchar0(char c)
                 ; 0000 00CD {
                 _putchar0:
                 ; 0000 00CE     uart_swap = 0;
                 ;	c -> Y+0
000f93 e0e0      	LDI  R30,LOW(0)
000f94 c001      	RJMP _0x2020006
                 ; 0000 00CF     putchar0_i(c);
                 ; 0000 00D0 }
                 ;
                 ;inline void putchar2(char c)
                 ; 0000 00D3 {
                 _putchar2:
                 ; 0000 00D4     uart_swap = 2;
                 ;	c -> Y+0
000f95 e0e2      	LDI  R30,LOW(2)
                 _0x2020006:
000f96 93e0 06ba 	STS  _uart_swap,R30
                 ; 0000 00D5     putchar0_i(c);
000f98 81e8      	LD   R30,Y
000f99 93ea      	ST   -Y,R30
000f9a dfd1      	RCALL _putchar0_i
                 ; 0000 00D6 }
                 _0x2020007:
000f9b 9621      	ADIW R28,1
000f9c 9508      	RET
                 ;
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;//#include <stdio.h>
                 ;
                 ;
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;//#define RS485 PORTD.4
                 ;#define BACKLIGHT PORTB.7
                 ;
                 ;#define Graph_X_Min 0
                 ;#define Graph_X_Max 478
                 ;#define Graph_Y_Min 42
                 ;#define Graph_Y_Max 232
                 ;#define Graph_Step_N 2 //1..3
                 ;#define Graph_PointCount 80
                 ;
                 ;flash unsigned int Graph_X_Step = (Graph_X_Max-Graph_X_Min+2)/Graph_PointCount;
                 ;flash unsigned int Graph_Y_Mid = (Graph_Y_Max-Graph_Y_Min)/2 + Graph_Y_Min;
                 ;
                 ;#define Text_StartX 16
                 ;#define Text_StartY 6
                 ;
                 ;#define Value_StartX 290
                 ;#define Value_StartY 6
                 ;#define Value_Lenght (16*4)
                 ;
                 ;#define BTN_StartX 6
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;flash unsigned int BTN1_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN1_X_Begin = BTN_StartX;
                 ;flash unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;flash unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;flash unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;flash unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;flash unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;flash unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;flash unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 0110 {
                 _Repaint_Button:
                 ; 0000 0111   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000f9d 81ec      	LDD  R30,Y+4
000f9e e0f0      	LDI  R31,0
                 ; 0000 0112   {
                 ; 0000 0113     case 1 :
000f9f 30e1      	CPI  R30,LOW(0x1)
000fa0 e0a0      	LDI  R26,HIGH(0x1)
000fa1 07fa      	CPC  R31,R26
000fa2 f4e9      	BRNE _0xFF
                 ; 0000 0114       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000fa3 e0e0     +LDI R30 , LOW ( _0x100 + ( 0 ) )
000fa4 e0f5     +LDI R31 , HIGH ( _0x100 + ( 0 ) )
                 	__POINTW1MN _0x100,0
000fa5 93fa      	ST   -Y,R31
000fa6 93ea      	ST   -Y,R30
000fa7 e1e0      	LDI  R30,LOW(16)
000fa8 e0f0      	LDI  R31,HIGH(16)
000fa9 93fa      	ST   -Y,R31
000faa 93ea      	ST   -Y,R30
000fab efe7      	LDI  R30,LOW(247)
000fac e0f0      	LDI  R31,HIGH(247)
000fad 93fa      	ST   -Y,R31
000fae 93ea      	ST   -Y,R30
000faf 85e8      	LDD  R30,Y+8
000fb0 85f9      	LDD  R31,Y+8+1
000fb1 93fa      	ST   -Y,R31
000fb2 93ea      	ST   -Y,R30
000fb3 85e8      	LDD  R30,Y+8
000fb4 85f9      	LDD  R31,Y+8+1
000fb5 93fa      	ST   -Y,R31
000fb6 93ea      	ST   -Y,R30
000fb7 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0115       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000fb9 81ed      	LDD  R30,Y+5
000fba 81fe      	LDD  R31,Y+5+1
000fbb 93fa      	ST   -Y,R31
000fbc 93ea      	ST   -Y,R30
000fbd e1e0      	LDI  R30,LOW(16)
000fbe e0f0      	LDI  R31,HIGH(16)
000fbf c062      	RJMP _0x21A
                 ; 0000 0116     break;
                 ; 0000 0117     case 2 :
                 _0xFF:
000fc0 30e2      	CPI  R30,LOW(0x2)
000fc1 e0a0      	LDI  R26,HIGH(0x2)
000fc2 07fa      	CPC  R31,R26
000fc3 f4e9      	BRNE _0x101
                 ; 0000 0118       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000fc4 e0e6     +LDI R30 , LOW ( _0x100 + ( 6 ) )
000fc5 e0f5     +LDI R31 , HIGH ( _0x100 + ( 6 ) )
                 	__POINTW1MN _0x100,6
000fc6 93fa      	ST   -Y,R31
000fc7 93ea      	ST   -Y,R30
000fc8 e8e8      	LDI  R30,LOW(136)
000fc9 e0f0      	LDI  R31,HIGH(136)
000fca 93fa      	ST   -Y,R31
000fcb 93ea      	ST   -Y,R30
000fcc efe7      	LDI  R30,LOW(247)
000fcd e0f0      	LDI  R31,HIGH(247)
000fce 93fa      	ST   -Y,R31
000fcf 93ea      	ST   -Y,R30
000fd0 85e8      	LDD  R30,Y+8
000fd1 85f9      	LDD  R31,Y+8+1
000fd2 93fa      	ST   -Y,R31
000fd3 93ea      	ST   -Y,R30
000fd4 85e8      	LDD  R30,Y+8
000fd5 85f9      	LDD  R31,Y+8+1
000fd6 93fa      	ST   -Y,R31
000fd7 93ea      	ST   -Y,R30
000fd8 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0119       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000fda 81ed      	LDD  R30,Y+5
000fdb 81fe      	LDD  R31,Y+5+1
000fdc 93fa      	ST   -Y,R31
000fdd 93ea      	ST   -Y,R30
000fde e8e8      	LDI  R30,LOW(136)
000fdf e0f0      	LDI  R31,HIGH(136)
000fe0 c041      	RJMP _0x21A
                 ; 0000 011A     break;
                 ; 0000 011B     case 3 :
                 _0x101:
000fe1 30e3      	CPI  R30,LOW(0x3)
000fe2 e0a0      	LDI  R26,HIGH(0x3)
000fe3 07fa      	CPC  R31,R26
000fe4 f4e9      	BRNE _0x102
                 ; 0000 011C       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000fe5 e0ec     +LDI R30 , LOW ( _0x100 + ( 12 ) )
000fe6 e0f5     +LDI R31 , HIGH ( _0x100 + ( 12 ) )
                 	__POINTW1MN _0x100,12
000fe7 93fa      	ST   -Y,R31
000fe8 93ea      	ST   -Y,R30
000fe9 e0e0      	LDI  R30,LOW(256)
000fea e0f1      	LDI  R31,HIGH(256)
000feb 93fa      	ST   -Y,R31
000fec 93ea      	ST   -Y,R30
000fed efe7      	LDI  R30,LOW(247)
000fee e0f0      	LDI  R31,HIGH(247)
000fef 93fa      	ST   -Y,R31
000ff0 93ea      	ST   -Y,R30
000ff1 85e8      	LDD  R30,Y+8
000ff2 85f9      	LDD  R31,Y+8+1
000ff3 93fa      	ST   -Y,R31
000ff4 93ea      	ST   -Y,R30
000ff5 85e8      	LDD  R30,Y+8
000ff6 85f9      	LDD  R31,Y+8+1
000ff7 93fa      	ST   -Y,R31
000ff8 93ea      	ST   -Y,R30
000ff9 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 011D       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000ffb 81ed      	LDD  R30,Y+5
000ffc 81fe      	LDD  R31,Y+5+1
000ffd 93fa      	ST   -Y,R31
000ffe 93ea      	ST   -Y,R30
000fff e0e0      	LDI  R30,LOW(256)
001000 e0f1      	LDI  R31,HIGH(256)
001001 c020      	RJMP _0x21A
                 ; 0000 011E     break;
                 ; 0000 011F     case 4 :
                 _0x102:
001002 30e4      	CPI  R30,LOW(0x4)
001003 e0a0      	LDI  R26,HIGH(0x4)
001004 07fa      	CPC  R31,R26
001005 f561      	BRNE _0xFE
                 ; 0000 0120       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
001006 e1e2     +LDI R30 , LOW ( _0x100 + ( 18 ) )
001007 e0f5     +LDI R31 , HIGH ( _0x100 + ( 18 ) )
                 	__POINTW1MN _0x100,18
001008 93fa      	ST   -Y,R31
001009 93ea      	ST   -Y,R30
00100a e7e8      	LDI  R30,LOW(376)
00100b e0f1      	LDI  R31,HIGH(376)
00100c 93fa      	ST   -Y,R31
00100d 93ea      	ST   -Y,R30
00100e efe7      	LDI  R30,LOW(247)
00100f e0f0      	LDI  R31,HIGH(247)
001010 93fa      	ST   -Y,R31
001011 93ea      	ST   -Y,R30
001012 85e8      	LDD  R30,Y+8
001013 85f9      	LDD  R31,Y+8+1
001014 93fa      	ST   -Y,R31
001015 93ea      	ST   -Y,R30
001016 85e8      	LDD  R30,Y+8
001017 85f9      	LDD  R31,Y+8+1
001018 93fa      	ST   -Y,R31
001019 93ea      	ST   -Y,R30
00101a 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0121       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
00101c 81ed      	LDD  R30,Y+5
00101d 81fe      	LDD  R31,Y+5+1
00101e 93fa      	ST   -Y,R31
00101f 93ea      	ST   -Y,R30
001020 e7e8      	LDI  R30,LOW(376)
001021 e0f1      	LDI  R31,HIGH(376)
                 _0x21A:
001022 93fa      	ST   -Y,R31
001023 93ea      	ST   -Y,R30
001024 efe7      	LDI  R30,LOW(247)
001025 e0f0      	LDI  R31,HIGH(247)
001026 93fa      	ST   -Y,R31
001027 93ea      	ST   -Y,R30
001028 85e8      	LDD  R30,Y+8
001029 85f9      	LDD  R31,Y+8+1
00102a 93fa      	ST   -Y,R31
00102b 93ea      	ST   -Y,R30
00102c 85e8      	LDD  R30,Y+8
00102d 85f9      	LDD  R31,Y+8+1
00102e 93fa      	ST   -Y,R31
00102f 93ea      	ST   -Y,R30
001030 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0122     break;
                 ; 0000 0123   }
                 _0xFE:
                 ; 0000 0124 }
001032 c589      	RJMP _0x2020003
                 
                 	.DSEG
                 _0x100:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0127 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0128   // рисуем кнопки
                 ; 0000 0129   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
001033 e0e6      	LDI  R30,LOW(6)
001034 e0f0      	LDI  R31,HIGH(6)
001035 93fa      	ST   -Y,R31
001036 93ea      	ST   -Y,R30
001037 e6ea      	LDI  R30,LOW(106)
001038 e0f0      	LDI  R31,HIGH(106)
001039 93fa      	ST   -Y,R31
00103a 93ea      	ST   -Y,R30
00103b efe0      	LDI  R30,LOW(240)
00103c e0f0      	LDI  R31,HIGH(240)
00103d 93fa      	ST   -Y,R31
00103e 93ea      	ST   -Y,R30
00103f e0ee      	LDI  R30,LOW(270)
001040 e0f1      	LDI  R31,HIGH(270)
001041 93fa      	ST   -Y,R31
001042 93ea      	ST   -Y,R30
001043 efef      	LDI  R30,LOW(65535)
001044 efff      	LDI  R31,HIGH(65535)
001045 93fa      	ST   -Y,R31
001046 93ea      	ST   -Y,R30
001047 db50      	RCALL _SSD1963_DrawFillRect
                 ; 0000 012A   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
001048 e7ee      	LDI  R30,LOW(126)
001049 e0f0      	LDI  R31,HIGH(126)
00104a 93fa      	ST   -Y,R31
00104b 93ea      	ST   -Y,R30
00104c eee2      	LDI  R30,LOW(226)
00104d e0f0      	LDI  R31,HIGH(226)
00104e 93fa      	ST   -Y,R31
00104f 93ea      	ST   -Y,R30
001050 efe0      	LDI  R30,LOW(240)
001051 e0f0      	LDI  R31,HIGH(240)
001052 93fa      	ST   -Y,R31
001053 93ea      	ST   -Y,R30
001054 e0ee      	LDI  R30,LOW(270)
001055 e0f1      	LDI  R31,HIGH(270)
001056 93fa      	ST   -Y,R31
001057 93ea      	ST   -Y,R30
001058 efef      	LDI  R30,LOW(65535)
001059 efff      	LDI  R31,HIGH(65535)
00105a 93fa      	ST   -Y,R31
00105b 93ea      	ST   -Y,R30
00105c 940e 0b98 	CALL _SSD1963_DrawFillRect
                 ; 0000 012B   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
00105e efe6      	LDI  R30,LOW(246)
00105f e0f0      	LDI  R31,HIGH(246)
001060 93fa      	ST   -Y,R31
001061 93ea      	ST   -Y,R30
001062 e5ea      	LDI  R30,LOW(346)
001063 e0f1      	LDI  R31,HIGH(346)
001064 93fa      	ST   -Y,R31
001065 93ea      	ST   -Y,R30
001066 efe0      	LDI  R30,LOW(240)
001067 e0f0      	LDI  R31,HIGH(240)
001068 93fa      	ST   -Y,R31
001069 93ea      	ST   -Y,R30
00106a e0ee      	LDI  R30,LOW(270)
00106b e0f1      	LDI  R31,HIGH(270)
00106c 93fa      	ST   -Y,R31
00106d 93ea      	ST   -Y,R30
00106e efef      	LDI  R30,LOW(65535)
00106f efff      	LDI  R31,HIGH(65535)
001070 93fa      	ST   -Y,R31
001071 93ea      	ST   -Y,R30
001072 940e 0b98 	CALL _SSD1963_DrawFillRect
                 ; 0000 012C   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
001074 e6ee      	LDI  R30,LOW(366)
001075 e0f1      	LDI  R31,HIGH(366)
001076 93fa      	ST   -Y,R31
001077 93ea      	ST   -Y,R30
001078 ede2      	LDI  R30,LOW(466)
001079 e0f1      	LDI  R31,HIGH(466)
00107a 93fa      	ST   -Y,R31
00107b 93ea      	ST   -Y,R30
00107c efe0      	LDI  R30,LOW(240)
00107d e0f0      	LDI  R31,HIGH(240)
00107e 93fa      	ST   -Y,R31
00107f 93ea      	ST   -Y,R30
001080 e0ee      	LDI  R30,LOW(270)
001081 e0f1      	LDI  R31,HIGH(270)
001082 93fa      	ST   -Y,R31
001083 93ea      	ST   -Y,R30
001084 efef      	LDI  R30,LOW(65535)
001085 efff      	LDI  R31,HIGH(65535)
001086 93fa      	ST   -Y,R31
001087 93ea      	ST   -Y,R30
001088 940e 0b98 	CALL _SSD1963_DrawFillRect
                 ; 0000 012D   // рисуем окантовку
                 ; 0000 012E   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
00108a e0e7      	LDI  R30,LOW(7)
00108b e0f0      	LDI  R31,HIGH(7)
00108c 93fa      	ST   -Y,R31
00108d 93ea      	ST   -Y,R30
00108e e6e9      	LDI  R30,LOW(105)
00108f e0f0      	LDI  R31,HIGH(105)
001090 93fa      	ST   -Y,R31
001091 93ea      	ST   -Y,R30
001092 efe1      	LDI  R30,LOW(241)
001093 e0f0      	LDI  R31,HIGH(241)
001094 93fa      	ST   -Y,R31
001095 93ea      	ST   -Y,R30
001096 e0ed      	LDI  R30,LOW(269)
001097 e0f1      	LDI  R31,HIGH(269)
001098 93fa      	ST   -Y,R31
001099 93ea      	ST   -Y,R30
00109a e0e1      	LDI  R30,LOW(1)
00109b e0f0      	LDI  R31,HIGH(1)
00109c 93fa      	ST   -Y,R31
00109d 93ea      	ST   -Y,R30
00109e e0e0      	LDI  R30,LOW(0)
00109f e0f0      	LDI  R31,HIGH(0)
0010a0 93fa      	ST   -Y,R31
0010a1 93ea      	ST   -Y,R30
0010a2 940e 0b32 	CALL _SSD1963_DrawRect
                 ; 0000 012F   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
0010a4 e7ef      	LDI  R30,LOW(127)
0010a5 e0f0      	LDI  R31,HIGH(127)
0010a6 93fa      	ST   -Y,R31
0010a7 93ea      	ST   -Y,R30
0010a8 eee1      	LDI  R30,LOW(225)
0010a9 e0f0      	LDI  R31,HIGH(225)
0010aa 93fa      	ST   -Y,R31
0010ab 93ea      	ST   -Y,R30
0010ac efe1      	LDI  R30,LOW(241)
0010ad e0f0      	LDI  R31,HIGH(241)
0010ae 93fa      	ST   -Y,R31
0010af 93ea      	ST   -Y,R30
0010b0 e0ed      	LDI  R30,LOW(269)
0010b1 e0f1      	LDI  R31,HIGH(269)
0010b2 93fa      	ST   -Y,R31
0010b3 93ea      	ST   -Y,R30
0010b4 e0e1      	LDI  R30,LOW(1)
0010b5 e0f0      	LDI  R31,HIGH(1)
0010b6 93fa      	ST   -Y,R31
0010b7 93ea      	ST   -Y,R30
0010b8 e0e0      	LDI  R30,LOW(0)
0010b9 e0f0      	LDI  R31,HIGH(0)
0010ba 93fa      	ST   -Y,R31
0010bb 93ea      	ST   -Y,R30
0010bc 940e 0b32 	CALL _SSD1963_DrawRect
                 ; 0000 0130   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
0010be efe7      	LDI  R30,LOW(247)
0010bf e0f0      	LDI  R31,HIGH(247)
0010c0 93fa      	ST   -Y,R31
0010c1 93ea      	ST   -Y,R30
0010c2 e5e9      	LDI  R30,LOW(345)
0010c3 e0f1      	LDI  R31,HIGH(345)
0010c4 93fa      	ST   -Y,R31
0010c5 93ea      	ST   -Y,R30
0010c6 efe1      	LDI  R30,LOW(241)
0010c7 e0f0      	LDI  R31,HIGH(241)
0010c8 93fa      	ST   -Y,R31
0010c9 93ea      	ST   -Y,R30
0010ca e0ed      	LDI  R30,LOW(269)
0010cb e0f1      	LDI  R31,HIGH(269)
0010cc 93fa      	ST   -Y,R31
0010cd 93ea      	ST   -Y,R30
0010ce e0e1      	LDI  R30,LOW(1)
0010cf e0f0      	LDI  R31,HIGH(1)
0010d0 93fa      	ST   -Y,R31
0010d1 93ea      	ST   -Y,R30
0010d2 e0e0      	LDI  R30,LOW(0)
0010d3 e0f0      	LDI  R31,HIGH(0)
0010d4 93fa      	ST   -Y,R31
0010d5 93ea      	ST   -Y,R30
0010d6 940e 0b32 	CALL _SSD1963_DrawRect
                 ; 0000 0131   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
0010d8 e6ef      	LDI  R30,LOW(367)
0010d9 e0f1      	LDI  R31,HIGH(367)
0010da 93fa      	ST   -Y,R31
0010db 93ea      	ST   -Y,R30
0010dc ede1      	LDI  R30,LOW(465)
0010dd e0f1      	LDI  R31,HIGH(465)
0010de 93fa      	ST   -Y,R31
0010df 93ea      	ST   -Y,R30
0010e0 efe1      	LDI  R30,LOW(241)
0010e1 e0f0      	LDI  R31,HIGH(241)
0010e2 93fa      	ST   -Y,R31
0010e3 93ea      	ST   -Y,R30
0010e4 e0ed      	LDI  R30,LOW(269)
0010e5 e0f1      	LDI  R31,HIGH(269)
0010e6 93fa      	ST   -Y,R31
0010e7 93ea      	ST   -Y,R30
0010e8 e0e1      	LDI  R30,LOW(1)
0010e9 e0f0      	LDI  R31,HIGH(1)
0010ea 93fa      	ST   -Y,R31
0010eb 93ea      	ST   -Y,R30
0010ec e0e0      	LDI  R30,LOW(0)
0010ed e0f0      	LDI  R31,HIGH(0)
0010ee 93fa      	ST   -Y,R31
0010ef 93ea      	ST   -Y,R30
0010f0 940e 0b32 	CALL _SSD1963_DrawRect
                 ; 0000 0132 
                 ; 0000 0133   Repaint_Button("СЛЕД", 1, BLACK, WHITE);
                +
0010f2 e1e8     +LDI R30 , LOW ( _0x104 + ( 0 ) )
0010f3 e0f5     +LDI R31 , HIGH ( _0x104 + ( 0 ) )
                 	__POINTW1MN _0x104,0
0010f4 93fa      	ST   -Y,R31
0010f5 93ea      	ST   -Y,R30
0010f6 e0e1      	LDI  R30,LOW(1)
0010f7 93ea      	ST   -Y,R30
0010f8 e0e0      	LDI  R30,LOW(0)
0010f9 e0f0      	LDI  R31,HIGH(0)
0010fa 93fa      	ST   -Y,R31
0010fb 93ea      	ST   -Y,R30
0010fc efef      	LDI  R30,LOW(65535)
0010fd efff      	LDI  R31,HIGH(65535)
0010fe 93fa      	ST   -Y,R31
0010ff 93ea      	ST   -Y,R30
001100 de9c      	RCALL _Repaint_Button
                 ; 0000 0134   Repaint_Button("  +", 2, BLACK, WHITE);
                +
001101 e1ed     +LDI R30 , LOW ( _0x104 + ( 5 ) )
001102 e0f5     +LDI R31 , HIGH ( _0x104 + ( 5 ) )
                 	__POINTW1MN _0x104,5
001103 93fa      	ST   -Y,R31
001104 93ea      	ST   -Y,R30
001105 e0e2      	LDI  R30,LOW(2)
001106 93ea      	ST   -Y,R30
001107 e0e0      	LDI  R30,LOW(0)
001108 e0f0      	LDI  R31,HIGH(0)
001109 93fa      	ST   -Y,R31
00110a 93ea      	ST   -Y,R30
00110b efef      	LDI  R30,LOW(65535)
00110c efff      	LDI  R31,HIGH(65535)
00110d 93fa      	ST   -Y,R31
00110e 93ea      	ST   -Y,R30
00110f de8d      	RCALL _Repaint_Button
                 ; 0000 0135   Repaint_Button("  -", 3, BLACK, WHITE);
                +
001110 e2e1     +LDI R30 , LOW ( _0x104 + ( 9 ) )
001111 e0f5     +LDI R31 , HIGH ( _0x104 + ( 9 ) )
                 	__POINTW1MN _0x104,9
001112 93fa      	ST   -Y,R31
001113 93ea      	ST   -Y,R30
001114 e0e3      	LDI  R30,LOW(3)
001115 93ea      	ST   -Y,R30
001116 e0e0      	LDI  R30,LOW(0)
001117 e0f0      	LDI  R31,HIGH(0)
001118 93fa      	ST   -Y,R31
001119 93ea      	ST   -Y,R30
00111a efef      	LDI  R30,LOW(65535)
00111b efff      	LDI  R31,HIGH(65535)
00111c 93fa      	ST   -Y,R31
00111d 93ea      	ST   -Y,R30
00111e de7e      	RCALL _Repaint_Button
                 ; 0000 0136   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
00111f e2e5     +LDI R30 , LOW ( _0x104 + ( 13 ) )
001120 e0f5     +LDI R31 , HIGH ( _0x104 + ( 13 ) )
                 	__POINTW1MN _0x104,13
001121 93fa      	ST   -Y,R31
001122 93ea      	ST   -Y,R30
001123 e0e4      	LDI  R30,LOW(4)
001124 93ea      	ST   -Y,R30
001125 e0e0      	LDI  R30,LOW(0)
001126 e0f0      	LDI  R31,HIGH(0)
001127 93fa      	ST   -Y,R31
001128 93ea      	ST   -Y,R30
001129 efef      	LDI  R30,LOW(65535)
00112a efff      	LDI  R31,HIGH(65535)
00112b 93fa      	ST   -Y,R31
00112c 93ea      	ST   -Y,R30
00112d de6f      	RCALL _Repaint_Button
                 ; 0000 0137 }
00112e 9508      	RET
                 
                 	.DSEG
                 _0x104:
000518           	.BYTE 0x13
                 ;
                 ;///////////////////////////////////////////////
                 ;char transmitDelayMs;
                 ;char State=0, ParameterState=0, ValueState=0, GraphState=0, ConfigState=0;
                 ;unsigned int Touch_mSec = 0, ValueUpd_mSec = 0, GraphUpd_mSec = 0;
                 ;
                 ;unsigned int GraphUpdTime = 0;
                 ;signed int Graph_X = -Graph_X_Step;
                 ;signed int ValueLast[3] = {0,0,0};
                 ;
                 ;unsigned int ConfigValue[12], old_confVal;
                 ;eeprom unsigned int ConfigValue_mem[3];
                 ;flash unsigned int ConfigParam[4][12] = {
                 ;//Графики        //АЦП                              //FastAdc
                 ;{10,  10,  10,  5,   5,   5,   5,   5,   5,   5,   5,   1}, //0 - шаг
                 ;{20,  20,  20,  5,   5,   5,   5,   5,   5,   5,   5,   0}, //1 - мин
                 ;{220, 220, 220, 600, 600, 600, 600, 600, 600, 600, 600, 1}, //2 - макс
                 ;{90,  90,  45,  100, 100, 100, 100, 100, 100, 100, 100, 0}  //3 - дефолт
                 ;};
                 ;
                 ;//////////////////////////////////////////////
                 ;
                 ;// Timer 0 overflow interrupt 1 ms
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0150 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00112f 920a      	ST   -Y,R0
001130 921a      	ST   -Y,R1
001131 92fa      	ST   -Y,R15
001132 936a      	ST   -Y,R22
001133 937a      	ST   -Y,R23
001134 938a      	ST   -Y,R24
001135 939a      	ST   -Y,R25
001136 93aa      	ST   -Y,R26
001137 93ba      	ST   -Y,R27
001138 93ea      	ST   -Y,R30
001139 93fa      	ST   -Y,R31
00113a b7ef      	IN   R30,SREG
00113b 93ea      	ST   -Y,R30
                 ; 0000 0151 // Reinitialize Timer 0 value
                 ; 0000 0152 TCNT0=0x06;
00113c e0e6      	LDI  R30,LOW(6)
00113d bfe2      	OUT  0x32,R30
                 ; 0000 0153 // Place your code here
                 ; 0000 0154 
                 ; 0000 0155 if(Touch_mSec < 0xFF) Touch_mSec++;
00113e 91a0 07cf 	LDS  R26,_Touch_mSec
001140 91b0 07d0 	LDS  R27,_Touch_mSec+1
001142 3faf      	CPI  R26,LOW(0xFF)
001143 e0e0      	LDI  R30,HIGH(0xFF)
001144 07be      	CPC  R27,R30
001145 f438      	BRSH _0x106
001146 ecaf      	LDI  R26,LOW(_Touch_mSec)
001147 e0b7      	LDI  R27,HIGH(_Touch_mSec)
001148 91ed      	LD   R30,X+
001149 91fd      	LD   R31,X+
00114a 9631      	ADIW R30,1
00114b 93fe      	ST   -X,R31
00114c 93ee      	ST   -X,R30
                 ; 0000 0156 ValueUpd_mSec++;
                 _0x106:
00114d eda1      	LDI  R26,LOW(_ValueUpd_mSec)
00114e e0b7      	LDI  R27,HIGH(_ValueUpd_mSec)
00114f 91ed      	LD   R30,X+
001150 91fd      	LD   R31,X+
001151 9631      	ADIW R30,1
001152 93fe      	ST   -X,R31
001153 93ee      	ST   -X,R30
                 ; 0000 0157 GraphUpd_mSec++;
001154 eda3      	LDI  R26,LOW(_GraphUpd_mSec)
001155 e0b7      	LDI  R27,HIGH(_GraphUpd_mSec)
001156 91ed      	LD   R30,X+
001157 91fd      	LD   R31,X+
001158 9631      	ADIW R30,1
001159 93fe      	ST   -X,R31
00115a 93ee      	ST   -X,R30
                 ; 0000 0158 if(transmitDelayMs<0xFF) transmitDelayMs++;
00115b 91a0 06a1 	LDS  R26,_transmitDelayMs
00115d 3faf      	CPI  R26,LOW(0xFF)
00115e f428      	BRSH _0x107
00115f 91e0 06a1 	LDS  R30,_transmitDelayMs
001161 5fef      	SUBI R30,-LOW(1)
001162 93e0 06a1 	STS  _transmitDelayMs,R30
                 ; 0000 0159 
                 ; 0000 015A 
                 ; 0000 015B TransmitRound();
                 _0x107:
001164 dcaf      	RCALL _TransmitRound
                 ; 0000 015C 
                 ; 0000 015D }
001165 91e9      	LD   R30,Y+
001166 bfef      	OUT  SREG,R30
001167 91f9      	LD   R31,Y+
001168 91e9      	LD   R30,Y+
001169 91b9      	LD   R27,Y+
00116a 91a9      	LD   R26,Y+
00116b 9199      	LD   R25,Y+
00116c 9189      	LD   R24,Y+
00116d 9179      	LD   R23,Y+
00116e 9169      	LD   R22,Y+
00116f 90f9      	LD   R15,Y+
001170 9019      	LD   R1,Y+
001171 9009      	LD   R0,Y+
001172 9518      	RETI
                 ;
                 ;char GetButton(void)
                 ; 0000 0160 {
                 _GetButton:
                 ; 0000 0161   char res = 0;
                 ; 0000 0162   if (Touch_mSec > 50 && TSC2046_GetCoordinates())
001173 931a      	ST   -Y,R17
                 ;	res -> R17
001174 e010      	LDI  R17,0
001175 91a0 07cf 	LDS  R26,_Touch_mSec
001177 91b0 07d0 	LDS  R27,_Touch_mSec+1
001179 97d3      	SBIW R26,51
00117a f020      	BRLO _0x109
00117b 940e 0ca7 	CALL _TSC2046_GetCoordinates
00117d 30e0      	CPI  R30,0
00117e f409      	BRNE _0x10A
                 _0x109:
00117f c071      	RJMP _0x108
                 _0x10A:
                 ; 0000 0163   {
                 ; 0000 0164     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
001180 e0e6      	LDI  R30,LOW(6)
001181 e0f0      	LDI  R31,HIGH(6)
001182 15e4      	CP   R30,R4
001183 05f5      	CPC  R31,R5
001184 f428      	BRSH _0x10C
001185 e6ea      	LDI  R30,LOW(106)
001186 e0f0      	LDI  R31,HIGH(106)
001187 164e      	CP   R4,R30
001188 065f      	CPC  R5,R31
001189 f008      	BRLO _0x10D
                 _0x10C:
00118a c014      	RJMP _0x10B
                 _0x10D:
                 ; 0000 0165     {
                 ; 0000 0166       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End) && (Touch_mSec > 150)) res = 1;
00118b efe0      	LDI  R30,LOW(240)
00118c e0f0      	LDI  R31,HIGH(240)
00118d 15e6      	CP   R30,R6
00118e 05f7      	CPC  R31,R7
00118f f468      	BRSH _0x10F
001190 e0ee      	LDI  R30,LOW(270)
001191 e0f1      	LDI  R31,HIGH(270)
001192 166e      	CP   R6,R30
001193 067f      	CPC  R7,R31
001194 f440      	BRSH _0x10F
001195 91a0 07cf 	LDS  R26,_Touch_mSec
001197 91b0 07d0 	LDS  R27,_Touch_mSec+1
001199 39a7      	CPI  R26,LOW(0x97)
00119a e0e0      	LDI  R30,HIGH(0x97)
00119b 07be      	CPC  R27,R30
00119c f408      	BRSH _0x110
                 _0x10F:
00119d c001      	RJMP _0x10E
                 _0x110:
00119e e011      	LDI  R17,LOW(1)
                 ; 0000 0167     }
                 _0x10E:
                 ; 0000 0168     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0x10B:
00119f e7ee      	LDI  R30,LOW(126)
0011a0 e0f0      	LDI  R31,HIGH(126)
0011a1 15e4      	CP   R30,R4
0011a2 05f5      	CPC  R31,R5
0011a3 f428      	BRSH _0x112
0011a4 eee2      	LDI  R30,LOW(226)
0011a5 e0f0      	LDI  R31,HIGH(226)
0011a6 164e      	CP   R4,R30
0011a7 065f      	CPC  R5,R31
0011a8 f008      	BRLO _0x113
                 _0x112:
0011a9 c00c      	RJMP _0x111
                 _0x113:
                 ; 0000 0169     {
                 ; 0000 016A       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
0011aa efe0      	LDI  R30,LOW(240)
0011ab e0f0      	LDI  R31,HIGH(240)
0011ac 15e6      	CP   R30,R6
0011ad 05f7      	CPC  R31,R7
0011ae f428      	BRSH _0x115
0011af e0ee      	LDI  R30,LOW(270)
0011b0 e0f1      	LDI  R31,HIGH(270)
0011b1 166e      	CP   R6,R30
0011b2 067f      	CPC  R7,R31
0011b3 f008      	BRLO _0x116
                 _0x115:
0011b4 c001      	RJMP _0x114
                 _0x116:
0011b5 e012      	LDI  R17,LOW(2)
                 ; 0000 016B     }
                 _0x114:
                 ; 0000 016C     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0x111:
0011b6 efe6      	LDI  R30,LOW(246)
0011b7 e0f0      	LDI  R31,HIGH(246)
0011b8 15e4      	CP   R30,R4
0011b9 05f5      	CPC  R31,R5
0011ba f428      	BRSH _0x118
0011bb e5ea      	LDI  R30,LOW(346)
0011bc e0f1      	LDI  R31,HIGH(346)
0011bd 164e      	CP   R4,R30
0011be 065f      	CPC  R5,R31
0011bf f008      	BRLO _0x119
                 _0x118:
0011c0 c00c      	RJMP _0x117
                 _0x119:
                 ; 0000 016D     {
                 ; 0000 016E       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
0011c1 efe0      	LDI  R30,LOW(240)
0011c2 e0f0      	LDI  R31,HIGH(240)
0011c3 15e6      	CP   R30,R6
0011c4 05f7      	CPC  R31,R7
0011c5 f428      	BRSH _0x11B
0011c6 e0ee      	LDI  R30,LOW(270)
0011c7 e0f1      	LDI  R31,HIGH(270)
0011c8 166e      	CP   R6,R30
0011c9 067f      	CPC  R7,R31
0011ca f008      	BRLO _0x11C
                 _0x11B:
0011cb c001      	RJMP _0x11A
                 _0x11C:
0011cc e013      	LDI  R17,LOW(3)
                 ; 0000 016F     }
                 _0x11A:
                 ; 0000 0170     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x117:
0011cd e6ee      	LDI  R30,LOW(366)
0011ce e0f1      	LDI  R31,HIGH(366)
0011cf 15e4      	CP   R30,R4
0011d0 05f5      	CPC  R31,R5
0011d1 f428      	BRSH _0x11E
0011d2 ede2      	LDI  R30,LOW(466)
0011d3 e0f1      	LDI  R31,HIGH(466)
0011d4 164e      	CP   R4,R30
0011d5 065f      	CPC  R5,R31
0011d6 f008      	BRLO _0x11F
                 _0x11E:
0011d7 c014      	RJMP _0x11D
                 _0x11F:
                 ; 0000 0171     {
                 ; 0000 0172       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End) && (Touch_mSec > 150)) res = 4;
0011d8 efe0      	LDI  R30,LOW(240)
0011d9 e0f0      	LDI  R31,HIGH(240)
0011da 15e6      	CP   R30,R6
0011db 05f7      	CPC  R31,R7
0011dc f468      	BRSH _0x121
0011dd e0ee      	LDI  R30,LOW(270)
0011de e0f1      	LDI  R31,HIGH(270)
0011df 166e      	CP   R6,R30
0011e0 067f      	CPC  R7,R31
0011e1 f440      	BRSH _0x121
0011e2 91a0 07cf 	LDS  R26,_Touch_mSec
0011e4 91b0 07d0 	LDS  R27,_Touch_mSec+1
0011e6 39a7      	CPI  R26,LOW(0x97)
0011e7 e0e0      	LDI  R30,HIGH(0x97)
0011e8 07be      	CPC  R27,R30
0011e9 f408      	BRSH _0x122
                 _0x121:
0011ea c001      	RJMP _0x120
                 _0x122:
0011eb e014      	LDI  R17,LOW(4)
                 ; 0000 0173     }
                 _0x120:
                 ; 0000 0174       Touch_mSec = 0;
                 _0x11D:
0011ec e0e0      	LDI  R30,LOW(0)
0011ed 93e0 07cf 	STS  _Touch_mSec,R30
0011ef 93e0 07d0 	STS  _Touch_mSec+1,R30
                 ; 0000 0175   }
                 ; 0000 0176   return res;
                 _0x108:
                 _0x2020004:
0011f1 2fe1      	MOV  R30,R17
                 _0x2020005:
0011f2 9119      	LD   R17,Y+
0011f3 9508      	RET
                 ; 0000 0177 }
                 ;
                 ;void PutParameterText(char Number, unsigned int Color)
                 ; 0000 017A {
                 _PutParameterText:
                 ; 0000 017B   int X = Text_StartX;
                 ; 0000 017C   int Y = Text_StartY;
                 ; 0000 017D 
                 ; 0000 017E   SSD1963_PutString16("                ", X, Y, Color, BLACK);
0011f4 940e 211e 	CALL __SAVELOCR4
                 ;	Number -> Y+6
                 ;	Color -> Y+4
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                +
0011f6 e100     +LDI R16 , LOW ( 16 )
0011f7 e010     +LDI R17 , HIGH ( 16 )
                 	__GETWRN 16,17,16
                +
0011f8 e026     +LDI R18 , LOW ( 6 )
0011f9 e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                +
0011fa e2eb     +LDI R30 , LOW ( _0x123 + ( 0 ) )
0011fb e0f5     +LDI R31 , HIGH ( _0x123 + ( 0 ) )
                 	__POINTW1MN _0x123,0
0011fc 93fa      	ST   -Y,R31
0011fd 93ea      	ST   -Y,R30
0011fe 931a      	ST   -Y,R17
0011ff 930a      	ST   -Y,R16
001200 933a      	ST   -Y,R19
001201 932a      	ST   -Y,R18
001202 85ea      	LDD  R30,Y+10
001203 85fb      	LDD  R31,Y+10+1
001204 93fa      	ST   -Y,R31
001205 93ea      	ST   -Y,R30
001206 e0e0      	LDI  R30,LOW(0)
001207 e0f0      	LDI  R31,HIGH(0)
001208 93fa      	ST   -Y,R31
001209 93ea      	ST   -Y,R30
00120a 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 017F   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
00120c e3ec     +LDI R30 , LOW ( _0x123 + ( 17 ) )
00120d e0f5     +LDI R31 , HIGH ( _0x123 + ( 17 ) )
                 	__POINTW1MN _0x123,17
00120e 93fa      	ST   -Y,R31
00120f 93ea      	ST   -Y,R30
001210 931a      	ST   -Y,R17
001211 930a      	ST   -Y,R16
001212 01f9      	MOVW R30,R18
001213 9670      	ADIW R30,16
001214 93fa      	ST   -Y,R31
001215 93ea      	ST   -Y,R30
001216 85ea      	LDD  R30,Y+10
001217 85fb      	LDD  R31,Y+10+1
001218 93fa      	ST   -Y,R31
001219 93ea      	ST   -Y,R30
00121a e0e0      	LDI  R30,LOW(0)
00121b e0f0      	LDI  R31,HIGH(0)
00121c 93fa      	ST   -Y,R31
00121d 93ea      	ST   -Y,R30
00121e 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0180   switch (Number)
001220 81ee      	LDD  R30,Y+6
001221 e0f0      	LDI  R31,0
                 ; 0000 0181   {
                 ; 0000 0182     case 0 :
001222 9730      	SBIW R30,0
001223 f011      	BREQ PC+3
001224 940c 128f 	JMP _0x127
                 ; 0000 0183       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
001226 e4ed     +LDI R30 , LOW ( _0x123 + ( 34 ) )
001227 e0f5     +LDI R31 , HIGH ( _0x123 + ( 34 ) )
                 	__POINTW1MN _0x123,34
001228 93fa      	ST   -Y,R31
001229 93ea      	ST   -Y,R30
00122a 931a      	ST   -Y,R17
00122b 930a      	ST   -Y,R16
00122c 933a      	ST   -Y,R19
00122d 932a      	ST   -Y,R18
00122e 85ea      	LDD  R30,Y+10
00122f 85fb      	LDD  R31,Y+10+1
001230 93fa      	ST   -Y,R31
001231 93ea      	ST   -Y,R30
001232 e0e0      	LDI  R30,LOW(0)
001233 e0f0      	LDI  R31,HIGH(0)
001234 93fa      	ST   -Y,R31
001235 93ea      	ST   -Y,R30
001236 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0184       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
001238 e5e8     +LDI R30 , LOW ( _0x123 + ( 45 ) )
001239 e0f5     +LDI R31 , HIGH ( _0x123 + ( 45 ) )
                 	__POINTW1MN _0x123,45
00123a 93fa      	ST   -Y,R31
00123b 93ea      	ST   -Y,R30
00123c 931a      	ST   -Y,R17
00123d 930a      	ST   -Y,R16
00123e 01f9      	MOVW R30,R18
00123f 9670      	ADIW R30,16
001240 93fa      	ST   -Y,R31
001241 93ea      	ST   -Y,R30
001242 85ea      	LDD  R30,Y+10
001243 85fb      	LDD  R31,Y+10+1
001244 93fa      	ST   -Y,R31
001245 93ea      	ST   -Y,R30
001246 e0e0      	LDI  R30,LOW(0)
001247 e0f0      	LDI  R31,HIGH(0)
001248 93fa      	ST   -Y,R31
001249 93ea      	ST   -Y,R30
00124a 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0185 
                 ; 0000 0186       SSD1963_PutString16("            ", Value_StartX, Value_StartY, Color, BLACK);
                +
00124c e5ec     +LDI R30 , LOW ( _0x123 + ( 49 ) )
00124d e0f5     +LDI R31 , HIGH ( _0x123 + ( 49 ) )
                 	__POINTW1MN _0x123,49
00124e 93fa      	ST   -Y,R31
00124f 93ea      	ST   -Y,R30
001250 e2e2      	LDI  R30,LOW(290)
001251 e0f1      	LDI  R31,HIGH(290)
001252 93fa      	ST   -Y,R31
001253 93ea      	ST   -Y,R30
001254 e0e6      	LDI  R30,LOW(6)
001255 e0f0      	LDI  R31,HIGH(6)
001256 93fa      	ST   -Y,R31
001257 93ea      	ST   -Y,R30
001258 85ea      	LDD  R30,Y+10
001259 85fb      	LDD  R31,Y+10+1
00125a 93fa      	ST   -Y,R31
00125b 93ea      	ST   -Y,R30
00125c e0e0      	LDI  R30,LOW(0)
00125d e0f0      	LDI  R31,HIGH(0)
00125e 93fa      	ST   -Y,R31
00125f 93ea      	ST   -Y,R30
001260 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0187       SSD1963_PutString16("            ", Value_StartX, Value_StartY + FONT_HEIGHT, Color, BLACK);
                +
001262 e6e9     +LDI R30 , LOW ( _0x123 + ( 62 ) )
001263 e0f5     +LDI R31 , HIGH ( _0x123 + ( 62 ) )
                 	__POINTW1MN _0x123,62
001264 93fa      	ST   -Y,R31
001265 93ea      	ST   -Y,R30
001266 e2e2      	LDI  R30,LOW(290)
001267 e0f1      	LDI  R31,HIGH(290)
001268 93fa      	ST   -Y,R31
001269 93ea      	ST   -Y,R30
00126a e1e6      	LDI  R30,LOW(22)
00126b e0f0      	LDI  R31,HIGH(22)
00126c 93fa      	ST   -Y,R31
00126d 93ea      	ST   -Y,R30
00126e 85ea      	LDD  R30,Y+10
00126f 85fb      	LDD  R31,Y+10+1
001270 93fa      	ST   -Y,R31
001271 93ea      	ST   -Y,R30
001272 e0e0      	LDI  R30,LOW(0)
001273 e0f0      	LDI  R31,HIGH(0)
001274 93fa      	ST   -Y,R31
001275 93ea      	ST   -Y,R30
001276 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0188       SSD1963_PutString16("ГЦ", Value_StartX + (Value_Lenght<<1), Value_StartY + FONT_HEIGHT, Color, BLACK);
                +
001278 e7e6     +LDI R30 , LOW ( _0x123 + ( 75 ) )
001279 e0f5     +LDI R31 , HIGH ( _0x123 + ( 75 ) )
                 	__POINTW1MN _0x123,75
00127a 93fa      	ST   -Y,R31
00127b 93ea      	ST   -Y,R30
00127c eae2      	LDI  R30,LOW(418)
00127d e0f1      	LDI  R31,HIGH(418)
00127e 93fa      	ST   -Y,R31
00127f 93ea      	ST   -Y,R30
001280 e1e6      	LDI  R30,LOW(22)
001281 e0f0      	LDI  R31,HIGH(22)
001282 93fa      	ST   -Y,R31
001283 93ea      	ST   -Y,R30
001284 85ea      	LDD  R30,Y+10
001285 85fb      	LDD  R31,Y+10+1
001286 93fa      	ST   -Y,R31
001287 93ea      	ST   -Y,R30
001288 e0e0      	LDI  R30,LOW(0)
001289 e0f0      	LDI  R31,HIGH(0)
00128a 93fa      	ST   -Y,R31
00128b 93ea      	ST   -Y,R30
00128c 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0189 
                 ; 0000 018A     break;
00128e c32b      	RJMP _0x126
                 ; 0000 018B     case 1 :
                 _0x127:
00128f 30e1      	CPI  R30,LOW(0x1)
001290 e0a0      	LDI  R26,HIGH(0x1)
001291 07fa      	CPC  R31,R26
001292 f011      	BREQ PC+3
001293 940c 12fe 	JMP _0x128
                 ; 0000 018C       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
001295 e7e9     +LDI R30 , LOW ( _0x123 + ( 78 ) )
001296 e0f5     +LDI R31 , HIGH ( _0x123 + ( 78 ) )
                 	__POINTW1MN _0x123,78
001297 93fa      	ST   -Y,R31
001298 93ea      	ST   -Y,R30
001299 931a      	ST   -Y,R17
00129a 930a      	ST   -Y,R16
00129b 933a      	ST   -Y,R19
00129c 932a      	ST   -Y,R18
00129d 85ea      	LDD  R30,Y+10
00129e 85fb      	LDD  R31,Y+10+1
00129f 93fa      	ST   -Y,R31
0012a0 93ea      	ST   -Y,R30
0012a1 e0e0      	LDI  R30,LOW(0)
0012a2 e0f0      	LDI  R31,HIGH(0)
0012a3 93fa      	ST   -Y,R31
0012a4 93ea      	ST   -Y,R30
0012a5 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 018D       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
0012a7 e7ed     +LDI R30 , LOW ( _0x123 + ( 82 ) )
0012a8 e0f5     +LDI R31 , HIGH ( _0x123 + ( 82 ) )
                 	__POINTW1MN _0x123,82
0012a9 93fa      	ST   -Y,R31
0012aa 93ea      	ST   -Y,R30
0012ab 931a      	ST   -Y,R17
0012ac 930a      	ST   -Y,R16
0012ad 01f9      	MOVW R30,R18
0012ae 9670      	ADIW R30,16
0012af 93fa      	ST   -Y,R31
0012b0 93ea      	ST   -Y,R30
0012b1 85ea      	LDD  R30,Y+10
0012b2 85fb      	LDD  R31,Y+10+1
0012b3 93fa      	ST   -Y,R31
0012b4 93ea      	ST   -Y,R30
0012b5 e0e0      	LDI  R30,LOW(0)
0012b6 e0f0      	LDI  R31,HIGH(0)
0012b7 93fa      	ST   -Y,R31
0012b8 93ea      	ST   -Y,R30
0012b9 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 018E 
                 ; 0000 018F       SSD1963_PutString16("            ", Value_StartX, Value_StartY, Color, BLACK);
                +
0012bb e8e1     +LDI R30 , LOW ( _0x123 + ( 86 ) )
0012bc e0f5     +LDI R31 , HIGH ( _0x123 + ( 86 ) )
                 	__POINTW1MN _0x123,86
0012bd 93fa      	ST   -Y,R31
0012be 93ea      	ST   -Y,R30
0012bf e2e2      	LDI  R30,LOW(290)
0012c0 e0f1      	LDI  R31,HIGH(290)
0012c1 93fa      	ST   -Y,R31
0012c2 93ea      	ST   -Y,R30
0012c3 e0e6      	LDI  R30,LOW(6)
0012c4 e0f0      	LDI  R31,HIGH(6)
0012c5 93fa      	ST   -Y,R31
0012c6 93ea      	ST   -Y,R30
0012c7 85ea      	LDD  R30,Y+10
0012c8 85fb      	LDD  R31,Y+10+1
0012c9 93fa      	ST   -Y,R31
0012ca 93ea      	ST   -Y,R30
0012cb e0e0      	LDI  R30,LOW(0)
0012cc e0f0      	LDI  R31,HIGH(0)
0012cd 93fa      	ST   -Y,R31
0012ce 93ea      	ST   -Y,R30
0012cf 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0190       SSD1963_PutString16("            ", Value_StartX, Value_StartY + FONT_HEIGHT, Color, BLACK);
                +
0012d1 e8ee     +LDI R30 , LOW ( _0x123 + ( 99 ) )
0012d2 e0f5     +LDI R31 , HIGH ( _0x123 + ( 99 ) )
                 	__POINTW1MN _0x123,99
0012d3 93fa      	ST   -Y,R31
0012d4 93ea      	ST   -Y,R30
0012d5 e2e2      	LDI  R30,LOW(290)
0012d6 e0f1      	LDI  R31,HIGH(290)
0012d7 93fa      	ST   -Y,R31
0012d8 93ea      	ST   -Y,R30
0012d9 e1e6      	LDI  R30,LOW(22)
0012da e0f0      	LDI  R31,HIGH(22)
0012db 93fa      	ST   -Y,R31
0012dc 93ea      	ST   -Y,R30
0012dd 85ea      	LDD  R30,Y+10
0012de 85fb      	LDD  R31,Y+10+1
0012df 93fa      	ST   -Y,R31
0012e0 93ea      	ST   -Y,R30
0012e1 e0e0      	LDI  R30,LOW(0)
0012e2 e0f0      	LDI  R31,HIGH(0)
0012e3 93fa      	ST   -Y,R31
0012e4 93ea      	ST   -Y,R30
0012e5 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0191       SSD1963_PutString16("ГЦ", Value_StartX + (Value_Lenght<<1), Value_StartY + FONT_HEIGHT, Color, BLACK);
                +
0012e7 e9eb     +LDI R30 , LOW ( _0x123 + ( 112 ) )
0012e8 e0f5     +LDI R31 , HIGH ( _0x123 + ( 112 ) )
                 	__POINTW1MN _0x123,112
0012e9 93fa      	ST   -Y,R31
0012ea 93ea      	ST   -Y,R30
0012eb eae2      	LDI  R30,LOW(418)
0012ec e0f1      	LDI  R31,HIGH(418)
0012ed 93fa      	ST   -Y,R31
0012ee 93ea      	ST   -Y,R30
0012ef e1e6      	LDI  R30,LOW(22)
0012f0 e0f0      	LDI  R31,HIGH(22)
0012f1 93fa      	ST   -Y,R31
0012f2 93ea      	ST   -Y,R30
0012f3 85ea      	LDD  R30,Y+10
0012f4 85fb      	LDD  R31,Y+10+1
0012f5 93fa      	ST   -Y,R31
0012f6 93ea      	ST   -Y,R30
0012f7 e0e0      	LDI  R30,LOW(0)
0012f8 e0f0      	LDI  R31,HIGH(0)
0012f9 93fa      	ST   -Y,R31
0012fa 93ea      	ST   -Y,R30
0012fb 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0192 
                 ; 0000 0193     break;
0012fd c2bc      	RJMP _0x126
                 ; 0000 0194     case 2 :
                 _0x128:
0012fe 30e2      	CPI  R30,LOW(0x2)
0012ff e0a0      	LDI  R26,HIGH(0x2)
001300 07fa      	CPC  R31,R26
001301 f011      	BREQ PC+3
001302 940c 1357 	JMP _0x129
                 ; 0000 0195       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
001304 e9ee     +LDI R30 , LOW ( _0x123 + ( 115 ) )
001305 e0f5     +LDI R31 , HIGH ( _0x123 + ( 115 ) )
                 	__POINTW1MN _0x123,115
001306 93fa      	ST   -Y,R31
001307 93ea      	ST   -Y,R30
001308 931a      	ST   -Y,R17
001309 930a      	ST   -Y,R16
00130a 933a      	ST   -Y,R19
00130b 932a      	ST   -Y,R18
00130c 85ea      	LDD  R30,Y+10
00130d 85fb      	LDD  R31,Y+10+1
00130e 93fa      	ST   -Y,R31
00130f 93ea      	ST   -Y,R30
001310 e0e0      	LDI  R30,LOW(0)
001311 e0f0      	LDI  R31,HIGH(0)
001312 93fa      	ST   -Y,R31
001313 93ea      	ST   -Y,R30
001314 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0196       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
001316 eaef     +LDI R30 , LOW ( _0x123 + ( 132 ) )
001317 e0f5     +LDI R31 , HIGH ( _0x123 + ( 132 ) )
                 	__POINTW1MN _0x123,132
001318 93fa      	ST   -Y,R31
001319 93ea      	ST   -Y,R30
00131a 931a      	ST   -Y,R17
00131b 930a      	ST   -Y,R16
00131c 01f9      	MOVW R30,R18
00131d 9670      	ADIW R30,16
00131e 93fa      	ST   -Y,R31
00131f 93ea      	ST   -Y,R30
001320 85ea      	LDD  R30,Y+10
001321 85fb      	LDD  R31,Y+10+1
001322 93fa      	ST   -Y,R31
001323 93ea      	ST   -Y,R30
001324 e0e0      	LDI  R30,LOW(0)
001325 e0f0      	LDI  R31,HIGH(0)
001326 93fa      	ST   -Y,R31
001327 93ea      	ST   -Y,R30
001328 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0197 
                 ; 0000 0198       SSD1963_PutString16("            ", Value_StartX, Value_StartY, Color, BLACK);
                +
00132a ebeb     +LDI R30 , LOW ( _0x123 + ( 144 ) )
00132b e0f5     +LDI R31 , HIGH ( _0x123 + ( 144 ) )
                 	__POINTW1MN _0x123,144
00132c 93fa      	ST   -Y,R31
00132d 93ea      	ST   -Y,R30
00132e e2e2      	LDI  R30,LOW(290)
00132f e0f1      	LDI  R31,HIGH(290)
001330 93fa      	ST   -Y,R31
001331 93ea      	ST   -Y,R30
001332 e0e6      	LDI  R30,LOW(6)
001333 e0f0      	LDI  R31,HIGH(6)
001334 93fa      	ST   -Y,R31
001335 93ea      	ST   -Y,R30
001336 85ea      	LDD  R30,Y+10
001337 85fb      	LDD  R31,Y+10+1
001338 93fa      	ST   -Y,R31
001339 93ea      	ST   -Y,R30
00133a e0e0      	LDI  R30,LOW(0)
00133b e0f0      	LDI  R31,HIGH(0)
00133c 93fa      	ST   -Y,R31
00133d 93ea      	ST   -Y,R30
00133e 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0199       SSD1963_PutString16("            ", Value_StartX, Value_StartY + FONT_HEIGHT, Color, BLACK);
                +
001340 ece8     +LDI R30 , LOW ( _0x123 + ( 157 ) )
001341 e0f5     +LDI R31 , HIGH ( _0x123 + ( 157 ) )
                 	__POINTW1MN _0x123,157
001342 93fa      	ST   -Y,R31
001343 93ea      	ST   -Y,R30
001344 e2e2      	LDI  R30,LOW(290)
001345 e0f1      	LDI  R31,HIGH(290)
001346 93fa      	ST   -Y,R31
001347 93ea      	ST   -Y,R30
001348 e1e6      	LDI  R30,LOW(22)
001349 e0f0      	LDI  R31,HIGH(22)
00134a 93fa      	ST   -Y,R31
00134b 93ea      	ST   -Y,R30
00134c 85ea      	LDD  R30,Y+10
00134d 85fb      	LDD  R31,Y+10+1
00134e 93fa      	ST   -Y,R31
00134f 93ea      	ST   -Y,R30
001350 e0e0      	LDI  R30,LOW(0)
001351 e0f0      	LDI  R31,HIGH(0)
001352 93fa      	ST   -Y,R31
001353 93ea      	ST   -Y,R30
001354 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 019A 
                 ; 0000 019B     break;
001356 c263      	RJMP _0x126
                 ; 0000 019C     /*
                 ; 0000 019D     case 3 :
                 ; 0000 019E       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 019F       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01A0     break;
                 ; 0000 01A1     case 4 :
                 ; 0000 01A2       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 01A3       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01A4     break;
                 ; 0000 01A5    */
                 ; 0000 01A6 
                 ; 0000 01A7     case 5:
                 _0x129:
001357 30e5      	CPI  R30,LOW(0x5)
001358 e0a0      	LDI  R26,HIGH(0x5)
001359 07fa      	CPC  R31,R26
00135a f021      	BREQ _0x12B
                 ; 0000 01A8     case 6:
00135b 30e6      	CPI  R30,LOW(0x6)
00135c e0a0      	LDI  R26,HIGH(0x6)
00135d 07fa      	CPC  R31,R26
00135e f409      	BRNE _0x12C
                 _0x12B:
                 ; 0000 01A9     case 7:
00135f c006      	RJMP _0x12D
                 _0x12C:
001360 30e7      	CPI  R30,LOW(0x7)
001361 e0a0      	LDI  R26,HIGH(0x7)
001362 07fa      	CPC  R31,R26
001363 f011      	BREQ PC+3
001364 940c 142b 	JMP _0x12E
                 _0x12D:
                 ; 0000 01AA       SSD1963_PutString16("ОБН", X, Y, Color, BLACK);
                +
001366 ede5     +LDI R30 , LOW ( _0x123 + ( 170 ) )
001367 e0f5     +LDI R31 , HIGH ( _0x123 + ( 170 ) )
                 	__POINTW1MN _0x123,170
001368 93fa      	ST   -Y,R31
001369 93ea      	ST   -Y,R30
00136a 931a      	ST   -Y,R17
00136b 930a      	ST   -Y,R16
00136c 933a      	ST   -Y,R19
00136d 932a      	ST   -Y,R18
00136e 85ea      	LDD  R30,Y+10
00136f 85fb      	LDD  R31,Y+10+1
001370 93fa      	ST   -Y,R31
001371 93ea      	ST   -Y,R30
001372 e0e0      	LDI  R30,LOW(0)
001373 e0f0      	LDI  R31,HIGH(0)
001374 93fa      	ST   -Y,R31
001375 93ea      	ST   -Y,R30
001376 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01AB       SSD1963_PutString16("АМП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
001378 ede9     +LDI R30 , LOW ( _0x123 + ( 174 ) )
001379 e0f5     +LDI R31 , HIGH ( _0x123 + ( 174 ) )
                 	__POINTW1MN _0x123,174
00137a 93fa      	ST   -Y,R31
00137b 93ea      	ST   -Y,R30
00137c 931a      	ST   -Y,R17
00137d 930a      	ST   -Y,R16
00137e 01f9      	MOVW R30,R18
00137f 9670      	ADIW R30,16
001380 93fa      	ST   -Y,R31
001381 93ea      	ST   -Y,R30
001382 85ea      	LDD  R30,Y+10
001383 85fb      	LDD  R31,Y+10+1
001384 93fa      	ST   -Y,R31
001385 93ea      	ST   -Y,R30
001386 e0e0      	LDI  R30,LOW(0)
001387 e0f0      	LDI  R31,HIGH(0)
001388 93fa      	ST   -Y,R31
001389 93ea      	ST   -Y,R30
00138a 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01AC 
                 ; 0000 01AD       X = Text_StartX + Value_Lenght;
                +
00138c e500     +LDI R16 , LOW ( 80 )
00138d e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                 ; 0000 01AE       SSD1963_PutValue16(GraphUpdTime, X, Y, 4, Color, BLACK);
00138e 91e0 07d5 	LDS  R30,_GraphUpdTime
001390 91f0 07d6 	LDS  R31,_GraphUpdTime+1
001392 93fa      	ST   -Y,R31
001393 93ea      	ST   -Y,R30
001394 931a      	ST   -Y,R17
001395 930a      	ST   -Y,R16
001396 933a      	ST   -Y,R19
001397 932a      	ST   -Y,R18
001398 e0e4      	LDI  R30,LOW(4)
001399 93ea      	ST   -Y,R30
00139a 85eb      	LDD  R30,Y+11
00139b 85fc      	LDD  R31,Y+11+1
00139c 93fa      	ST   -Y,R31
00139d 93ea      	ST   -Y,R30
00139e e0e0      	LDI  R30,LOW(0)
00139f e0f0      	LDI  R31,HIGH(0)
0013a0 93fa      	ST   -Y,R31
0013a1 93ea      	ST   -Y,R30
0013a2 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01AF       X += Value_Lenght + FONT_HEIGHT + FONT_HEIGHT;
                +
0013a4 5a00     +SUBI R16 , LOW ( - 96 )
0013a5 4f1f     +SBCI R17 , HIGH ( - 96 )
                 	__ADDWRN 16,17,96
                 ; 0000 01B0       SSD1963_PutString16("ПЕР", X, Y, Color, BLACK);
                +
0013a6 eded     +LDI R30 , LOW ( _0x123 + ( 178 ) )
0013a7 e0f5     +LDI R31 , HIGH ( _0x123 + ( 178 ) )
                 	__POINTW1MN _0x123,178
0013a8 93fa      	ST   -Y,R31
0013a9 93ea      	ST   -Y,R30
0013aa 931a      	ST   -Y,R17
0013ab 930a      	ST   -Y,R16
0013ac 933a      	ST   -Y,R19
0013ad 932a      	ST   -Y,R18
0013ae 85ea      	LDD  R30,Y+10
0013af 85fb      	LDD  R31,Y+10+1
0013b0 93fa      	ST   -Y,R31
0013b1 93ea      	ST   -Y,R30
0013b2 e0e0      	LDI  R30,LOW(0)
0013b3 e0f0      	LDI  R31,HIGH(0)
0013b4 93fa      	ST   -Y,R31
0013b5 93ea      	ST   -Y,R30
0013b6 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01B1       X += Value_Lenght;
                +
0013b8 5c00     +SUBI R16 , LOW ( - 64 )
0013b9 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01B2       SSD1963_PutValue16(rx_buffer_overflow0, X, Y, 1, Color, BLACK);
0013ba 91e0 07be 	LDS  R30,_rx_buffer_overflow0
0013bc e0f0      	LDI  R31,0
0013bd 93fa      	ST   -Y,R31
0013be 93ea      	ST   -Y,R30
0013bf 931a      	ST   -Y,R17
0013c0 930a      	ST   -Y,R16
0013c1 933a      	ST   -Y,R19
0013c2 932a      	ST   -Y,R18
0013c3 e0e1      	LDI  R30,LOW(1)
0013c4 93ea      	ST   -Y,R30
0013c5 85eb      	LDD  R30,Y+11
0013c6 85fc      	LDD  R31,Y+11+1
0013c7 93fa      	ST   -Y,R31
0013c8 93ea      	ST   -Y,R30
0013c9 e0e0      	LDI  R30,LOW(0)
0013ca e0f0      	LDI  R31,HIGH(0)
0013cb 93fa      	ST   -Y,R31
0013cc 93ea      	ST   -Y,R30
0013cd 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01B3 
                 ; 0000 01B4       X = Text_StartX + Value_Lenght;
                +
0013cf e500     +LDI R16 , LOW ( 80 )
0013d0 e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                 ; 0000 01B5       Y = Text_StartY + FONT_HEIGHT;
                +
0013d1 e126     +LDI R18 , LOW ( 22 )
0013d2 e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
                 ; 0000 01B6       SSD1963_PutValue16(ConfigValue[0], X, Y, 3, Color, (Number==5)?DGRAY:BLACK);
0013d3 91e0 07df 	LDS  R30,_ConfigValue
0013d5 91f0 07e0 	LDS  R31,_ConfigValue+1
0013d7 93fa      	ST   -Y,R31
0013d8 93ea      	ST   -Y,R30
0013d9 931a      	ST   -Y,R17
0013da 930a      	ST   -Y,R16
0013db 933a      	ST   -Y,R19
0013dc 932a      	ST   -Y,R18
0013dd e0e3      	LDI  R30,LOW(3)
0013de 93ea      	ST   -Y,R30
0013df 85eb      	LDD  R30,Y+11
0013e0 85fc      	LDD  R31,Y+11+1
0013e1 93fa      	ST   -Y,R31
0013e2 93ea      	ST   -Y,R30
0013e3 85af      	LDD  R26,Y+15
0013e4 e0b0      	LDI  R27,0
0013e5 9715      	SBIW R26,5
0013e6 f419      	BRNE _0x12F
0013e7 e0e8      	LDI  R30,LOW(8456)
0013e8 e2f1      	LDI  R31,HIGH(8456)
0013e9 c002      	RJMP _0x130
                 _0x12F:
0013ea e0e0      	LDI  R30,LOW(0)
0013eb e0f0      	LDI  R31,HIGH(0)
                 _0x130:
0013ec 93fa      	ST   -Y,R31
0013ed 93ea      	ST   -Y,R30
0013ee 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01B7       X += Value_Lenght;
                +
0013f0 5c00     +SUBI R16 , LOW ( - 64 )
0013f1 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01B8       SSD1963_PutValue16(ConfigValue[1], X, Y, 3, Color, (Number==6)?DGRAY:BLACK);
                +
0013f2 91e0 07e1+LDS R30 , _ConfigValue + ( 2 )
0013f4 91f0 07e2+LDS R31 , _ConfigValue + ( 2 ) + 1
                 	__GETW1MN _ConfigValue,2
0013f6 93fa      	ST   -Y,R31
0013f7 93ea      	ST   -Y,R30
0013f8 931a      	ST   -Y,R17
0013f9 930a      	ST   -Y,R16
0013fa 933a      	ST   -Y,R19
0013fb 932a      	ST   -Y,R18
0013fc e0e3      	LDI  R30,LOW(3)
0013fd 93ea      	ST   -Y,R30
0013fe 85eb      	LDD  R30,Y+11
0013ff 85fc      	LDD  R31,Y+11+1
001400 93fa      	ST   -Y,R31
001401 93ea      	ST   -Y,R30
001402 85af      	LDD  R26,Y+15
001403 e0b0      	LDI  R27,0
001404 9716      	SBIW R26,6
001405 f419      	BRNE _0x132
001406 e0e8      	LDI  R30,LOW(8456)
001407 e2f1      	LDI  R31,HIGH(8456)
001408 c002      	RJMP _0x133
                 _0x132:
001409 e0e0      	LDI  R30,LOW(0)
00140a e0f0      	LDI  R31,HIGH(0)
                 _0x133:
00140b 93fa      	ST   -Y,R31
00140c 93ea      	ST   -Y,R30
00140d 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01B9       X += Value_Lenght;
                +
00140f 5c00     +SUBI R16 , LOW ( - 64 )
001410 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01BA       SSD1963_PutValue16(ConfigValue[2], X, Y, 3, Color, (Number==7)?DGRAY:BLACK);
                +
001411 91e0 07e3+LDS R30 , _ConfigValue + ( 4 )
001413 91f0 07e4+LDS R31 , _ConfigValue + ( 4 ) + 1
                 	__GETW1MN _ConfigValue,4
001415 93fa      	ST   -Y,R31
001416 93ea      	ST   -Y,R30
001417 931a      	ST   -Y,R17
001418 930a      	ST   -Y,R16
001419 933a      	ST   -Y,R19
00141a 932a      	ST   -Y,R18
00141b e0e3      	LDI  R30,LOW(3)
00141c 93ea      	ST   -Y,R30
00141d 85eb      	LDD  R30,Y+11
00141e 85fc      	LDD  R31,Y+11+1
00141f 93fa      	ST   -Y,R31
001420 93ea      	ST   -Y,R30
001421 85af      	LDD  R26,Y+15
001422 e0b0      	LDI  R27,0
001423 9717      	SBIW R26,7
001424 f419      	BRNE _0x135
001425 e0e8      	LDI  R30,LOW(8456)
001426 e2f1      	LDI  R31,HIGH(8456)
001427 c002      	RJMP _0x136
                 _0x135:
001428 e0e0      	LDI  R30,LOW(0)
001429 e0f0      	LDI  R31,HIGH(0)
                 _0x136:
00142a c18b      	RJMP _0x21B
                 ; 0000 01BB     break;
                 ; 0000 01BC     case 8:
                 _0x12E:
00142b 30e8      	CPI  R30,LOW(0x8)
00142c e0a0      	LDI  R26,HIGH(0x8)
00142d 07fa      	CPC  R31,R26
00142e f021      	BREQ _0x139
                 ; 0000 01BD     case 9:
00142f 30e9      	CPI  R30,LOW(0x9)
001430 e0a0      	LDI  R26,HIGH(0x9)
001431 07fa      	CPC  R31,R26
001432 f409      	BRNE _0x13A
                 _0x139:
                 ; 0000 01BE     case 10:
001433 c004      	RJMP _0x13B
                 _0x13A:
001434 30ea      	CPI  R30,LOW(0xA)
001435 e0a0      	LDI  R26,HIGH(0xA)
001436 07fa      	CPC  R31,R26
001437 f409      	BRNE _0x13C
                 _0x13B:
                 ; 0000 01BF     case 11:
001438 c004      	RJMP _0x13D
                 _0x13C:
001439 30eb      	CPI  R30,LOW(0xB)
00143a e0a0      	LDI  R26,HIGH(0xB)
00143b 07fa      	CPC  R31,R26
00143c f409      	BRNE _0x13E
                 _0x13D:
                 ; 0000 01C0     case 12:
00143d c004      	RJMP _0x13F
                 _0x13E:
00143e 30ec      	CPI  R30,LOW(0xC)
00143f e0a0      	LDI  R26,HIGH(0xC)
001440 07fa      	CPC  R31,R26
001441 f409      	BRNE _0x140
                 _0x13F:
                 ; 0000 01C1     case 13:
001442 c006      	RJMP _0x141
                 _0x140:
001443 30ed      	CPI  R30,LOW(0xD)
001444 e0a0      	LDI  R26,HIGH(0xD)
001445 07fa      	CPC  R31,R26
001446 f011      	BREQ PC+3
001447 940c 1528 	JMP _0x142
                 _0x141:
                 ; 0000 01C2       SSD1963_PutString16(" КН", X, Y, Color, BLACK);
                +
001449 eee1     +LDI R30 , LOW ( _0x123 + ( 182 ) )
00144a e0f5     +LDI R31 , HIGH ( _0x123 + ( 182 ) )
                 	__POINTW1MN _0x123,182
00144b 93fa      	ST   -Y,R31
00144c 93ea      	ST   -Y,R30
00144d 931a      	ST   -Y,R17
00144e 930a      	ST   -Y,R16
00144f 933a      	ST   -Y,R19
001450 932a      	ST   -Y,R18
001451 85ea      	LDD  R30,Y+10
001452 85fb      	LDD  R31,Y+10+1
001453 93fa      	ST   -Y,R31
001454 93ea      	ST   -Y,R30
001455 e0e0      	LDI  R30,LOW(0)
001456 e0f0      	LDI  R31,HIGH(0)
001457 93fa      	ST   -Y,R31
001458 93ea      	ST   -Y,R30
001459 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01C3       SSD1963_PutString16(" КТ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
00145b eee5     +LDI R30 , LOW ( _0x123 + ( 186 ) )
00145c e0f5     +LDI R31 , HIGH ( _0x123 + ( 186 ) )
                 	__POINTW1MN _0x123,186
00145d 93fa      	ST   -Y,R31
00145e 93ea      	ST   -Y,R30
00145f 931a      	ST   -Y,R17
001460 930a      	ST   -Y,R16
001461 01f9      	MOVW R30,R18
001462 9670      	ADIW R30,16
001463 93fa      	ST   -Y,R31
001464 93ea      	ST   -Y,R30
001465 85ea      	LDD  R30,Y+10
001466 85fb      	LDD  R31,Y+10+1
001467 93fa      	ST   -Y,R31
001468 93ea      	ST   -Y,R30
001469 e0e0      	LDI  R30,LOW(0)
00146a e0f0      	LDI  R31,HIGH(0)
00146b 93fa      	ST   -Y,R31
00146c 93ea      	ST   -Y,R30
00146d 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01C4 
                 ; 0000 01C5       X = Text_StartX + Value_Lenght;
                +
00146f e500     +LDI R16 , LOW ( 80 )
001470 e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                 ; 0000 01C6       SSD1963_PutValue16(ConfigValue[3], X, Y, 3, Color, (Number==8)?DGRAY:BLACK);
                +
001471 91e0 07e5+LDS R30 , _ConfigValue + ( 6 )
001473 91f0 07e6+LDS R31 , _ConfigValue + ( 6 ) + 1
                 	__GETW1MN _ConfigValue,6
001475 93fa      	ST   -Y,R31
001476 93ea      	ST   -Y,R30
001477 931a      	ST   -Y,R17
001478 930a      	ST   -Y,R16
001479 933a      	ST   -Y,R19
00147a 932a      	ST   -Y,R18
00147b e0e3      	LDI  R30,LOW(3)
00147c 93ea      	ST   -Y,R30
00147d 85eb      	LDD  R30,Y+11
00147e 85fc      	LDD  R31,Y+11+1
00147f 93fa      	ST   -Y,R31
001480 93ea      	ST   -Y,R30
001481 85af      	LDD  R26,Y+15
001482 e0b0      	LDI  R27,0
001483 9718      	SBIW R26,8
001484 f419      	BRNE _0x143
001485 e0e8      	LDI  R30,LOW(8456)
001486 e2f1      	LDI  R31,HIGH(8456)
001487 c002      	RJMP _0x144
                 _0x143:
001488 e0e0      	LDI  R30,LOW(0)
001489 e0f0      	LDI  R31,HIGH(0)
                 _0x144:
00148a 93fa      	ST   -Y,R31
00148b 93ea      	ST   -Y,R30
00148c 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01C7       X += Value_Lenght;
                +
00148e 5c00     +SUBI R16 , LOW ( - 64 )
00148f 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01C8       SSD1963_PutValue16(ConfigValue[4], X, Y, 3, Color, (Number==9)?DGRAY:BLACK);
                +
001490 91e0 07e7+LDS R30 , _ConfigValue + ( 8 )
001492 91f0 07e8+LDS R31 , _ConfigValue + ( 8 ) + 1
                 	__GETW1MN _ConfigValue,8
001494 93fa      	ST   -Y,R31
001495 93ea      	ST   -Y,R30
001496 931a      	ST   -Y,R17
001497 930a      	ST   -Y,R16
001498 933a      	ST   -Y,R19
001499 932a      	ST   -Y,R18
00149a e0e3      	LDI  R30,LOW(3)
00149b 93ea      	ST   -Y,R30
00149c 85eb      	LDD  R30,Y+11
00149d 85fc      	LDD  R31,Y+11+1
00149e 93fa      	ST   -Y,R31
00149f 93ea      	ST   -Y,R30
0014a0 85af      	LDD  R26,Y+15
0014a1 e0b0      	LDI  R27,0
0014a2 9719      	SBIW R26,9
0014a3 f419      	BRNE _0x146
0014a4 e0e8      	LDI  R30,LOW(8456)
0014a5 e2f1      	LDI  R31,HIGH(8456)
0014a6 c002      	RJMP _0x147
                 _0x146:
0014a7 e0e0      	LDI  R30,LOW(0)
0014a8 e0f0      	LDI  R31,HIGH(0)
                 _0x147:
0014a9 93fa      	ST   -Y,R31
0014aa 93ea      	ST   -Y,R30
0014ab 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01C9       X += Value_Lenght;
                +
0014ad 5c00     +SUBI R16 , LOW ( - 64 )
0014ae 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01CA       SSD1963_PutValue16(ConfigValue[5], X, Y, 3, Color, (Number==10)?DGRAY:BLACK);
                +
0014af 91e0 07e9+LDS R30 , _ConfigValue + ( 10 )
0014b1 91f0 07ea+LDS R31 , _ConfigValue + ( 10 ) + 1
                 	__GETW1MN _ConfigValue,10
0014b3 93fa      	ST   -Y,R31
0014b4 93ea      	ST   -Y,R30
0014b5 931a      	ST   -Y,R17
0014b6 930a      	ST   -Y,R16
0014b7 933a      	ST   -Y,R19
0014b8 932a      	ST   -Y,R18
0014b9 e0e3      	LDI  R30,LOW(3)
0014ba 93ea      	ST   -Y,R30
0014bb 85eb      	LDD  R30,Y+11
0014bc 85fc      	LDD  R31,Y+11+1
0014bd 93fa      	ST   -Y,R31
0014be 93ea      	ST   -Y,R30
0014bf 85af      	LDD  R26,Y+15
0014c0 e0b0      	LDI  R27,0
0014c1 971a      	SBIW R26,10
0014c2 f419      	BRNE _0x149
0014c3 e0e8      	LDI  R30,LOW(8456)
0014c4 e2f1      	LDI  R31,HIGH(8456)
0014c5 c002      	RJMP _0x14A
                 _0x149:
0014c6 e0e0      	LDI  R30,LOW(0)
0014c7 e0f0      	LDI  R31,HIGH(0)
                 _0x14A:
0014c8 93fa      	ST   -Y,R31
0014c9 93ea      	ST   -Y,R30
0014ca 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01CB 
                 ; 0000 01CC       X = Text_StartX + Value_Lenght;
                +
0014cc e500     +LDI R16 , LOW ( 80 )
0014cd e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                 ; 0000 01CD       Y = Text_StartY + FONT_HEIGHT;
                +
0014ce e126     +LDI R18 , LOW ( 22 )
0014cf e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
                 ; 0000 01CE       SSD1963_PutValue16(ConfigValue[6], X, Y, 3, Color, (Number==11)?DGRAY:BLACK);
                +
0014d0 91e0 07eb+LDS R30 , _ConfigValue + ( 12 )
0014d2 91f0 07ec+LDS R31 , _ConfigValue + ( 12 ) + 1
                 	__GETW1MN _ConfigValue,12
0014d4 93fa      	ST   -Y,R31
0014d5 93ea      	ST   -Y,R30
0014d6 931a      	ST   -Y,R17
0014d7 930a      	ST   -Y,R16
0014d8 933a      	ST   -Y,R19
0014d9 932a      	ST   -Y,R18
0014da e0e3      	LDI  R30,LOW(3)
0014db 93ea      	ST   -Y,R30
0014dc 85eb      	LDD  R30,Y+11
0014dd 85fc      	LDD  R31,Y+11+1
0014de 93fa      	ST   -Y,R31
0014df 93ea      	ST   -Y,R30
0014e0 85af      	LDD  R26,Y+15
0014e1 e0b0      	LDI  R27,0
0014e2 971b      	SBIW R26,11
0014e3 f419      	BRNE _0x14C
0014e4 e0e8      	LDI  R30,LOW(8456)
0014e5 e2f1      	LDI  R31,HIGH(8456)
0014e6 c002      	RJMP _0x14D
                 _0x14C:
0014e7 e0e0      	LDI  R30,LOW(0)
0014e8 e0f0      	LDI  R31,HIGH(0)
                 _0x14D:
0014e9 93fa      	ST   -Y,R31
0014ea 93ea      	ST   -Y,R30
0014eb 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01CF       X += Value_Lenght;
                +
0014ed 5c00     +SUBI R16 , LOW ( - 64 )
0014ee 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01D0       SSD1963_PutValue16(ConfigValue[7], X, Y, 3, Color, (Number==12)?DGRAY:BLACK);
                +
0014ef 91e0 07ed+LDS R30 , _ConfigValue + ( 14 )
0014f1 91f0 07ee+LDS R31 , _ConfigValue + ( 14 ) + 1
                 	__GETW1MN _ConfigValue,14
0014f3 93fa      	ST   -Y,R31
0014f4 93ea      	ST   -Y,R30
0014f5 931a      	ST   -Y,R17
0014f6 930a      	ST   -Y,R16
0014f7 933a      	ST   -Y,R19
0014f8 932a      	ST   -Y,R18
0014f9 e0e3      	LDI  R30,LOW(3)
0014fa 93ea      	ST   -Y,R30
0014fb 85eb      	LDD  R30,Y+11
0014fc 85fc      	LDD  R31,Y+11+1
0014fd 93fa      	ST   -Y,R31
0014fe 93ea      	ST   -Y,R30
0014ff 85af      	LDD  R26,Y+15
001500 e0b0      	LDI  R27,0
001501 971c      	SBIW R26,12
001502 f419      	BRNE _0x14F
001503 e0e8      	LDI  R30,LOW(8456)
001504 e2f1      	LDI  R31,HIGH(8456)
001505 c002      	RJMP _0x150
                 _0x14F:
001506 e0e0      	LDI  R30,LOW(0)
001507 e0f0      	LDI  R31,HIGH(0)
                 _0x150:
001508 93fa      	ST   -Y,R31
001509 93ea      	ST   -Y,R30
00150a 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01D1       X += Value_Lenght;
                +
00150c 5c00     +SUBI R16 , LOW ( - 64 )
00150d 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01D2       SSD1963_PutValue16(ConfigValue[8], X, Y, 3, Color, (Number==13)?DGRAY:BLACK);
                +
00150e 91e0 07ef+LDS R30 , _ConfigValue + ( 16 )
001510 91f0 07f0+LDS R31 , _ConfigValue + ( 16 ) + 1
                 	__GETW1MN _ConfigValue,16
001512 93fa      	ST   -Y,R31
001513 93ea      	ST   -Y,R30
001514 931a      	ST   -Y,R17
001515 930a      	ST   -Y,R16
001516 933a      	ST   -Y,R19
001517 932a      	ST   -Y,R18
001518 e0e3      	LDI  R30,LOW(3)
001519 93ea      	ST   -Y,R30
00151a 85eb      	LDD  R30,Y+11
00151b 85fc      	LDD  R31,Y+11+1
00151c 93fa      	ST   -Y,R31
00151d 93ea      	ST   -Y,R30
00151e 85af      	LDD  R26,Y+15
00151f e0b0      	LDI  R27,0
001520 971d      	SBIW R26,13
001521 f419      	BRNE _0x152
001522 e0e8      	LDI  R30,LOW(8456)
001523 e2f1      	LDI  R31,HIGH(8456)
001524 c002      	RJMP _0x153
                 _0x152:
001525 e0e0      	LDI  R30,LOW(0)
001526 e0f0      	LDI  R31,HIGH(0)
                 _0x153:
001527 c08e      	RJMP _0x21B
                 ; 0000 01D3     break;
                 ; 0000 01D4     case 14:
                 _0x142:
001528 30ee      	CPI  R30,LOW(0xE)
001529 e0a0      	LDI  R26,HIGH(0xE)
00152a 07fa      	CPC  R31,R26
00152b f021      	BREQ _0x156
                 ; 0000 01D5     case 15:
00152c 30ef      	CPI  R30,LOW(0xF)
00152d e0a0      	LDI  R26,HIGH(0xF)
00152e 07fa      	CPC  R31,R26
00152f f409      	BRNE _0x157
                 _0x156:
                 ; 0000 01D6     case 16:
001530 c006      	RJMP _0x158
                 _0x157:
001531 31e0      	CPI  R30,LOW(0x10)
001532 e0a0      	LDI  R26,HIGH(0x10)
001533 07fa      	CPC  R31,R26
001534 f011      	BREQ PC+3
001535 940c 15ba 	JMP _0x126
                 _0x158:
                 ; 0000 01D7       SSD1963_PutString16("КНТ", X, Y, Color, BLACK);
                +
001537 eee9     +LDI R30 , LOW ( _0x123 + ( 190 ) )
001538 e0f5     +LDI R31 , HIGH ( _0x123 + ( 190 ) )
                 	__POINTW1MN _0x123,190
001539 93fa      	ST   -Y,R31
00153a 93ea      	ST   -Y,R30
00153b 931a      	ST   -Y,R17
00153c 930a      	ST   -Y,R16
00153d 933a      	ST   -Y,R19
00153e 932a      	ST   -Y,R18
00153f 85ea      	LDD  R30,Y+10
001540 85fb      	LDD  R31,Y+10+1
001541 93fa      	ST   -Y,R31
001542 93ea      	ST   -Y,R30
001543 e0e0      	LDI  R30,LOW(0)
001544 e0f0      	LDI  R31,HIGH(0)
001545 93fa      	ST   -Y,R31
001546 93ea      	ST   -Y,R30
001547 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01D8       SSD1963_PutString16("БЫСТАЦП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
001549 eeed     +LDI R30 , LOW ( _0x123 + ( 194 ) )
00154a e0f5     +LDI R31 , HIGH ( _0x123 + ( 194 ) )
                 	__POINTW1MN _0x123,194
00154b 93fa      	ST   -Y,R31
00154c 93ea      	ST   -Y,R30
00154d 931a      	ST   -Y,R17
00154e 930a      	ST   -Y,R16
00154f 01f9      	MOVW R30,R18
001550 9670      	ADIW R30,16
001551 93fa      	ST   -Y,R31
001552 93ea      	ST   -Y,R30
001553 85ea      	LDD  R30,Y+10
001554 85fb      	LDD  R31,Y+10+1
001555 93fa      	ST   -Y,R31
001556 93ea      	ST   -Y,R30
001557 e0e0      	LDI  R30,LOW(0)
001558 e0f0      	LDI  R31,HIGH(0)
001559 93fa      	ST   -Y,R31
00155a 93ea      	ST   -Y,R30
00155b 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 01D9       X += Value_Lenght;
                +
00155d 5c00     +SUBI R16 , LOW ( - 64 )
00155e 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01DA       SSD1963_PutValue16(ConfigValue[9], X, Y, 3, Color, (Number==14)?DGRAY:BLACK);
                +
00155f 91e0 07f1+LDS R30 , _ConfigValue + ( 18 )
001561 91f0 07f2+LDS R31 , _ConfigValue + ( 18 ) + 1
                 	__GETW1MN _ConfigValue,18
001563 93fa      	ST   -Y,R31
001564 93ea      	ST   -Y,R30
001565 931a      	ST   -Y,R17
001566 930a      	ST   -Y,R16
001567 933a      	ST   -Y,R19
001568 932a      	ST   -Y,R18
001569 e0e3      	LDI  R30,LOW(3)
00156a 93ea      	ST   -Y,R30
00156b 85eb      	LDD  R30,Y+11
00156c 85fc      	LDD  R31,Y+11+1
00156d 93fa      	ST   -Y,R31
00156e 93ea      	ST   -Y,R30
00156f 85af      	LDD  R26,Y+15
001570 e0b0      	LDI  R27,0
001571 971e      	SBIW R26,14
001572 f419      	BRNE _0x15A
001573 e0e8      	LDI  R30,LOW(8456)
001574 e2f1      	LDI  R31,HIGH(8456)
001575 c002      	RJMP _0x15B
                 _0x15A:
001576 e0e0      	LDI  R30,LOW(0)
001577 e0f0      	LDI  R31,HIGH(0)
                 _0x15B:
001578 93fa      	ST   -Y,R31
001579 93ea      	ST   -Y,R30
00157a 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01DB       X += Value_Lenght;
                +
00157c 5c00     +SUBI R16 , LOW ( - 64 )
00157d 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01DC       SSD1963_PutValue16(ConfigValue[10], X, Y, 3, Color, (Number==15)?DGRAY:BLACK);
                +
00157e 91e0 07f3+LDS R30 , _ConfigValue + ( 20 )
001580 91f0 07f4+LDS R31 , _ConfigValue + ( 20 ) + 1
                 	__GETW1MN _ConfigValue,20
001582 93fa      	ST   -Y,R31
001583 93ea      	ST   -Y,R30
001584 931a      	ST   -Y,R17
001585 930a      	ST   -Y,R16
001586 933a      	ST   -Y,R19
001587 932a      	ST   -Y,R18
001588 e0e3      	LDI  R30,LOW(3)
001589 93ea      	ST   -Y,R30
00158a 85eb      	LDD  R30,Y+11
00158b 85fc      	LDD  R31,Y+11+1
00158c 93fa      	ST   -Y,R31
00158d 93ea      	ST   -Y,R30
00158e 85af      	LDD  R26,Y+15
00158f e0b0      	LDI  R27,0
001590 971f      	SBIW R26,15
001591 f419      	BRNE _0x15D
001592 e0e8      	LDI  R30,LOW(8456)
001593 e2f1      	LDI  R31,HIGH(8456)
001594 c002      	RJMP _0x15E
                 _0x15D:
001595 e0e0      	LDI  R30,LOW(0)
001596 e0f0      	LDI  R31,HIGH(0)
                 _0x15E:
001597 93fa      	ST   -Y,R31
001598 93ea      	ST   -Y,R30
001599 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01DD       Y += FONT_HEIGHT;
                +
00159b 5f20     +SUBI R18 , LOW ( - 16 )
00159c 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 01DE       SSD1963_PutValue16(ConfigValue[11], X, Y, 1, Color, (Number==16)?DGRAY:BLACK);
                +
00159d 91e0 07f5+LDS R30 , _ConfigValue + ( 22 )
00159f 91f0 07f6+LDS R31 , _ConfigValue + ( 22 ) + 1
                 	__GETW1MN _ConfigValue,22
0015a1 93fa      	ST   -Y,R31
0015a2 93ea      	ST   -Y,R30
0015a3 931a      	ST   -Y,R17
0015a4 930a      	ST   -Y,R16
0015a5 933a      	ST   -Y,R19
0015a6 932a      	ST   -Y,R18
0015a7 e0e1      	LDI  R30,LOW(1)
0015a8 93ea      	ST   -Y,R30
0015a9 85eb      	LDD  R30,Y+11
0015aa 85fc      	LDD  R31,Y+11+1
0015ab 93fa      	ST   -Y,R31
0015ac 93ea      	ST   -Y,R30
0015ad 85af      	LDD  R26,Y+15
0015ae e0b0      	LDI  R27,0
0015af 9750      	SBIW R26,16
0015b0 f419      	BRNE _0x160
0015b1 e0e8      	LDI  R30,LOW(8456)
0015b2 e2f1      	LDI  R31,HIGH(8456)
0015b3 c002      	RJMP _0x161
                 _0x160:
0015b4 e0e0      	LDI  R30,LOW(0)
0015b5 e0f0      	LDI  R31,HIGH(0)
                 _0x161:
                 _0x21B:
0015b6 93fa      	ST   -Y,R31
0015b7 93ea      	ST   -Y,R30
0015b8 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01DF     break;
                 ; 0000 01E0   }
                 _0x126:
                 ; 0000 01E1 }
0015ba 940e 2125 	CALL __LOADLOCR4
                 _0x2020003:
0015bc 9627      	ADIW R28,7
0015bd 9508      	RET
                 
                 	.DSEG
                 _0x123:
00052b           	.BYTE 0xCA
                 ;
                 ;//Функция вывода напряжения(тока) и частоты
                 ;void PutParameterValue(char v1, char v2, char v3, char fHz)
                 ; 0000 01E5 {
                 
                 	.CSEG
                 _PutParameterValue:
                 ; 0000 01E6     int X = Value_StartX;
                 ; 0000 01E7     int Y = Value_StartY ;
                 ; 0000 01E8     unsigned int Color = BLUE;
                 ; 0000 01E9 
                 ; 0000 01EA     //SSD1963_PutString16("            ", X, Y, Color, BLACK);
                 ; 0000 01EB     //SSD1963_PutString16("            ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01EC 
                 ; 0000 01ED     if(ParameterState != 2)
0015be 940e 211c 	CALL __SAVELOCR6
                 ;	v1 -> Y+9
                 ;	v2 -> Y+8
                 ;	v3 -> Y+7
                 ;	fHz -> Y+6
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                 ;	Color -> R20,R21
                +
0015c0 e202     +LDI R16 , LOW ( 290 )
0015c1 e011     +LDI R17 , HIGH ( 290 )
                 	__GETWRN 16,17,290
                +
0015c2 e026     +LDI R18 , LOW ( 6 )
0015c3 e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                +
0015c4 ef48     +LDI R20 , LOW ( 248 )
0015c5 e050     +LDI R21 , HIGH ( 248 )
                 	__GETWRN 20,21,248
0015c6 91a0 07cb 	LDS  R26,_ParameterState
0015c8 30a2      	CPI  R26,LOW(0x2)
0015c9 f411      	BRNE PC+3
0015ca 940c 161f 	JMP _0x163
                 ; 0000 01EE     {
                 ; 0000 01EF         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
0015cc 85e9      	LDD  R30,Y+9
0015cd e0f0      	LDI  R31,0
0015ce 93fa      	ST   -Y,R31
0015cf 93ea      	ST   -Y,R30
0015d0 931a      	ST   -Y,R17
0015d1 930a      	ST   -Y,R16
0015d2 933a      	ST   -Y,R19
0015d3 932a      	ST   -Y,R18
0015d4 e0e3      	LDI  R30,LOW(3)
0015d5 93ea      	ST   -Y,R30
0015d6 935a      	ST   -Y,R21
0015d7 934a      	ST   -Y,R20
0015d8 e0e0      	LDI  R30,LOW(0)
0015d9 e0f0      	LDI  R31,HIGH(0)
0015da 93fa      	ST   -Y,R31
0015db 93ea      	ST   -Y,R30
0015dc 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01F0         X += Value_Lenght;
                +
0015de 5c00     +SUBI R16 , LOW ( - 64 )
0015df 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01F1         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
0015e0 85e8      	LDD  R30,Y+8
0015e1 e0f0      	LDI  R31,0
0015e2 93fa      	ST   -Y,R31
0015e3 93ea      	ST   -Y,R30
0015e4 931a      	ST   -Y,R17
0015e5 930a      	ST   -Y,R16
0015e6 933a      	ST   -Y,R19
0015e7 932a      	ST   -Y,R18
0015e8 e0e3      	LDI  R30,LOW(3)
0015e9 93ea      	ST   -Y,R30
0015ea 935a      	ST   -Y,R21
0015eb 934a      	ST   -Y,R20
0015ec e0e0      	LDI  R30,LOW(0)
0015ed e0f0      	LDI  R31,HIGH(0)
0015ee 93fa      	ST   -Y,R31
0015ef 93ea      	ST   -Y,R30
0015f0 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01F2         X += Value_Lenght;
                +
0015f2 5c00     +SUBI R16 , LOW ( - 64 )
0015f3 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01F3         SSD1963_PutValue16(v3, X, Y, 3, Color, BLACK);
0015f4 81ef      	LDD  R30,Y+7
0015f5 e0f0      	LDI  R31,0
0015f6 93fa      	ST   -Y,R31
0015f7 93ea      	ST   -Y,R30
0015f8 931a      	ST   -Y,R17
0015f9 930a      	ST   -Y,R16
0015fa 933a      	ST   -Y,R19
0015fb 932a      	ST   -Y,R18
0015fc e0e3      	LDI  R30,LOW(3)
0015fd 93ea      	ST   -Y,R30
0015fe 935a      	ST   -Y,R21
0015ff 934a      	ST   -Y,R20
001600 e0e0      	LDI  R30,LOW(0)
001601 e0f0      	LDI  R31,HIGH(0)
001602 93fa      	ST   -Y,R31
001603 93ea      	ST   -Y,R30
001604 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01F4         X = Value_StartX + Value_Lenght;
                +
001606 e602     +LDI R16 , LOW ( 354 )
001607 e011     +LDI R17 , HIGH ( 354 )
                 	__GETWRN 16,17,354
                 ; 0000 01F5         Y += FONT_HEIGHT;
                +
001608 5f20     +SUBI R18 , LOW ( - 16 )
001609 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 01F6         SSD1963_PutValue16(fHz, X, Y, 3, Color, BLACK);
00160a 81ee      	LDD  R30,Y+6
00160b e0f0      	LDI  R31,0
00160c 93fa      	ST   -Y,R31
00160d 93ea      	ST   -Y,R30
00160e 931a      	ST   -Y,R17
00160f 930a      	ST   -Y,R16
001610 933a      	ST   -Y,R19
001611 932a      	ST   -Y,R18
001612 e0e3      	LDI  R30,LOW(3)
001613 93ea      	ST   -Y,R30
001614 935a      	ST   -Y,R21
001615 934a      	ST   -Y,R20
001616 e0e0      	LDI  R30,LOW(0)
001617 e0f0      	LDI  R31,HIGH(0)
001618 93fa      	ST   -Y,R31
001619 93ea      	ST   -Y,R30
00161a 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01F7         X += Value_Lenght;
                +
00161c 5c00     +SUBI R16 , LOW ( - 64 )
00161d 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01F8         //SSD1963_PutString16("ГЦ", X, Y, Color, BLACK);
                 ; 0000 01F9     }
                 ; 0000 01FA     else
00161e c028      	RJMP _0x164
                 _0x163:
                 ; 0000 01FB     {
                 ; 0000 01FC         X += Value_Lenght;
                +
00161f 5c00     +SUBI R16 , LOW ( - 64 )
001620 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 01FD         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
001621 85e9      	LDD  R30,Y+9
001622 e0f0      	LDI  R31,0
001623 93fa      	ST   -Y,R31
001624 93ea      	ST   -Y,R30
001625 931a      	ST   -Y,R17
001626 930a      	ST   -Y,R16
001627 933a      	ST   -Y,R19
001628 932a      	ST   -Y,R18
001629 e0e3      	LDI  R30,LOW(3)
00162a 93ea      	ST   -Y,R30
00162b 935a      	ST   -Y,R21
00162c 934a      	ST   -Y,R20
00162d e0e0      	LDI  R30,LOW(0)
00162e e0f0      	LDI  R31,HIGH(0)
00162f 93fa      	ST   -Y,R31
001630 93ea      	ST   -Y,R30
001631 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 01FE         Y += FONT_HEIGHT;
                +
001633 5f20     +SUBI R18 , LOW ( - 16 )
001634 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 01FF         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
001635 85e8      	LDD  R30,Y+8
001636 e0f0      	LDI  R31,0
001637 93fa      	ST   -Y,R31
001638 93ea      	ST   -Y,R30
001639 931a      	ST   -Y,R17
00163a 930a      	ST   -Y,R16
00163b 933a      	ST   -Y,R19
00163c 932a      	ST   -Y,R18
00163d e0e3      	LDI  R30,LOW(3)
00163e 93ea      	ST   -Y,R30
00163f 935a      	ST   -Y,R21
001640 934a      	ST   -Y,R20
001641 e0e0      	LDI  R30,LOW(0)
001642 e0f0      	LDI  R31,HIGH(0)
001643 93fa      	ST   -Y,R31
001644 93ea      	ST   -Y,R30
001645 940e 09b4 	CALL _SSD1963_PutValue16
                 ; 0000 0200     }
                 _0x164:
                 ; 0000 0201 }
001647 940e 2123 	CALL __LOADLOCR6
001649 962a      	ADIW R28,10
00164a 9508      	RET
                 ;
                 ;void StartPaint()
                 ; 0000 0204 {
                 _StartPaint:
                 ; 0000 0205     //Чтоб первая точка легла
                 ; 0000 0206     Graph_X = -Graph_X_Step;
00164b efea      	LDI  R30,LOW(65530)
00164c efff      	LDI  R31,HIGH(65530)
00164d 93e0 07d7 	STS  _Graph_X,R30
00164f 93f0 07d8 	STS  _Graph_X+1,R31
                 ; 0000 0207 }
001651 9508      	RET
                 ;
                 ;inline void Paint_Phase(void)
                 ; 0000 020A {
                 _Paint_Phase:
                 ; 0000 020B     signed int Value[3];
                 ; 0000 020C     unsigned int Color[] = {RED, YELLOW, GREEN};
                 ; 0000 020D     signed int Lenght = Graph_X + (Graph_X_Step * Graph_Step_N);
                 ; 0000 020E     signed int mid = Graph_Y_Mid;
                 ; 0000 020F     char i, j;
                 ; 0000 0210 
                 ; 0000 0211     if(Graph_X > Graph_X_Max)  //Некуда дальше
001652 972c      	SBIW R28,12
001653 e0e0      	LDI  R30,LOW(0)
001654 83e8      	ST   Y,R30
001655 e1ef      	LDI  R30,LOW(31)
001656 83e9      	STD  Y+1,R30
001657 e0e7      	LDI  R30,LOW(7)
001658 83ea      	STD  Y+2,R30
001659 efef      	LDI  R30,LOW(255)
00165a 83eb      	STD  Y+3,R30
00165b e0e7      	LDI  R30,LOW(7)
00165c 83ec      	STD  Y+4,R30
00165d eee0      	LDI  R30,LOW(224)
00165e 83ed      	STD  Y+5,R30
00165f 940e 211c 	CALL __SAVELOCR6
                 ;	Value -> Y+12
                 ;	Color -> Y+6
                 ;	Lenght -> R16,R17
                 ;	mid -> R18,R19
                 ;	i -> R21
                 ;	j -> R20
001661 91e0 07d7 	LDS  R30,_Graph_X
001663 91f0 07d8 	LDS  R31,_Graph_X+1
001665 963c      	ADIW R30,12
001666 018f      	MOVW R16,R30
                +
001667 e829     +LDI R18 , LOW ( 137 )
001668 e030     +LDI R19 , HIGH ( 137 )
                 	__GETWRN 18,19,137
001669 91a0 07d7 	LDS  R26,_Graph_X
00166b 91b0 07d8 	LDS  R27,_Graph_X+1
00166d 3daf      	CPI  R26,LOW(0x1DF)
00166e e0e1      	LDI  R30,HIGH(0x1DF)
00166f 07be      	CPC  R27,R30
001670 f094      	BRLT _0x165
                 ; 0000 0212     {
                 ; 0000 0213         GraphUpdTime = GraphUpd_mSec;
001671 91e0 07d3 	LDS  R30,_GraphUpd_mSec
001673 91f0 07d4 	LDS  R31,_GraphUpd_mSec+1
001675 93e0 07d5 	STS  _GraphUpdTime,R30
001677 93f0 07d6 	STS  _GraphUpdTime+1,R31
                 ; 0000 0214         while(rx_counter0) getchar0();
                 _0x166:
001679 91e0 07bd 	LDS  R30,_rx_counter0
00167b 30e0      	CPI  R30,0
00167c f019      	BREQ _0x168
00167d 940e 0f13 	CALL _getchar0
00167f cff9      	RJMP _0x166
                 _0x168:
                 ; 0000 0215 GraphState = 0;
001680 e0e0      	LDI  R30,LOW(0)
001681 93e0 07cd 	STS  _GraphState,R30
                 ; 0000 0216     }
                 ; 0000 0217 
                 ; 0000 0218     if( rx_counter0 < 2 || (rx_counter0 < 3 && ParameterState != 2))
                 _0x165:
001683 91a0 07bd 	LDS  R26,_rx_counter0
001685 30a2      	CPI  R26,LOW(0x2)
001686 f038      	BRLO _0x16A
001687 30a3      	CPI  R26,LOW(0x3)
001688 f420      	BRSH _0x16B
001689 91a0 07cb 	LDS  R26,_ParameterState
00168b 30a2      	CPI  R26,LOW(0x2)
00168c f409      	BRNE _0x16A
                 _0x16B:
00168d c01a      	RJMP _0x169
                 _0x16A:
                 ; 0000 0219     {
                 ; 0000 021A         if(GraphUpd_mSec > 100)
00168e 91a0 07d3 	LDS  R26,_GraphUpd_mSec
001690 91b0 07d4 	LDS  R27,_GraphUpd_mSec+1
001692 36a5      	CPI  R26,LOW(0x65)
001693 e0e0      	LDI  R30,HIGH(0x65)
001694 07be      	CPC  R27,R30
001695 f090      	BRLO _0x16E
                 ; 0000 021B         {
                 ; 0000 021C             GraphUpdTime = GraphUpd_mSec;
001696 91e0 07d3 	LDS  R30,_GraphUpd_mSec
001698 91f0 07d4 	LDS  R31,_GraphUpd_mSec+1
00169a 93e0 07d5 	STS  _GraphUpdTime,R30
00169c 93f0 07d6 	STS  _GraphUpdTime+1,R31
                 ; 0000 021D             while(rx_counter0) getchar0();
                 _0x16F:
00169e 91e0 07bd 	LDS  R30,_rx_counter0
0016a0 30e0      	CPI  R30,0
0016a1 f019      	BREQ _0x171
0016a2 940e 0f13 	CALL _getchar0
0016a4 cff9      	RJMP _0x16F
                 _0x171:
                 ; 0000 021E GraphState = 0;
0016a5 e0e0      	LDI  R30,LOW(0)
0016a6 93e0 07cd 	STS  _GraphState,R30
                 ; 0000 021F         }
                 ; 0000 0220     }
                 _0x16E:
                 ; 0000 0221 
                 ; 0000 0222     if(GraphState == 0 || (TOUCH_IRQ < 1 && Touch_mSec > 50)) goto _return; //Увеличиваем
                 _0x169:
0016a8 91a0 07cd 	LDS  R26,_GraphState
0016aa 30a0      	CPI  R26,LOW(0x0)
0016ab f061      	BREQ _0x173
0016ac e0a0      	LDI  R26,0
0016ad 990b      	SBIC 0x1,3
0016ae e0a1      	LDI  R26,1
0016af 30a1      	CPI  R26,LOW(0x1)
0016b0 f430      	BRSH _0x174
0016b1 91a0 07cf 	LDS  R26,_Touch_mSec
0016b3 91b0 07d0 	LDS  R27,_Touch_mSec+1
0016b5 97d3      	SBIW R26,51
0016b6 f408      	BRSH _0x173
                 _0x174:
0016b7 c001      	RJMP _0x172
                 _0x173:
0016b8 c320      	RJMP _0x177
                 ; 0000 0223 
                 ; 0000 0224     if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
                 _0x172:
                +
0016b9 3d0f     +CPI R16 , LOW ( 479 )
0016ba e0e1     +LDI R30 , HIGH ( 479 )
0016bb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
0016bc f014      	BRLT _0x178
                +
0016bd ed0e     +LDI R16 , LOW ( 478 )
0016be e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 0225 
                 ; 0000 0226     if(Graph_X >= Graph_X_Min)
                 _0x178:
0016bf 91a0 07d8 	LDS  R26,_Graph_X+1
0016c1 23aa      	TST  R26
0016c2 f412      	BRPL PC+3
0016c3 940c 174b 	JMP _0x179
                 ; 0000 0227     {
                 ; 0000 0228         // очищаем перед собой столбец пикселей
                 ; 0000 0229         SSD1963_DrawFillRect(Graph_X, Lenght+2, Graph_Y_Min, Graph_Y_Max+1, BLACK);
0016c5 91e0 07d7 	LDS  R30,_Graph_X
0016c7 91f0 07d8 	LDS  R31,_Graph_X+1
0016c9 93fa      	ST   -Y,R31
0016ca 93ea      	ST   -Y,R30
0016cb 01f8      	MOVW R30,R16
0016cc 9632      	ADIW R30,2
0016cd 93fa      	ST   -Y,R31
0016ce 93ea      	ST   -Y,R30
0016cf e2ea      	LDI  R30,LOW(42)
0016d0 e0f0      	LDI  R31,HIGH(42)
0016d1 93fa      	ST   -Y,R31
0016d2 93ea      	ST   -Y,R30
0016d3 eee9      	LDI  R30,LOW(233)
0016d4 e0f0      	LDI  R31,HIGH(233)
0016d5 93fa      	ST   -Y,R31
0016d6 93ea      	ST   -Y,R30
0016d7 e0e0      	LDI  R30,LOW(0)
0016d8 e0f0      	LDI  R31,HIGH(0)
0016d9 93fa      	ST   -Y,R31
0016da 93ea      	ST   -Y,R30
0016db 940e 0b98 	CALL _SSD1963_DrawFillRect
                 ; 0000 022A         //Линия нуля
                 ; 0000 022B         SSD1963_DrawFastLine(Graph_X, Lenght, mid, mid, DGRAY);
0016dd 91e0 07d7 	LDS  R30,_Graph_X
0016df 91f0 07d8 	LDS  R31,_Graph_X+1
0016e1 93fa      	ST   -Y,R31
0016e2 93ea      	ST   -Y,R30
0016e3 931a      	ST   -Y,R17
0016e4 930a      	ST   -Y,R16
0016e5 933a      	ST   -Y,R19
0016e6 932a      	ST   -Y,R18
0016e7 933a      	ST   -Y,R19
0016e8 932a      	ST   -Y,R18
0016e9 e0e8      	LDI  R30,LOW(8456)
0016ea e2f1      	LDI  R31,HIGH(8456)
0016eb 93fa      	ST   -Y,R31
0016ec 93ea      	ST   -Y,R30
0016ed 940e 0a02 	CALL _SSD1963_DrawFastLine
                 ; 0000 022C         SSD1963_DrawFastLine(Graph_X, Lenght, mid+45, mid+45, DGRAY);
0016ef 91e0 07d7 	LDS  R30,_Graph_X
0016f1 91f0 07d8 	LDS  R31,_Graph_X+1
0016f3 93fa      	ST   -Y,R31
0016f4 93ea      	ST   -Y,R30
0016f5 931a      	ST   -Y,R17
0016f6 930a      	ST   -Y,R16
0016f7 01f9      	MOVW R30,R18
0016f8 96bd      	ADIW R30,45
0016f9 93fa      	ST   -Y,R31
0016fa 93ea      	ST   -Y,R30
0016fb 01f9      	MOVW R30,R18
0016fc 96bd      	ADIW R30,45
0016fd 93fa      	ST   -Y,R31
0016fe 93ea      	ST   -Y,R30
0016ff e0e8      	LDI  R30,LOW(8456)
001700 e2f1      	LDI  R31,HIGH(8456)
001701 93fa      	ST   -Y,R31
001702 93ea      	ST   -Y,R30
001703 940e 0a02 	CALL _SSD1963_DrawFastLine
                 ; 0000 022D         SSD1963_DrawFastLine(Graph_X, Lenght, mid-45, mid-45, DGRAY);
001705 91e0 07d7 	LDS  R30,_Graph_X
001707 91f0 07d8 	LDS  R31,_Graph_X+1
001709 93fa      	ST   -Y,R31
00170a 93ea      	ST   -Y,R30
00170b 931a      	ST   -Y,R17
00170c 930a      	ST   -Y,R16
00170d 01f9      	MOVW R30,R18
00170e 97bd      	SBIW R30,45
00170f 93fa      	ST   -Y,R31
001710 93ea      	ST   -Y,R30
001711 01f9      	MOVW R30,R18
001712 97bd      	SBIW R30,45
001713 93fa      	ST   -Y,R31
001714 93ea      	ST   -Y,R30
001715 e0e8      	LDI  R30,LOW(8456)
001716 e2f1      	LDI  R31,HIGH(8456)
001717 93fa      	ST   -Y,R31
001718 93ea      	ST   -Y,R30
001719 940e 0a02 	CALL _SSD1963_DrawFastLine
                 ; 0000 022E         SSD1963_DrawFastLine(Graph_X, Lenght, mid+90, mid+90, DGRAY);
00171b 91e0 07d7 	LDS  R30,_Graph_X
00171d 91f0 07d8 	LDS  R31,_Graph_X+1
00171f 93fa      	ST   -Y,R31
001720 93ea      	ST   -Y,R30
001721 931a      	ST   -Y,R17
001722 930a      	ST   -Y,R16
001723 01f9      	MOVW R30,R18
001724 5ae6      	SUBI R30,LOW(-90)
001725 4fff      	SBCI R31,HIGH(-90)
001726 93fa      	ST   -Y,R31
001727 93ea      	ST   -Y,R30
001728 01f9      	MOVW R30,R18
001729 5ae6      	SUBI R30,LOW(-90)
00172a 4fff      	SBCI R31,HIGH(-90)
00172b 93fa      	ST   -Y,R31
00172c 93ea      	ST   -Y,R30
00172d e0e8      	LDI  R30,LOW(8456)
00172e e2f1      	LDI  R31,HIGH(8456)
00172f 93fa      	ST   -Y,R31
001730 93ea      	ST   -Y,R30
001731 940e 0a02 	CALL _SSD1963_DrawFastLine
                 ; 0000 022F         SSD1963_DrawFastLine(Graph_X, Lenght, mid-90, mid-90, DGRAY);
001733 91e0 07d7 	LDS  R30,_Graph_X
001735 91f0 07d8 	LDS  R31,_Graph_X+1
001737 93fa      	ST   -Y,R31
001738 93ea      	ST   -Y,R30
001739 931a      	ST   -Y,R17
00173a 930a      	ST   -Y,R16
00173b 01f9      	MOVW R30,R18
00173c 55ea      	SUBI R30,LOW(90)
00173d 40f0      	SBCI R31,HIGH(90)
00173e 93fa      	ST   -Y,R31
00173f 93ea      	ST   -Y,R30
001740 01f9      	MOVW R30,R18
001741 55ea      	SUBI R30,LOW(90)
001742 40f0      	SBCI R31,HIGH(90)
001743 93fa      	ST   -Y,R31
001744 93ea      	ST   -Y,R30
001745 e0e8      	LDI  R30,LOW(8456)
001746 e2f1      	LDI  R31,HIGH(8456)
001747 93fa      	ST   -Y,R31
001748 93ea      	ST   -Y,R30
001749 940e 0a02 	CALL _SSD1963_DrawFastLine
                 ; 0000 0230     }
                 ; 0000 0231 
                 ; 0000 0232     if(TOUCH_IRQ < 1 && Touch_mSec > 60) goto _return; //Отзывчивость
                 _0x179:
00174b e0a0      	LDI  R26,0
00174c 990b      	SBIC 0x1,3
00174d e0a1      	LDI  R26,1
00174e 30a1      	CPI  R26,LOW(0x1)
00174f f430      	BRSH _0x17B
001750 91a0 07cf 	LDS  R26,_Touch_mSec
001752 91b0 07d0 	LDS  R27,_Touch_mSec+1
001754 97dd      	SBIW R26,61
001755 f408      	BRSH _0x17C
                 _0x17B:
001756 c001      	RJMP _0x17A
                 _0x17C:
001757 c281      	RJMP _0x177
                 ; 0000 0233 
                 ; 0000 0234     if(ParameterState != 2)
                 _0x17A:
001758 91a0 07cb 	LDS  R26,_ParameterState
00175a 30a2      	CPI  R26,LOW(0x2)
00175b f411      	BRNE PC+3
00175c 940c 1898 	JMP _0x17D
                 ; 0000 0235     {
                 ; 0000 0236         for(j=0; j<Graph_Step_N; j++)
00175e e040      	LDI  R20,LOW(0)
                 _0x17F:
00175f 3042      	CPI  R20,2
001760 f010      	BRLO PC+3
001761 940c 1897 	JMP _0x180
                 ; 0000 0237         {
                 ; 0000 0238             if(Graph_X > Graph_X_Max) break;
001763 91a0 07d7 	LDS  R26,_Graph_X
001765 91b0 07d8 	LDS  R27,_Graph_X+1
001767 3daf      	CPI  R26,LOW(0x1DF)
001768 e0e1      	LDI  R30,HIGH(0x1DF)
001769 07be      	CPC  R27,R30
00176a f00c      	BRLT _0x181
00176b c12b      	RJMP _0x180
                 ; 0000 0239             Lenght = Graph_X + Graph_X_Step;
                 _0x181:
00176c 91e0 07d7 	LDS  R30,_Graph_X
00176e 91f0 07d8 	LDS  R31,_Graph_X+1
001770 9636      	ADIW R30,6
001771 018f      	MOVW R16,R30
                 ; 0000 023A             if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
                +
001772 3d0f     +CPI R16 , LOW ( 479 )
001773 e0e1     +LDI R30 , HIGH ( 479 )
001774 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
001775 f014      	BRLT _0x182
                +
001776 ed0e     +LDI R16 , LOW ( 478 )
001777 e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 023B 
                 ; 0000 023C             if(rx_counter0 < 3 || (TOUCH_IRQ < 1 && Touch_mSec > 70)) goto _return; //Интерфейса
                 _0x182:
001778 91a0 07bd 	LDS  R26,_rx_counter0
00177a 30a3      	CPI  R26,LOW(0x3)
00177b f070      	BRLO _0x184
00177c e0a0      	LDI  R26,0
00177d 990b      	SBIC 0x1,3
00177e e0a1      	LDI  R26,1
00177f 30a1      	CPI  R26,LOW(0x1)
001780 f440      	BRSH _0x185
001781 91a0 07cf 	LDS  R26,_Touch_mSec
001783 91b0 07d0 	LDS  R27,_Touch_mSec+1
001785 34a7      	CPI  R26,LOW(0x47)
001786 e0e0      	LDI  R30,HIGH(0x47)
001787 07be      	CPC  R27,R30
001788 f408      	BRSH _0x184
                 _0x185:
001789 c001      	RJMP _0x183
                 _0x184:
00178a c24e      	RJMP _0x177
                 ; 0000 023D 
                 ; 0000 023E             Value[0] = getchar0();
                 _0x183:
00178b 940e 0f13 	CALL _getchar0
00178d e0f0      	LDI  R31,0
00178e 87ec      	STD  Y+12,R30
00178f 87fd      	STD  Y+12+1,R31
                 ; 0000 023F             Value[1] = getchar0();
001790 940e 0f13 	CALL _getchar0
001792 e0f0      	LDI  R31,0
001793 87ee      	STD  Y+14,R30
001794 87ff      	STD  Y+14+1,R31
                 ; 0000 0240             Value[2] = getchar0();
001795 940e 0f13 	CALL _getchar0
001797 e0f0      	LDI  R31,0
001798 8be8      	STD  Y+16,R30
001799 8bf9      	STD  Y+16+1,R31
                 ; 0000 0241 
                 ; 0000 0242             for(i=0; i<3; i++)
00179a e050      	LDI  R21,LOW(0)
                 _0x189:
00179b 3053      	CPI  R21,3
00179c f010      	BRLO PC+3
00179d 940c 188c 	JMP _0x18A
                 ; 0000 0243             {
                 ; 0000 0244                 Value[i] = 128 - Value[i];
00179f 2fe5      	MOV  R30,R21
0017a0 e0f0      	LDI  R31,0
0017a1 01de      	MOVW R26,R28
0017a2 961c      	ADIW R26,12
0017a3 0fee      	LSL  R30
0017a4 1fff      	ROL  R31
0017a5 0fea      	ADD  R30,R26
0017a6 1ffb      	ADC  R31,R27
0017a7 01bf      	MOVW R22,R30
0017a8 2fe5      	MOV  R30,R21
0017a9 e0f0      	LDI  R31,0
0017aa 01de      	MOVW R26,R28
0017ab 961c      	ADIW R26,12
0017ac 0fee      	LSL  R30
0017ad 1fff      	ROL  R31
0017ae 0fae      	ADD  R26,R30
0017af 1fbf      	ADC  R27,R31
0017b0 940e 20dc 	CALL __GETW1P
0017b2 e8a0      	LDI  R26,LOW(128)
0017b3 e0b0      	LDI  R27,HIGH(128)
0017b4 940e 20e7 	CALL __SWAPW12
0017b6 1bea      	SUB  R30,R26
0017b7 0bfb      	SBC  R31,R27
0017b8 01db      	MOVW R26,R22
0017b9 93ed      	ST   X+,R30
0017ba 93fc      	ST   X,R31
                 ; 0000 0245                 Value[i] *= ConfigValue[ParameterState];
0017bb 2fe5      	MOV  R30,R21
0017bc e0f0      	LDI  R31,0
0017bd 01de      	MOVW R26,R28
0017be 961c      	ADIW R26,12
0017bf 0fee      	LSL  R30
0017c0 1fff      	ROL  R31
0017c1 0fea      	ADD  R30,R26
0017c2 1ffb      	ADC  R31,R27
0017c3 01bf      	MOVW R22,R30
0017c4 8000      	LD   R0,Z
0017c5 8011      	LDD  R1,Z+1
0017c6 91e0 07cb 	LDS  R30,_ParameterState
0017c8 edaf      	LDI  R26,LOW(_ConfigValue)
0017c9 e0b7      	LDI  R27,HIGH(_ConfigValue)
0017ca e0f0      	LDI  R31,0
0017cb 0fee      	LSL  R30
0017cc 1fff      	ROL  R31
0017cd 0fae      	ADD  R26,R30
0017ce 1fbf      	ADC  R27,R31
0017cf 940e 20dc 	CALL __GETW1P
0017d1 01d0      	MOVW R26,R0
0017d2 940e 2049 	CALL __MULW12U
0017d4 01db      	MOVW R26,R22
0017d5 93ed      	ST   X+,R30
0017d6 93fc      	ST   X,R31
                 ; 0000 0246                 Value[i] >>= 7;
0017d7 2fe5      	MOV  R30,R21
0017d8 e0f0      	LDI  R31,0
0017d9 01de      	MOVW R26,R28
0017da 961c      	ADIW R26,12
0017db 0fee      	LSL  R30
0017dc 1fff      	ROL  R31
0017dd 0fae      	ADD  R26,R30
0017de 1fbf      	ADC  R27,R31
0017df 91ed      	LD   R30,X+
0017e0 91fd      	LD   R31,X+
0017e1 940e 203d 	CALL __ASRW3
0017e3 940e 203b 	CALL __ASRW4
0017e5 93fe      	ST   -X,R31
0017e6 93ee      	ST   -X,R30
                 ; 0000 0247                 if(Value[i]&0x0100) Value[i] |= 0xFF00;
0017e7 2fe5      	MOV  R30,R21
0017e8 e0f0      	LDI  R31,0
0017e9 01de      	MOVW R26,R28
0017ea 961c      	ADIW R26,12
0017eb 0fee      	LSL  R30
0017ec 1fff      	ROL  R31
0017ed 0fae      	ADD  R26,R30
0017ee 1fbf      	ADC  R27,R31
0017ef 940e 20dc 	CALL __GETW1P
0017f1 70f1      	ANDI R31,HIGH(0x100)
0017f2 f069      	BREQ _0x18B
0017f3 2fe5      	MOV  R30,R21
0017f4 e0f0      	LDI  R31,0
0017f5 01de      	MOVW R26,R28
0017f6 961c      	ADIW R26,12
0017f7 0fee      	LSL  R30
0017f8 1fff      	ROL  R31
0017f9 0fae      	ADD  R26,R30
0017fa 1fbf      	ADC  R27,R31
0017fb 91ed      	LD   R30,X+
0017fc 91fd      	LD   R31,X+
0017fd 6fff      	ORI  R31,HIGH(0xFF00)
0017fe 93fe      	ST   -X,R31
0017ff 93ee      	ST   -X,R30
                 ; 0000 0248 
                 ; 0000 0249                 Value[i] += mid;
                 _0x18B:
001800 2fe5      	MOV  R30,R21
001801 e0f0      	LDI  R31,0
001802 01de      	MOVW R26,R28
001803 961c      	ADIW R26,12
001804 0fee      	LSL  R30
001805 1fff      	ROL  R31
001806 0fae      	ADD  R26,R30
001807 1fbf      	ADC  R27,R31
001808 91ed      	LD   R30,X+
001809 91fd      	LD   R31,X+
00180a 0fe2      	ADD  R30,R18
00180b 1ff3      	ADC  R31,R19
00180c 93fe      	ST   -X,R31
00180d 93ee      	ST   -X,R30
                 ; 0000 024A                 if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
00180e 2fe5      	MOV  R30,R21
00180f e0f0      	LDI  R31,0
001810 01de      	MOVW R26,R28
001811 961c      	ADIW R26,12
001812 0fee      	LSL  R30
001813 1fff      	ROL  R31
001814 0fae      	ADD  R26,R30
001815 1fbf      	ADC  R27,R31
001816 940e 20dc 	CALL __GETW1P
001818 3ee9      	CPI  R30,LOW(0xE9)
001819 e0a0      	LDI  R26,HIGH(0xE9)
00181a 07fa      	CPC  R31,R26
00181b f064      	BRLT _0x18C
00181c 2fe5      	MOV  R30,R21
00181d e0f0      	LDI  R31,0
00181e 01de      	MOVW R26,R28
00181f 961c      	ADIW R26,12
001820 0fee      	LSL  R30
001821 1fff      	ROL  R31
001822 0fae      	ADD  R26,R30
001823 1fbf      	ADC  R27,R31
001824 eee8      	LDI  R30,LOW(232)
001825 e0f0      	LDI  R31,HIGH(232)
001826 93ed      	ST   X+,R30
001827 93fc      	ST   X,R31
                 ; 0000 024B                 if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x18C:
001828 2fe5      	MOV  R30,R21
001829 e0f0      	LDI  R31,0
00182a 01de      	MOVW R26,R28
00182b 961c      	ADIW R26,12
00182c 0fee      	LSL  R30
00182d 1fff      	ROL  R31
00182e 0fae      	ADD  R26,R30
00182f 1fbf      	ADC  R27,R31
001830 940e 20dc 	CALL __GETW1P
001832 97ba      	SBIW R30,42
001833 f464      	BRGE _0x18D
001834 2fe5      	MOV  R30,R21
001835 e0f0      	LDI  R31,0
001836 01de      	MOVW R26,R28
001837 961c      	ADIW R26,12
001838 0fee      	LSL  R30
001839 1fff      	ROL  R31
00183a 0fae      	ADD  R26,R30
00183b 1fbf      	ADC  R27,R31
00183c e2ea      	LDI  R30,LOW(42)
00183d e0f0      	LDI  R31,HIGH(42)
00183e 93ed      	ST   X+,R30
00183f 93fc      	ST   X,R31
                 ; 0000 024C 
                 ; 0000 024D                 if(Graph_X >= Graph_X_Min)
                 _0x18D:
001840 91a0 07d8 	LDS  R26,_Graph_X+1
001842 23aa      	TST  R26
001843 f182      	BRMI _0x18E
                 ; 0000 024E                 {   // пишем точку в столбце
                 ; 0000 024F                     SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
001844 91e0 07d7 	LDS  R30,_Graph_X
001846 91f0 07d8 	LDS  R31,_Graph_X+1
001848 93fa      	ST   -Y,R31
001849 93ea      	ST   -Y,R30
00184a 931a      	ST   -Y,R17
00184b 930a      	ST   -Y,R16
00184c 2fe5      	MOV  R30,R21
00184d eda9      	LDI  R26,LOW(_ValueLast)
00184e e0b7      	LDI  R27,HIGH(_ValueLast)
00184f e0f0      	LDI  R31,0
001850 0fee      	LSL  R30
001851 1fff      	ROL  R31
001852 0fae      	ADD  R26,R30
001853 1fbf      	ADC  R27,R31
001854 940e 20dc 	CALL __GETW1P
001856 93fa      	ST   -Y,R31
001857 93ea      	ST   -Y,R30
001858 2fe5      	MOV  R30,R21
001859 e0f0      	LDI  R31,0
00185a 01de      	MOVW R26,R28
00185b 9652      	ADIW R26,18
00185c 0fee      	LSL  R30
00185d 1fff      	ROL  R31
00185e 0fae      	ADD  R26,R30
00185f 1fbf      	ADC  R27,R31
001860 940e 20dc 	CALL __GETW1P
001862 93fa      	ST   -Y,R31
001863 93ea      	ST   -Y,R30
001864 2fe5      	MOV  R30,R21
001865 e0f0      	LDI  R31,0
001866 01de      	MOVW R26,R28
001867 961e      	ADIW R26,14
001868 0fee      	LSL  R30
001869 1fff      	ROL  R31
00186a 0fae      	ADD  R26,R30
00186b 1fbf      	ADC  R27,R31
00186c 940e 20dc 	CALL __GETW1P
00186e 93fa      	ST   -Y,R31
00186f 93ea      	ST   -Y,R30
001870 e0e2      	LDI  R30,LOW(2)
001871 93ea      	ST   -Y,R30
001872 940e 0a73 	CALL _SSD1963_DrawLine
                 ; 0000 0250                 }
                 ; 0000 0251                     // определяем предыдущую точку диограммы
                 ; 0000 0252                     ValueLast[i] = Value[i];
                 _0x18E:
001874 2fe5      	MOV  R30,R21
001875 eda9      	LDI  R26,LOW(_ValueLast)
001876 e0b7      	LDI  R27,HIGH(_ValueLast)
001877 e0f0      	LDI  R31,0
001878 0fee      	LSL  R30
001879 1fff      	ROL  R31
00187a 0fea      	ADD  R30,R26
00187b 1ffb      	ADC  R31,R27
00187c 010f      	MOVW R0,R30
00187d 2fe5      	MOV  R30,R21
00187e e0f0      	LDI  R31,0
00187f 01de      	MOVW R26,R28
001880 961c      	ADIW R26,12
001881 0fee      	LSL  R30
001882 1fff      	ROL  R31
001883 0fae      	ADD  R26,R30
001884 1fbf      	ADC  R27,R31
001885 940e 20dc 	CALL __GETW1P
001887 01d0      	MOVW R26,R0
001888 93ed      	ST   X+,R30
001889 93fc      	ST   X,R31
                 ; 0000 0253             }
00188a 5f5f      	SUBI R21,-1
00188b cf0f      	RJMP _0x189
                 _0x18A:
                 ; 0000 0254             Graph_X += Graph_X_Step; // увеличеваем Х диограммы
00188c 91e0 07d7 	LDS  R30,_Graph_X
00188e 91f0 07d8 	LDS  R31,_Graph_X+1
001890 9636      	ADIW R30,6
001891 93e0 07d7 	STS  _Graph_X,R30
001893 93f0 07d8 	STS  _Graph_X+1,R31
                 ; 0000 0255         }
001895 5f4f      	SUBI R20,-1
001896 cec8      	RJMP _0x17F
                 _0x180:
                 ; 0000 0256     }
                 ; 0000 0257     else
001897 c141      	RJMP _0x18F
                 _0x17D:
                 ; 0000 0258     {
                 ; 0000 0259         for(j=0; j<Graph_Step_N; j++)
001898 e040      	LDI  R20,LOW(0)
                 _0x191:
001899 3042      	CPI  R20,2
00189a f010      	BRLO PC+3
00189b 940c 19d9 	JMP _0x192
                 ; 0000 025A         {
                 ; 0000 025B             if(Graph_X > Graph_X_Max) break;
00189d 91a0 07d7 	LDS  R26,_Graph_X
00189f 91b0 07d8 	LDS  R27,_Graph_X+1
0018a1 3daf      	CPI  R26,LOW(0x1DF)
0018a2 e0e1      	LDI  R30,HIGH(0x1DF)
0018a3 07be      	CPC  R27,R30
0018a4 f00c      	BRLT _0x193
0018a5 c133      	RJMP _0x192
                 ; 0000 025C             Lenght = Graph_X + Graph_X_Step;
                 _0x193:
0018a6 91e0 07d7 	LDS  R30,_Graph_X
0018a8 91f0 07d8 	LDS  R31,_Graph_X+1
0018aa 9636      	ADIW R30,6
0018ab 018f      	MOVW R16,R30
                 ; 0000 025D             if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
                +
0018ac 3d0f     +CPI R16 , LOW ( 479 )
0018ad e0e1     +LDI R30 , HIGH ( 479 )
0018ae 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
0018af f014      	BRLT _0x194
                +
0018b0 ed0e     +LDI R16 , LOW ( 478 )
0018b1 e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 025E 
                 ; 0000 025F             if(rx_counter0 < 2 || (TOUCH_IRQ < 1 && Touch_mSec > 70)) goto _return;
                 _0x194:
0018b2 91a0 07bd 	LDS  R26,_rx_counter0
0018b4 30a2      	CPI  R26,LOW(0x2)
0018b5 f070      	BRLO _0x196
0018b6 e0a0      	LDI  R26,0
0018b7 990b      	SBIC 0x1,3
0018b8 e0a1      	LDI  R26,1
0018b9 30a1      	CPI  R26,LOW(0x1)
0018ba f440      	BRSH _0x197
0018bb 91a0 07cf 	LDS  R26,_Touch_mSec
0018bd 91b0 07d0 	LDS  R27,_Touch_mSec+1
0018bf 34a7      	CPI  R26,LOW(0x47)
0018c0 e0e0      	LDI  R30,HIGH(0x47)
0018c1 07be      	CPC  R27,R30
0018c2 f408      	BRSH _0x196
                 _0x197:
0018c3 c001      	RJMP _0x195
                 _0x196:
0018c4 c114      	RJMP _0x177
                 ; 0000 0260 
                 ; 0000 0261             Value[0] = getchar0();
                 _0x195:
0018c5 940e 0f13 	CALL _getchar0
0018c7 e0f0      	LDI  R31,0
0018c8 87ec      	STD  Y+12,R30
0018c9 87fd      	STD  Y+12+1,R31
                 ; 0000 0262             Value[1] = getchar0();
0018ca 940e 0f13 	CALL _getchar0
0018cc e0f0      	LDI  R31,0
0018cd 87ee      	STD  Y+14,R30
0018ce 87ff      	STD  Y+14+1,R31
                 ; 0000 0263 
                 ; 0000 0264             for(i=0; i<2; i++)
0018cf e050      	LDI  R21,LOW(0)
                 _0x19B:
0018d0 3052      	CPI  R21,2
0018d1 f010      	BRLO PC+3
0018d2 940c 19ce 	JMP _0x19C
                 ; 0000 0265             {
                 ; 0000 0266                 Value[i] = 128 - Value[i];
0018d4 2fe5      	MOV  R30,R21
0018d5 e0f0      	LDI  R31,0
0018d6 01de      	MOVW R26,R28
0018d7 961c      	ADIW R26,12
0018d8 0fee      	LSL  R30
0018d9 1fff      	ROL  R31
0018da 0fea      	ADD  R30,R26
0018db 1ffb      	ADC  R31,R27
0018dc 01bf      	MOVW R22,R30
0018dd 2fe5      	MOV  R30,R21
0018de e0f0      	LDI  R31,0
0018df 01de      	MOVW R26,R28
0018e0 961c      	ADIW R26,12
0018e1 0fee      	LSL  R30
0018e2 1fff      	ROL  R31
0018e3 0fae      	ADD  R26,R30
0018e4 1fbf      	ADC  R27,R31
0018e5 940e 20dc 	CALL __GETW1P
0018e7 e8a0      	LDI  R26,LOW(128)
0018e8 e0b0      	LDI  R27,HIGH(128)
0018e9 940e 20e7 	CALL __SWAPW12
0018eb 1bea      	SUB  R30,R26
0018ec 0bfb      	SBC  R31,R27
0018ed 01db      	MOVW R26,R22
0018ee 93ed      	ST   X+,R30
0018ef 93fc      	ST   X,R31
                 ; 0000 0267                 Value[i] *= ConfigValue[ParameterState];
0018f0 2fe5      	MOV  R30,R21
0018f1 e0f0      	LDI  R31,0
0018f2 01de      	MOVW R26,R28
0018f3 961c      	ADIW R26,12
0018f4 0fee      	LSL  R30
0018f5 1fff      	ROL  R31
0018f6 0fea      	ADD  R30,R26
0018f7 1ffb      	ADC  R31,R27
0018f8 01bf      	MOVW R22,R30
0018f9 8000      	LD   R0,Z
0018fa 8011      	LDD  R1,Z+1
0018fb 91e0 07cb 	LDS  R30,_ParameterState
0018fd edaf      	LDI  R26,LOW(_ConfigValue)
0018fe e0b7      	LDI  R27,HIGH(_ConfigValue)
0018ff e0f0      	LDI  R31,0
001900 0fee      	LSL  R30
001901 1fff      	ROL  R31
001902 0fae      	ADD  R26,R30
001903 1fbf      	ADC  R27,R31
001904 940e 20dc 	CALL __GETW1P
001906 01d0      	MOVW R26,R0
001907 940e 2049 	CALL __MULW12U
001909 01db      	MOVW R26,R22
00190a 93ed      	ST   X+,R30
00190b 93fc      	ST   X,R31
                 ; 0000 0268                 Value[i] >>= 7;
00190c 2fe5      	MOV  R30,R21
00190d e0f0      	LDI  R31,0
00190e 01de      	MOVW R26,R28
00190f 961c      	ADIW R26,12
001910 0fee      	LSL  R30
001911 1fff      	ROL  R31
001912 0fae      	ADD  R26,R30
001913 1fbf      	ADC  R27,R31
001914 91ed      	LD   R30,X+
001915 91fd      	LD   R31,X+
001916 940e 203d 	CALL __ASRW3
001918 940e 203b 	CALL __ASRW4
00191a 93fe      	ST   -X,R31
00191b 93ee      	ST   -X,R30
                 ; 0000 0269                 if(Value[i]&0x0100) Value[i] |= 0xFF00;
00191c 2fe5      	MOV  R30,R21
00191d e0f0      	LDI  R31,0
00191e 01de      	MOVW R26,R28
00191f 961c      	ADIW R26,12
001920 0fee      	LSL  R30
001921 1fff      	ROL  R31
001922 0fae      	ADD  R26,R30
001923 1fbf      	ADC  R27,R31
001924 940e 20dc 	CALL __GETW1P
001926 70f1      	ANDI R31,HIGH(0x100)
001927 f069      	BREQ _0x19D
001928 2fe5      	MOV  R30,R21
001929 e0f0      	LDI  R31,0
00192a 01de      	MOVW R26,R28
00192b 961c      	ADIW R26,12
00192c 0fee      	LSL  R30
00192d 1fff      	ROL  R31
00192e 0fae      	ADD  R26,R30
00192f 1fbf      	ADC  R27,R31
001930 91ed      	LD   R30,X+
001931 91fd      	LD   R31,X+
001932 6fff      	ORI  R31,HIGH(0xFF00)
001933 93fe      	ST   -X,R31
001934 93ee      	ST   -X,R30
                 ; 0000 026A 
                 ; 0000 026B                 Value[i] += mid + ((i==1)?(45):(-45));
                 _0x19D:
001935 2fe5      	MOV  R30,R21
001936 e0f0      	LDI  R31,0
001937 01de      	MOVW R26,R28
001938 961c      	ADIW R26,12
001939 0fee      	LSL  R30
00193a 1fff      	ROL  R31
00193b 0fea      	ADD  R30,R26
00193c 1ffb      	ADC  R31,R27
00193d 01bf      	MOVW R22,R30
00193e 8000      	LD   R0,Z
00193f 8011      	LDD  R1,Z+1
001940 2fa5      	MOV  R26,R21
001941 e0b0      	LDI  R27,0
001942 9711      	SBIW R26,1
001943 f419      	BRNE _0x19E
001944 e2ed      	LDI  R30,LOW(45)
001945 e0f0      	LDI  R31,HIGH(45)
001946 c002      	RJMP _0x19F
                 _0x19E:
001947 ede3      	LDI  R30,LOW(65491)
001948 efff      	LDI  R31,HIGH(65491)
                 _0x19F:
001949 0fe2      	ADD  R30,R18
00194a 1ff3      	ADC  R31,R19
00194b 0de0      	ADD  R30,R0
00194c 1df1      	ADC  R31,R1
00194d 01db      	MOVW R26,R22
00194e 93ed      	ST   X+,R30
00194f 93fc      	ST   X,R31
                 ; 0000 026C                 if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
001950 2fe5      	MOV  R30,R21
001951 e0f0      	LDI  R31,0
001952 01de      	MOVW R26,R28
001953 961c      	ADIW R26,12
001954 0fee      	LSL  R30
001955 1fff      	ROL  R31
001956 0fae      	ADD  R26,R30
001957 1fbf      	ADC  R27,R31
001958 940e 20dc 	CALL __GETW1P
00195a 3ee9      	CPI  R30,LOW(0xE9)
00195b e0a0      	LDI  R26,HIGH(0xE9)
00195c 07fa      	CPC  R31,R26
00195d f064      	BRLT _0x1A1
00195e 2fe5      	MOV  R30,R21
00195f e0f0      	LDI  R31,0
001960 01de      	MOVW R26,R28
001961 961c      	ADIW R26,12
001962 0fee      	LSL  R30
001963 1fff      	ROL  R31
001964 0fae      	ADD  R26,R30
001965 1fbf      	ADC  R27,R31
001966 eee8      	LDI  R30,LOW(232)
001967 e0f0      	LDI  R31,HIGH(232)
001968 93ed      	ST   X+,R30
001969 93fc      	ST   X,R31
                 ; 0000 026D                 if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x1A1:
00196a 2fe5      	MOV  R30,R21
00196b e0f0      	LDI  R31,0
00196c 01de      	MOVW R26,R28
00196d 961c      	ADIW R26,12
00196e 0fee      	LSL  R30
00196f 1fff      	ROL  R31
001970 0fae      	ADD  R26,R30
001971 1fbf      	ADC  R27,R31
001972 940e 20dc 	CALL __GETW1P
001974 97ba      	SBIW R30,42
001975 f464      	BRGE _0x1A2
001976 2fe5      	MOV  R30,R21
001977 e0f0      	LDI  R31,0
001978 01de      	MOVW R26,R28
001979 961c      	ADIW R26,12
00197a 0fee      	LSL  R30
00197b 1fff      	ROL  R31
00197c 0fae      	ADD  R26,R30
00197d 1fbf      	ADC  R27,R31
00197e e2ea      	LDI  R30,LOW(42)
00197f e0f0      	LDI  R31,HIGH(42)
001980 93ed      	ST   X+,R30
001981 93fc      	ST   X,R31
                 ; 0000 026E 
                 ; 0000 026F                 if(Graph_X >= Graph_X_Min)
                 _0x1A2:
001982 91a0 07d8 	LDS  R26,_Graph_X+1
001984 23aa      	TST  R26
001985 f182      	BRMI _0x1A3
                 ; 0000 0270                 {   // пишем точку в столбце
                 ; 0000 0271                     SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
001986 91e0 07d7 	LDS  R30,_Graph_X
001988 91f0 07d8 	LDS  R31,_Graph_X+1
00198a 93fa      	ST   -Y,R31
00198b 93ea      	ST   -Y,R30
00198c 931a      	ST   -Y,R17
00198d 930a      	ST   -Y,R16
00198e 2fe5      	MOV  R30,R21
00198f eda9      	LDI  R26,LOW(_ValueLast)
001990 e0b7      	LDI  R27,HIGH(_ValueLast)
001991 e0f0      	LDI  R31,0
001992 0fee      	LSL  R30
001993 1fff      	ROL  R31
001994 0fae      	ADD  R26,R30
001995 1fbf      	ADC  R27,R31
001996 940e 20dc 	CALL __GETW1P
001998 93fa      	ST   -Y,R31
001999 93ea      	ST   -Y,R30
00199a 2fe5      	MOV  R30,R21
00199b e0f0      	LDI  R31,0
00199c 01de      	MOVW R26,R28
00199d 9652      	ADIW R26,18
00199e 0fee      	LSL  R30
00199f 1fff      	ROL  R31
0019a0 0fae      	ADD  R26,R30
0019a1 1fbf      	ADC  R27,R31
0019a2 940e 20dc 	CALL __GETW1P
0019a4 93fa      	ST   -Y,R31
0019a5 93ea      	ST   -Y,R30
0019a6 2fe5      	MOV  R30,R21
0019a7 e0f0      	LDI  R31,0
0019a8 01de      	MOVW R26,R28
0019a9 961e      	ADIW R26,14
0019aa 0fee      	LSL  R30
0019ab 1fff      	ROL  R31
0019ac 0fae      	ADD  R26,R30
0019ad 1fbf      	ADC  R27,R31
0019ae 940e 20dc 	CALL __GETW1P
0019b0 93fa      	ST   -Y,R31
0019b1 93ea      	ST   -Y,R30
0019b2 e0e2      	LDI  R30,LOW(2)
0019b3 93ea      	ST   -Y,R30
0019b4 940e 0a73 	CALL _SSD1963_DrawLine
                 ; 0000 0272                 }
                 ; 0000 0273                     // определяем предыдущую точку диограммы
                 ; 0000 0274                     ValueLast[i] = Value[i];
                 _0x1A3:
0019b6 2fe5      	MOV  R30,R21
0019b7 eda9      	LDI  R26,LOW(_ValueLast)
0019b8 e0b7      	LDI  R27,HIGH(_ValueLast)
0019b9 e0f0      	LDI  R31,0
0019ba 0fee      	LSL  R30
0019bb 1fff      	ROL  R31
0019bc 0fea      	ADD  R30,R26
0019bd 1ffb      	ADC  R31,R27
0019be 010f      	MOVW R0,R30
0019bf 2fe5      	MOV  R30,R21
0019c0 e0f0      	LDI  R31,0
0019c1 01de      	MOVW R26,R28
0019c2 961c      	ADIW R26,12
0019c3 0fee      	LSL  R30
0019c4 1fff      	ROL  R31
0019c5 0fae      	ADD  R26,R30
0019c6 1fbf      	ADC  R27,R31
0019c7 940e 20dc 	CALL __GETW1P
0019c9 01d0      	MOVW R26,R0
0019ca 93ed      	ST   X+,R30
0019cb 93fc      	ST   X,R31
                 ; 0000 0275             }
0019cc 5f5f      	SUBI R21,-1
0019cd cf02      	RJMP _0x19B
                 _0x19C:
                 ; 0000 0276             Graph_X += Graph_X_Step; // увеличеваем Х диограммы
0019ce 91e0 07d7 	LDS  R30,_Graph_X
0019d0 91f0 07d8 	LDS  R31,_Graph_X+1
0019d2 9636      	ADIW R30,6
0019d3 93e0 07d7 	STS  _Graph_X,R30
0019d5 93f0 07d8 	STS  _Graph_X+1,R31
                 ; 0000 0277         }
0019d7 5f4f      	SUBI R20,-1
0019d8 cec0      	RJMP _0x191
                 _0x192:
                 ; 0000 0278     }
                 _0x18F:
                 ; 0000 0279     _return:;
                 _0x177:
                 ; 0000 027A }
0019d9 940e 2123 	CALL __LOADLOCR6
0019db 9662      	ADIW R28,18
0019dc 9508      	RET
                 ;
                 ;//Функция посылающаа управление куда подальше
                 ;inline void TestParameterFun(char aa, char bb, char cc, char fHz)
                 ; 0000 027E {
                 _TestParameterFun:
                 ; 0000 027F     if(aa>101 || aa<99 || bb>101 || bb<99 || cc>101 || cc<99)
                 ;	aa -> Y+3
                 ;	bb -> Y+2
                 ;	cc -> Y+1
                 ;	fHz -> Y+0
0019dd 81ab      	LDD  R26,Y+3
0019de 36a6      	CPI  R26,LOW(0x66)
0019df f460      	BRSH _0x1A5
0019e0 36a3      	CPI  R26,LOW(0x63)
0019e1 f050      	BRLO _0x1A5
0019e2 81aa      	LDD  R26,Y+2
0019e3 36a6      	CPI  R26,LOW(0x66)
0019e4 f438      	BRSH _0x1A5
0019e5 36a3      	CPI  R26,LOW(0x63)
0019e6 f028      	BRLO _0x1A5
0019e7 81a9      	LDD  R26,Y+1
0019e8 36a6      	CPI  R26,LOW(0x66)
0019e9 f410      	BRSH _0x1A5
0019ea 36a3      	CPI  R26,LOW(0x63)
0019eb f4d0      	BRSH _0x1A4
                 _0x1A5:
                 ; 0000 0280     {
                 ; 0000 0281         AddTxData(0x66);
0019ec e6e6      	LDI  R30,LOW(102)
0019ed 93ea      	ST   -Y,R30
0019ee 940e 0ea1 	CALL _AddTxData
                 ; 0000 0282         AddTxData(0x06);
0019f0 e0e6      	LDI  R30,LOW(6)
0019f1 93ea      	ST   -Y,R30
0019f2 940e 0ea1 	CALL _AddTxData
                 ; 0000 0283         AddTxData(0x60);
0019f4 e6e0      	LDI  R30,LOW(96)
0019f5 93ea      	ST   -Y,R30
0019f6 940e 0ea1 	CALL _AddTxData
                 ; 0000 0284         AddTxData(aa);
0019f8 81eb      	LDD  R30,Y+3
0019f9 93ea      	ST   -Y,R30
0019fa 940e 0ea1 	CALL _AddTxData
                 ; 0000 0285         AddTxData(bb);
0019fc 81ea      	LDD  R30,Y+2
0019fd 93ea      	ST   -Y,R30
0019fe 940e 0ea1 	CALL _AddTxData
                 ; 0000 0286         AddTxData(cc);
001a00 81e9      	LDD  R30,Y+1
001a01 93ea      	ST   -Y,R30
001a02 940e 0ea1 	CALL _AddTxData
                 ; 0000 0287         StartTransmit();
001a04 940e 0e9c 	CALL _StartTransmit
                 ; 0000 0288     }
                 ; 0000 0289 
                 ; 0000 028A     if(fHz < 49 || fHz > 50)
                 _0x1A4:
001a06 81a8      	LD   R26,Y
001a07 33a1      	CPI  R26,LOW(0x31)
001a08 f010      	BRLO _0x1A8
001a09 33a3      	CPI  R26,LOW(0x33)
001a0a f0d0      	BRLO _0x1A7
                 _0x1A8:
                 ; 0000 028B     {
                 ; 0000 028C         AddTxData(0x01);
001a0b e0e1      	LDI  R30,LOW(1)
001a0c 93ea      	ST   -Y,R30
001a0d 940e 0ea1 	CALL _AddTxData
                 ; 0000 028D         AddTxData(0x06);
001a0f e0e6      	LDI  R30,LOW(6)
001a10 93ea      	ST   -Y,R30
001a11 940e 0ea1 	CALL _AddTxData
                 ; 0000 028E         AddTxData(0x20);
001a13 e2e0      	LDI  R30,LOW(32)
001a14 93ea      	ST   -Y,R30
001a15 940e 0ea1 	CALL _AddTxData
                 ; 0000 028F         AddTxData(0x01); // установка скорости
001a17 e0e1      	LDI  R30,LOW(1)
001a18 93ea      	ST   -Y,R30
001a19 940e 0ea1 	CALL _AddTxData
                 ; 0000 0290         AddTxData(50);  //Скорость Lo
001a1b e3e2      	LDI  R30,LOW(50)
001a1c 93ea      	ST   -Y,R30
001a1d 940e 0ea1 	CALL _AddTxData
                 ; 0000 0291         AddTxData(0);   //Скорость Hi
001a1f e0e0      	LDI  R30,LOW(0)
001a20 93ea      	ST   -Y,R30
001a21 940e 0ea1 	CALL _AddTxData
                 ; 0000 0292         StartTransmit();
001a23 940e 0e9c 	CALL _StartTransmit
                 ; 0000 0293     }
                 ; 0000 0294 }
                 _0x1A7:
001a25 c32c      	RJMP _0x2020002
                 ;
                 ;void Save_Eeprom(char Number)
                 ; 0000 0297 {
                 _Save_Eeprom:
                 ; 0000 0298     if(Number > 2)
                 ;	Number -> Y+0
001a26 81a8      	LD   R26,Y
001a27 30a3      	CPI  R26,LOW(0x3)
001a28 f130      	BRLO _0x1AA
                 ; 0000 0299     {
                 ; 0000 029A         putchar0_i('K');
001a29 e4eb      	LDI  R30,LOW(75)
001a2a 93ea      	ST   -Y,R30
001a2b 940e 0f6c 	CALL _putchar0_i
                 ; 0000 029B         putchar0_i(Number-3);
001a2d 81e8      	LD   R30,Y
001a2e e0f0      	LDI  R31,0
001a2f 9733      	SBIW R30,3
001a30 93ea      	ST   -Y,R30
001a31 940e 0f6c 	CALL _putchar0_i
                 ; 0000 029C         putchar0_i(ConfigValue[Number] & 0xFF);
001a33 81e8      	LD   R30,Y
001a34 edaf      	LDI  R26,LOW(_ConfigValue)
001a35 e0b7      	LDI  R27,HIGH(_ConfigValue)
001a36 e0f0      	LDI  R31,0
001a37 0fee      	LSL  R30
001a38 1fff      	ROL  R31
001a39 0fae      	ADD  R26,R30
001a3a 1fbf      	ADC  R27,R31
001a3b 91ec      	LD   R30,X
001a3c 93ea      	ST   -Y,R30
001a3d 940e 0f6c 	CALL _putchar0_i
                 ; 0000 029D         putchar0_i(ConfigValue[Number] >> 8);
001a3f 81e8      	LD   R30,Y
001a40 edaf      	LDI  R26,LOW(_ConfigValue)
001a41 e0b7      	LDI  R27,HIGH(_ConfigValue)
001a42 e0f0      	LDI  R31,0
001a43 0fee      	LSL  R30
001a44 1fff      	ROL  R31
001a45 0fae      	ADD  R26,R30
001a46 1fbf      	ADC  R27,R31
001a47 940e 20dc 	CALL __GETW1P
001a49 2fef      	MOV  R30,R31
001a4a e0f0      	LDI  R31,0
001a4b 93ea      	ST   -Y,R30
001a4c 940e 0f6c 	CALL _putchar0_i
                 ; 0000 029E     }
                 ; 0000 029F     else
001a4e c016      	RJMP _0x1AB
                 _0x1AA:
                 ; 0000 02A0     {
                 ; 0000 02A1         ConfigValue_mem[Number] = ConfigValue[Number];
001a4f 81e8      	LD   R30,Y
001a50 e0a0      	LDI  R26,LOW(_ConfigValue_mem)
001a51 e0b0      	LDI  R27,HIGH(_ConfigValue_mem)
001a52 e0f0      	LDI  R31,0
001a53 0fee      	LSL  R30
001a54 1fff      	ROL  R31
001a55 0fea      	ADD  R30,R26
001a56 1ffb      	ADC  R31,R27
001a57 010f      	MOVW R0,R30
001a58 81e8      	LD   R30,Y
001a59 edaf      	LDI  R26,LOW(_ConfigValue)
001a5a e0b7      	LDI  R27,HIGH(_ConfigValue)
001a5b e0f0      	LDI  R31,0
001a5c 0fee      	LSL  R30
001a5d 1fff      	ROL  R31
001a5e 0fae      	ADD  R26,R30
001a5f 1fbf      	ADC  R27,R31
001a60 940e 20dc 	CALL __GETW1P
001a62 01d0      	MOVW R26,R0
001a63 940e 20fe 	CALL __EEPROMWRW
                 ; 0000 02A2     }
                 _0x1AB:
                 ; 0000 02A3 
                 ; 0000 02A4 }
001a65 940c 1f3b 	JMP  _0x2020001
                 ;
                 ;inline void main_loop()  // основной рабочий режим
                 ; 0000 02A7 {
                 _main_loop:
                 ; 0000 02A8     char fHz, a, b, c;
                 ; 0000 02A9 
                 ; 0000 02AA             switch(ValueState)
001a67 940e 211e 	CALL __SAVELOCR4
                 ;	fHz -> R17
                 ;	a -> R16
                 ;	b -> R19
                 ;	c -> R18
001a69 91e0 07cc 	LDS  R30,_ValueState
001a6b e0f0      	LDI  R31,0
                 ; 0000 02AB             {
                 ; 0000 02AC                 case 0:
001a6c 9730      	SBIW R30,0
001a6d f011      	BREQ PC+3
001a6e 940c 1ac7 	JMP _0x1AF
                 ; 0000 02AD                   if(ValueUpd_mSec > 200) //Надо обновить значения, но как?
001a70 91a0 07d1 	LDS  R26,_ValueUpd_mSec
001a72 91b0 07d2 	LDS  R27,_ValueUpd_mSec+1
001a74 3ca9      	CPI  R26,LOW(0xC9)
001a75 e0e0      	LDI  R30,HIGH(0xC9)
001a76 07be      	CPC  R27,R30
001a77 f0b8      	BRLO _0x1B0
                 ; 0000 02AE                   {
                 ; 0000 02AF                       if(ValueState < 2)
001a78 91a0 07cc 	LDS  R26,_ValueState
001a7a 30a2      	CPI  R26,LOW(0x2)
001a7b f498      	BRSH _0x1B1
                 ; 0000 02B0                       {
                 ; 0000 02B1                           while(rx_counter2) getchar2();
                 _0x1B2:
001a7c 91e0 06b9 	LDS  R30,_rx_counter2
001a7e 30e0      	CPI  R30,0
001a7f f019      	BREQ _0x1B4
001a80 940e 0f2a 	CALL _getchar2
001a82 cff9      	RJMP _0x1B2
                 _0x1B4:
                 ; 0000 02B2 putchar2('S');
001a83 e5e3      	LDI  R30,LOW(83)
001a84 93ea      	ST   -Y,R30
001a85 940e 0f95 	CALL _putchar2
                 ; 0000 02B3                           ValueState = 1;
001a87 e0e1      	LDI  R30,LOW(1)
001a88 93e0 07cc 	STS  _ValueState,R30
                 ; 0000 02B4                           ValueUpd_mSec = 0;
001a8a e0e0      	LDI  R30,LOW(0)
001a8b 93e0 07d1 	STS  _ValueUpd_mSec,R30
001a8d 93e0 07d2 	STS  _ValueUpd_mSec+1,R30
                 ; 0000 02B5                       }
                 ; 0000 02B6                   }
                 _0x1B1:
                 ; 0000 02B7                   if(GraphState == 0 && State == 0 && ValueState == 0) //Надо обновить график
                 _0x1B0:
001a8f 91a0 07cd 	LDS  R26,_GraphState
001a91 30a0      	CPI  R26,LOW(0x0)
001a92 f441      	BRNE _0x1B6
001a93 91a0 07ca 	LDS  R26,_State
001a95 30a0      	CPI  R26,LOW(0x0)
001a96 f421      	BRNE _0x1B6
001a97 91a0 07cc 	LDS  R26,_ValueState
001a99 30a0      	CPI  R26,LOW(0x0)
001a9a f009      	BREQ _0x1B7
                 _0x1B6:
001a9b c02a      	RJMP _0x1B5
                 _0x1B7:
                 ; 0000 02B8                   {
                 ; 0000 02B9                       while(rx_counter0) getchar0();
                 _0x1B8:
001a9c 91e0 07bd 	LDS  R30,_rx_counter0
001a9e 30e0      	CPI  R30,0
001a9f f019      	BREQ _0x1BA
001aa0 940e 0f13 	CALL _getchar0
001aa2 cff9      	RJMP _0x1B8
                 _0x1BA:
                 ; 0000 02BA switch(ParameterState)
001aa3 91e0 07cb 	LDS  R30,_ParameterState
001aa5 e0f0      	LDI  R31,0
                 ; 0000 02BB                       {
                 ; 0000 02BC                           case 0: putchar0('U'); break;
001aa6 9730      	SBIW R30,0
001aa7 f411      	BRNE _0x1BE
001aa8 e5e5      	LDI  R30,LOW(85)
001aa9 c00b      	RJMP _0x21C
                 ; 0000 02BD                           case 1: putchar0('I'); break;
                 _0x1BE:
001aaa 30e1      	CPI  R30,LOW(0x1)
001aab e0a0      	LDI  R26,HIGH(0x1)
001aac 07fa      	CPC  R31,R26
001aad f411      	BRNE _0x1BF
001aae e4e9      	LDI  R30,LOW(73)
001aaf c005      	RJMP _0x21C
                 ; 0000 02BE                           case 2: putchar0('Z'); break;
                 _0x1BF:
001ab0 30e2      	CPI  R30,LOW(0x2)
001ab1 e0a0      	LDI  R26,HIGH(0x2)
001ab2 07fa      	CPC  R31,R26
001ab3 f421      	BRNE _0x1BD
001ab4 e5ea      	LDI  R30,LOW(90)
                 _0x21C:
001ab5 93ea      	ST   -Y,R30
001ab6 940e 0f93 	CALL _putchar0
                 ; 0000 02BF                       }
                 _0x1BD:
                 ; 0000 02C0                       ValueState = 2;
001ab8 e0e2      	LDI  R30,LOW(2)
001ab9 93e0 07cc 	STS  _ValueState,R30
                 ; 0000 02C1                       GraphState = 1;
001abb e0e1      	LDI  R30,LOW(1)
001abc 93e0 07cd 	STS  _GraphState,R30
                 ; 0000 02C2 
                 ; 0000 02C3                       StartPaint();
001abe db8c      	RCALL _StartPaint
                 ; 0000 02C4                       GraphUpd_mSec = 0;
001abf e0e0      	LDI  R30,LOW(0)
001ac0 93e0 07d3 	STS  _GraphUpd_mSec,R30
001ac2 93e0 07d4 	STS  _GraphUpd_mSec+1,R30
                 ; 0000 02C5                       rx_buffer_overflow0 = 0;
001ac4 93e0 07be 	STS  _rx_buffer_overflow0,R30
                 ; 0000 02C6                   }
                 ; 0000 02C7                 break;
                 _0x1B5:
001ac6 c080      	RJMP _0x1AE
                 ; 0000 02C8                 case 1:
                 _0x1AF:
001ac7 30e1      	CPI  R30,LOW(0x1)
001ac8 e0a0      	LDI  R26,HIGH(0x1)
001ac9 07fa      	CPC  R31,R26
001aca f011      	BREQ PC+3
001acb 940c 1b1c 	JMP _0x1C1
                 ; 0000 02C9                   if(rx_counter2 > 8)
001acd 91a0 06b9 	LDS  R26,_rx_counter2
001acf 30a9      	CPI  R26,LOW(0x9)
001ad0 f410      	BRSH PC+3
001ad1 940c 1b1b 	JMP _0x1C2
                 ; 0000 02CA                   {
                 ; 0000 02CB                       fHz = getchar2();
001ad3 940e 0f2a 	CALL _getchar2
001ad5 2f1e      	MOV  R17,R30
                 ; 0000 02CC                       a = getchar2();
001ad6 940e 0f2a 	CALL _getchar2
001ad8 2f0e      	MOV  R16,R30
                 ; 0000 02CD                       b = getchar2();
001ad9 940e 0f2a 	CALL _getchar2
001adb 2f3e      	MOV  R19,R30
                 ; 0000 02CE                       c = getchar2();
001adc 940e 0f2a 	CALL _getchar2
001ade 2f2e      	MOV  R18,R30
                 ; 0000 02CF                       TestParameterFun(a, b, c, fHz);
001adf 930a      	ST   -Y,R16
001ae0 933a      	ST   -Y,R19
001ae1 932a      	ST   -Y,R18
001ae2 931a      	ST   -Y,R17
001ae3 def9      	RCALL _TestParameterFun
                 ; 0000 02D0 
                 ; 0000 02D1                       if(State == 0) //Надо обновить значения на дисплее
001ae4 91e0 07ca 	LDS  R30,_State
001ae6 30e0      	CPI  R30,0
001ae7 f549      	BRNE _0x1C3
                 ; 0000 02D2                       {
                 ; 0000 02D3                         switch(ParameterState)
001ae8 91e0 07cb 	LDS  R30,_ParameterState
001aea e0f0      	LDI  R31,0
                 ; 0000 02D4                         {
                 ; 0000 02D5                           case 2:
001aeb 30e2      	CPI  R30,LOW(0x2)
001aec e0a0      	LDI  R26,HIGH(0x2)
001aed 07fa      	CPC  R31,R26
001aee f469      	BRNE _0x1C7
                 ; 0000 02D6                               {
                 ; 0000 02D7                               getchar2();
001aef 940e 0f2a 	CALL _getchar2
                 ; 0000 02D8                               getchar2();
001af1 940e 0f2a 	CALL _getchar2
                 ; 0000 02D9                               getchar2();
001af3 940e 0f2a 	CALL _getchar2
                 ; 0000 02DA                               }
                 ; 0000 02DB                               a = getchar2();
001af5 940e 0f2a 	CALL _getchar2
001af7 2f0e      	MOV  R16,R30
                 ; 0000 02DC                               b = getchar2();
001af8 940e 0f2a 	CALL _getchar2
001afa 2f3e      	MOV  R19,R30
                 ; 0000 02DD                               PutParameterValue(a, b, c, fHz);
001afb c010      	RJMP _0x21D
                 ; 0000 02DE                           break;
                 ; 0000 02DF                           case 1:
                 _0x1C7:
001afc 30e1      	CPI  R30,LOW(0x1)
001afd e0a0      	LDI  R26,HIGH(0x1)
001afe 07fa      	CPC  R31,R26
001aff f451      	BRNE _0x1C8
                 ; 0000 02E0                               a = getchar2();
001b00 940e 0f2a 	CALL _getchar2
001b02 2f0e      	MOV  R16,R30
                 ; 0000 02E1                               b = getchar2();
001b03 940e 0f2a 	CALL _getchar2
001b05 2f3e      	MOV  R19,R30
                 ; 0000 02E2                               c = getchar2();
001b06 940e 0f2a 	CALL _getchar2
001b08 2f2e      	MOV  R18,R30
                 ; 0000 02E3                           case 0:
001b09 c002      	RJMP _0x1C9
                 _0x1C8:
001b0a 9730      	SBIW R30,0
001b0b f429      	BRNE _0x1C6
                 _0x1C9:
                 ; 0000 02E4                               PutParameterValue(a, b, c, fHz);
                 _0x21D:
001b0c 930a      	ST   -Y,R16
001b0d 933a      	ST   -Y,R19
001b0e 932a      	ST   -Y,R18
001b0f 931a      	ST   -Y,R17
001b10 daad      	RCALL _PutParameterValue
                 ; 0000 02E5                           break;
                 ; 0000 02E6                         }
                 _0x1C6:
                 ; 0000 02E7                       }
                 ; 0000 02E8 
                 ; 0000 02E9                       while(rx_counter2) getchar2();
                 _0x1C3:
                 _0x1CB:
001b11 91e0 06b9 	LDS  R30,_rx_counter2
001b13 30e0      	CPI  R30,0
001b14 f019      	BREQ _0x1CD
001b15 940e 0f2a 	CALL _getchar2
001b17 cff9      	RJMP _0x1CB
                 _0x1CD:
                 ; 0000 02EA ValueState = 0;
001b18 e0e0      	LDI  R30,LOW(0)
001b19 93e0 07cc 	STS  _ValueState,R30
                 ; 0000 02EB                   }
                 ; 0000 02EC                 break;
                 _0x1C2:
001b1b c02b      	RJMP _0x1AE
                 ; 0000 02ED                 case 2:
                 _0x1C1:
001b1c 30e2      	CPI  R30,LOW(0x2)
001b1d e0a0      	LDI  R26,HIGH(0x2)
001b1e 07fa      	CPC  R31,R26
001b1f f539      	BRNE _0x1AE
                 ; 0000 02EE                     if(ParameterState == 2 && GraphUpd_mSec < 80 && GraphUpd_mSec > 30)
001b20 91a0 07cb 	LDS  R26,_ParameterState
001b22 30a2      	CPI  R26,LOW(0x2)
001b23 f451      	BRNE _0x1D0
001b24 91a0 07d3 	LDS  R26,_GraphUpd_mSec
001b26 91b0 07d4 	LDS  R27,_GraphUpd_mSec+1
001b28 35a0      	CPI  R26,LOW(0x50)
001b29 e0e0      	LDI  R30,HIGH(0x50)
001b2a 07be      	CPC  R27,R30
001b2b f410      	BRSH _0x1D0
001b2c 975f      	SBIW R26,31
001b2d f408      	BRSH _0x1D1
                 _0x1D0:
001b2e c00d      	RJMP _0x1CF
                 _0x1D1:
                 ; 0000 02EF                     {
                 ; 0000 02F0                         if(tx_counter0 == 0 && rx_buffer_overflow0 == 0) putchar0('Z'); //Вытягиваем недостающие точки
001b2f 91a0 07c9 	LDS  R26,_tx_counter0
001b31 30a0      	CPI  R26,LOW(0x0)
001b32 f421      	BRNE _0x1D3
001b33 91a0 07be 	LDS  R26,_rx_buffer_overflow0
001b35 30a0      	CPI  R26,LOW(0x0)
001b36 f009      	BREQ _0x1D4
                 _0x1D3:
001b37 c004      	RJMP _0x1D2
                 _0x1D4:
001b38 e5ea      	LDI  R30,LOW(90)
001b39 93ea      	ST   -Y,R30
001b3a 940e 0f93 	CALL _putchar0
                 ; 0000 02F1                     }
                 _0x1D2:
                 ; 0000 02F2                     if(GraphUpd_mSec > 200)
                 _0x1CF:
001b3c 91a0 07d3 	LDS  R26,_GraphUpd_mSec
001b3e 91b0 07d4 	LDS  R27,_GraphUpd_mSec+1
001b40 3ca9      	CPI  R26,LOW(0xC9)
001b41 e0e0      	LDI  R30,HIGH(0xC9)
001b42 07be      	CPC  R27,R30
001b43 f018      	BRLO _0x1D5
                 ; 0000 02F3                     {
                 ; 0000 02F4                         ValueState = 0;
001b44 e0e0      	LDI  R30,LOW(0)
001b45 93e0 07cc 	STS  _ValueState,R30
                 ; 0000 02F5                     }
                 ; 0000 02F6                 break;
                 _0x1D5:
                 ; 0000 02F7             }
                 _0x1AE:
                 ; 0000 02F8 
                 ; 0000 02F9             switch(State)
001b47 91e0 07ca 	LDS  R30,_State
001b49 e0f0      	LDI  R31,0
                 ; 0000 02FA             {
                 ; 0000 02FB                 case 1:
001b4a 30e1      	CPI  R30,LOW(0x1)
001b4b e0a0      	LDI  R26,HIGH(0x1)
001b4c 07fa      	CPC  R31,R26
001b4d f4e9      	BRNE _0x1D9
                 ; 0000 02FC                     State = 0;
001b4e e0e0      	LDI  R30,LOW(0)
001b4f 93e0 07ca 	STS  _State,R30
                 ; 0000 02FD                     Repaint_Button("МЕНЮ", 4, BLACK, WHITE);
                +
001b51 efe5     +LDI R30 , LOW ( _0x1DA + ( 0 ) )
001b52 e0f5     +LDI R31 , HIGH ( _0x1DA + ( 0 ) )
                 	__POINTW1MN _0x1DA,0
001b53 93fa      	ST   -Y,R31
001b54 93ea      	ST   -Y,R30
001b55 e0e4      	LDI  R30,LOW(4)
001b56 93ea      	ST   -Y,R30
001b57 e0e0      	LDI  R30,LOW(0)
001b58 e0f0      	LDI  R31,HIGH(0)
001b59 93fa      	ST   -Y,R31
001b5a 93ea      	ST   -Y,R30
001b5b efef      	LDI  R30,LOW(65535)
001b5c efff      	LDI  R31,HIGH(65535)
001b5d 93fa      	ST   -Y,R31
001b5e 93ea      	ST   -Y,R30
001b5f 940e 0f9d 	CALL _Repaint_Button
                 ; 0000 02FE                     PutParameterText(ParameterState, BLUE);
001b61 91e0 07cb 	LDS  R30,_ParameterState
001b63 93ea      	ST   -Y,R30
001b64 efe8      	LDI  R30,LOW(248)
001b65 e0f0      	LDI  R31,HIGH(248)
001b66 93fa      	ST   -Y,R31
001b67 93ea      	ST   -Y,R30
001b68 940e 11f4 	CALL _PutParameterText
                 ; 0000 02FF 
                 ; 0000 0300                 case 0: // основной рабочий режим
001b6a c004      	RJMP _0x1DB
                 _0x1D9:
001b6b 9730      	SBIW R30,0
001b6c f011      	BREQ PC+3
001b6d 940c 1c09 	JMP _0x1DC
                 _0x1DB:
                 ; 0000 0301                 {
                 ; 0000 0302                       if(GraphState) Paint_Phase(); //Рисуем график
001b6f 91e0 07cd 	LDS  R30,_GraphState
001b71 30e0      	CPI  R30,0
001b72 f009      	BREQ _0x1DD
001b73 dade      	RCALL _Paint_Phase
                 ; 0000 0303 
                 ; 0000 0304                       switch (GetButton())
                 _0x1DD:
001b74 940e 1173 	CALL _GetButton
                 ; 0000 0305                       {
                 ; 0000 0306                           case 1:  //Переключение графиков
001b76 30e1      	CPI  R30,LOW(0x1)
001b77 f4a1      	BRNE _0x1E1
                 ; 0000 0307                               if(++ParameterState > 2) ParameterState = 0;
001b78 91a0 07cb 	LDS  R26,_ParameterState
001b7a 5faf      	SUBI R26,-LOW(1)
001b7b 93a0 07cb 	STS  _ParameterState,R26
001b7d 30a3      	CPI  R26,LOW(0x3)
001b7e f018      	BRLO _0x1E2
001b7f e0e0      	LDI  R30,LOW(0)
001b80 93e0 07cb 	STS  _ParameterState,R30
                 ; 0000 0308                               PutParameterText(ParameterState, BLUE);
                 _0x1E2:
001b82 91e0 07cb 	LDS  R30,_ParameterState
001b84 93ea      	ST   -Y,R30
001b85 efe8      	LDI  R30,LOW(248)
001b86 e0f0      	LDI  R31,HIGH(248)
001b87 93fa      	ST   -Y,R31
001b88 93ea      	ST   -Y,R30
001b89 940e 11f4 	CALL _PutParameterText
                 ; 0000 0309                           break;
001b8b c07c      	RJMP _0x1E0
                 ; 0000 030A                           case 2:
                 _0x1E1:
001b8c 30e2      	CPI  R30,LOW(0x2)
001b8d f011      	BREQ PC+3
001b8e 940c 1bc7 	JMP _0x1E3
                 ; 0000 030B                               if(ConfigValue[ParameterState] < ConfigParam[2][ParameterState])
001b90 91e0 07cb 	LDS  R30,_ParameterState
001b92 edaf      	LDI  R26,LOW(_ConfigValue)
001b93 e0b7      	LDI  R27,HIGH(_ConfigValue)
001b94 e0f0      	LDI  R31,0
001b95 0fee      	LSL  R30
001b96 1fff      	ROL  R31
001b97 0fae      	ADD  R26,R30
001b98 1fbf      	ADC  R27,R31
001b99 916d      	LD   R22,X+
001b9a 917c      	LD   R23,X
                +
001b9b efec     +LDI R30 , LOW ( 2 * _ConfigParam + ( 48 ) )
001b9c e0f9     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 48 ) )
                 	__POINTW1FN _ConfigParam,48
001b9d 01df      	MOVW R26,R30
001b9e 91e0 07cb 	LDS  R30,_ParameterState
001ba0 e0f0      	LDI  R31,0
001ba1 0fee      	LSL  R30
001ba2 1fff      	ROL  R31
001ba3 0fea      	ADD  R30,R26
001ba4 1ffb      	ADC  R31,R27
001ba5 940e 20e0 	CALL __GETW1PF
001ba7 176e      	CP   R22,R30
001ba8 077f      	CPC  R23,R31
001ba9 f4e0      	BRSH _0x1E4
                 ; 0000 030C                               {
                 ; 0000 030D                                   ConfigValue[ParameterState] += ConfigParam[0][ParameterState];
001baa 91e0 07cb 	LDS  R30,_ParameterState
001bac edaf      	LDI  R26,LOW(_ConfigValue)
001bad e0b7      	LDI  R27,HIGH(_ConfigValue)
001bae e0f0      	LDI  R31,0
001baf 0fee      	LSL  R30
001bb0 1fff      	ROL  R31
001bb1 0fea      	ADD  R30,R26
001bb2 1ffb      	ADC  R31,R27
001bb3 01cf      	MOVW R24,R30
001bb4 8160      	LD   R22,Z
001bb5 8171      	LDD  R23,Z+1
001bb6 91e0 07cb 	LDS  R30,_ParameterState
001bb8 ecac      	LDI  R26,LOW(_ConfigParam*2)
001bb9 e0b9      	LDI  R27,HIGH(_ConfigParam*2)
001bba e0f0      	LDI  R31,0
001bbb 0fee      	LSL  R30
001bbc 1fff      	ROL  R31
001bbd 0fea      	ADD  R30,R26
001bbe 1ffb      	ADC  R31,R27
001bbf 940e 20e0 	CALL __GETW1PF
001bc1 0fe6      	ADD  R30,R22
001bc2 1ff7      	ADC  R31,R23
001bc3 01dc      	MOVW R26,R24
001bc4 93ed      	ST   X+,R30
001bc5 93fc      	ST   X,R31
                 ; 0000 030E                               }
                 ; 0000 030F                           break;
                 _0x1E4:
001bc6 c041      	RJMP _0x1E0
                 ; 0000 0310                           case 3:
                 _0x1E3:
001bc7 30e3      	CPI  R30,LOW(0x3)
001bc8 f011      	BREQ PC+3
001bc9 940c 1c03 	JMP _0x1E5
                 ; 0000 0311                               if(ConfigValue[ParameterState] > ConfigParam[1][ParameterState])
001bcb 91e0 07cb 	LDS  R30,_ParameterState
001bcd edaf      	LDI  R26,LOW(_ConfigValue)
001bce e0b7      	LDI  R27,HIGH(_ConfigValue)
001bcf e0f0      	LDI  R31,0
001bd0 0fee      	LSL  R30
001bd1 1fff      	ROL  R31
001bd2 0fae      	ADD  R26,R30
001bd3 1fbf      	ADC  R27,R31
001bd4 916d      	LD   R22,X+
001bd5 917c      	LD   R23,X
                +
001bd6 eee4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 24 ) )
001bd7 e0f9     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 24 ) )
                 	__POINTW1FN _ConfigParam,24
001bd8 01df      	MOVW R26,R30
001bd9 91e0 07cb 	LDS  R30,_ParameterState
001bdb e0f0      	LDI  R31,0
001bdc 0fee      	LSL  R30
001bdd 1fff      	ROL  R31
001bde 0fea      	ADD  R30,R26
001bdf 1ffb      	ADC  R31,R27
001be0 940e 20e0 	CALL __GETW1PF
001be2 17e6      	CP   R30,R22
001be3 07f7      	CPC  R31,R23
001be4 f4e8      	BRSH _0x1E6
                 ; 0000 0312                               {
                 ; 0000 0313                                   ConfigValue[ParameterState] -= ConfigParam[0][ParameterState];
001be5 91e0 07cb 	LDS  R30,_ParameterState
001be7 edaf      	LDI  R26,LOW(_ConfigValue)
001be8 e0b7      	LDI  R27,HIGH(_ConfigValue)
001be9 e0f0      	LDI  R31,0
001bea 0fee      	LSL  R30
001beb 1fff      	ROL  R31
001bec 0fea      	ADD  R30,R26
001bed 1ffb      	ADC  R31,R27
001bee 010f      	MOVW R0,R30
001bef 8160      	LD   R22,Z
001bf0 8171      	LDD  R23,Z+1
001bf1 91e0 07cb 	LDS  R30,_ParameterState
001bf3 ecac      	LDI  R26,LOW(_ConfigParam*2)
001bf4 e0b9      	LDI  R27,HIGH(_ConfigParam*2)
001bf5 e0f0      	LDI  R31,0
001bf6 0fee      	LSL  R30
001bf7 1fff      	ROL  R31
001bf8 0fea      	ADD  R30,R26
001bf9 1ffb      	ADC  R31,R27
001bfa 940e 20e4 	CALL __GETW2PF
001bfc 01fb      	MOVW R30,R22
001bfd 1bea      	SUB  R30,R26
001bfe 0bfb      	SBC  R31,R27
001bff 01d0      	MOVW R26,R0
001c00 93ed      	ST   X+,R30
001c01 93fc      	ST   X,R31
                 ; 0000 0314                               }
                 ; 0000 0315                           break;
                 _0x1E6:
001c02 c005      	RJMP _0x1E0
                 ; 0000 0316                           case 4:  //Уходим в настройки
                 _0x1E5:
001c03 30e4      	CPI  R30,LOW(0x4)
001c04 f419      	BRNE _0x1E0
                 ; 0000 0317                                State = 4;
001c05 e0e4      	LDI  R30,LOW(4)
001c06 93e0 07ca 	STS  _State,R30
                 ; 0000 0318                           break;
                 ; 0000 0319                       }
                 _0x1E0:
                 ; 0000 031A                 }
                 ; 0000 031B                 break;
001c08 c147      	RJMP _0x1D8
                 ; 0000 031C                 case 4:
                 _0x1DC:
001c09 30e4      	CPI  R30,LOW(0x4)
001c0a e0a0      	LDI  R26,HIGH(0x4)
001c0b 07fa      	CPC  R31,R26
001c0c f591      	BRNE _0x1E8
                 ; 0000 031D                     State = 5;
001c0d e0e5      	LDI  R30,LOW(5)
001c0e 93e0 07ca 	STS  _State,R30
                 ; 0000 031E                     ConfigState = 0;
001c10 e0e0      	LDI  R30,LOW(0)
001c11 93e0 07ce 	STS  _ConfigState,R30
                 ; 0000 031F                     Repaint_Button("НАЗАД", 4, BLACK, WHITE);
                +
001c13 efea     +LDI R30 , LOW ( _0x1DA + ( 5 ) )
001c14 e0f5     +LDI R31 , HIGH ( _0x1DA + ( 5 ) )
                 	__POINTW1MN _0x1DA,5
001c15 93fa      	ST   -Y,R31
001c16 93ea      	ST   -Y,R30
001c17 e0e4      	LDI  R30,LOW(4)
001c18 93ea      	ST   -Y,R30
001c19 e0e0      	LDI  R30,LOW(0)
001c1a e0f0      	LDI  R31,HIGH(0)
001c1b 93fa      	ST   -Y,R31
001c1c 93ea      	ST   -Y,R30
001c1d efef      	LDI  R30,LOW(65535)
001c1e efff      	LDI  R31,HIGH(65535)
001c1f 93fa      	ST   -Y,R31
001c20 93ea      	ST   -Y,R30
001c21 940e 0f9d 	CALL _Repaint_Button
                 ; 0000 0320                     PutParameterText(ConfigState + State, PURPLE);
001c23 91e0 07ca 	LDS  R30,_State
001c25 91a0 07ce 	LDS  R26,_ConfigState
001c27 0fea      	ADD  R30,R26
001c28 93ea      	ST   -Y,R30
001c29 e0ef      	LDI  R30,LOW(30735)
001c2a e7f8      	LDI  R31,HIGH(30735)
001c2b 93fa      	ST   -Y,R31
001c2c 93ea      	ST   -Y,R30
001c2d 940e 11f4 	CALL _PutParameterText
                 ; 0000 0321                     old_confVal = ConfigValue[ConfigState];
001c2f 91e0 07ce 	LDS  R30,_ConfigState
001c31 edaf      	LDI  R26,LOW(_ConfigValue)
001c32 e0b7      	LDI  R27,HIGH(_ConfigValue)
001c33 e0f0      	LDI  R31,0
001c34 0fee      	LSL  R30
001c35 1fff      	ROL  R31
001c36 0fae      	ADD  R26,R30
001c37 1fbf      	ADC  R27,R31
001c38 940e 20dc 	CALL __GETW1P
001c3a 93e0 07f7 	STS  _old_confVal,R30
001c3c 93f0 07f8 	STS  _old_confVal+1,R31
                 ; 0000 0322 
                 ; 0000 0323                 case 5: // настройки
001c3e c006      	RJMP _0x1E9
                 _0x1E8:
001c3f 30e5      	CPI  R30,LOW(0x5)
001c40 e0a0      	LDI  R26,HIGH(0x5)
001c41 07fa      	CPC  R31,R26
001c42 f011      	BREQ PC+3
001c43 940c 1d1c 	JMP _0x1EA
                 _0x1E9:
                 ; 0000 0324                 {
                 ; 0000 0325                     switch (GetButton())
001c45 940e 1173 	CALL _GetButton
                 ; 0000 0326                     {
                 ; 0000 0327                         case 1:
001c47 30e1      	CPI  R30,LOW(0x1)
001c48 f011      	BREQ PC+3
001c49 940c 1c87 	JMP _0x1EE
                 ; 0000 0328                             if(old_confVal != ConfigValue[ConfigState])
001c4b 91e0 07ce 	LDS  R30,_ConfigState
001c4d edaf      	LDI  R26,LOW(_ConfigValue)
001c4e e0b7      	LDI  R27,HIGH(_ConfigValue)
001c4f e0f0      	LDI  R31,0
001c50 0fee      	LSL  R30
001c51 1fff      	ROL  R31
001c52 0fae      	ADD  R26,R30
001c53 1fbf      	ADC  R27,R31
001c54 940e 20dc 	CALL __GETW1P
001c56 91a0 07f7 	LDS  R26,_old_confVal
001c58 91b0 07f8 	LDS  R27,_old_confVal+1
001c5a 17ea      	CP   R30,R26
001c5b 07fb      	CPC  R31,R27
001c5c f021      	BREQ _0x1EF
                 ; 0000 0329                             {
                 ; 0000 032A                                 //Сохраняем значение
                 ; 0000 032B                                 Save_Eeprom(ConfigState);
001c5d 91e0 07ce 	LDS  R30,_ConfigState
001c5f 93ea      	ST   -Y,R30
001c60 ddc5      	RCALL _Save_Eeprom
                 ; 0000 032C                             }
                 ; 0000 032D 
                 ; 0000 032E                             if(++ConfigState > 11) ConfigState = 0;
                 _0x1EF:
001c61 91a0 07ce 	LDS  R26,_ConfigState
001c63 5faf      	SUBI R26,-LOW(1)
001c64 93a0 07ce 	STS  _ConfigState,R26
001c66 30ac      	CPI  R26,LOW(0xC)
001c67 f018      	BRLO _0x1F0
001c68 e0e0      	LDI  R30,LOW(0)
001c69 93e0 07ce 	STS  _ConfigState,R30
                 ; 0000 032F                             PutParameterText(ConfigState + State, PURPLE);
                 _0x1F0:
001c6b 91e0 07ca 	LDS  R30,_State
001c6d 91a0 07ce 	LDS  R26,_ConfigState
001c6f 0fea      	ADD  R30,R26
001c70 93ea      	ST   -Y,R30
001c71 e0ef      	LDI  R30,LOW(30735)
001c72 e7f8      	LDI  R31,HIGH(30735)
001c73 93fa      	ST   -Y,R31
001c74 93ea      	ST   -Y,R30
001c75 940e 11f4 	CALL _PutParameterText
                 ; 0000 0330 
                 ; 0000 0331                             old_confVal = ConfigValue[ConfigState];
001c77 91e0 07ce 	LDS  R30,_ConfigState
001c79 edaf      	LDI  R26,LOW(_ConfigValue)
001c7a e0b7      	LDI  R27,HIGH(_ConfigValue)
001c7b e0f0      	LDI  R31,0
001c7c 0fee      	LSL  R30
001c7d 1fff      	ROL  R31
001c7e 0fae      	ADD  R26,R30
001c7f 1fbf      	ADC  R27,R31
001c80 940e 20dc 	CALL __GETW1P
001c82 93e0 07f7 	STS  _old_confVal,R30
001c84 93f0 07f8 	STS  _old_confVal+1,R31
                 ; 0000 0332                         break;
001c86 c094      	RJMP _0x1ED
                 ; 0000 0333                         case 2:
                 _0x1EE:
001c87 30e2      	CPI  R30,LOW(0x2)
001c88 f011      	BREQ PC+3
001c89 940c 1cce 	JMP _0x1F1
                 ; 0000 0334                               if(ConfigValue[ConfigState] < ConfigParam[2][ConfigState])
001c8b 91e0 07ce 	LDS  R30,_ConfigState
001c8d edaf      	LDI  R26,LOW(_ConfigValue)
001c8e e0b7      	LDI  R27,HIGH(_ConfigValue)
001c8f e0f0      	LDI  R31,0
001c90 0fee      	LSL  R30
001c91 1fff      	ROL  R31
001c92 0fae      	ADD  R26,R30
001c93 1fbf      	ADC  R27,R31
001c94 916d      	LD   R22,X+
001c95 917c      	LD   R23,X
                +
001c96 efec     +LDI R30 , LOW ( 2 * _ConfigParam + ( 48 ) )
001c97 e0f9     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 48 ) )
                 	__POINTW1FN _ConfigParam,48
001c98 01df      	MOVW R26,R30
001c99 91e0 07ce 	LDS  R30,_ConfigState
001c9b e0f0      	LDI  R31,0
001c9c 0fee      	LSL  R30
001c9d 1fff      	ROL  R31
001c9e 0fea      	ADD  R30,R26
001c9f 1ffb      	ADC  R31,R27
001ca0 940e 20e0 	CALL __GETW1PF
001ca2 176e      	CP   R22,R30
001ca3 077f      	CPC  R23,R31
001ca4 f540      	BRSH _0x1F2
                 ; 0000 0335                               {
                 ; 0000 0336                                   ConfigValue[ConfigState] += ConfigParam[0][ConfigState];
001ca5 91e0 07ce 	LDS  R30,_ConfigState
001ca7 edaf      	LDI  R26,LOW(_ConfigValue)
001ca8 e0b7      	LDI  R27,HIGH(_ConfigValue)
001ca9 e0f0      	LDI  R31,0
001caa 0fee      	LSL  R30
001cab 1fff      	ROL  R31
001cac 0fea      	ADD  R30,R26
001cad 1ffb      	ADC  R31,R27
001cae 01cf      	MOVW R24,R30
001caf 8160      	LD   R22,Z
001cb0 8171      	LDD  R23,Z+1
001cb1 91e0 07ce 	LDS  R30,_ConfigState
001cb3 ecac      	LDI  R26,LOW(_ConfigParam*2)
001cb4 e0b9      	LDI  R27,HIGH(_ConfigParam*2)
001cb5 e0f0      	LDI  R31,0
001cb6 0fee      	LSL  R30
001cb7 1fff      	ROL  R31
001cb8 0fea      	ADD  R30,R26
001cb9 1ffb      	ADC  R31,R27
001cba 940e 20e0 	CALL __GETW1PF
001cbc 0fe6      	ADD  R30,R22
001cbd 1ff7      	ADC  R31,R23
001cbe 01dc      	MOVW R26,R24
001cbf 93ed      	ST   X+,R30
001cc0 93fc      	ST   X,R31
                 ; 0000 0337                                   PutParameterText(ConfigState + State, PURPLE);
001cc1 91e0 07ca 	LDS  R30,_State
001cc3 91a0 07ce 	LDS  R26,_ConfigState
001cc5 0fea      	ADD  R30,R26
001cc6 93ea      	ST   -Y,R30
001cc7 e0ef      	LDI  R30,LOW(30735)
001cc8 e7f8      	LDI  R31,HIGH(30735)
001cc9 93fa      	ST   -Y,R31
001cca 93ea      	ST   -Y,R30
001ccb 940e 11f4 	CALL _PutParameterText
                 ; 0000 0338                               }
                 ; 0000 0339                         break;
                 _0x1F2:
001ccd c04d      	RJMP _0x1ED
                 ; 0000 033A                         case 3:
                 _0x1F1:
001cce 30e3      	CPI  R30,LOW(0x3)
001ccf f011      	BREQ PC+3
001cd0 940c 1d16 	JMP _0x1F3
                 ; 0000 033B                               if(ConfigValue[ConfigState] > ConfigParam[1][ConfigState])
001cd2 91e0 07ce 	LDS  R30,_ConfigState
001cd4 edaf      	LDI  R26,LOW(_ConfigValue)
001cd5 e0b7      	LDI  R27,HIGH(_ConfigValue)
001cd6 e0f0      	LDI  R31,0
001cd7 0fee      	LSL  R30
001cd8 1fff      	ROL  R31
001cd9 0fae      	ADD  R26,R30
001cda 1fbf      	ADC  R27,R31
001cdb 916d      	LD   R22,X+
001cdc 917c      	LD   R23,X
                +
001cdd eee4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 24 ) )
001cde e0f9     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 24 ) )
                 	__POINTW1FN _ConfigParam,24
001cdf 01df      	MOVW R26,R30
001ce0 91e0 07ce 	LDS  R30,_ConfigState
001ce2 e0f0      	LDI  R31,0
001ce3 0fee      	LSL  R30
001ce4 1fff      	ROL  R31
001ce5 0fea      	ADD  R30,R26
001ce6 1ffb      	ADC  R31,R27
001ce7 940e 20e0 	CALL __GETW1PF
001ce9 17e6      	CP   R30,R22
001cea 07f7      	CPC  R31,R23
001ceb f548      	BRSH _0x1F4
                 ; 0000 033C                               {
                 ; 0000 033D                                   ConfigValue[ConfigState] -= ConfigParam[0][ConfigState];
001cec 91e0 07ce 	LDS  R30,_ConfigState
001cee edaf      	LDI  R26,LOW(_ConfigValue)
001cef e0b7      	LDI  R27,HIGH(_ConfigValue)
001cf0 e0f0      	LDI  R31,0
001cf1 0fee      	LSL  R30
001cf2 1fff      	ROL  R31
001cf3 0fea      	ADD  R30,R26
001cf4 1ffb      	ADC  R31,R27
001cf5 010f      	MOVW R0,R30
001cf6 8160      	LD   R22,Z
001cf7 8171      	LDD  R23,Z+1
001cf8 91e0 07ce 	LDS  R30,_ConfigState
001cfa ecac      	LDI  R26,LOW(_ConfigParam*2)
001cfb e0b9      	LDI  R27,HIGH(_ConfigParam*2)
001cfc e0f0      	LDI  R31,0
001cfd 0fee      	LSL  R30
001cfe 1fff      	ROL  R31
001cff 0fea      	ADD  R30,R26
001d00 1ffb      	ADC  R31,R27
001d01 940e 20e4 	CALL __GETW2PF
001d03 01fb      	MOVW R30,R22
001d04 1bea      	SUB  R30,R26
001d05 0bfb      	SBC  R31,R27
001d06 01d0      	MOVW R26,R0
001d07 93ed      	ST   X+,R30
001d08 93fc      	ST   X,R31
                 ; 0000 033E                                   PutParameterText(ConfigState + State, PURPLE);
001d09 91e0 07ca 	LDS  R30,_State
001d0b 91a0 07ce 	LDS  R26,_ConfigState
001d0d 0fea      	ADD  R30,R26
001d0e 93ea      	ST   -Y,R30
001d0f e0ef      	LDI  R30,LOW(30735)
001d10 e7f8      	LDI  R31,HIGH(30735)
001d11 93fa      	ST   -Y,R31
001d12 93ea      	ST   -Y,R30
001d13 940e 11f4 	CALL _PutParameterText
                 ; 0000 033F                               }
                 ; 0000 0340                         break;
                 _0x1F4:
001d15 c005      	RJMP _0x1ED
                 ; 0000 0341                         case 4:
                 _0x1F3:
001d16 30e4      	CPI  R30,LOW(0x4)
001d17 f419      	BRNE _0x1ED
                 ; 0000 0342                             State = 1;
001d18 e0e1      	LDI  R30,LOW(1)
001d19 93e0 07ca 	STS  _State,R30
                 ; 0000 0343                         break;
                 ; 0000 0344                     }
                 _0x1ED:
                 ; 0000 0345                 }
                 ; 0000 0346                 break;
001d1b c034      	RJMP _0x1D8
                 ; 0000 0347                 case 200 : // пауза
                 _0x1EA:
001d1c 3ce8      	CPI  R30,LOW(0xC8)
001d1d e0a0      	LDI  R26,HIGH(0xC8)
001d1e 07fa      	CPC  R31,R26
001d1f f521      	BRNE _0x1F6
                 ; 0000 0348                 //Sleep_mSec = 0;
                 ; 0000 0349                     switch (GetButton())
001d20 940e 1173 	CALL _GetButton
                 ; 0000 034A                     {
                 ; 0000 034B                         case 1:
001d22 30e1      	CPI  R30,LOW(0x1)
001d23 f0f9      	BREQ _0x1F9
                 ; 0000 034C                         break;
                 ; 0000 034D                         case 2:
001d24 30e2      	CPI  R30,LOW(0x2)
001d25 f0e9      	BREQ _0x1F9
                 ; 0000 034E                         break;
                 ; 0000 034F                         case 3:
001d26 30e3      	CPI  R30,LOW(0x3)
001d27 f0d9      	BREQ _0x1F9
                 ; 0000 0350                         break;
                 ; 0000 0351                         case 4:
001d28 30e4      	CPI  R30,LOW(0x4)
001d29 f4c9      	BRNE _0x1F9
                 ; 0000 0352                             State = 0;
001d2a e0e0      	LDI  R30,LOW(0)
001d2b 93e0 07ca 	STS  _State,R30
                 ; 0000 0353                             Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
001d2d e0e0     +LDI R30 , LOW ( _0x1DA + ( 11 ) )
001d2e e0f6     +LDI R31 , HIGH ( _0x1DA + ( 11 ) )
                 	__POINTW1MN _0x1DA,11
001d2f 93fa      	ST   -Y,R31
001d30 93ea      	ST   -Y,R30
001d31 e0e4      	LDI  R30,LOW(4)
001d32 93ea      	ST   -Y,R30
001d33 e0e0      	LDI  R30,LOW(0)
001d34 e0f0      	LDI  R31,HIGH(0)
001d35 93fa      	ST   -Y,R31
001d36 93ea      	ST   -Y,R30
001d37 efef      	LDI  R30,LOW(65535)
001d38 efff      	LDI  R31,HIGH(65535)
001d39 93fa      	ST   -Y,R31
001d3a 93ea      	ST   -Y,R30
001d3b 940e 0f9d 	CALL _Repaint_Button
                 ; 0000 0354                             delay_ms(250);
001d3d efea      	LDI  R30,LOW(250)
001d3e e0f0      	LDI  R31,HIGH(250)
001d3f 93fa      	ST   -Y,R31
001d40 93ea      	ST   -Y,R30
001d41 940e 1f3d 	CALL _delay_ms
                 ; 0000 0355                         break;
                 ; 0000 0356                     }
                 _0x1F9:
                 ; 0000 0357 
                 ; 0000 0358                 break;
001d43 c00c      	RJMP _0x1D8
                 ; 0000 0359                 case 250 : // сп¤щий режим
                 _0x1F6:
001d44 3fea      	CPI  R30,LOW(0xFA)
001d45 e0a0      	LDI  R26,HIGH(0xFA)
001d46 07fa      	CPC  R31,R26
001d47 f441      	BRNE _0x1D8
                 ; 0000 035A                 {
                 ; 0000 035B                     if (TSC2046_GetCoordinates() > 0)
001d48 940e 0ca7 	CALL _TSC2046_GetCoordinates
001d4a 30e1      	CPI  R30,LOW(0x1)
001d4b f020      	BRLO _0x1FF
                 ; 0000 035C                     {
                 ; 0000 035D                         State = 0;
001d4c e0e0      	LDI  R30,LOW(0)
001d4d 93e0 07ca 	STS  _State,R30
                 ; 0000 035E                         BACKLIGHT = 0; //On
001d4f 98c7      	CBI  0x18,7
                 ; 0000 035F                     }
                 ; 0000 0360                 }
                 _0x1FF:
                 ; 0000 0361                 break;
                 ; 0000 0362             }
                 _0x1D8:
                 ; 0000 0363 }
001d50 940e 2125 	CALL __LOADLOCR4
                 _0x2020002:
001d52 9624      	ADIW R28,4
001d53 9508      	RET
                 
                 	.DSEG
                 _0x1DA:
0005f5           	.BYTE 0x11
                 ;
                 ;
                 ;void Load_Config(void)
                 ; 0000 0367 {
                 
                 	.CSEG
                 _Load_Config:
                 ; 0000 0368     char i;
                 ; 0000 0369     //Читаем настройки
                 ; 0000 036A     putchar2('G');
001d54 931a      	ST   -Y,R17
                 ;	i -> R17
001d55 e4e7      	LDI  R30,LOW(71)
001d56 93ea      	ST   -Y,R30
001d57 940e 0f95 	CALL _putchar2
                 ; 0000 036B     ValueUpd_mSec = 0;
001d59 e0e0      	LDI  R30,LOW(0)
001d5a 93e0 07d1 	STS  _ValueUpd_mSec,R30
001d5c 93e0 07d2 	STS  _ValueUpd_mSec+1,R30
                 ; 0000 036C     ValueState = 5;
001d5e e0e5      	LDI  R30,LOW(5)
001d5f 93e0 07cc 	STS  _ValueState,R30
                 ; 0000 036D     while(rx_counter2 < (9*2) && ValueUpd_mSec < 100); //ждем
                 _0x202:
001d61 91a0 06b9 	LDS  R26,_rx_counter2
001d63 31a2      	CPI  R26,LOW(0x12)
001d64 f440      	BRSH _0x205
001d65 91a0 07d1 	LDS  R26,_ValueUpd_mSec
001d67 91b0 07d2 	LDS  R27,_ValueUpd_mSec+1
001d69 36a4      	CPI  R26,LOW(0x64)
001d6a e0e0      	LDI  R30,HIGH(0x64)
001d6b 07be      	CPC  R27,R30
001d6c f008      	BRLO _0x206
                 _0x205:
001d6d c001      	RJMP _0x204
                 _0x206:
001d6e cff2      	RJMP _0x202
                 _0x204:
                 ; 0000 036E 
                 ; 0000 036F     for(i=0; i<12; i++)
001d6f e010      	LDI  R17,LOW(0)
                 _0x208:
001d70 301c      	CPI  R17,12
001d71 f010      	BRLO PC+3
001d72 940c 1e04 	JMP _0x209
                 ; 0000 0370     {
                 ; 0000 0371         if(i<3)
001d74 3013      	CPI  R17,3
001d75 f4a8      	BRSH _0x20A
                 ; 0000 0372         {
                 ; 0000 0373             ConfigValue[i] = ConfigValue_mem[i];
001d76 2fe1      	MOV  R30,R17
001d77 edaf      	LDI  R26,LOW(_ConfigValue)
001d78 e0b7      	LDI  R27,HIGH(_ConfigValue)
001d79 e0f0      	LDI  R31,0
001d7a 0fee      	LSL  R30
001d7b 1fff      	ROL  R31
001d7c 0fea      	ADD  R30,R26
001d7d 1ffb      	ADC  R31,R27
001d7e 010f      	MOVW R0,R30
001d7f 2fe1      	MOV  R30,R17
001d80 e0a0      	LDI  R26,LOW(_ConfigValue_mem)
001d81 e0b0      	LDI  R27,HIGH(_ConfigValue_mem)
001d82 e0f0      	LDI  R31,0
001d83 0fee      	LSL  R30
001d84 1fff      	ROL  R31
001d85 0fae      	ADD  R26,R30
001d86 1fbf      	ADC  R27,R31
001d87 940e 20ee 	CALL __EEPROMRDW
001d89 01d0      	MOVW R26,R0
001d8a c02e      	RJMP _0x21E
                 ; 0000 0374         }
                 ; 0000 0375         else if(rx_counter2 > 1)
                 _0x20A:
001d8b 91a0 06b9 	LDS  R26,_rx_counter2
001d8d 30a2      	CPI  R26,LOW(0x2)
001d8e f160      	BRLO _0x20C
                 ; 0000 0376         {
                 ; 0000 0377             ConfigValue[i] = getchar2() & 0x00FF;
001d8f 2fe1      	MOV  R30,R17
001d90 edaf      	LDI  R26,LOW(_ConfigValue)
001d91 e0b7      	LDI  R27,HIGH(_ConfigValue)
001d92 e0f0      	LDI  R31,0
001d93 0fee      	LSL  R30
001d94 1fff      	ROL  R31
001d95 0fea      	ADD  R30,R26
001d96 1ffb      	ADC  R31,R27
001d97 93ff      	PUSH R31
001d98 93ef      	PUSH R30
001d99 940e 0f2a 	CALL _getchar2
001d9b 91af      	POP  R26
001d9c 91bf      	POP  R27
001d9d e0f0      	LDI  R31,0
001d9e 93ed      	ST   X+,R30
001d9f 93fc      	ST   X,R31
                 ; 0000 0378             ConfigValue[i] |= (unsigned int)getchar2() << 8;
001da0 2fe1      	MOV  R30,R17
001da1 edaf      	LDI  R26,LOW(_ConfigValue)
001da2 e0b7      	LDI  R27,HIGH(_ConfigValue)
001da3 e0f0      	LDI  R31,0
001da4 0fee      	LSL  R30
001da5 1fff      	ROL  R31
001da6 0fea      	ADD  R30,R26
001da7 1ffb      	ADC  R31,R27
001da8 93ff      	PUSH R31
001da9 93ef      	PUSH R30
001daa 01df      	MOVW R26,R30
001dab 940e 20dc 	CALL __GETW1P
001dad 93ff      	PUSH R31
001dae 93ef      	PUSH R30
001daf 940e 0f2a 	CALL _getchar2
001db1 2ffe      	MOV  R31,R30
001db2 e0e0      	LDI  R30,0
001db3 91af      	POP  R26
001db4 91bf      	POP  R27
001db5 2bea      	OR   R30,R26
001db6 2bfb      	OR   R31,R27
001db7 91af      	POP  R26
001db8 91bf      	POP  R27
                 _0x21E:
001db9 93ed      	ST   X+,R30
001dba 93fc      	ST   X,R31
                 ; 0000 0379         }
                 ; 0000 037A 
                 ; 0000 037B         if(ConfigValue[i] < ConfigParam[1][i] || ConfigValue[i] > ConfigParam[2][i])
                 _0x20C:
001dbb 2fe1      	MOV  R30,R17
001dbc edaf      	LDI  R26,LOW(_ConfigValue)
001dbd e0b7      	LDI  R27,HIGH(_ConfigValue)
001dbe e0f0      	LDI  R31,0
001dbf 0fee      	LSL  R30
001dc0 1fff      	ROL  R31
001dc1 0fae      	ADD  R26,R30
001dc2 1fbf      	ADC  R27,R31
001dc3 916d      	LD   R22,X+
001dc4 917c      	LD   R23,X
                +
001dc5 eee4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 24 ) )
001dc6 e0f9     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 24 ) )
                 	__POINTW1FN _ConfigParam,24
001dc7 01df      	MOVW R26,R30
001dc8 2fe1      	MOV  R30,R17
001dc9 e0f0      	LDI  R31,0
001dca 0fee      	LSL  R30
001dcb 1fff      	ROL  R31
001dcc 0fea      	ADD  R30,R26
001dcd 1ffb      	ADC  R31,R27
001dce 940e 20e0 	CALL __GETW1PF
001dd0 176e      	CP   R22,R30
001dd1 077f      	CPC  R23,R31
001dd2 f0c0      	BRLO _0x20E
001dd3 2fe1      	MOV  R30,R17
001dd4 edaf      	LDI  R26,LOW(_ConfigValue)
001dd5 e0b7      	LDI  R27,HIGH(_ConfigValue)
001dd6 e0f0      	LDI  R31,0
001dd7 0fee      	LSL  R30
001dd8 1fff      	ROL  R31
001dd9 0fae      	ADD  R26,R30
001dda 1fbf      	ADC  R27,R31
001ddb 916d      	LD   R22,X+
001ddc 917c      	LD   R23,X
                +
001ddd efec     +LDI R30 , LOW ( 2 * _ConfigParam + ( 48 ) )
001dde e0f9     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 48 ) )
                 	__POINTW1FN _ConfigParam,48
001ddf 01df      	MOVW R26,R30
001de0 2fe1      	MOV  R30,R17
001de1 e0f0      	LDI  R31,0
001de2 0fee      	LSL  R30
001de3 1fff      	ROL  R31
001de4 0fea      	ADD  R30,R26
001de5 1ffb      	ADC  R31,R27
001de6 940e 20e0 	CALL __GETW1PF
001de8 17e6      	CP   R30,R22
001de9 07f7      	CPC  R31,R23
001dea f4b8      	BRSH _0x20D
                 _0x20E:
                 ; 0000 037C         {
                 ; 0000 037D             ConfigValue[i] = ConfigParam[3][i];
001deb 2fe1      	MOV  R30,R17
001dec edaf      	LDI  R26,LOW(_ConfigValue)
001ded e0b7      	LDI  R27,HIGH(_ConfigValue)
001dee e0f0      	LDI  R31,0
001def 0fee      	LSL  R30
001df0 1fff      	ROL  R31
001df1 0fea      	ADD  R30,R26
001df2 1ffb      	ADC  R31,R27
001df3 01bf      	MOVW R22,R30
                +
001df4 e1e4     +LDI R30 , LOW ( 2 * _ConfigParam + ( 72 ) )
001df5 e0fa     +LDI R31 , HIGH ( 2 * _ConfigParam + ( 72 ) )
                 	__POINTW1FN _ConfigParam,72
001df6 01df      	MOVW R26,R30
001df7 2fe1      	MOV  R30,R17
001df8 e0f0      	LDI  R31,0
001df9 0fee      	LSL  R30
001dfa 1fff      	ROL  R31
001dfb 0fea      	ADD  R30,R26
001dfc 1ffb      	ADC  R31,R27
001dfd 940e 20e0 	CALL __GETW1PF
001dff 01db      	MOVW R26,R22
001e00 93ed      	ST   X+,R30
001e01 93fc      	ST   X,R31
                 ; 0000 037E         }
                 ; 0000 037F     }
                 _0x20D:
001e02 5f1f      	SUBI R17,-1
001e03 cf6c      	RJMP _0x208
                 _0x209:
                 ; 0000 0380 
                 ; 0000 0381     ValueState = 0;
001e04 e0e0      	LDI  R30,LOW(0)
001e05 93e0 07cc 	STS  _ValueState,R30
                 ; 0000 0382 }
001e07 9119      	LD   R17,Y+
001e08 9508      	RET
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0387 {
                 _main:
                 ; 0000 0388 // Declare your local variables here
                 ; 0000 0389 {
                 ; 0000 038A // Input/Output Ports initialization
                 ; 0000 038B // Port A initialization
                 ; 0000 038C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 038D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 038E PORTA=0x00;
001e09 e0e0      	LDI  R30,LOW(0)
001e0a bbeb      	OUT  0x1B,R30
                 ; 0000 038F DDRA=0x00;
001e0b bbea      	OUT  0x1A,R30
                 ; 0000 0390 
                 ; 0000 0391 // Port B initialization
                 ; 0000 0392 // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 0393 // State7=1 State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
                 ; 0000 0394 PORTB=0x80;
001e0c e8e0      	LDI  R30,LOW(128)
001e0d bbe8      	OUT  0x18,R30
                 ; 0000 0395 DDRB=0x87;
001e0e e8e7      	LDI  R30,LOW(135)
001e0f bbe7      	OUT  0x17,R30
                 ; 0000 0396 
                 ; 0000 0397 // Port C initialization
                 ; 0000 0398 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0399 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 039A PORTC=0x00;
001e10 e0e0      	LDI  R30,LOW(0)
001e11 bbe5      	OUT  0x15,R30
                 ; 0000 039B DDRC=0x00;
001e12 bbe4      	OUT  0x14,R30
                 ; 0000 039C 
                 ; 0000 039D // Port D initialization
                 ; 0000 039E // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 039F // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 03A0 PORTD=0x00;
001e13 bbe2      	OUT  0x12,R30
                 ; 0000 03A1 DDRD=0x10;
001e14 e1e0      	LDI  R30,LOW(16)
001e15 bbe1      	OUT  0x11,R30
                 ; 0000 03A2 
                 ; 0000 03A3 // Port E initialization
                 ; 0000 03A4 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03A5 // State7=T State6=T State5=T State4=1 State3=T State2=T State1=T State0=T
                 ; 0000 03A6 PORTE=0x10;
001e16 b9e3      	OUT  0x3,R30
                 ; 0000 03A7 DDRE=0x10;  //PE4 - CD off
001e17 b9e2      	OUT  0x2,R30
                 ; 0000 03A8 
                 ; 0000 03A9 // Port F initialization
                 ; 0000 03AA // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03AB // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03AC PORTF=0x00;
001e18 e0e0      	LDI  R30,LOW(0)
001e19 93e0 0062 	STS  98,R30
                 ; 0000 03AD DDRF=0x00;
001e1b 93e0 0061 	STS  97,R30
                 ; 0000 03AE 
                 ; 0000 03AF // Port G initialization
                 ; 0000 03B0 // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03B1 // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03B2 PORTG=0x00;
001e1d 93e0 0065 	STS  101,R30
                 ; 0000 03B3 DDRG=0x00;
001e1f 93e0 0064 	STS  100,R30
                 ; 0000 03B4 
                 ; 0000 03B5 // Timer/Counter 0 initialization
                 ; 0000 03B6 // Clock source: System Clock
                 ; 0000 03B7 // Clock value: 250,000 kHz
                 ; 0000 03B8 // Mode: Normal top=0xFF
                 ; 0000 03B9 // OC0 output: Disconnected
                 ; 0000 03BA ASSR=0x00;
001e21 bfe0      	OUT  0x30,R30
                 ; 0000 03BB TCCR0=0x04;
001e22 e0e4      	LDI  R30,LOW(4)
001e23 bfe3      	OUT  0x33,R30
                 ; 0000 03BC TCNT0=0x06;
001e24 e0e6      	LDI  R30,LOW(6)
001e25 bfe2      	OUT  0x32,R30
                 ; 0000 03BD OCR0=0x00;
001e26 e0e0      	LDI  R30,LOW(0)
001e27 bfe1      	OUT  0x31,R30
                 ; 0000 03BE 
                 ; 0000 03BF // Timer/Counter 1 initialization
                 ; 0000 03C0 // Clock source: System Clock
                 ; 0000 03C1 // Clock value: Timer1 Stopped
                 ; 0000 03C2 // Mode: Normal top=0xFFFF
                 ; 0000 03C3 // OC1A output: Discon.
                 ; 0000 03C4 // OC1B output: Discon.
                 ; 0000 03C5 // OC1C output: Discon.
                 ; 0000 03C6 // Noise Canceler: Off
                 ; 0000 03C7 // Input Capture on Falling Edge
                 ; 0000 03C8 // Timer1 Overflow Interrupt: Off
                 ; 0000 03C9 // Input Capture Interrupt: Off
                 ; 0000 03CA // Compare A Match Interrupt: Off
                 ; 0000 03CB // Compare B Match Interrupt: Off
                 ; 0000 03CC // Compare C Match Interrupt: Off
                 ; 0000 03CD TCCR1A=0x00;
001e28 bdef      	OUT  0x2F,R30
                 ; 0000 03CE TCCR1B=0x00;
001e29 bdee      	OUT  0x2E,R30
                 ; 0000 03CF TCNT1H=0x00;
001e2a bded      	OUT  0x2D,R30
                 ; 0000 03D0 TCNT1L=0x00;
001e2b bdec      	OUT  0x2C,R30
                 ; 0000 03D1 ICR1H=0x00;
001e2c bde7      	OUT  0x27,R30
                 ; 0000 03D2 ICR1L=0x00;
001e2d bde6      	OUT  0x26,R30
                 ; 0000 03D3 OCR1AH=0x00;
001e2e bdeb      	OUT  0x2B,R30
                 ; 0000 03D4 OCR1AL=0x00;
001e2f bdea      	OUT  0x2A,R30
                 ; 0000 03D5 OCR1BH=0x00;
001e30 bde9      	OUT  0x29,R30
                 ; 0000 03D6 OCR1BL=0x00;
001e31 bde8      	OUT  0x28,R30
                 ; 0000 03D7 OCR1CH=0x00;
001e32 93e0 0079 	STS  121,R30
                 ; 0000 03D8 OCR1CL=0x00;
001e34 93e0 0078 	STS  120,R30
                 ; 0000 03D9 
                 ; 0000 03DA // Timer/Counter 2 initialization
                 ; 0000 03DB // Clock source: System Clock
                 ; 0000 03DC // Clock value: Timer2 Stopped
                 ; 0000 03DD // Mode: Normal top=0xFF
                 ; 0000 03DE // OC2 output: Disconnected
                 ; 0000 03DF TCCR2=0x00;
001e36 bde5      	OUT  0x25,R30
                 ; 0000 03E0 TCNT2=0x00;
001e37 bde4      	OUT  0x24,R30
                 ; 0000 03E1 OCR2=0x00;
001e38 bde3      	OUT  0x23,R30
                 ; 0000 03E2 
                 ; 0000 03E3 // Timer/Counter 3 initialization
                 ; 0000 03E4 // Clock source: System Clock
                 ; 0000 03E5 // Clock value: Timer3 Stopped
                 ; 0000 03E6 // Mode: Normal top=0xFFFF
                 ; 0000 03E7 // OC3A output: Discon.
                 ; 0000 03E8 // OC3B output: Discon.
                 ; 0000 03E9 // OC3C output: Discon.
                 ; 0000 03EA // Noise Canceler: Off
                 ; 0000 03EB // Input Capture on Falling Edge
                 ; 0000 03EC // Timer3 Overflow Interrupt: Off
                 ; 0000 03ED // Input Capture Interrupt: Off
                 ; 0000 03EE // Compare A Match Interrupt: Off
                 ; 0000 03EF // Compare B Match Interrupt: Off
                 ; 0000 03F0 // Compare C Match Interrupt: Off
                 ; 0000 03F1 TCCR3A=0x00;
001e39 93e0 008b 	STS  139,R30
                 ; 0000 03F2 TCCR3B=0x00;
001e3b 93e0 008a 	STS  138,R30
                 ; 0000 03F3 TCNT3H=0x00;
001e3d 93e0 0089 	STS  137,R30
                 ; 0000 03F4 TCNT3L=0x00;
001e3f 93e0 0088 	STS  136,R30
                 ; 0000 03F5 ICR3H=0x00;
001e41 93e0 0081 	STS  129,R30
                 ; 0000 03F6 ICR3L=0x00;
001e43 93e0 0080 	STS  128,R30
                 ; 0000 03F7 OCR3AH=0x00;
001e45 93e0 0087 	STS  135,R30
                 ; 0000 03F8 OCR3AL=0x00;
001e47 93e0 0086 	STS  134,R30
                 ; 0000 03F9 OCR3BH=0x00;
001e49 93e0 0085 	STS  133,R30
                 ; 0000 03FA OCR3BL=0x00;
001e4b 93e0 0084 	STS  132,R30
                 ; 0000 03FB OCR3CH=0x00;
001e4d 93e0 0083 	STS  131,R30
                 ; 0000 03FC OCR3CL=0x00;
001e4f 93e0 0082 	STS  130,R30
                 ; 0000 03FD 
                 ; 0000 03FE // External Interrupt(s) initialization
                 ; 0000 03FF // INT0: Off
                 ; 0000 0400 // INT1: Off
                 ; 0000 0401 // INT2: Off
                 ; 0000 0402 // INT3: Off
                 ; 0000 0403 // INT4: Off
                 ; 0000 0404 // INT5: Off
                 ; 0000 0405 // INT6: Off
                 ; 0000 0406 // INT7: Off
                 ; 0000 0407 EICRA=0x00;
001e51 93e0 006a 	STS  106,R30
                 ; 0000 0408 EICRB=0x00;
001e53 bfea      	OUT  0x3A,R30
                 ; 0000 0409 EIMSK=0x00;
001e54 bfe9      	OUT  0x39,R30
                 ; 0000 040A 
                 ; 0000 040B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 040C TIMSK=0x01;
001e55 e0e1      	LDI  R30,LOW(1)
001e56 bfe7      	OUT  0x37,R30
                 ; 0000 040D 
                 ; 0000 040E ETIMSK=0x00;
001e57 e0e0      	LDI  R30,LOW(0)
001e58 93e0 007d 	STS  125,R30
                 ; 0000 040F 
                 ; 0000 0410 // USART0 initialization
                 ; 0000 0411 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0412 // USART0 Receiver: On
                 ; 0000 0413 // USART0 Transmitter: On
                 ; 0000 0414 // USART0 Mode: Asynchronous
                 ; 0000 0415 // USART0 Baud Rate: 115200
                 ; 0000 0416 UCSR0A=0x00;
001e5a b9eb      	OUT  0xB,R30
                 ; 0000 0417 UCSR0B=0xD8;
001e5b ede8      	LDI  R30,LOW(216)
001e5c b9ea      	OUT  0xA,R30
                 ; 0000 0418 UCSR0C=0x06;
001e5d e0e6      	LDI  R30,LOW(6)
001e5e 93e0 0095 	STS  149,R30
                 ; 0000 0419 UBRR0H=0x00;
001e60 e0e0      	LDI  R30,LOW(0)
001e61 93e0 0090 	STS  144,R30
                 ; 0000 041A UBRR0L=0x08;
001e63 e0e8      	LDI  R30,LOW(8)
001e64 b9e9      	OUT  0x9,R30
                 ; 0000 041B 
                 ; 0000 041C // USART1 initialization
                 ; 0000 041D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 041E // USART1 Receiver: On
                 ; 0000 041F // USART1 Transmitter: On
                 ; 0000 0420 // USART1 Mode: Asynchronous
                 ; 0000 0421 // USART1 Baud Rate: 9600
                 ; 0000 0422 UCSR1A=0x00;
001e65 e0e0      	LDI  R30,LOW(0)
001e66 93e0 009b 	STS  155,R30
                 ; 0000 0423 UCSR1B=0xD8;
001e68 ede8      	LDI  R30,LOW(216)
001e69 93e0 009a 	STS  154,R30
                 ; 0000 0424 UCSR1C=0x06;
001e6b e0e6      	LDI  R30,LOW(6)
001e6c 93e0 009d 	STS  157,R30
                 ; 0000 0425 UBRR1H=0x00;
001e6e e0e0      	LDI  R30,LOW(0)
001e6f 93e0 0098 	STS  152,R30
                 ; 0000 0426 UBRR1L=0x67;
001e71 e6e7      	LDI  R30,LOW(103)
001e72 93e0 0099 	STS  153,R30
                 ; 0000 0427 
                 ; 0000 0428 // Analog Comparator initialization
                 ; 0000 0429 // Analog Comparator: Off
                 ; 0000 042A // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 042B ACSR=0x80;
001e74 e8e0      	LDI  R30,LOW(128)
001e75 b9e8      	OUT  0x8,R30
                 ; 0000 042C SFIOR=0x00;
001e76 e0e0      	LDI  R30,LOW(0)
001e77 bde0      	OUT  0x20,R30
                 ; 0000 042D 
                 ; 0000 042E // ADC initialization
                 ; 0000 042F // ADC disabled
                 ; 0000 0430 ADCSRA=0x00;
001e78 b9e6      	OUT  0x6,R30
                 ; 0000 0431 
                 ; 0000 0432 // SPI initialization
                 ; 0000 0433 // SPI Type: Master
                 ; 0000 0434 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 0435 // SPI Clock Phase: Cycle Start
                 ; 0000 0436 // SPI Clock Polarity: Low
                 ; 0000 0437 // SPI Data Order: MSB First
                 ; 0000 0438 SPCR=0x52;
001e79 e5e2      	LDI  R30,LOW(82)
001e7a b9ed      	OUT  0xD,R30
                 ; 0000 0439 SPSR=0x00;
001e7b e0e0      	LDI  R30,LOW(0)
001e7c b9ee      	OUT  0xE,R30
                 ; 0000 043A 
                 ; 0000 043B // TWI initialization
                 ; 0000 043C // TWI disabled
                 ; 0000 043D TWCR=0x00;
001e7d 93e0 0074 	STS  116,R30
                 ; 0000 043E }
                 ; 0000 043F {
                 ; 0000 0440 // Global enable interrupts
                 ; 0000 0441 #asm("sei")
001e7f 9478      	sei
                 ; 0000 0442 
                 ; 0000 0443 SSD1963_Init();
001e80 940e 0689 	CALL _SSD1963_Init
                 ; 0000 0444 TSC2046_Init();
001e82 940e 0d3f 	CALL _TSC2046_Init
                 ; 0000 0445 SSD1963_ClearScreen(BLACK);
001e84 e0e0      	LDI  R30,LOW(0)
001e85 e0f0      	LDI  R31,HIGH(0)
001e86 93fa      	ST   -Y,R31
001e87 93ea      	ST   -Y,R30
001e88 940e 0772 	CALL _SSD1963_ClearScreen
                 ; 0000 0446 
                 ; 0000 0447   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLUE, BLACK);
                +
001e8a e0e6     +LDI R30 , LOW ( _0x210 + ( 0 ) )
001e8b e0f6     +LDI R31 , HIGH ( _0x210 + ( 0 ) )
                 	__POINTW1MN _0x210,0
001e8c 93fa      	ST   -Y,R31
001e8d 93ea      	ST   -Y,R30
001e8e ece0      	LDI  R30,LOW(192)
001e8f e0f0      	LDI  R31,HIGH(192)
001e90 93fa      	ST   -Y,R31
001e91 93ea      	ST   -Y,R30
001e92 e7e0      	LDI  R30,LOW(112)
001e93 e0f0      	LDI  R31,HIGH(112)
001e94 93fa      	ST   -Y,R31
001e95 93ea      	ST   -Y,R30
001e96 efe8      	LDI  R30,LOW(248)
001e97 e0f0      	LDI  R31,HIGH(248)
001e98 93fa      	ST   -Y,R31
001e99 93ea      	ST   -Y,R30
001e9a e0e0      	LDI  R30,LOW(0)
001e9b e0f0      	LDI  R31,HIGH(0)
001e9c 93fa      	ST   -Y,R31
001e9d 93ea      	ST   -Y,R30
001e9e 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0448   BACKLIGHT = 0; //On
001ea0 98c7      	CBI  0x18,7
                 ; 0000 0449   delay_ms(200);
001ea1 ece8      	LDI  R30,LOW(200)
001ea2 e0f0      	LDI  R31,HIGH(200)
001ea3 93fa      	ST   -Y,R31
001ea4 93ea      	ST   -Y,R30
001ea5 940e 1f3d 	CALL _delay_ms
                 ; 0000 044A   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), RED, BLACK);
                +
001ea7 e0ed     +LDI R30 , LOW ( _0x210 + ( 7 ) )
001ea8 e0f6     +LDI R31 , HIGH ( _0x210 + ( 7 ) )
                 	__POINTW1MN _0x210,7
001ea9 93fa      	ST   -Y,R31
001eaa 93ea      	ST   -Y,R30
001eab ece0      	LDI  R30,LOW(192)
001eac e0f0      	LDI  R31,HIGH(192)
001ead 93fa      	ST   -Y,R31
001eae 93ea      	ST   -Y,R30
001eaf e8e0      	LDI  R30,LOW(128)
001eb0 e0f0      	LDI  R31,HIGH(128)
001eb1 93fa      	ST   -Y,R31
001eb2 93ea      	ST   -Y,R30
001eb3 e0e0      	LDI  R30,LOW(7936)
001eb4 e1ff      	LDI  R31,HIGH(7936)
001eb5 93fa      	ST   -Y,R31
001eb6 93ea      	ST   -Y,R30
001eb7 e0e0      	LDI  R30,LOW(0)
001eb8 e0f0      	LDI  R31,HIGH(0)
001eb9 93fa      	ST   -Y,R31
001eba 93ea      	ST   -Y,R30
001ebb 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 044B   delay_ms(200);
001ebd ece8      	LDI  R30,LOW(200)
001ebe e0f0      	LDI  R31,HIGH(200)
001ebf 93fa      	ST   -Y,R31
001ec0 93ea      	ST   -Y,R30
001ec1 940e 1f3d 	CALL _delay_ms
                 ; 0000 044C   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, GREEN, BLACK);
                +
001ec3 e1e4     +LDI R30 , LOW ( _0x210 + ( 14 ) )
001ec4 e0f6     +LDI R31 , HIGH ( _0x210 + ( 14 ) )
                 	__POINTW1MN _0x210,14
001ec5 93fa      	ST   -Y,R31
001ec6 93ea      	ST   -Y,R30
001ec7 ece0      	LDI  R30,LOW(192)
001ec8 e0f0      	LDI  R31,HIGH(192)
001ec9 93fa      	ST   -Y,R31
001eca 93ea      	ST   -Y,R30
001ecb e9e0      	LDI  R30,LOW(144)
001ecc e0f0      	LDI  R31,HIGH(144)
001ecd 93fa      	ST   -Y,R31
001ece 93ea      	ST   -Y,R30
001ecf e0e7      	LDI  R30,LOW(57351)
001ed0 eef0      	LDI  R31,HIGH(57351)
001ed1 93fa      	ST   -Y,R31
001ed2 93ea      	ST   -Y,R30
001ed3 e0e0      	LDI  R30,LOW(0)
001ed4 e0f0      	LDI  R31,HIGH(0)
001ed5 93fa      	ST   -Y,R31
001ed6 93ea      	ST   -Y,R30
001ed7 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 044D   delay_ms(200);
001ed9 ece8      	LDI  R30,LOW(200)
001eda e0f0      	LDI  R31,HIGH(200)
001edb 93fa      	ST   -Y,R31
001edc 93ea      	ST   -Y,R30
001edd 940e 1f3d 	CALL _delay_ms
                 ; 0000 044E   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
001edf e1eb     +LDI R30 , LOW ( _0x210 + ( 21 ) )
001ee0 e0f6     +LDI R31 , HIGH ( _0x210 + ( 21 ) )
                 	__POINTW1MN _0x210,21
001ee1 93fa      	ST   -Y,R31
001ee2 93ea      	ST   -Y,R30
001ee3 ece0      	LDI  R30,LOW(192)
001ee4 e0f0      	LDI  R31,HIGH(192)
001ee5 93fa      	ST   -Y,R31
001ee6 93ea      	ST   -Y,R30
001ee7 e7e0      	LDI  R30,LOW(112)
001ee8 e0f0      	LDI  R31,HIGH(112)
001ee9 93fa      	ST   -Y,R31
001eea 93ea      	ST   -Y,R30
001eeb e0e0      	LDI  R30,LOW(0)
001eec e0f0      	LDI  R31,HIGH(0)
001eed 93fa      	ST   -Y,R31
001eee 93ea      	ST   -Y,R30
001eef 93fa      	ST   -Y,R31
001ef0 93ea      	ST   -Y,R30
001ef1 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 044F   delay_ms(200);
001ef3 ece8      	LDI  R30,LOW(200)
001ef4 e0f0      	LDI  R31,HIGH(200)
001ef5 93fa      	ST   -Y,R31
001ef6 93ea      	ST   -Y,R30
001ef7 940e 1f3d 	CALL _delay_ms
                 ; 0000 0450   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
001ef9 e2e2     +LDI R30 , LOW ( _0x210 + ( 28 ) )
001efa e0f6     +LDI R31 , HIGH ( _0x210 + ( 28 ) )
                 	__POINTW1MN _0x210,28
001efb 93fa      	ST   -Y,R31
001efc 93ea      	ST   -Y,R30
001efd ece0      	LDI  R30,LOW(192)
001efe e0f0      	LDI  R31,HIGH(192)
001eff 93fa      	ST   -Y,R31
001f00 93ea      	ST   -Y,R30
001f01 e8e0      	LDI  R30,LOW(128)
001f02 e0f0      	LDI  R31,HIGH(128)
001f03 93fa      	ST   -Y,R31
001f04 93ea      	ST   -Y,R30
001f05 e0e0      	LDI  R30,LOW(0)
001f06 e0f0      	LDI  R31,HIGH(0)
001f07 93fa      	ST   -Y,R31
001f08 93ea      	ST   -Y,R30
001f09 93fa      	ST   -Y,R31
001f0a 93ea      	ST   -Y,R30
001f0b 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0451   delay_ms(200);
001f0d ece8      	LDI  R30,LOW(200)
001f0e e0f0      	LDI  R31,HIGH(200)
001f0f 93fa      	ST   -Y,R31
001f10 93ea      	ST   -Y,R30
001f11 940e 1f3d 	CALL _delay_ms
                 ; 0000 0452   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
001f13 e2e9     +LDI R30 , LOW ( _0x210 + ( 35 ) )
001f14 e0f6     +LDI R31 , HIGH ( _0x210 + ( 35 ) )
                 	__POINTW1MN _0x210,35
001f15 93fa      	ST   -Y,R31
001f16 93ea      	ST   -Y,R30
001f17 ece0      	LDI  R30,LOW(192)
001f18 e0f0      	LDI  R31,HIGH(192)
001f19 93fa      	ST   -Y,R31
001f1a 93ea      	ST   -Y,R30
001f1b e9e0      	LDI  R30,LOW(144)
001f1c e0f0      	LDI  R31,HIGH(144)
001f1d 93fa      	ST   -Y,R31
001f1e 93ea      	ST   -Y,R30
001f1f e0e0      	LDI  R30,LOW(0)
001f20 e0f0      	LDI  R31,HIGH(0)
001f21 93fa      	ST   -Y,R31
001f22 93ea      	ST   -Y,R30
001f23 93fa      	ST   -Y,R31
001f24 93ea      	ST   -Y,R30
001f25 940e 0992 	CALL _SSD1963_PutString16
                 ; 0000 0453 
                 ; 0000 0454 Prepare_Screen();
001f27 940e 1033 	CALL _Prepare_Screen
                 ; 0000 0455 State = 1;
001f29 e0e1      	LDI  R30,LOW(1)
001f2a 93e0 07ca 	STS  _State,R30
                 ; 0000 0456 Load_Config();
001f2c de27      	RCALL _Load_Config
                 ; 0000 0457 
                 ; 0000 0458 // Watchdog Timer initialization
                 ; 0000 0459 // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 045A #pragma optsize-
                 ; 0000 045B #asm("wdr")
001f2d 95a8      	wdr
                 ; 0000 045C WDTCR=0x1F;
001f2e e1ef      	LDI  R30,LOW(31)
001f2f bde1      	OUT  0x21,R30
                 ; 0000 045D WDTCR=0x0F;
001f30 e0ef      	LDI  R30,LOW(15)
001f31 bde1      	OUT  0x21,R30
                 ; 0000 045E #ifdef _OPTIMIZE_SIZE_
                 ; 0000 045F #pragma optsize+
                 ; 0000 0460 #endif
                 ; 0000 0461 }
                 ; 0000 0462 
                 ; 0000 0463 while (1)
                 _0x213:
                 ; 0000 0464       {
                 ; 0000 0465       #asm("wdr")
001f32 95a8      	wdr
                 ; 0000 0466       main_loop();
001f33 db33      	RCALL _main_loop
                 ; 0000 0467       }
001f34 cffd      	RJMP _0x213
                 ; 0000 0468 }
                 _0x216:
001f35 cfff      	RJMP _0x216
                 
                 	.DSEG
                 _0x210:
000606           	.BYTE 0x2A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
001f36 81e8      	LD   R30,Y
001f37 b9ef      	OUT  0xF,R30
                 _0x2000003:
001f38 9b77      	SBIS 0xE,7
001f39 cffe      	RJMP _0x2000003
001f3a b1ef      	IN   R30,0xF
                 _0x2020001:
001f3b 9621      	ADIW R28,1
001f3c 9508      	RET
                 
                 	.DSEG
                 _tempX:
000630           	.BYTE 0x4
                 _tempY:
000634           	.BYTE 0x4
                 _rx_buffer1:
000638           	.BYTE 0x20
                 _rx_counter1:
000658           	.BYTE 0x1
                 _rx_buffer_overflow1:
000659           	.BYTE 0x1
                 _tx_buffer1:
00065a           	.BYTE 0x40
                 _tx_wr_index1:
00069a           	.BYTE 0x1
                 _tx_rd_index1:
00069b           	.BYTE 0x1
                 _tx_counter1:
00069c           	.BYTE 0x1
                 _uchCRCHi:
00069d           	.BYTE 0x1
                 _uchCRCLo:
00069e           	.BYTE 0x1
                 _isNewData:
00069f           	.BYTE 0x1
                 _transmitStatus:
0006a0           	.BYTE 0x1
                 _transmitDelayMs:
0006a1           	.BYTE 0x1
                 _tx_current_counter:
0006a2           	.BYTE 0x1
                 _rx_buffer2:
0006a3           	.BYTE 0x14
                 _rx_wr_index2:
0006b7           	.BYTE 0x1
                 _rx_rd_index2:
0006b8           	.BYTE 0x1
                 _rx_counter2:
0006b9           	.BYTE 0x1
                 _uart_swap:
0006ba           	.BYTE 0x1
                 _rx_buffer0:
0006bb           	.BYTE 0x100
                 _rx_wr_index0:
0007bb           	.BYTE 0x1
                 _rx_rd_index0:
0007bc           	.BYTE 0x1
                 _rx_counter0:
0007bd           	.BYTE 0x1
                 _rx_buffer_overflow0:
0007be           	.BYTE 0x1
                 _tx_buffer0:
0007bf           	.BYTE 0x8
                 _tx_wr_index0:
0007c7           	.BYTE 0x1
                 _tx_rd_index0:
0007c8           	.BYTE 0x1
                 _tx_counter0:
0007c9           	.BYTE 0x1
                 _State:
0007ca           	.BYTE 0x1
                 _ParameterState:
0007cb           	.BYTE 0x1
                 _ValueState:
0007cc           	.BYTE 0x1
                 _GraphState:
0007cd           	.BYTE 0x1
                 _ConfigState:
0007ce           	.BYTE 0x1
                 _Touch_mSec:
0007cf           	.BYTE 0x2
                 _ValueUpd_mSec:
0007d1           	.BYTE 0x2
                 _GraphUpd_mSec:
0007d3           	.BYTE 0x2
                 _GraphUpdTime:
0007d5           	.BYTE 0x2
                 _Graph_X:
0007d7           	.BYTE 0x2
                 _ValueLast:
0007d9           	.BYTE 0x6
                 _ConfigValue:
0007df           	.BYTE 0x18
                 _old_confVal:
0007f7           	.BYTE 0x2
                 
                 	.ESEG
                 _ConfigValue_mem:
000000           	.BYTE 0x6
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
001f3d 91e9      	ld   r30,y+
001f3e 91f9      	ld   r31,y+
001f3f 9630      	adiw r30,0
001f40 f039      	breq __delay_ms1
                 __delay_ms0:
                +
001f41 ea80     +LDI R24 , LOW ( 0xFA0 )
001f42 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
001f43 9701     +SBIW R24 , 1
001f44 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
001f45 95a8      	wdr
001f46 9731      	sbiw r30,1
001f47 f7c9      	brne __delay_ms0
                 __delay_ms1:
001f48 9508      	ret
                 
                 __ROUND_REPACK:
001f49 2355      	TST  R21
001f4a f442      	BRPL __REPACK
001f4b 3850      	CPI  R21,0x80
001f4c f411      	BRNE __ROUND_REPACK0
001f4d ffe0      	SBRS R30,0
001f4e c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001f4f 9631      	ADIW R30,1
001f50 1f69      	ADC  R22,R25
001f51 1f79      	ADC  R23,R25
001f52 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001f53 e850      	LDI  R21,0x80
001f54 2757      	EOR  R21,R23
001f55 f411      	BRNE __REPACK0
001f56 935f      	PUSH R21
001f57 c073      	RJMP __ZERORES
                 __REPACK0:
001f58 3f5f      	CPI  R21,0xFF
001f59 f031      	BREQ __REPACK1
001f5a 0f66      	LSL  R22
001f5b 0c00      	LSL  R0
001f5c 9557      	ROR  R21
001f5d 9567      	ROR  R22
001f5e 2f75      	MOV  R23,R21
001f5f 9508      	RET
                 __REPACK1:
001f60 935f      	PUSH R21
001f61 2000      	TST  R0
001f62 f00a      	BRMI __REPACK2
001f63 c073      	RJMP __MAXRES
                 __REPACK2:
001f64 c06c      	RJMP __MINRES
                 
                 __UNPACK:
001f65 e850      	LDI  R21,0x80
001f66 2e19      	MOV  R1,R25
001f67 2215      	AND  R1,R21
001f68 0f88      	LSL  R24
001f69 1f99      	ROL  R25
001f6a 2795      	EOR  R25,R21
001f6b 0f55      	LSL  R21
001f6c 9587      	ROR  R24
                 
                 __UNPACK1:
001f6d e850      	LDI  R21,0x80
001f6e 2e07      	MOV  R0,R23
001f6f 2205      	AND  R0,R21
001f70 0f66      	LSL  R22
001f71 1f77      	ROL  R23
001f72 2775      	EOR  R23,R21
001f73 0f55      	LSL  R21
001f74 9567      	ROR  R22
001f75 9508      	RET
                 
                 __CFD1U:
001f76 9468      	SET
001f77 c001      	RJMP __CFD1U0
                 __CFD1:
001f78 94e8      	CLT
                 __CFD1U0:
001f79 935f      	PUSH R21
001f7a dff2      	RCALL __UNPACK1
001f7b 3870      	CPI  R23,0x80
001f7c f018      	BRLO __CFD10
001f7d 3f7f      	CPI  R23,0xFF
001f7e f408      	BRCC __CFD10
001f7f c04b      	RJMP __ZERORES
                 __CFD10:
001f80 e156      	LDI  R21,22
001f81 1b57      	SUB  R21,R23
001f82 f4aa      	BRPL __CFD11
001f83 9551      	NEG  R21
001f84 3058      	CPI  R21,8
001f85 f40e      	BRTC __CFD19
001f86 3059      	CPI  R21,9
                 __CFD19:
001f87 f030      	BRLO __CFD17
001f88 efef      	SER  R30
001f89 efff      	SER  R31
001f8a ef6f      	SER  R22
001f8b e77f      	LDI  R23,0x7F
001f8c f977      	BLD  R23,7
001f8d c01a      	RJMP __CFD15
                 __CFD17:
001f8e 2777      	CLR  R23
001f8f 2355      	TST  R21
001f90 f0b9      	BREQ __CFD15
                 __CFD18:
001f91 0fee      	LSL  R30
001f92 1fff      	ROL  R31
001f93 1f66      	ROL  R22
001f94 1f77      	ROL  R23
001f95 955a      	DEC  R21
001f96 f7d1      	BRNE __CFD18
001f97 c010      	RJMP __CFD15
                 __CFD11:
001f98 2777      	CLR  R23
                 __CFD12:
001f99 3058      	CPI  R21,8
001f9a f028      	BRLO __CFD13
001f9b 2fef      	MOV  R30,R31
001f9c 2ff6      	MOV  R31,R22
001f9d 2f67      	MOV  R22,R23
001f9e 5058      	SUBI R21,8
001f9f cff9      	RJMP __CFD12
                 __CFD13:
001fa0 2355      	TST  R21
001fa1 f031      	BREQ __CFD15
                 __CFD14:
001fa2 9576      	LSR  R23
001fa3 9567      	ROR  R22
001fa4 95f7      	ROR  R31
001fa5 95e7      	ROR  R30
001fa6 955a      	DEC  R21
001fa7 f7d1      	BRNE __CFD14
                 __CFD15:
001fa8 2000      	TST  R0
001fa9 f40a      	BRPL __CFD16
001faa d080      	RCALL __ANEGD1
                 __CFD16:
001fab 915f      	POP  R21
001fac 9508      	RET
                 
                 __CDF1U:
001fad 9468      	SET
001fae c001      	RJMP __CDF1U0
                 __CDF1:
001faf 94e8      	CLT
                 __CDF1U0:
001fb0 9730      	SBIW R30,0
001fb1 4060      	SBCI R22,0
001fb2 4070      	SBCI R23,0
001fb3 f0b1      	BREQ __CDF10
001fb4 2400      	CLR  R0
001fb5 f026      	BRTS __CDF11
001fb6 2377      	TST  R23
001fb7 f412      	BRPL __CDF11
001fb8 9400      	COM  R0
001fb9 d071      	RCALL __ANEGD1
                 __CDF11:
001fba 2e17      	MOV  R1,R23
001fbb e17e      	LDI  R23,30
001fbc 2011      	TST  R1
                 __CDF12:
001fbd f032      	BRMI __CDF13
001fbe 957a      	DEC  R23
001fbf 0fee      	LSL  R30
001fc0 1fff      	ROL  R31
001fc1 1f66      	ROL  R22
001fc2 1c11      	ROL  R1
001fc3 cff9      	RJMP __CDF12
                 __CDF13:
001fc4 2fef      	MOV  R30,R31
001fc5 2ff6      	MOV  R31,R22
001fc6 2d61      	MOV  R22,R1
001fc7 935f      	PUSH R21
001fc8 df8a      	RCALL __REPACK
001fc9 915f      	POP  R21
                 __CDF10:
001fca 9508      	RET
                 
                 __ZERORES:
001fcb 27ee      	CLR  R30
001fcc 27ff      	CLR  R31
001fcd 2766      	CLR  R22
001fce 2777      	CLR  R23
001fcf 915f      	POP  R21
001fd0 9508      	RET
                 
                 __MINRES:
001fd1 efef      	SER  R30
001fd2 efff      	SER  R31
001fd3 e76f      	LDI  R22,0x7F
001fd4 ef7f      	SER  R23
001fd5 915f      	POP  R21
001fd6 9508      	RET
                 
                 __MAXRES:
001fd7 efef      	SER  R30
001fd8 efff      	SER  R31
001fd9 e76f      	LDI  R22,0x7F
001fda e77f      	LDI  R23,0x7F
001fdb 915f      	POP  R21
001fdc 9508      	RET
                 
                 __DIVF21:
001fdd 935f      	PUSH R21
001fde df86      	RCALL __UNPACK
001fdf 3870      	CPI  R23,0x80
001fe0 f421      	BRNE __DIVF210
001fe1 2011      	TST  R1
                 __DIVF211:
001fe2 f40a      	BRPL __DIVF219
001fe3 cfed      	RJMP __MINRES
                 __DIVF219:
001fe4 cff2      	RJMP __MAXRES
                 __DIVF210:
001fe5 3890      	CPI  R25,0x80
001fe6 f409      	BRNE __DIVF218
                 __DIVF217:
001fe7 cfe3      	RJMP __ZERORES
                 __DIVF218:
001fe8 2401      	EOR  R0,R1
001fe9 9408      	SEC
001fea 0b97      	SBC  R25,R23
001feb f41b      	BRVC __DIVF216
001fec f3d4      	BRLT __DIVF217
001fed 2000      	TST  R0
001fee cff3      	RJMP __DIVF211
                 __DIVF216:
001fef 2f79      	MOV  R23,R25
001ff0 931f      	PUSH R17
001ff1 932f      	PUSH R18
001ff2 933f      	PUSH R19
001ff3 934f      	PUSH R20
001ff4 2411      	CLR  R1
001ff5 2711      	CLR  R17
001ff6 2722      	CLR  R18
001ff7 2733      	CLR  R19
001ff8 2744      	CLR  R20
001ff9 2755      	CLR  R21
001ffa e290      	LDI  R25,32
                 __DIVF212:
001ffb 17ae      	CP   R26,R30
001ffc 07bf      	CPC  R27,R31
001ffd 0786      	CPC  R24,R22
001ffe 0741      	CPC  R20,R17
001fff f030      	BRLO __DIVF213
002000 1bae      	SUB  R26,R30
002001 0bbf      	SBC  R27,R31
002002 0b86      	SBC  R24,R22
002003 0b41      	SBC  R20,R17
002004 9408      	SEC
002005 c001      	RJMP __DIVF214
                 __DIVF213:
002006 9488      	CLC
                 __DIVF214:
002007 1f55      	ROL  R21
002008 1f22      	ROL  R18
002009 1f33      	ROL  R19
00200a 1c11      	ROL  R1
00200b 1faa      	ROL  R26
00200c 1fbb      	ROL  R27
00200d 1f88      	ROL  R24
00200e 1f44      	ROL  R20
00200f 959a      	DEC  R25
002010 f751      	BRNE __DIVF212
002011 01f9      	MOVW R30,R18
002012 2d61      	MOV  R22,R1
002013 914f      	POP  R20
002014 913f      	POP  R19
002015 912f      	POP  R18
002016 911f      	POP  R17
002017 2366      	TST  R22
002018 f032      	BRMI __DIVF215
002019 0f55      	LSL  R21
00201a 1fee      	ROL  R30
00201b 1fff      	ROL  R31
00201c 1f66      	ROL  R22
00201d 957a      	DEC  R23
00201e f243      	BRVS __DIVF217
                 __DIVF215:
00201f df29      	RCALL __ROUND_REPACK
002020 915f      	POP  R21
002021 9508      	RET
                 
                 __ADDD12:
002022 0fea      	ADD  R30,R26
002023 1ffb      	ADC  R31,R27
002024 1f68      	ADC  R22,R24
002025 1f79      	ADC  R23,R25
002026 9508      	RET
                 
                 __ANEGW1:
002027 95f1      	NEG  R31
002028 95e1      	NEG  R30
002029 40f0      	SBCI R31,0
00202a 9508      	RET
                 
                 __ANEGD1:
00202b 95f0      	COM  R31
00202c 9560      	COM  R22
00202d 9570      	COM  R23
00202e 95e1      	NEG  R30
00202f 4fff      	SBCI R31,-1
002030 4f6f      	SBCI R22,-1
002031 4f7f      	SBCI R23,-1
002032 9508      	RET
                 
                 __LSRB12:
002033 23ee      	TST  R30
002034 2e0e      	MOV  R0,R30
002035 2fea      	MOV  R30,R26
002036 f019      	BREQ __LSRB12R
                 __LSRB12L:
002037 95e6      	LSR  R30
002038 940a      	DEC  R0
002039 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00203a 9508      	RET
                 
                 __ASRW4:
00203b 95f5      	ASR  R31
00203c 95e7      	ROR  R30
                 __ASRW3:
00203d 95f5      	ASR  R31
00203e 95e7      	ROR  R30
                 __ASRW2:
00203f 95f5      	ASR  R31
002040 95e7      	ROR  R30
002041 95f5      	ASR  R31
002042 95e7      	ROR  R30
002043 9508      	RET
                 
                 __CWD1:
002044 2f6f      	MOV  R22,R31
002045 0f66      	ADD  R22,R22
002046 0b66      	SBC  R22,R22
002047 2f76      	MOV  R23,R22
002048 9508      	RET
                 
                 __MULW12U:
002049 9ffa      	MUL  R31,R26
00204a 2df0      	MOV  R31,R0
00204b 9feb      	MUL  R30,R27
00204c 0df0      	ADD  R31,R0
00204d 9fea      	MUL  R30,R26
00204e 2de0      	MOV  R30,R0
00204f 0df1      	ADD  R31,R1
002050 9508      	RET
                 
                 __MULD12U:
002051 9f7a      	MUL  R23,R26
002052 2d70      	MOV  R23,R0
002053 9f6b      	MUL  R22,R27
002054 0d70      	ADD  R23,R0
002055 9ff8      	MUL  R31,R24
002056 0d70      	ADD  R23,R0
002057 9fe9      	MUL  R30,R25
002058 0d70      	ADD  R23,R0
002059 9f6a      	MUL  R22,R26
00205a 2d60      	MOV  R22,R0
00205b 0d71      	ADD  R23,R1
00205c 9ffb      	MUL  R31,R27
00205d 0d60      	ADD  R22,R0
00205e 1d71      	ADC  R23,R1
00205f 9fe8      	MUL  R30,R24
002060 0d60      	ADD  R22,R0
002061 1d71      	ADC  R23,R1
002062 2788      	CLR  R24
002063 9ffa      	MUL  R31,R26
002064 2df0      	MOV  R31,R0
002065 0d61      	ADD  R22,R1
002066 1f78      	ADC  R23,R24
002067 9feb      	MUL  R30,R27
002068 0df0      	ADD  R31,R0
002069 1d61      	ADC  R22,R1
00206a 1f78      	ADC  R23,R24
00206b 9fea      	MUL  R30,R26
00206c 2de0      	MOV  R30,R0
00206d 0df1      	ADD  R31,R1
00206e 1f68      	ADC  R22,R24
00206f 1f78      	ADC  R23,R24
002070 9508      	RET
                 
                 __MULW12:
002071 d049      	RCALL __CHKSIGNW
002072 dfd6      	RCALL __MULW12U
002073 f40e      	BRTC __MULW121
002074 dfb2      	RCALL __ANEGW1
                 __MULW121:
002075 9508      	RET
                 
                 __MULD12:
002076 d052      	RCALL __CHKSIGND
002077 dfd9      	RCALL __MULD12U
002078 f40e      	BRTC __MULD121
002079 dfb1      	RCALL __ANEGD1
                 __MULD121:
00207a 9508      	RET
                 
                 __DIVW21U:
00207b 2400      	CLR  R0
00207c 2411      	CLR  R1
00207d e190      	LDI  R25,16
                 __DIVW21U1:
00207e 0faa      	LSL  R26
00207f 1fbb      	ROL  R27
002080 1c00      	ROL  R0
002081 1c11      	ROL  R1
002082 1a0e      	SUB  R0,R30
002083 0a1f      	SBC  R1,R31
002084 f418      	BRCC __DIVW21U2
002085 0e0e      	ADD  R0,R30
002086 1e1f      	ADC  R1,R31
002087 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
002088 60a1      	SBR  R26,1
                 __DIVW21U3:
002089 959a      	DEC  R25
00208a f799      	BRNE __DIVW21U1
00208b 01fd      	MOVW R30,R26
00208c 01d0      	MOVW R26,R0
00208d 9508      	RET
                 
                 __DIVD21U:
00208e 933f      	PUSH R19
00208f 934f      	PUSH R20
002090 935f      	PUSH R21
002091 2400      	CLR  R0
002092 2411      	CLR  R1
002093 2744      	CLR  R20
002094 2755      	CLR  R21
002095 e230      	LDI  R19,32
                 __DIVD21U1:
002096 0faa      	LSL  R26
002097 1fbb      	ROL  R27
002098 1f88      	ROL  R24
002099 1f99      	ROL  R25
00209a 1c00      	ROL  R0
00209b 1c11      	ROL  R1
00209c 1f44      	ROL  R20
00209d 1f55      	ROL  R21
00209e 1a0e      	SUB  R0,R30
00209f 0a1f      	SBC  R1,R31
0020a0 0b46      	SBC  R20,R22
0020a1 0b57      	SBC  R21,R23
0020a2 f428      	BRCC __DIVD21U2
0020a3 0e0e      	ADD  R0,R30
0020a4 1e1f      	ADC  R1,R31
0020a5 1f46      	ADC  R20,R22
0020a6 1f57      	ADC  R21,R23
0020a7 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0020a8 60a1      	SBR  R26,1
                 __DIVD21U3:
0020a9 953a      	DEC  R19
0020aa f759      	BRNE __DIVD21U1
0020ab 01fd      	MOVW R30,R26
0020ac 01bc      	MOVW R22,R24
0020ad 01d0      	MOVW R26,R0
0020ae 01ca      	MOVW R24,R20
0020af 915f      	POP  R21
0020b0 914f      	POP  R20
0020b1 913f      	POP  R19
0020b2 9508      	RET
                 
                 __DIVD21:
0020b3 d015      	RCALL __CHKSIGND
0020b4 dfd9      	RCALL __DIVD21U
0020b5 f40e      	BRTC __DIVD211
0020b6 df74      	RCALL __ANEGD1
                 __DIVD211:
0020b7 9508      	RET
                 
                 __MODW21U:
0020b8 dfc2      	RCALL __DIVW21U
0020b9 01fd      	MOVW R30,R26
0020ba 9508      	RET
                 
                 __CHKSIGNW:
0020bb 94e8      	CLT
0020bc fff7      	SBRS R31,7
0020bd c002      	RJMP __CHKSW1
0020be df68      	RCALL __ANEGW1
0020bf 9468      	SET
                 __CHKSW1:
0020c0 ffb7      	SBRS R27,7
0020c1 c006      	RJMP __CHKSW2
0020c2 95a0      	COM  R26
0020c3 95b0      	COM  R27
0020c4 9611      	ADIW R26,1
0020c5 f800      	BLD  R0,0
0020c6 9403      	INC  R0
0020c7 fa00      	BST  R0,0
                 __CHKSW2:
0020c8 9508      	RET
                 
                 __CHKSIGND:
0020c9 94e8      	CLT
0020ca ff77      	SBRS R23,7
0020cb c002      	RJMP __CHKSD1
0020cc df5e      	RCALL __ANEGD1
0020cd 9468      	SET
                 __CHKSD1:
0020ce ff97      	SBRS R25,7
0020cf c00b      	RJMP __CHKSD2
0020d0 2400      	CLR  R0
0020d1 95a0      	COM  R26
0020d2 95b0      	COM  R27
0020d3 9580      	COM  R24
0020d4 9590      	COM  R25
0020d5 9611      	ADIW R26,1
0020d6 1d80      	ADC  R24,R0
0020d7 1d90      	ADC  R25,R0
0020d8 f800      	BLD  R0,0
0020d9 9403      	INC  R0
0020da fa00      	BST  R0,0
                 __CHKSD2:
0020db 9508      	RET
                 
                 __GETW1P:
0020dc 91ed      	LD   R30,X+
0020dd 91fc      	LD   R31,X
0020de 9711      	SBIW R26,1
0020df 9508      	RET
                 
                 __GETW1PF:
0020e0 9005      	LPM  R0,Z+
0020e1 91f4      	LPM  R31,Z
0020e2 2de0      	MOV  R30,R0
0020e3 9508      	RET
                 
                 __GETW2PF:
0020e4 91a5      	LPM  R26,Z+
0020e5 91b4      	LPM  R27,Z
0020e6 9508      	RET
                 
                 __SWAPW12:
0020e7 2e1b      	MOV  R1,R27
0020e8 2fbf      	MOV  R27,R31
0020e9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0020ea 2e1a      	MOV  R1,R26
0020eb 2fae      	MOV  R26,R30
0020ec 2de1      	MOV  R30,R1
0020ed 9508      	RET
                 
                 __EEPROMRDW:
0020ee 9611      	ADIW R26,1
0020ef d002      	RCALL __EEPROMRDB
0020f0 2ffe      	MOV  R31,R30
0020f1 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0020f2 99e1      	SBIC EECR,EEWE
0020f3 cffe      	RJMP __EEPROMRDB
0020f4 93ff      	PUSH R31
0020f5 b7ff      	IN   R31,SREG
0020f6 94f8      	CLI
0020f7 bbae      	OUT  EEARL,R26
0020f8 bbbf      	OUT  EEARH,R27
0020f9 9ae0      	SBI  EECR,EERE
0020fa b3ed      	IN   R30,EEDR
0020fb bfff      	OUT  SREG,R31
0020fc 91ff      	POP  R31
0020fd 9508      	RET
                 
                 __EEPROMWRW:
0020fe d007      	RCALL __EEPROMWRB
0020ff 9611      	ADIW R26,1
002100 93ef      	PUSH R30
002101 2fef      	MOV  R30,R31
002102 d003      	RCALL __EEPROMWRB
002103 91ef      	POP  R30
002104 9711      	SBIW R26,1
002105 9508      	RET
                 
                 __EEPROMWRB:
002106 9be1      	SBIS EECR,EEWE
002107 c002      	RJMP __EEPROMWRB1
002108 95a8      	WDR
002109 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00210a b79f      	IN   R25,SREG
00210b 94f8      	CLI
00210c bbae      	OUT  EEARL,R26
00210d bbbf      	OUT  EEARH,R27
00210e 9ae0      	SBI  EECR,EERE
00210f b38d      	IN   R24,EEDR
002110 17e8      	CP   R30,R24
002111 f019      	BREQ __EEPROMWRB0
002112 bbed      	OUT  EEDR,R30
002113 9ae2      	SBI  EECR,EEMWE
002114 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
002115 bf9f      	OUT  SREG,R25
002116 9508      	RET
                 
                 __CPD21:
002117 17ae      	CP   R26,R30
002118 07bf      	CPC  R27,R31
002119 0786      	CPC  R24,R22
00211a 0797      	CPC  R25,R23
00211b 9508      	RET
                 
                 __SAVELOCR6:
00211c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00211d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00211e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00211f 932a      	ST   -Y,R18
                 __SAVELOCR2:
002120 931a      	ST   -Y,R17
002121 930a      	ST   -Y,R16
002122 9508      	RET
                 
                 __LOADLOCR6:
002123 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
002124 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
002125 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
002126 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
002127 8119      	LDD  R17,Y+1
002128 8108      	LD   R16,Y
002129 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  73 r1 :  41 r2 :   0 r3 :   0 r4 :  10 r5 :   8 r6 :  10 r7 :   8 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   4 r14:   0 r15:   4 
r16: 144 r17: 168 r18:  71 r19:  59 r20:  34 r21:  96 r22: 119 r23: 101 
r24:  63 r25:  43 r26: 717 r27: 257 r28:  53 r29:   1 r30:2345 r31:1435 
x  :  90 y  :1679 z  :  39 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   : 102 add   : 103 
adiw  :  79 and   :   3 andi  :  10 asr   :   5 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  55 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  37 
brlt  :  10 brmi  :   5 brne  : 140 brpl  :  16 brsh  :  49 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 254 
cbi   :  19 cbr   :   0 clc   :   1 clh   :   0 cli   :   6 cln   :   0 
clr   :  41 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  34 cpc   : 143 cpi   : 212 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  14 inc   :   3 jmp   :  63 ld    : 106 ldd   : 393 
ldi   :1330 lds   : 244 lpm   :  19 lsl   :  82 lsr   :   2 mov   : 103 
movw  : 138 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   9 
or    :   5 ori   :   4 out   :  73 pop   :  21 push  :  20 rcall : 143 
ret   :  67 reti  :   4 rjmp  : 212 rol   :  97 ror   :  12 sbc   :  23 
sbci  :  53 sbi   :  25 sbic  :   7 sbis  :   2 sbiw  :  48 sbr   :   2 
sbrc  :   0 sbrs  :   5 sec   :   2 seh   :   0 sei   :   4 sen   :   0 
ser   :   8 ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :1203 std   :  92 sts   : 164 sub   :  18 subi  :  91 
swap  :   1 tst   :  24 wdr   :   4 
Instructions used: 79 out of 117 (67.5%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x004254  14114   2866  16980  131072  13.0%
[.dseg] 0x000100 0x0007f9      0    761    761    4351  17.5%
[.eseg] 0x000000 0x000006      0      6      6    4096   0.1%

Assembly complete, 0 errors, 8 warnings
