
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm Fri Jul 31 16:18:58 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1061): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1065): warning: Register r13 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TOUCH_X=R4
                 	.DEF _TOUCH_Y=R6
                 	.DEF _TOUCH_X_LAST=R8
                 	.DEF _TOUCH_Y_LAST=R10
                 	.DEF _rx_wr_index2=R13
                 	.DEF _rx_rd_index2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 04e4 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 120c 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0aae 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0b1e 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0b65 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0b90 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _tbl10_G101:
0003e6 2710
0003e7 03e8
0003e8 0064
0003e9 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
0003ea 0001      	.DB  0x1,0x0
                 _tbl16_G101:
0003eb 1000
0003ec 0100
0003ed 0010
0003ee 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0003ef 0000      	.DW  0x0000
                 
                 _0x116:
0003f0 fffa      	.DB  0xFA,0xFF
                 _0x117:
0003f1 005a
0003f2 005a
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1414): warning: .cseg .db misalignment - padding zero byte
0003f3 0032      	.DB  0x5A,0x0,0x5A,0x0,0x32
                 _0x0:
0003f4 2020
0003f5 2020
0003f6 0020
0003f7 c5cc      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xCC,0xC5
0003f8 decd
0003f9 2000
0003fa 2b20
0003fb 2000      	.DB  0xCD,0xDE,0x0,0x20,0x20,0x2B,0x0,0x20
0003fc 2d20
0003fd cf00
0003fe d3c0
0003ff c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
000400 2000
000401 2020
000402 2020
000403 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000404 2020
000405 2020
000406 2020
000407 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000408 0020
000409 c0cd
00040a d0cf
00040b c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
00040c cdc5
00040d c5c8
00040e d400
00040f c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
000410 d200
000411 cace
000412 cd00
000413 cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
000414 dfd0
000415 c5c6
000416 c8cd
000417 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000418 20c8
000419 ced2
00041a 00ca
00041b cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
00041c c1c7
00041d c6d3
00041e c5c4
00041f c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
000420 00df
000421 c8c4
000422 00d1
000423 ccc0      	.DB  0xDF,0x0,0xC4,0xC8,0xD1,0x0,0xC0,0xCC
000424 00cf
000425 c2ce
000426 00c5
000427 4b20      	.DB  0xCF,0x0,0xCE,0xC2,0xC5,0x0,0x20,0x4B
000428 0055
000429 4b20
00042a 0049
00042b 554b      	.DB  0x55,0x0,0x20,0x4B,0x49,0x0,0x4B,0x55
00042c 0049
00042d 6146
00042e 7473
00042f 4441      	.DB  0x49,0x0,0x46,0x61,0x73,0x74,0x41,0x44
000430 0043
000431 d6c3
000432 cd00
000433 efe0      	.DB  0x43,0x0,0xC3,0xD6,0x0,0xCD,0xE0,0xEF
000434 f3f0
000435 f3e3
000436 f320
000437 e0e1      	.DB  0xF0,0xF3,0xE3,0xF3,0x20,0xF3,0xE1,0xE0
000438 fce2
000439 0a20
00043a cd00
00043b efe0      	.DB  0xE2,0xFC,0x20,0xA,0x0,0xCD,0xE0,0xEF
00043c f3f0
00043d e8e3
00043e ef20
00043f e8f0      	.DB  0xF0,0xF3,0xE3,0xE8,0x20,0xEF,0xF0,0xE8
000440 e0e1
000441 fce2
000442 0a20
000443 cf00      	.DB  0xE1,0xE0,0xE2,0xFC,0x20,0xA,0x0,0xCF
000444 e4ee
000445 e0e4
000446 20e9
000447 e1ee      	.DB  0xEE,0xE4,0xE4,0xE0,0xE9,0x20,0xEE,0xE1
000448 f0ee
000449 f2ee
00044a e2ee
00044b 0a20      	.DB  0xEE,0xF0,0xEE,0xF2,0xEE,0xE2,0x20,0xA
00044c cd00
00044d 20e5
00044e eee3
00044f e8ed      	.DB  0x0,0xCD,0xE5,0x20,0xE3,0xEE,0xED,0xE8
000450 202c
000451 eeef
000452 e5ec
000453 ebe4      	.DB  0x2C,0x20,0xEF,0xEE,0xEC,0xE5,0xE4,0xEB
000454 ede5
000455 e5ed
000456 20e5
000457 000a      	.DB  0xE5,0xED,0xED,0xE5,0xE5,0x20,0xA,0x0
000458 d2d1
000459 d0c0
00045a 00d2
00045b c5c4      	.DB  0xD1,0xD2,0xC0,0xD0,0xD2,0x0,0xC4,0xC5
00045c cad1
00045d ccce
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1442): warning: .cseg .db misalignment - padding zero byte
00045e 0000      	.DB  0xD1,0xCA,0xCE,0xCC,0x0
                 
                 __GLOBAL_INI_TBL:
00045f 0001      	.DW  0x01
000460 0002      	.DW  0x02
000461 07de      	.DW  __REG_BIT_VARS*2
                 
000462 0006      	.DW  0x06
000463 0500      	.DW  _0xF8
000464 07e8      	.DW  _0x0*2
                 
000465 0006      	.DW  0x06
000466 0506      	.DW  _0xF8+6
000467 07e8      	.DW  _0x0*2
                 
000468 0006      	.DW  0x06
000469 050c      	.DW  _0xF8+12
00046a 07e8      	.DW  _0x0*2
                 
00046b 0006      	.DW  0x06
00046c 0512      	.DW  _0xF8+18
00046d 07e8      	.DW  _0x0*2
                 
00046e 0005      	.DW  0x05
00046f 0518      	.DW  _0xFC
000470 07ee      	.DW  _0x0*2+6
                 
000471 0004      	.DW  0x04
000472 051d      	.DW  _0xFC+5
000473 07f3      	.DW  _0x0*2+11
                 
000474 0004      	.DW  0x04
000475 0521      	.DW  _0xFC+9
000476 07f7      	.DW  _0x0*2+15
                 
000477 0006      	.DW  0x06
000478 0525      	.DW  _0xFC+13
000479 07fb      	.DW  _0x0*2+19
                 
00047a 0002      	.DW  0x02
00047b 07b1      	.DW  _Graph_X
00047c 07e0      	.DW  _0x116*2
                 
00047d 0005      	.DW  0x05
00047e 07b3      	.DW  _Amplitude
00047f 07e2      	.DW  _0x117*2
                 
000480 0011      	.DW  0x11
000481 052b      	.DW  _0x118
000482 0801      	.DW  _0x0*2+25
                 
000483 0011      	.DW  0x11
000484 053c      	.DW  _0x118+17
000485 0801      	.DW  _0x0*2+25
                 
000486 000b      	.DW  0x0B
000487 054d      	.DW  _0x118+34
000488 0812      	.DW  _0x0*2+42
                 
000489 0004      	.DW  0x04
00048a 0558      	.DW  _0x118+45
00048b 081d      	.DW  _0x0*2+53
                 
00048c 0004      	.DW  0x04
00048d 055c      	.DW  _0x118+49
00048e 0821      	.DW  _0x0*2+57
                 
00048f 0004      	.DW  0x04
000490 0560      	.DW  _0x118+53
000491 081d      	.DW  _0x0*2+53
                 
000492 0011      	.DW  0x11
000493 0564      	.DW  _0x118+57
000494 0825      	.DW  _0x0*2+61
                 
000495 000c      	.DW  0x0C
000496 0575      	.DW  _0x118+74
000497 0836      	.DW  _0x0*2+78
                 
000498 0004      	.DW  0x04
000499 0581      	.DW  _0x118+86
00049a 0842      	.DW  _0x0*2+90
                 
00049b 0004      	.DW  0x04
00049c 0585      	.DW  _0x118+90
00049d 0846      	.DW  _0x0*2+94
                 
00049e 0004      	.DW  0x04
00049f 0589      	.DW  _0x118+94
0004a0 084a      	.DW  _0x0*2+98
                 
0004a1 0004      	.DW  0x04
0004a2 058d      	.DW  _0x118+98
0004a3 0842      	.DW  _0x0*2+90
                 
0004a4 0004      	.DW  0x04
0004a5 0591      	.DW  _0x118+102
0004a6 0846      	.DW  _0x0*2+94
                 
0004a7 0004      	.DW  0x04
0004a8 0595      	.DW  _0x118+106
0004a9 084a      	.DW  _0x0*2+98
                 
0004aa 0004      	.DW  0x04
0004ab 0599      	.DW  _0x118+110
0004ac 0842      	.DW  _0x0*2+90
                 
0004ad 0004      	.DW  0x04
0004ae 059d      	.DW  _0x118+114
0004af 0846      	.DW  _0x0*2+94
                 
0004b0 0004      	.DW  0x04
0004b1 05a1      	.DW  _0x118+118
0004b2 084a      	.DW  _0x0*2+98
                 
0004b3 0004      	.DW  0x04
0004b4 05a5      	.DW  _0x118+122
0004b5 084e      	.DW  _0x0*2+102
                 
0004b6 0004      	.DW  0x04
0004b7 05a9      	.DW  _0x118+126
0004b8 0852      	.DW  _0x0*2+106
                 
0004b9 0004      	.DW  0x04
0004ba 05ad      	.DW  _0x118+130
0004bb 0856      	.DW  _0x0*2+110
                 
0004bc 0008      	.DW  0x08
0004bd 05b1      	.DW  _0x118+134
0004be 085a      	.DW  _0x0*2+114
                 
0004bf 000d      	.DW  0x0D
0004c0 05b9      	.DW  _0x124
0004c1 0805      	.DW  _0x0*2+29
                 
0004c2 000d      	.DW  0x0D
0004c3 05c6      	.DW  _0x124+13
0004c4 0805      	.DW  _0x0*2+29
                 
0004c5 0003      	.DW  0x03
0004c6 05d3      	.DW  _0x124+26
0004c7 0862      	.DW  _0x0*2+122
                 
0004c8 0006      	.DW  0x06
0004c9 05d6      	.DW  _0x190
0004ca 08b0      	.DW  _0x0*2+200
                 
0004cb 0006      	.DW  0x06
0004cc 05dc      	.DW  _0x190+6
0004cd 07fb      	.DW  _0x0*2+19
                 
0004ce 0006      	.DW  0x06
0004cf 05e2      	.DW  _0x190+12
0004d0 07fb      	.DW  _0x0*2+19
                 
0004d1 0007      	.DW  0x07
0004d2 05e8      	.DW  _0x1A8
0004d3 08b6      	.DW  _0x0*2+206
                 
0004d4 0007      	.DW  0x07
0004d5 05ef      	.DW  _0x1A8+7
0004d6 08b6      	.DW  _0x0*2+206
                 
0004d7 0007      	.DW  0x07
0004d8 05f6      	.DW  _0x1A8+14
0004d9 08b6      	.DW  _0x0*2+206
                 
0004da 0007      	.DW  0x07
0004db 05fd      	.DW  _0x1A8+21
0004dc 080b      	.DW  _0x0*2+35
                 
0004dd 0007      	.DW  0x07
0004de 0604      	.DW  _0x1A8+28
0004df 080b      	.DW  _0x0*2+35
                 
0004e0 0007      	.DW  0x07
0004e1 060b      	.DW  _0x1A8+35
0004e2 080b      	.DW  _0x0*2+35
                 
                 _0xFFFFFFFF:
0004e3 0000      	.DW  0
                 
                 __RESET:
0004e4 94f8      	CLI
0004e5 27ee      	CLR  R30
0004e6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0004e7 e0f1      	LDI  R31,1
0004e8 bff5      	OUT  MCUCR,R31
0004e9 bfe5      	OUT  MCUCR,R30
0004ea 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0004ec e1f8      	LDI  R31,0x18
0004ed bdf1      	OUT  WDTCR,R31
0004ee bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0004ef e08d      	LDI  R24,(14-2)+1
0004f0 e0a2      	LDI  R26,2
0004f1 27bb      	CLR  R27
                 __CLEAR_REG:
0004f2 93ed      	ST   X+,R30
0004f3 958a      	DEC  R24
0004f4 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0004f5 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0004f6 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0004f7 e0a0      	LDI  R26,LOW(__SRAM_START)
0004f8 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0004f9 93ed      	ST   X+,R30
0004fa 9701      	SBIW R24,1
0004fb f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0004fc ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0004fd e0f8      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0004fe 9185      	LPM  R24,Z+
0004ff 9195      	LPM  R25,Z+
000500 9700      	SBIW R24,0
000501 f061      	BREQ __GLOBAL_INI_END
000502 91a5      	LPM  R26,Z+
000503 91b5      	LPM  R27,Z+
000504 9005      	LPM  R0,Z+
000505 9015      	LPM  R1,Z+
000506 01bf      	MOVW R22,R30
000507 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000508 9005      	LPM  R0,Z+
000509 920d      	ST   X+,R0
00050a 9701      	SBIW R24,1
00050b f7e1      	BRNE __GLOBAL_INI_LOOP
00050c 01fb      	MOVW R30,R22
00050d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00050e bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00050f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000510 bfed      	OUT  SPL,R30
000511 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000512 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000513 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000514 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000515 940c 1227 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;void SSD1963_PortInit(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _SSD1963_PortInit:
                 ;    //SSD1963_PORT
                 ;    DDRA = 0xFF;
000517 efef      	LDI  R30,LOW(255)
000518 bbea      	OUT  0x1A,R30
                 ;    DDRC = 0xFF;
000519 bbe4      	OUT  0x14,R30
                 ;    //SSD1963 76543210
                 ;    DDRD |= 0b11100000;
00051a b3e1      	IN   R30,0x11
00051b 6ee0      	ORI  R30,LOW(0xE0)
00051c bbe1      	OUT  0x11,R30
                 ;    DDRE |= 0b10100000;
00051d b1e2      	IN   R30,0x2
00051e 6ae0      	ORI  R30,LOW(0xA0)
00051f b9e2      	OUT  0x2,R30
                 ;}
000520 9508      	RET
                 ;
                 ;#pragma used+
                 ;
                 ;unsigned char RotateByte(unsigned char Value)
                 ;{
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
000521 940e 147f 	CALL SUBOPT_0x0
000523 95f5      	ASR  R31
000524 95e7      	ROR  R30
000525 75e5      	ANDI R30,LOW(0x55)
000526 2fae      	MOV  R26,R30
000527 81e8      	LD   R30,Y
000528 0fee      	LSL  R30
000529 7aea      	ANDI R30,LOW(0xAA)
00052a 2bea      	OR   R30,R26
00052b 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
00052c 940e 147f 	CALL SUBOPT_0x0
00052e 940e 18c2 	CALL __ASRW2
000530 73e3      	ANDI R30,LOW(0x33)
000531 2fae      	MOV  R26,R30
000532 81e8      	LD   R30,Y
000533 0fee      	LSL  R30
000534 0fee      	LSL  R30
000535 7cec      	ANDI R30,LOW(0xCC)
000536 2bea      	OR   R30,R26
000537 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
000538 940e 147f 	CALL SUBOPT_0x0
00053a 940e 18be 	CALL __ASRW4
00053c 70ef      	ANDI R30,LOW(0xF)
00053d 2fae      	MOV  R26,R30
00053e 81e8      	LD   R30,Y
00053f 95e2      	SWAP R30
000540 7fe0      	ANDI R30,LOW(0xF0)
000541 2bea      	OR   R30,R26
000542 83e8      	ST   Y,R30
                 ;  return Value;
000543 c023      	RJMP _0x208000C
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
000544 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
000545 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
000546 940e 1482 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
000548 981d      	CBI  0x3,5
                 ;  delay_ms(100);
000549 940e 1482 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
00054b 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
00054c 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
00054d 940e 1482 	CALL SUBOPT_0x1
                 ;}
00054f 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
000550 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
000551 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
000552 940e 1488 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
000554 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000555 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000556 9896      	CBI  0x12,6
                 ;  #asm("nop")
000557 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000558 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000559 9a96      	SBI  0x12,6
                 ;  #asm("nop")
00055a 0000      	nop
00055b c00b      	RJMP _0x208000B
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
00055c 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
00055d 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
00055e 940e 1488 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
000560 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000561 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000562 9896      	CBI  0x12,6
                 ;  #asm("nop")
000563 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000564 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000565 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000566 0000      	nop
                 _0x208000B:
                 ;} // SSD1963_Writedata
                 _0x208000C:
000567 9621      	ADIW R28,1
000568 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
000569 931a      	ST   -Y,R17
00056a 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
00056b 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
00056c 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
00056d 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
00056e 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
00056f bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
000570 bb05      	OUT  0x15,R16
                 ;  #asm("nop")
000571 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000572 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000573 9896      	CBI  0x12,6
                 ;  #asm("nop")
000574 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000575 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000576 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000577 0000      	nop
                 ;} // SSD1963_Writedata
000578 8119      	LDD  R17,Y+1
000579 8108      	LDD  R16,Y+0
00057a 9624      	ADIW R28,4
00057b 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_PortInit();
00057c df9a      	RCALL _SSD1963_PortInit
                 ;  SSD1963_Reset();
00057d dfc6      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
00057e 940e 1490 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000580 940e 1490 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000582 940e 1490 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
000584 940e 1494 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
000586 eee2      	LDI  R30,LOW(226)
000587 93ea      	ST   -Y,R30
000588 dfc7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
000589 e2e3      	LDI  R30,LOW(35)
00058a 93ea      	ST   -Y,R30
00058b dfd0      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
00058c e0e2      	LDI  R30,LOW(2)
00058d 940e 149a 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
00058f eee0      	LDI  R30,LOW(224)
000590 940e 14a1 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
000592 940e 14a8 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
000594 eee0      	LDI  R30,LOW(224)
000595 940e 14ae 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
000597 940e 1490 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
000599 e7e8      	LDI  R30,LOW(120)
00059a e0f0      	LDI  R31,HIGH(120)
00059b 940e 14b5 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
00059d eee6      	LDI  R30,LOW(230)
00059e 940e 14a1 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
0005a0 edea      	LDI  R30,LOW(218)
0005a1 93ea      	ST   -Y,R30
0005a2 dfb9      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
0005a3 e7e3      	LDI  R30,LOW(115)
0005a4 93ea      	ST   -Y,R30
0005a5 dfb6      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
0005a6 ebe0      	LDI  R30,LOW(176)
0005a7 93ea      	ST   -Y,R30
0005a8 dfa7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
0005a9 e2e4      	LDI  R30,LOW(36)
0005aa 940e 14b9 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
0005ac 940e 14c0 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
0005ae edef      	LDI  R30,LOW(223)
0005af 940e 14c4 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
0005b1 e0ef      	LDI  R30,LOW(15)
0005b2 940e 14b9 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
0005b4 ebe4      	LDI  R30,LOW(180)
0005b5 940e 14ae 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
0005b7 e8e4      	LDI  R30,LOW(132)
0005b8 940e 14b9 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
0005ba e5ea      	LDI  R30,LOW(90)
0005bb 93ea      	ST   -Y,R30
0005bc df9f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
0005bd e0ea      	LDI  R30,LOW(10)
0005be 940e 14b9 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
0005c0 e0e8      	LDI  R30,LOW(8)
0005c1 940e 14b9 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
0005c3 ebe6      	LDI  R30,LOW(182)
0005c4 940e 14a1 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
0005c6 e2ec      	LDI  R30,LOW(44)
0005c7 940e 14b9 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
0005c9 e0ec      	LDI  R30,LOW(12)
0005ca 93ea      	ST   -Y,R30
0005cb df90      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
0005cc e0ea      	LDI  R30,LOW(10)
0005cd 93ea      	ST   -Y,R30
0005ce df8d      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
0005cf e0e0      	LDI  R30,LOW(0)
0005d0 940e 149a 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
0005d2 ebea      	LDI  R30,LOW(186)
0005d3 93ea      	ST   -Y,R30
0005d4 df7b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
0005d5 e0ef      	LDI  R30,LOW(15)
0005d6 93ea      	ST   -Y,R30
0005d7 df84      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
0005d8 ebe8      	LDI  R30,LOW(184)
0005d9 93ea      	ST   -Y,R30
0005da df75      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
0005db e0e7      	LDI  R30,LOW(7)
0005dc 940e 14c4 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
0005de e3e6      	LDI  R30,LOW(54)
0005df 940e 14ae 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
0005e1 ebec      	LDI  R30,LOW(188)
0005e2 93ea      	ST   -Y,R30
0005e3 df6c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
0005e4 e5e0      	LDI  R30,LOW(80)
0005e5 93ea      	ST   -Y,R30
0005e6 df75      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
0005e7 e9e0      	LDI  R30,LOW(144)
0005e8 93ea      	ST   -Y,R30
0005e9 df72      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
0005ea e5e0      	LDI  R30,LOW(80)
0005eb 940e 14c4 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
0005ed efe0      	LDI  R30,LOW(240)
0005ee 940e 14ae 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
0005f0 e0e5      	LDI  R30,LOW(5)
0005f1 e0f0      	LDI  R31,HIGH(5)
0005f2 940e 14b5 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
0005f4 e2e9      	LDI  R30,LOW(41)
0005f5 93ea      	ST   -Y,R30
0005f6 df59      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
0005f7 ede0      	LDI  R30,LOW(208)
0005f8 93ea      	ST   -Y,R30
0005f9 df56      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
0005fa e0ed      	LDI  R30,LOW(13)
0005fb 93ea      	ST   -Y,R30
0005fc df5f      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
0005fd 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
0005fe e2ea      	LDI  R30,LOW(42)
0005ff 93ea      	ST   -Y,R30
000600 df4f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
000601 81ef      	LDD  R30,Y+7
000602 93ea      	ST   -Y,R30
000603 df58      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
000604 81ee      	LDD  R30,Y+6
000605 93ea      	ST   -Y,R30
000606 df55      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
000607 81ed      	LDD  R30,Y+5
000608 93ea      	ST   -Y,R30
000609 df52      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
00060a 81ec      	LDD  R30,Y+4
00060b 93ea      	ST   -Y,R30
00060c df4f      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
00060d e2eb      	LDI  R30,LOW(43)
00060e 93ea      	ST   -Y,R30
00060f df40      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
000610 81eb      	LDD  R30,Y+3
000611 93ea      	ST   -Y,R30
000612 df49      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
000613 81ea      	LDD  R30,Y+2
000614 93ea      	ST   -Y,R30
000615 df46      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
000616 81e9      	LDD  R30,Y+1
000617 93ea      	ST   -Y,R30
000618 df43      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
000619 81e8      	LD   R30,Y
00061a 93ea      	ST   -Y,R30
00061b df40      	RCALL _SSD1963_WriteData_b8
                 ;}
00061c 9628      	ADIW R28,8
00061d 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
00061e 940e 1975 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
000620 e2e8      	LDI  R30,LOW(40)
000621 93ea      	ST   -Y,R30
000622 df2d      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
000623 940e 14c8 	CALL SUBOPT_0xD
000625 edef      	LDI  R30,LOW(479)
000626 e0f1      	LDI  R31,HIGH(479)
000627 940e 14cd 	CALL SUBOPT_0xE
000629 e0ef      	LDI  R30,LOW(271)
00062a e0f1      	LDI  R31,HIGH(271)
00062b 940e 14d0 	CALL SUBOPT_0xF
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
00062d e000     +LDI R16 , LOW ( 0 )
00062e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x31:
                +
00062f 3100     +CPI R16 , LOW ( 272 )
000630 e0e1     +LDI R30 , HIGH ( 272 )
000631 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
000632 f480      	BRSH _0x33
                 ;  {
                 ;    y=0;
                +
000633 e020     +LDI R18 , LOW ( 0 )
000634 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x34:
                +
000635 3e20     +CPI R18 , LOW ( 480 )
000636 e0e1     +LDI R30 , HIGH ( 480 )
000637 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
000638 f438      	BRSH _0x36
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
000639 81ec      	LDD  R30,Y+4
00063a 81fd      	LDD  R31,Y+4+1
00063b 940e 14d8 	CALL SUBOPT_0x10
                 ;      y++;
                +
00063d 5f2f     +SUBI R18 , LOW ( - 1 )
00063e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
00063f cff5      	RJMP _0x34
                 _0x36:
                 ;  x++;
                +
000640 5f0f     +SUBI R16 , LOW ( - 1 )
000641 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
000642 cfec      	RJMP _0x31
                 _0x33:
                 ;  SSD1963_WriteCmd(0x29);
000643 e2e9      	LDI  R30,LOW(41)
000644 93ea      	ST   -Y,R30
000645 df0a      	RCALL _SSD1963_WriteCmd
                 ;}
000646 940e 197c 	CALL __LOADLOCR4
000648 9626      	ADIW R28,6
000649 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
00064a 931a      	ST   -Y,R17
00064b 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
00064c 940e 14dc 	CALL SUBOPT_0x11
00064e 85aa      	LDD  R26,Y+10
00064f 85bb      	LDD  R27,Y+10+1
000650 9650      	ADIW R26,16
000651 9711      	SBIW R26,1
000652 93ba      	ST   -Y,R27
000653 93aa      	ST   -Y,R26
000654 940e 14e1 	CALL SUBOPT_0x12
000656 85ac      	LDD  R26,Y+12
000657 85bd      	LDD  R27,Y+12+1
000658 9650      	ADIW R26,16
000659 9711      	SBIW R26,1
00065a 93ba      	ST   -Y,R27
00065b 93aa      	ST   -Y,R26
00065c dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
00065d e2ec      	LDI  R30,LOW(44)
00065e 93ea      	ST   -Y,R30
00065f def0      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
000660 e010      	LDI  R17,LOW(0)
                 _0x38:
000661 3210      	CPI  R17,32
000662 f4e8      	BRSH _0x39
                 ;  {
                 ;    for (j = 0; j < 8; j++)
000663 e000      	LDI  R16,LOW(0)
                 _0x3B:
000664 3008      	CPI  R16,8
000665 f4c0      	BRSH _0x3C
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
000666 2fe1      	MOV  R30,R17
000667 85aa      	LDD  R26,Y+10
000668 85bb      	LDD  R27,Y+10+1
000669 e0f0      	LDI  R31,0
00066a 0fea      	ADD  R30,R26
00066b 1ffb      	ADC  R31,R27
00066c 9014      	LPM  R1,Z
00066d 2fe0      	MOV  R30,R16
00066e e8a0      	LDI  R26,LOW(128)
00066f 940e 18b6 	CALL __LSRB12
000671 21e1      	AND  R30,R1
000672 30e1      	CPI  R30,LOW(0x1)
000673 f018      	BRLO _0x3D
000674 81ec      	LDD  R30,Y+4
000675 81fd      	LDD  R31,Y+4+1
000676 c002      	RJMP _0x1AF
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3D:
000677 81ea      	LDD  R30,Y+2
000678 81fb      	LDD  R31,Y+2+1
                 _0x1AF:
000679 93fa      	ST   -Y,R31
00067a 93ea      	ST   -Y,R30
00067b deed      	RCALL _SSD1963_WriteData_b16
                 ;    }
00067c 5f0f      	SUBI R16,-1
00067d cfe6      	RJMP _0x3B
                 _0x3C:
                 ;  }
00067e 5f1f      	SUBI R17,-1
00067f cfe1      	RJMP _0x38
                 _0x39:
                 ;}
000680 8119      	LDD  R17,Y+1
000681 8108      	LDD  R16,Y+0
000682 c332      	RJMP _0x208000A
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000683 940e 14e6 	CALL SUBOPT_0x13
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
000685 33e0      	CPI  R30,LOW(0x30)
000686 e0a0      	LDI  R26,HIGH(0x30)
000687 07fa      	CPC  R31,R26
000688 f419      	BRNE _0x42
000689 e0ec      	LDI  R30,LOW(_S_48*2)
00068a e0f1      	LDI  R31,HIGH(_S_48*2)
00068b c18e      	RJMP _0x1B0
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x42:
00068c 33e1      	CPI  R30,LOW(0x31)
00068d e0a0      	LDI  R26,HIGH(0x31)
00068e 07fa      	CPC  R31,R26
00068f f419      	BRNE _0x43
000690 e2ec      	LDI  R30,LOW(_S_49*2)
000691 e0f1      	LDI  R31,HIGH(_S_49*2)
000692 c187      	RJMP _0x1B0
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x43:
000693 33e2      	CPI  R30,LOW(0x32)
000694 e0a0      	LDI  R26,HIGH(0x32)
000695 07fa      	CPC  R31,R26
000696 f419      	BRNE _0x44
000697 e4ec      	LDI  R30,LOW(_S_50*2)
000698 e0f1      	LDI  R31,HIGH(_S_50*2)
000699 c180      	RJMP _0x1B0
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x44:
00069a 33e3      	CPI  R30,LOW(0x33)
00069b e0a0      	LDI  R26,HIGH(0x33)
00069c 07fa      	CPC  R31,R26
00069d f419      	BRNE _0x45
00069e e6ec      	LDI  R30,LOW(_S_51*2)
00069f e0f1      	LDI  R31,HIGH(_S_51*2)
0006a0 c179      	RJMP _0x1B0
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x45:
0006a1 33e4      	CPI  R30,LOW(0x34)
0006a2 e0a0      	LDI  R26,HIGH(0x34)
0006a3 07fa      	CPC  R31,R26
0006a4 f419      	BRNE _0x46
0006a5 e8ec      	LDI  R30,LOW(_S_52*2)
0006a6 e0f1      	LDI  R31,HIGH(_S_52*2)
0006a7 c172      	RJMP _0x1B0
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x46:
0006a8 33e5      	CPI  R30,LOW(0x35)
0006a9 e0a0      	LDI  R26,HIGH(0x35)
0006aa 07fa      	CPC  R31,R26
0006ab f419      	BRNE _0x47
0006ac eaec      	LDI  R30,LOW(_S_53*2)
0006ad e0f1      	LDI  R31,HIGH(_S_53*2)
0006ae c16b      	RJMP _0x1B0
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x47:
0006af 33e6      	CPI  R30,LOW(0x36)
0006b0 e0a0      	LDI  R26,HIGH(0x36)
0006b1 07fa      	CPC  R31,R26
0006b2 f419      	BRNE _0x48
0006b3 ecec      	LDI  R30,LOW(_S_54*2)
0006b4 e0f1      	LDI  R31,HIGH(_S_54*2)
0006b5 c164      	RJMP _0x1B0
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x48:
0006b6 33e7      	CPI  R30,LOW(0x37)
0006b7 e0a0      	LDI  R26,HIGH(0x37)
0006b8 07fa      	CPC  R31,R26
0006b9 f419      	BRNE _0x49
0006ba eeec      	LDI  R30,LOW(_S_55*2)
0006bb e0f1      	LDI  R31,HIGH(_S_55*2)
0006bc c15d      	RJMP _0x1B0
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x49:
0006bd 33e8      	CPI  R30,LOW(0x38)
0006be e0a0      	LDI  R26,HIGH(0x38)
0006bf 07fa      	CPC  R31,R26
0006c0 f419      	BRNE _0x4A
0006c1 e0ec      	LDI  R30,LOW(_S_56*2)
0006c2 e0f2      	LDI  R31,HIGH(_S_56*2)
0006c3 c156      	RJMP _0x1B0
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4A:
0006c4 33e9      	CPI  R30,LOW(0x39)
0006c5 e0a0      	LDI  R26,HIGH(0x39)
0006c6 07fa      	CPC  R31,R26
0006c7 f419      	BRNE _0x4B
0006c8 e2ec      	LDI  R30,LOW(_S_57*2)
0006c9 e0f2      	LDI  R31,HIGH(_S_57*2)
0006ca c14f      	RJMP _0x1B0
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4B:
0006cb 32e1      	CPI  R30,LOW(0x21)
0006cc e0a0      	LDI  R26,HIGH(0x21)
0006cd 07fa      	CPC  R31,R26
0006ce f419      	BRNE _0x4C
0006cf e6ec      	LDI  R30,LOW(_S_33*2)
0006d0 e0f2      	LDI  R31,HIGH(_S_33*2)
0006d1 c148      	RJMP _0x1B0
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4C:
0006d2 32e8      	CPI  R30,LOW(0x28)
0006d3 e0a0      	LDI  R26,HIGH(0x28)
0006d4 07fa      	CPC  R31,R26
0006d5 f419      	BRNE _0x4D
0006d6 e8ec      	LDI  R30,LOW(_S_40*2)
0006d7 e0f2      	LDI  R31,HIGH(_S_40*2)
0006d8 c141      	RJMP _0x1B0
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4D:
0006d9 32e9      	CPI  R30,LOW(0x29)
0006da e0a0      	LDI  R26,HIGH(0x29)
0006db 07fa      	CPC  R31,R26
0006dc f419      	BRNE _0x4E
0006dd eaec      	LDI  R30,LOW(_S_41*2)
0006de e0f2      	LDI  R31,HIGH(_S_41*2)
0006df c13a      	RJMP _0x1B0
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x4E:
0006e0 32ef      	CPI  R30,LOW(0x2F)
0006e1 e0a0      	LDI  R26,HIGH(0x2F)
0006e2 07fa      	CPC  R31,R26
0006e3 f419      	BRNE _0x4F
0006e4 ecec      	LDI  R30,LOW(_S_47*2)
0006e5 e0f2      	LDI  R31,HIGH(_S_47*2)
0006e6 c133      	RJMP _0x1B0
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x4F:
0006e7 33ea      	CPI  R30,LOW(0x3A)
0006e8 e0a0      	LDI  R26,HIGH(0x3A)
0006e9 07fa      	CPC  R31,R26
0006ea f419      	BRNE _0x50
0006eb e2ec      	LDI  R30,LOW(_S_58*2)
0006ec e0f3      	LDI  R31,HIGH(_S_58*2)
0006ed c12c      	RJMP _0x1B0
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x50:
0006ee 33ec      	CPI  R30,LOW(0x3C)
0006ef e0a0      	LDI  R26,HIGH(0x3C)
0006f0 07fa      	CPC  R31,R26
0006f1 f419      	BRNE _0x51
0006f2 e4ec      	LDI  R30,LOW(_S_60*2)
0006f3 e0f3      	LDI  R31,HIGH(_S_60*2)
0006f4 c125      	RJMP _0x1B0
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x51:
0006f5 33ed      	CPI  R30,LOW(0x3D)
0006f6 e0a0      	LDI  R26,HIGH(0x3D)
0006f7 07fa      	CPC  R31,R26
0006f8 f419      	BRNE _0x52
0006f9 e6ec      	LDI  R30,LOW(_S_61*2)
0006fa e0f3      	LDI  R31,HIGH(_S_61*2)
0006fb c11e      	RJMP _0x1B0
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x52:
0006fc 33ee      	CPI  R30,LOW(0x3E)
0006fd e0a0      	LDI  R26,HIGH(0x3E)
0006fe 07fa      	CPC  R31,R26
0006ff f419      	BRNE _0x53
000700 e8ec      	LDI  R30,LOW(_S_62*2)
000701 e0f3      	LDI  R31,HIGH(_S_62*2)
000702 c117      	RJMP _0x1B0
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x53:
000703 33ef      	CPI  R30,LOW(0x3F)
000704 e0a0      	LDI  R26,HIGH(0x3F)
000705 07fa      	CPC  R31,R26
000706 f419      	BRNE _0x54
000707 eaec      	LDI  R30,LOW(_S_63*2)
000708 e0f3      	LDI  R31,HIGH(_S_63*2)
000709 c110      	RJMP _0x1B0
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x54:
00070a 32eb      	CPI  R30,LOW(0x2B)
00070b e0a0      	LDI  R26,HIGH(0x2B)
00070c 07fa      	CPC  R31,R26
00070d f419      	BRNE _0x55
00070e eeec      	LDI  R30,LOW(_S_43*2)
00070f e0f2      	LDI  R31,HIGH(_S_43*2)
000710 c109      	RJMP _0x1B0
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x55:
000711 32ed      	CPI  R30,LOW(0x2D)
000712 e0a0      	LDI  R26,HIGH(0x2D)
000713 07fa      	CPC  R31,R26
000714 f419      	BRNE _0x56
000715 e0ec      	LDI  R30,LOW(_S_45*2)
000716 e0f3      	LDI  R31,HIGH(_S_45*2)
000717 c102      	RJMP _0x1B0
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x56:
000718 3ce0      	CPI  R30,LOW(0xC0)
000719 e0a0      	LDI  R26,HIGH(0xC0)
00071a 07fa      	CPC  R31,R26
00071b f419      	BRNE _0x57
00071c ecec      	LDI  R30,LOW(_S_192*2)
00071d e0f3      	LDI  R31,HIGH(_S_192*2)
00071e c0fb      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x57:
00071f 3ce1      	CPI  R30,LOW(0xC1)
000720 e0a0      	LDI  R26,HIGH(0xC1)
000721 07fa      	CPC  R31,R26
000722 f419      	BRNE _0x58
000723 eeec      	LDI  R30,LOW(_S_193*2)
000724 e0f3      	LDI  R31,HIGH(_S_193*2)
000725 c0f4      	RJMP _0x1B0
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x58:
000726 3ce2      	CPI  R30,LOW(0xC2)
000727 e0a0      	LDI  R26,HIGH(0xC2)
000728 07fa      	CPC  R31,R26
000729 f419      	BRNE _0x59
00072a e0ec      	LDI  R30,LOW(_S_194*2)
00072b e0f4      	LDI  R31,HIGH(_S_194*2)
00072c c0ed      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x59:
00072d 3ce3      	CPI  R30,LOW(0xC3)
00072e e0a0      	LDI  R26,HIGH(0xC3)
00072f 07fa      	CPC  R31,R26
000730 f419      	BRNE _0x5A
000731 e2ec      	LDI  R30,LOW(_S_195*2)
000732 e0f4      	LDI  R31,HIGH(_S_195*2)
000733 c0e6      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5A:
000734 3ce4      	CPI  R30,LOW(0xC4)
000735 e0a0      	LDI  R26,HIGH(0xC4)
000736 07fa      	CPC  R31,R26
000737 f419      	BRNE _0x5B
000738 e4ec      	LDI  R30,LOW(_S_196*2)
000739 e0f4      	LDI  R31,HIGH(_S_196*2)
00073a c0df      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5B:
00073b 3ce5      	CPI  R30,LOW(0xC5)
00073c e0a0      	LDI  R26,HIGH(0xC5)
00073d 07fa      	CPC  R31,R26
00073e f419      	BRNE _0x5C
00073f e6ec      	LDI  R30,LOW(_S_197*2)
000740 e0f4      	LDI  R31,HIGH(_S_197*2)
000741 c0d8      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5C:
000742 3ce6      	CPI  R30,LOW(0xC6)
000743 e0a0      	LDI  R26,HIGH(0xC6)
000744 07fa      	CPC  R31,R26
000745 f419      	BRNE _0x5D
000746 e8ec      	LDI  R30,LOW(_S_198*2)
000747 e0f4      	LDI  R31,HIGH(_S_198*2)
000748 c0d1      	RJMP _0x1B0
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5D:
000749 3ce7      	CPI  R30,LOW(0xC7)
00074a e0a0      	LDI  R26,HIGH(0xC7)
00074b 07fa      	CPC  R31,R26
00074c f419      	BRNE _0x5E
00074d eaec      	LDI  R30,LOW(_S_199*2)
00074e e0f4      	LDI  R31,HIGH(_S_199*2)
00074f c0ca      	RJMP _0x1B0
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x5E:
000750 3ce8      	CPI  R30,LOW(0xC8)
000751 e0a0      	LDI  R26,HIGH(0xC8)
000752 07fa      	CPC  R31,R26
000753 f419      	BRNE _0x5F
000754 ecec      	LDI  R30,LOW(_S_200*2)
000755 e0f4      	LDI  R31,HIGH(_S_200*2)
000756 c0c3      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x5F:
000757 3ce9      	CPI  R30,LOW(0xC9)
000758 e0a0      	LDI  R26,HIGH(0xC9)
000759 07fa      	CPC  R31,R26
00075a f419      	BRNE _0x60
00075b eeec      	LDI  R30,LOW(_S_201*2)
00075c e0f4      	LDI  R31,HIGH(_S_201*2)
00075d c0bc      	RJMP _0x1B0
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x60:
00075e 3cea      	CPI  R30,LOW(0xCA)
00075f e0a0      	LDI  R26,HIGH(0xCA)
000760 07fa      	CPC  R31,R26
000761 f419      	BRNE _0x61
000762 e0ec      	LDI  R30,LOW(_S_202*2)
000763 e0f5      	LDI  R31,HIGH(_S_202*2)
000764 c0b5      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x61:
000765 3ceb      	CPI  R30,LOW(0xCB)
000766 e0a0      	LDI  R26,HIGH(0xCB)
000767 07fa      	CPC  R31,R26
000768 f419      	BRNE _0x62
000769 e2ec      	LDI  R30,LOW(_S_203*2)
00076a e0f5      	LDI  R31,HIGH(_S_203*2)
00076b c0ae      	RJMP _0x1B0
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x62:
00076c 3cec      	CPI  R30,LOW(0xCC)
00076d e0a0      	LDI  R26,HIGH(0xCC)
00076e 07fa      	CPC  R31,R26
00076f f419      	BRNE _0x63
000770 e4ec      	LDI  R30,LOW(_S_204*2)
000771 e0f5      	LDI  R31,HIGH(_S_204*2)
000772 c0a7      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x63:
000773 3ced      	CPI  R30,LOW(0xCD)
000774 e0a0      	LDI  R26,HIGH(0xCD)
000775 07fa      	CPC  R31,R26
000776 f419      	BRNE _0x64
000777 e6ec      	LDI  R30,LOW(_S_205*2)
000778 e0f5      	LDI  R31,HIGH(_S_205*2)
000779 c0a0      	RJMP _0x1B0
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x64:
00077a 3cee      	CPI  R30,LOW(0xCE)
00077b e0a0      	LDI  R26,HIGH(0xCE)
00077c 07fa      	CPC  R31,R26
00077d f419      	BRNE _0x65
00077e e8ec      	LDI  R30,LOW(_S_206*2)
00077f e0f5      	LDI  R31,HIGH(_S_206*2)
000780 c099      	RJMP _0x1B0
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x65:
000781 3cef      	CPI  R30,LOW(0xCF)
000782 e0a0      	LDI  R26,HIGH(0xCF)
000783 07fa      	CPC  R31,R26
000784 f419      	BRNE _0x66
000785 eaec      	LDI  R30,LOW(_S_207*2)
000786 e0f5      	LDI  R31,HIGH(_S_207*2)
000787 c092      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x66:
000788 3de0      	CPI  R30,LOW(0xD0)
000789 e0a0      	LDI  R26,HIGH(0xD0)
00078a 07fa      	CPC  R31,R26
00078b f419      	BRNE _0x67
00078c ecec      	LDI  R30,LOW(_S_208*2)
00078d e0f5      	LDI  R31,HIGH(_S_208*2)
00078e c08b      	RJMP _0x1B0
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x67:
00078f 3de1      	CPI  R30,LOW(0xD1)
000790 e0a0      	LDI  R26,HIGH(0xD1)
000791 07fa      	CPC  R31,R26
000792 f419      	BRNE _0x68
000793 eeec      	LDI  R30,LOW(_S_209*2)
000794 e0f5      	LDI  R31,HIGH(_S_209*2)
000795 c084      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x68:
000796 3de2      	CPI  R30,LOW(0xD2)
000797 e0a0      	LDI  R26,HIGH(0xD2)
000798 07fa      	CPC  R31,R26
000799 f419      	BRNE _0x69
00079a e0ec      	LDI  R30,LOW(_S_210*2)
00079b e0f6      	LDI  R31,HIGH(_S_210*2)
00079c c07d      	RJMP _0x1B0
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x69:
00079d 3de3      	CPI  R30,LOW(0xD3)
00079e e0a0      	LDI  R26,HIGH(0xD3)
00079f 07fa      	CPC  R31,R26
0007a0 f419      	BRNE _0x6A
0007a1 e2ec      	LDI  R30,LOW(_S_211*2)
0007a2 e0f6      	LDI  R31,HIGH(_S_211*2)
0007a3 c076      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6A:
0007a4 3de4      	CPI  R30,LOW(0xD4)
0007a5 e0a0      	LDI  R26,HIGH(0xD4)
0007a6 07fa      	CPC  R31,R26
0007a7 f419      	BRNE _0x6B
0007a8 e4ec      	LDI  R30,LOW(_S_212*2)
0007a9 e0f6      	LDI  R31,HIGH(_S_212*2)
0007aa c06f      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6B:
0007ab 3de5      	CPI  R30,LOW(0xD5)
0007ac e0a0      	LDI  R26,HIGH(0xD5)
0007ad 07fa      	CPC  R31,R26
0007ae f419      	BRNE _0x6C
0007af e6ec      	LDI  R30,LOW(_S_213*2)
0007b0 e0f6      	LDI  R31,HIGH(_S_213*2)
0007b1 c068      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6C:
0007b2 3de6      	CPI  R30,LOW(0xD6)
0007b3 e0a0      	LDI  R26,HIGH(0xD6)
0007b4 07fa      	CPC  R31,R26
0007b5 f419      	BRNE _0x6D
0007b6 e8ec      	LDI  R30,LOW(_S_214*2)
0007b7 e0f6      	LDI  R31,HIGH(_S_214*2)
0007b8 c061      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6D:
0007b9 3de7      	CPI  R30,LOW(0xD7)
0007ba e0a0      	LDI  R26,HIGH(0xD7)
0007bb 07fa      	CPC  R31,R26
0007bc f419      	BRNE _0x6E
0007bd eaec      	LDI  R30,LOW(_S_215*2)
0007be e0f6      	LDI  R31,HIGH(_S_215*2)
0007bf c05a      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x6E:
0007c0 3de8      	CPI  R30,LOW(0xD8)
0007c1 e0a0      	LDI  R26,HIGH(0xD8)
0007c2 07fa      	CPC  R31,R26
0007c3 f419      	BRNE _0x6F
0007c4 ecec      	LDI  R30,LOW(_S_216*2)
0007c5 e0f6      	LDI  R31,HIGH(_S_216*2)
0007c6 c053      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x6F:
0007c7 3de9      	CPI  R30,LOW(0xD9)
0007c8 e0a0      	LDI  R26,HIGH(0xD9)
0007c9 07fa      	CPC  R31,R26
0007ca f419      	BRNE _0x70
0007cb eeec      	LDI  R30,LOW(_S_217*2)
0007cc e0f6      	LDI  R31,HIGH(_S_217*2)
0007cd c04c      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x70:
0007ce 3dea      	CPI  R30,LOW(0xDA)
0007cf e0a0      	LDI  R26,HIGH(0xDA)
0007d0 07fa      	CPC  R31,R26
0007d1 f419      	BRNE _0x71
0007d2 e0ec      	LDI  R30,LOW(_S_218*2)
0007d3 e0f7      	LDI  R31,HIGH(_S_218*2)
0007d4 c045      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x71:
0007d5 3deb      	CPI  R30,LOW(0xDB)
0007d6 e0a0      	LDI  R26,HIGH(0xDB)
0007d7 07fa      	CPC  R31,R26
0007d8 f419      	BRNE _0x72
0007d9 e2ec      	LDI  R30,LOW(_S_219*2)
0007da e0f7      	LDI  R31,HIGH(_S_219*2)
0007db c03e      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x72:
0007dc 3dec      	CPI  R30,LOW(0xDC)
0007dd e0a0      	LDI  R26,HIGH(0xDC)
0007de 07fa      	CPC  R31,R26
0007df f419      	BRNE _0x73
0007e0 e4ec      	LDI  R30,LOW(_S_220*2)
0007e1 e0f7      	LDI  R31,HIGH(_S_220*2)
0007e2 c037      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x73:
0007e3 3ded      	CPI  R30,LOW(0xDD)
0007e4 e0a0      	LDI  R26,HIGH(0xDD)
0007e5 07fa      	CPC  R31,R26
0007e6 f419      	BRNE _0x74
0007e7 e6ec      	LDI  R30,LOW(_S_221*2)
0007e8 e0f7      	LDI  R31,HIGH(_S_221*2)
0007e9 c030      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x74:
0007ea 3dee      	CPI  R30,LOW(0xDE)
0007eb e0a0      	LDI  R26,HIGH(0xDE)
0007ec 07fa      	CPC  R31,R26
0007ed f419      	BRNE _0x75
0007ee e8ec      	LDI  R30,LOW(_S_222*2)
0007ef e0f7      	LDI  R31,HIGH(_S_222*2)
0007f0 c029      	RJMP _0x1B0
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x75:
0007f1 3def      	CPI  R30,LOW(0xDF)
0007f2 e0a0      	LDI  R26,HIGH(0xDF)
0007f3 07fa      	CPC  R31,R26
0007f4 f419      	BRNE _0x76
0007f5 eaec      	LDI  R30,LOW(_S_223*2)
0007f6 e0f7      	LDI  R31,HIGH(_S_223*2)
0007f7 c022      	RJMP _0x1B0
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x76:
0007f8 32ee      	CPI  R30,LOW(0x2E)
0007f9 e0a0      	LDI  R26,HIGH(0x2E)
0007fa 07fa      	CPC  R31,R26
0007fb f419      	BRNE _0x77
0007fc eaec      	LDI  R30,LOW(_S_46*2)
0007fd e0f0      	LDI  R31,HIGH(_S_46*2)
0007fe c01b      	RJMP _0x1B0
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x77:
0007ff 32e0      	CPI  R30,LOW(0x20)
000800 e0a0      	LDI  R26,HIGH(0x20)
000801 07fa      	CPC  R31,R26
000802 f419      	BRNE _0x78
000803 e4ec      	LDI  R30,LOW(_S_32*2)
000804 e0f2      	LDI  R31,HIGH(_S_32*2)
000805 c014      	RJMP _0x1B0
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x78:
000806 30e1      	CPI  R30,LOW(0x1)
000807 e0a0      	LDI  R26,HIGH(0x1)
000808 07fa      	CPC  R31,R26
000809 f419      	BRNE _0x79
00080a ecec      	LDI  R30,LOW(_S_UP*2)
00080b e0f0      	LDI  R31,HIGH(_S_UP*2)
00080c c00d      	RJMP _0x1B0
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x79:
00080d 30e2      	CPI  R30,LOW(0x2)
00080e e0a0      	LDI  R26,HIGH(0x2)
00080f 07fa      	CPC  R31,R26
000810 f419      	BRNE _0x7A
000811 eeec      	LDI  R30,LOW(_S_DOWN*2)
000812 e0f0      	LDI  R31,HIGH(_S_DOWN*2)
000813 c006      	RJMP _0x1B0
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7A:
000814 30e3      	CPI  R30,LOW(0x3)
000815 e0a0      	LDI  R26,HIGH(0x3)
000816 07fa      	CPC  R31,R26
000817 f469      	BRNE _0x41
000818 e8ec      	LDI  R30,LOW(_blank_symb*2)
000819 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x1B0:
00081a 93fa      	ST   -Y,R31
00081b 93ea      	ST   -Y,R30
00081c 940e 14dc 	CALL SUBOPT_0x11
00081e 940e 14dc 	CALL SUBOPT_0x11
000820 940e 14dc 	CALL SUBOPT_0x11
000822 940e 14dc 	CALL SUBOPT_0x11
000824 de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x41:
                 ;}
000825 9629      	ADIW R28,9
000826 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7C:
000827 85a8      	LDD  R26,Y+8
000828 85b9      	LDD  R27,Y+8+1
000829 91ec      	LD   R30,X
00082a 30e0      	CPI  R30,0
00082b f099      	BREQ _0x7E
00082c 91ed      	LD   R30,X+
00082d 87a8      	STD  Y+8,R26
00082e 87b9      	STD  Y+8+1,R27
00082f 93ea      	ST   -Y,R30
000830 940e 14e9 	CALL SUBOPT_0x14
000832 940e 14e9 	CALL SUBOPT_0x14
000834 940e 14e9 	CALL SUBOPT_0x14
000836 940e 14e9 	CALL SUBOPT_0x14
000838 de4a      	RCALL _SSD1963_PutChar16
000839 81ee      	LDD  R30,Y+6
00083a 81ff      	LDD  R31,Y+6+1
00083b 9670      	ADIW R30,16
00083c 83ee      	STD  Y+6,R30
00083d 83ff      	STD  Y+6+1,R31
00083e cfe8      	RJMP _0x7C
                 _0x7E:
                 ;}
00083f 962a      	ADIW R28,10
000840 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutValue16:
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000841 81ec      	LDD  R30,Y+4
000842 e0f0      	LDI  R31,0
                 ;  {
                 ;    case 5 :
000843 30e5      	CPI  R30,LOW(0x5)
000844 e0a0      	LDI  R26,HIGH(0x5)
000845 07fa      	CPC  R31,R26
000846 f499      	BRNE _0x82
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
000847 85a9      	LDD  R26,Y+9
000848 85ba      	LDD  R27,Y+9+1
000849 e1e0      	LDI  R30,LOW(10000)
00084a e2f7      	LDI  R31,HIGH(10000)
00084b 940e 14ee 	CALL SUBOPT_0x15
00084d 940e 14dc 	CALL SUBOPT_0x11
00084f 940e 14e9 	CALL SUBOPT_0x14
000851 940e 14e9 	CALL SUBOPT_0x14
000853 940e 14f3 	CALL SUBOPT_0x16
                 ;      Value %= 10000;
000855 e1e0      	LDI  R30,LOW(10000)
000856 e2f7      	LDI  R31,HIGH(10000)
000857 940e 14f8 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
000859 c004      	RJMP _0x83
                 _0x82:
00085a 30e4      	CPI  R30,LOW(0x4)
00085b e0a0      	LDI  R26,HIGH(0x4)
00085c 07fa      	CPC  R31,R26
00085d f499      	BRNE _0x84
                 _0x83:
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
00085e 85a9      	LDD  R26,Y+9
00085f 85ba      	LDD  R27,Y+9+1
000860 eee8      	LDI  R30,LOW(1000)
000861 e0f3      	LDI  R31,HIGH(1000)
000862 940e 14ee 	CALL SUBOPT_0x15
000864 940e 14dc 	CALL SUBOPT_0x11
000866 940e 14e9 	CALL SUBOPT_0x14
000868 940e 14e9 	CALL SUBOPT_0x14
00086a 940e 14f3 	CALL SUBOPT_0x16
                 ;      Value %= 1000;
00086c eee8      	LDI  R30,LOW(1000)
00086d e0f3      	LDI  R31,HIGH(1000)
00086e 940e 14f8 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
000870 c004      	RJMP _0x85
                 _0x84:
000871 30e3      	CPI  R30,LOW(0x3)
000872 e0a0      	LDI  R26,HIGH(0x3)
000873 07fa      	CPC  R31,R26
000874 f499      	BRNE _0x86
                 _0x85:
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
000875 85a9      	LDD  R26,Y+9
000876 85ba      	LDD  R27,Y+9+1
000877 e6e4      	LDI  R30,LOW(100)
000878 e0f0      	LDI  R31,HIGH(100)
000879 940e 14ee 	CALL SUBOPT_0x15
00087b 940e 14dc 	CALL SUBOPT_0x11
00087d 940e 14e9 	CALL SUBOPT_0x14
00087f 940e 14e9 	CALL SUBOPT_0x14
000881 940e 14f3 	CALL SUBOPT_0x16
                 ;      Value %= 100;
000883 e6e4      	LDI  R30,LOW(100)
000884 e0f0      	LDI  R31,HIGH(100)
000885 940e 14f8 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
000887 c004      	RJMP _0x87
                 _0x86:
000888 30e2      	CPI  R30,LOW(0x2)
000889 e0a0      	LDI  R26,HIGH(0x2)
00088a 07fa      	CPC  R31,R26
00088b f499      	BRNE _0x88
                 _0x87:
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
00088c 85a9      	LDD  R26,Y+9
00088d 85ba      	LDD  R27,Y+9+1
00088e e0ea      	LDI  R30,LOW(10)
00088f e0f0      	LDI  R31,HIGH(10)
000890 940e 14ee 	CALL SUBOPT_0x15
000892 940e 14dc 	CALL SUBOPT_0x11
000894 940e 14e9 	CALL SUBOPT_0x14
000896 940e 14e9 	CALL SUBOPT_0x14
000898 940e 14f3 	CALL SUBOPT_0x16
                 ;      Value %= 10;
00089a e0ea      	LDI  R30,LOW(10)
00089b e0f0      	LDI  R31,HIGH(10)
00089c 940e 14f8 	CALL SUBOPT_0x17
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
00089e c004      	RJMP _0x89
                 _0x88:
00089f 30e1      	CPI  R30,LOW(0x1)
0008a0 e0a0      	LDI  R26,HIGH(0x1)
0008a1 07fa      	CPC  R31,R26
0008a2 f461      	BRNE _0x81
                 _0x89:
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
0008a3 85e9      	LDD  R30,Y+9
0008a4 5de0      	SUBI R30,-LOW(48)
0008a5 93ea      	ST   -Y,R30
0008a6 940e 14dc 	CALL SUBOPT_0x11
0008a8 940e 14dc 	CALL SUBOPT_0x11
0008aa 940e 14e9 	CALL SUBOPT_0x14
0008ac 940e 14e9 	CALL SUBOPT_0x14
0008ae ddd4      	RCALL _SSD1963_PutChar16
                 ;    break;
                 ;  }
                 _0x81:
                 ;}
0008af 962b      	ADIW R28,11
0008b0 9508      	RET
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
0008b1 940e 1502 	CALL SUBOPT_0x18
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
0008b3 940e 1514 	CALL SUBOPT_0x19
                 ;  if (j < 0) j *= -1;
0008b5 f412      	BRPL _0x8B
0008b6 940e 151e 	CALL SUBOPT_0x1A
                 ;  k = StopY - StartY + 1;
                 _0x8B:
0008b8 940e 1525 	CALL SUBOPT_0x1B
                 ;  if (k < 0) k *= -1;
0008ba f422      	BRPL _0x8C
0008bb 940e 1535 	CALL SUBOPT_0x1C
0008bd 940e 153a 	CALL SUBOPT_0x1D
                 ;  k = k * j;
                 _0x8C:
0008bf 940e 1545 	CALL SUBOPT_0x1E
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x8E:
0008c1 940e 1558 	CALL SUBOPT_0x1F
0008c3 f43c      	BRGE _0x8F
0008c4 85ea      	LDD  R30,Y+10
0008c5 85fb      	LDD  R31,Y+10+1
0008c6 940e 14d8 	CALL SUBOPT_0x10
0008c8 940e 1560 	CALL SUBOPT_0x20
0008ca cff6      	RJMP _0x8E
                 _0x8F:
0008cb c105      	RJMP _0x2080009
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
0008cc 972a      	SBIW R28,10
0008cd 940e 1973 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
0008cf 8da9      	LDD  R26,Y+25
0008d0 8dba      	LDD  R27,Y+25+1
0008d1 89ef      	LDD  R30,Y+23
0008d2 8df8      	LDD  R31,Y+23+1
0008d3 1bea      	SUB  R30,R26
0008d4 0bfb      	SBC  R31,R27
0008d5 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
0008d6 2355      	TST  R21
0008d7 f432      	BRPL _0x90
0008d8 01fa      	MOVW R30,R20
0008d9 efaf      	LDI  R26,LOW(65535)
0008da efbf      	LDI  R27,HIGH(65535)
0008db 940e 18f4 	CALL __MULW12
0008dd 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x90:
0008de 89ad      	LDD  R26,Y+21
0008df 89be      	LDD  R27,Y+21+1
0008e0 89eb      	LDD  R30,Y+19
0008e1 89fc      	LDD  R31,Y+19+1
0008e2 1bea      	SUB  R30,R26
0008e3 0bfb      	SBC  R31,R27
0008e4 87ee      	STD  Y+14,R30
0008e5 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
0008e6 85af      	LDD  R26,Y+15
0008e7 23aa      	TST  R26
0008e8 f432      	BRPL _0x91
0008e9 efaf      	LDI  R26,LOW(65535)
0008ea efbf      	LDI  R27,HIGH(65535)
0008eb 940e 18f4 	CALL __MULW12
0008ed 87ee      	STD  Y+14,R30
0008ee 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x91:
0008ef 89ef      	LDD  R30,Y+23
0008f0 8df8      	LDD  R31,Y+23+1
0008f1 8da9      	LDD  R26,Y+25
0008f2 8dba      	LDD  R27,Y+25+1
0008f3 17ae      	CP   R26,R30
0008f4 07bf      	CPC  R27,R31
0008f5 f418      	BRSH _0x92
0008f6 e0e1      	LDI  R30,LOW(1)
0008f7 e0f0      	LDI  R31,HIGH(1)
0008f8 c002      	RJMP _0x93
                 _0x92:
0008f9 efef      	LDI  R30,LOW(65535)
0008fa efff      	LDI  R31,HIGH(65535)
                 _0x93:
0008fb 87ec      	STD  Y+12,R30
0008fc 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
0008fd 89eb      	LDD  R30,Y+19
0008fe 89fc      	LDD  R31,Y+19+1
0008ff 89ad      	LDD  R26,Y+21
000900 89be      	LDD  R27,Y+21+1
000901 17ae      	CP   R26,R30
000902 07bf      	CPC  R27,R31
000903 f418      	BRSH _0x95
000904 e0e1      	LDI  R30,LOW(1)
000905 e0f0      	LDI  R31,HIGH(1)
000906 c002      	RJMP _0x96
                 _0x95:
000907 efef      	LDI  R30,LOW(65535)
000908 efff      	LDI  R31,HIGH(65535)
                 _0x96:
000909 87ea      	STD  Y+10,R30
00090a 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
00090b 85ae      	LDD  R26,Y+14
00090c 85bf      	LDD  R27,Y+14+1
00090d 01fa      	MOVW R30,R20
00090e 1bea      	SUB  R30,R26
00090f 0bfb      	SBC  R31,R27
000910 87e8      	STD  Y+8,R30
000911 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x98:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
000912 8de9      	LDD  R30,Y+25
000913 8dfa      	LDD  R31,Y+25+1
000914 93fa      	ST   -Y,R31
000915 93ea      	ST   -Y,R30
000916 89ea      	LDD  R30,Y+18
000917 940e 156d 	CALL SUBOPT_0x21
000919 93fa      	ST   -Y,R31
00091a 93ea      	ST   -Y,R30
00091b 8de9      	LDD  R30,Y+25
00091c 8dfa      	LDD  R31,Y+25+1
00091d 93fa      	ST   -Y,R31
00091e 93ea      	ST   -Y,R30
00091f 89ee      	LDD  R30,Y+22
000920 940e 156d 	CALL SUBOPT_0x21
000922 940e 14d0 	CALL SUBOPT_0xF
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
000924 89a8      	LDD  R26,Y+16
000925 27bb      	CLR  R27
000926 89e8      	LDD  R30,Y+16
000927 e0f0      	LDI  R31,0
000928 940e 18f4 	CALL __MULW12
00092a 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
00092b e000     +LDI R16 , LOW ( 0 )
00092c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9C:
                +
00092d 1720     +CP R18 , R16
00092e 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
00092f f03c      	BRLT _0x9D
000930 89e9      	LDD  R30,Y+17
000931 89fa      	LDD  R31,Y+17+1
000932 940e 14d8 	CALL SUBOPT_0x10
                +
000934 5f0f     +SUBI R16 , LOW ( - 1 )
000935 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000936 cff6      	RJMP _0x9C
                 _0x9D:
000937 89ef      	LDD  R30,Y+23
000938 8df8      	LDD  R31,Y+23+1
000939 8da9      	LDD  R26,Y+25
00093a 8dba      	LDD  R27,Y+25+1
00093b 17ea      	CP   R30,R26
00093c 07fb      	CPC  R31,R27
00093d f439      	BRNE _0x9F
00093e 89eb      	LDD  R30,Y+19
00093f 89fc      	LDD  R31,Y+19+1
000940 89ad      	LDD  R26,Y+21
000941 89be      	LDD  R27,Y+21+1
000942 17ea      	CP   R30,R26
000943 07fb      	CPC  R31,R27
000944 f009      	BREQ _0xA0
                 _0x9F:
000945 c001      	RJMP _0x9E
                 _0xA0:
                 ;		break;
000946 c032      	RJMP _0x9A
                 ;
                 ;		error2 = error * 2;
                 _0x9E:
000947 85e8      	LDD  R30,Y+8
000948 85f9      	LDD  R31,Y+8+1
000949 0fee      	LSL  R30
00094a 1fff      	ROL  R31
00094b 83ee      	STD  Y+6,R30
00094c 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
00094d 85ee      	LDD  R30,Y+14
00094e 85ff      	LDD  R31,Y+14+1
00094f 940e 18aa 	CALL __ANEGW1
000951 81ae      	LDD  R26,Y+6
000952 81bf      	LDD  R27,Y+6+1
000953 17ea      	CP   R30,R26
000954 07fb      	CPC  R31,R27
000955 f474      	BRGE _0xA1
                 ;		{
                 ;			error -= deltaY;
000956 85ae      	LDD  R26,Y+14
000957 85bf      	LDD  R27,Y+14+1
000958 940e 1573 	CALL SUBOPT_0x22
00095a 87e8      	STD  Y+8,R30
00095b 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
00095c 85ec      	LDD  R30,Y+12
00095d 85fd      	LDD  R31,Y+12+1
00095e 8da9      	LDD  R26,Y+25
00095f 8dba      	LDD  R27,Y+25+1
000960 0fea      	ADD  R30,R26
000961 1ffb      	ADC  R31,R27
000962 8fe9      	STD  Y+25,R30
000963 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA1:
000964 81ae      	LDD  R26,Y+6
000965 81bf      	LDD  R27,Y+6+1
000966 17a4      	CP   R26,R20
000967 07b5      	CPC  R27,R21
000968 f47c      	BRGE _0xA2
                 ;		{
                 ;			error += deltaX;
000969 01fa      	MOVW R30,R20
00096a 85a8      	LDD  R26,Y+8
00096b 85b9      	LDD  R27,Y+8+1
00096c 0fea      	ADD  R30,R26
00096d 1ffb      	ADC  R31,R27
00096e 87e8      	STD  Y+8,R30
00096f 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
000970 85ea      	LDD  R30,Y+10
000971 85fb      	LDD  R31,Y+10+1
000972 89ad      	LDD  R26,Y+21
000973 89be      	LDD  R27,Y+21+1
000974 0fea      	ADD  R30,R26
000975 1ffb      	ADC  R31,R27
000976 8bed      	STD  Y+21,R30
000977 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA2:
000978 cf99      	RJMP _0x98
                 _0x9A:
                 ;}
000979 940e 197a 	CALL __LOADLOCR6
00097b 966b      	ADIW R28,27
00097c 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
00097d 940e 14e1 	CALL SUBOPT_0x12
00097f 940e 14e1 	CALL SUBOPT_0x12
000981 940e 14e1 	CALL SUBOPT_0x12
000983 85e8      	LDD  R30,Y+8
000984 85f9      	LDD  R31,Y+8+1
000985 940e 1578 	CALL SUBOPT_0x23
000987 940e 14dc 	CALL SUBOPT_0x11
000989 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
00098a 940e 14e1 	CALL SUBOPT_0x12
00098c 81ec      	LDD  R30,Y+4
00098d 81fd      	LDD  R31,Y+4+1
00098e 940e 1578 	CALL SUBOPT_0x23
000990 940e 14e1 	CALL SUBOPT_0x12
000992 940e 14e1 	CALL SUBOPT_0x12
000994 940e 14dc 	CALL SUBOPT_0x11
000996 df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
000997 940e 14e1 	CALL SUBOPT_0x12
000999 940e 14e1 	CALL SUBOPT_0x12
00099b 81ae      	LDD  R26,Y+6
00099c 81bf      	LDD  R27,Y+6+1
00099d 940e 1573 	CALL SUBOPT_0x22
00099f 93fa      	ST   -Y,R31
0009a0 93ea      	ST   -Y,R30
0009a1 940e 14e1 	CALL SUBOPT_0x12
0009a3 940e 14dc 	CALL SUBOPT_0x11
0009a5 df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
0009a6 81aa      	LDD  R26,Y+2
0009a7 81bb      	LDD  R27,Y+2+1
0009a8 940e 1573 	CALL SUBOPT_0x22
0009aa 93fa      	ST   -Y,R31
0009ab 93ea      	ST   -Y,R30
0009ac 940e 14e1 	CALL SUBOPT_0x12
0009ae 940e 14e1 	CALL SUBOPT_0x12
0009b0 940e 14e1 	CALL SUBOPT_0x12
0009b2 940e 14dc 	CALL SUBOPT_0x11
0009b4 defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x208000A:
0009b5 962c      	ADIW R28,12
0009b6 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
0009b7 940e 1502 	CALL SUBOPT_0x18
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
0009b9 940e 1514 	CALL SUBOPT_0x19
                 ;  if (j < 0) j *= -1;
0009bb f412      	BRPL _0xA3
0009bc 940e 151e 	CALL SUBOPT_0x1A
                 ;  k = StopY - StartY + 1;
                 _0xA3:
0009be 940e 1525 	CALL SUBOPT_0x1B
                 ;  if (k < 0) k *= -1;
0009c0 f422      	BRPL _0xA4
0009c1 940e 1535 	CALL SUBOPT_0x1C
0009c3 940e 153a 	CALL SUBOPT_0x1D
                 ;  k = k * j;
                 _0xA4:
0009c5 940e 1545 	CALL SUBOPT_0x1E
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA6:
0009c7 940e 1558 	CALL SUBOPT_0x1F
0009c9 f43c      	BRGE _0xA7
0009ca 85ea      	LDD  R30,Y+10
0009cb 85fb      	LDD  R31,Y+10+1
0009cc 940e 14d8 	CALL SUBOPT_0x10
0009ce 940e 1560 	CALL SUBOPT_0x20
0009d0 cff6      	RJMP _0xA6
                 _0xA7:
                 _0x2080009:
0009d1 8119      	LDD  R17,Y+1
0009d2 8108      	LDD  R16,Y+0
0009d3 9664      	ADIW R28,20
0009d4 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#pragma used-
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;void TSC2046_PortInit(void)
                 ; 0000 001C {
                 _TSC2046_PortInit:
                 ;  DDRE |= 0b00000100;
0009d5 9a12      	SBI  0x2,2
                 ;  DDRE &= 0b11110111;
0009d6 9813      	CBI  0x2,3
                 ;}
0009d7 9508      	RET
                 ;
                 ;#pragma used+
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ;{
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
0009d8 931a      	ST   -Y,R17
0009d9 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0009da 981a      	CBI  0x3,2
                 ;  delay_ms(1);
0009db 940e 14a8 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
0009dd ede3      	LDI  R30,LOW(211)
0009de 940e 157f 	CALL SUBOPT_0x24
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
0009e0 c09a      	RJMP _0x2080008
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
0009e1 931a      	ST   -Y,R17
0009e2 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0009e3 981a      	CBI  0x3,2
                 ;  delay_ms(1);
0009e4 940e 14a8 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
0009e6 e9e3      	LDI  R30,LOW(147)
0009e7 940e 157f 	CALL SUBOPT_0x24
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
0009e9 c091      	RJMP _0x2080008
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
0009ea 981a      	CBI  0x3,2
                 ;  delay_ms(5);
0009eb e0e5      	LDI  R30,LOW(5)
0009ec e0f0      	LDI  R31,HIGH(5)
0009ed 940e 14b5 	CALL SUBOPT_0x9
                 ;  spi(0b10010000);
0009ef e9e0      	LDI  R30,LOW(144)
0009f0 93ea      	ST   -Y,R30
0009f1 940e 12ff 	CALL _spi
                 ;  delay_us(100);
                +
0009f3 e980     +LDI R24 , LOW ( 400 )
0009f4 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0009f5 9701     +SBIW R24 , 1
0009f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
0009f7 e0e0      	LDI  R30,LOW(0)
0009f8 93ea      	ST   -Y,R30
0009f9 940e 12ff 	CALL _spi
                 ;  spi(0x00);
0009fb e0e0      	LDI  R30,LOW(0)
0009fc 93ea      	ST   -Y,R30
0009fd 940e 12ff 	CALL _spi
                 ;  TOUCH_CS = 1;
0009ff 9a1a      	SBI  0x3,2
                 ;}
000a00 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
000a01 931a      	ST   -Y,R17
000a02 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000a03 dfd4      	RCALL _TSC2046_getADC_X
000a04 51e4      	SUBI R30,LOW(1300)
000a05 40f5      	SBCI R31,HIGH(1300)
000a06 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000a07 2311      	TST  R17
000a08 f412      	BRPL _0xB8
                +
000a09 e000     +LDI R16 , LOW ( 0 )
000a0a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xB8:
000a0b 940e 1598 	CALL SUBOPT_0x25
                +
000a0d e5e5     +LDI R30 , LOW ( 0x4275D555 )
000a0e edf5     +LDI R31 , HIGH ( 0x4275D555 )
000a0f e765     +LDI R22 , BYTE3 ( 0x4275D555 )
000a10 e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
000a11 940e 15a0 	CALL SUBOPT_0x26
                 ;  return res;
000a13 c067      	RJMP _0x2080008
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
000a14 931a      	ST   -Y,R17
000a15 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000a16 dfca      	RCALL _TSC2046_getADC_Y
000a17 53e4      	SUBI R30,LOW(2100)
000a18 40f8      	SBCI R31,HIGH(2100)
000a19 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000a1a 2311      	TST  R17
000a1b f412      	BRPL _0xB9
                +
000a1c e000     +LDI R16 , LOW ( 0 )
000a1d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xB9:
000a1e 940e 1598 	CALL SUBOPT_0x25
                +
000a20 e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
000a21 e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
000a22 ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
000a23 e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
000a24 940e 15a0 	CALL SUBOPT_0x26
                 ;  return res;
000a26 c054      	RJMP _0x2080008
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;
                 ;  if (TOUCH_IRQ < 1)
000a27 931a      	ST   -Y,R17
000a28 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
000a29 e010      	LDI  R17,0
000a2a 940e 15a7 	CALL SUBOPT_0x27
000a2c f010      	BRLO PC+3
000a2d 940c 0a7a 	JMP _0xBA
                 ;  {
                 ;    tempX = 0;
000a2f 940e 15ac 	CALL SUBOPT_0x28
                 ;    tempY = 0;
000a31 940e 15b6 	CALL SUBOPT_0x29
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000a33 e000      	LDI  R16,LOW(0)
                 _0xBC:
000a34 3100      	CPI  R16,16
000a35 f460      	BRSH _0xBD
                 ;    {
                 ;        tempX += TSC2046_getADC_X() - ADC_X_MIN;
000a36 dfa1      	RCALL _TSC2046_getADC_X
000a37 51e4      	SUBI R30,LOW(1300)
000a38 40f5      	SBCI R31,HIGH(1300)
000a39 940e 15c0 	CALL SUBOPT_0x2A
                 ;        tempY += TSC2046_getADC_Y() - ADC_Y_MIN;
000a3b dfa5      	RCALL _TSC2046_getADC_Y
000a3c 53e4      	SUBI R30,LOW(2100)
000a3d 40f8      	SBCI R31,HIGH(2100)
000a3e 940e 15d5 	CALL SUBOPT_0x2B
                 ;    }
000a40 5f0f      	SUBI R16,-1
000a41 cff2      	RJMP _0xBC
                 _0xBD:
                 ;    if (tempX < 0) tempX = 0;
000a42 91a0 0615 	LDS  R26,_tempX+3
000a44 23aa      	TST  R26
000a45 f412      	BRPL _0xBE
000a46 940e 15ac 	CALL SUBOPT_0x28
                 ;    if (tempY < 0) tempY = 0;
                 _0xBE:
000a48 91a0 0619 	LDS  R26,_tempY+3
000a4a 23aa      	TST  R26
000a4b f412      	BRPL _0xBF
000a4c 940e 15b6 	CALL SUBOPT_0x29
                 ;
                 ;    TOUCH_X = tempX / (TOUCH_Calc_Max * ADC_X_K);
                 _0xBF:
000a4e 91e0 0612 	LDS  R30,_tempX
000a50 91f0 0613 	LDS  R31,_tempX+1
000a52 9160 0614 	LDS  R22,_tempX+2
000a54 9170 0615 	LDS  R23,_tempX+3
000a56 940e 182e 	CALL __CDF1
000a58 01df      	MOVW R26,R30
000a59 01cb      	MOVW R24,R22
                +
000a5a e5e5     +LDI R30 , LOW ( 0x4475D555 )
000a5b edf5     +LDI R31 , HIGH ( 0x4475D555 )
000a5c e765     +LDI R22 , BYTE3 ( 0x4475D555 )
000a5d e474     +LDI R23 , BYTE4 ( 0x4475D555 )
                 	__GETD1N 0x4475D555
000a5e 940e 185c 	CALL __DIVF21
000a60 940e 17f5 	CALL __CFD1U
000a62 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / (TOUCH_Calc_Max * ADC_Y_K);
000a63 91e0 0616 	LDS  R30,_tempY
000a65 91f0 0617 	LDS  R31,_tempY+1
000a67 9160 0618 	LDS  R22,_tempY+2
000a69 9170 0619 	LDS  R23,_tempY+3
000a6b 940e 182e 	CALL __CDF1
000a6d 01df      	MOVW R26,R30
000a6e 01cb      	MOVW R24,R22
                +
000a6f e1ee     +LDI R30 , LOW ( 0x44CE9E1E )
000a70 e9fe     +LDI R31 , HIGH ( 0x44CE9E1E )
000a71 ec6e     +LDI R22 , BYTE3 ( 0x44CE9E1E )
000a72 e474     +LDI R23 , BYTE4 ( 0x44CE9E1E )
                 	__GETD1N 0x44CE9E1E
000a73 940e 185c 	CALL __DIVF21
000a75 940e 17f5 	CALL __CFD1U
000a77 013f      	MOVW R6,R30
                 ;
                 ;    TSC2046_Stop();
000a78 df71      	RCALL _TSC2046_Stop
                 ;    res = 1;
000a79 e011      	LDI  R17,LOW(1)
                 ;  }
                 ;
                 ;  return res;
                 _0xBA:
000a7a 2fe1      	MOV  R30,R17
                 _0x2080008:
000a7b 9109      	LD   R16,Y+
000a7c 9119      	LD   R17,Y+
000a7d 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  char i;
                 ;  TSC2046_PortInit();
000a7e 931a      	ST   -Y,R17
                 ;	i -> R17
000a7f df55      	RCALL _TSC2046_PortInit
                 ;  TOUCH_CS = 0;
000a80 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
000a81 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
000a82 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000a83 958a     +DEC R24
000a84 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
000a85 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
000a86 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
000a87 940e 15ac 	CALL SUBOPT_0x28
                 ;    tempY = 0;
000a89 940e 15b6 	CALL SUBOPT_0x29
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000a8b e010      	LDI  R17,LOW(0)
                 _0xC9:
000a8c 3110      	CPI  R17,16
000a8d f440      	BRSH _0xCA
                 ;    {
                 ;      tempX += TSC2046_getX();
000a8e df72      	RCALL _TSC2046_getX
000a8f 940e 15c0 	CALL SUBOPT_0x2A
                 ;      tempY += TSC2046_getY();
000a91 df82      	RCALL _TSC2046_getY
000a92 940e 15d5 	CALL SUBOPT_0x2B
                 ;    }
000a94 5f1f      	SUBI R17,-1
000a95 cff6      	RJMP _0xC9
                 _0xCA:
                 ;    TOUCH_X = tempX / TOUCH_Calc_Max;
000a96 91a0 0612 	LDS  R26,_tempX
000a98 91b0 0613 	LDS  R27,_tempX+1
000a9a 9180 0614 	LDS  R24,_tempX+2
000a9c 9190 0615 	LDS  R25,_tempX+3
000a9e 940e 15ea 	CALL SUBOPT_0x2C
000aa0 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / TOUCH_Calc_Max;
000aa1 91a0 0616 	LDS  R26,_tempY
000aa3 91b0 0617 	LDS  R27,_tempY+1
000aa5 9180 0618 	LDS  R24,_tempY+2
000aa7 9190 0619 	LDS  R25,_tempY+3
000aa9 940e 15ea 	CALL SUBOPT_0x2C
000aab 013f      	MOVW R6,R30
                 ;    TSC2046_Stop();
000aac df3d      	RCALL _TSC2046_Stop
                 ;}
000aad c244      	RJMP _0x2080005
                 ;
                 ;#pragma used-
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART2 Receiver buffer
                 ;#define RX_BUFFER_SIZE2 20
                 ;char rx_buffer2[RX_BUFFER_SIZE2];
                 ;
                 ;#if RX_BUFFER_SIZE2 <= 256
                 ;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;#else
                 ;unsigned int rx_wr_index2,rx_rd_index2,rx_counter2;
                 ;#endif
                 ;
                 ;//Переключатель юарта
                 ;char uart_swap = 0;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 256
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 005C {
                 _usart0_rx_isr:
000aae 93ea      	ST   -Y,R30
000aaf 93fa      	ST   -Y,R31
000ab0 b7ef      	IN   R30,SREG
000ab1 93ea      	ST   -Y,R30
                 ; 0000 005D char status,data;
                 ; 0000 005E status=UCSR0A;
000ab2 931a      	ST   -Y,R17
000ab3 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000ab4 b11b      	IN   R17,11
                 ; 0000 005F data=UDR0;
000ab5 b10c      	IN   R16,12
                 ; 0000 0060 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000ab6 2fe1      	MOV  R30,R17
000ab7 71ec      	ANDI R30,LOW(0x1C)
000ab8 f591      	BRNE _0xCB
                 ; 0000 0061 {
                 ; 0000 0062    if(uart_swap) //Юарт 2
000ab9 91e0 062f 	LDS  R30,_uart_swap
000abb 30e0      	CPI  R30,0
000abc f081      	BREQ _0xCC
                 ; 0000 0063    {
                 ; 0000 0064       rx_buffer2[rx_wr_index2++]=data;
000abd 2ded      	MOV  R30,R13
000abe 94d3      	INC  R13
000abf e0f0      	LDI  R31,0
000ac0 5ee6      	SUBI R30,LOW(-_rx_buffer2)
000ac1 4ff9      	SBCI R31,HIGH(-_rx_buffer2)
000ac2 8300      	ST   Z,R16
                 ; 0000 0065       if (rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
000ac3 e1e4      	LDI  R30,LOW(20)
000ac4 15ed      	CP   R30,R13
000ac5 f409      	BRNE _0xCD
000ac6 24dd      	CLR  R13
                 ; 0000 0066       ++rx_counter2;
                 _0xCD:
000ac7 91e0 062e 	LDS  R30,_rx_counter2
000ac9 5fef      	SUBI R30,-LOW(1)
000aca 93e0 062e 	STS  _rx_counter2,R30
                 ; 0000 0067    }
                 ; 0000 0068    else //Юарт 0
000acc c01e      	RJMP _0xCE
                 _0xCC:
                 ; 0000 0069    {
                 ; 0000 006A    rx_buffer0[rx_wr_index0++]=data;
000acd 91e0 0730 	LDS  R30,_rx_wr_index0
000acf 5fef      	SUBI R30,-LOW(1)
000ad0 93e0 0730 	STS  _rx_wr_index0,R30
000ad2 940e 15f1 	CALL SUBOPT_0x2D
000ad4 8300      	ST   Z,R16
                 ; 0000 006B #if RX_BUFFER_SIZE0 == 256
                 ; 0000 006C    // special case for receiver buffer size=256
                 ; 0000 006D    if (++rx_counter0 == 0)
000ad5 91e0 0732 	LDS  R30,_rx_counter0
000ad7 5fef      	SUBI R30,-LOW(1)
000ad8 93e0 0732 	STS  _rx_counter0,R30
000ada 30e0      	CPI  R30,0
000adb f479      	BRNE _0xCF
                 ; 0000 006E       {
                 ; 0000 006F #else
                 ; 0000 0070    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 ; 0000 0071    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 ; 0000 0072       {
                 ; 0000 0073       //rx_counter0=0;
                 ; 0000 0074 #endif
                 ; 0000 0075       rx_buffer_overflow0=1;  //Ааааа переполнение
000adc 9468      	SET
000add f820      	BLD  R2,0
                 ; 0000 0076       rx_counter0=RX_BUFFER_SIZE0-1;
000ade efef      	LDI  R30,LOW(255)
000adf 93e0 0732 	STS  _rx_counter0,R30
                 ; 0000 0077       if(rx_wr_index0) rx_wr_index0--; else rx_wr_index0=rx_counter0;
000ae1 91e0 0730 	LDS  R30,_rx_wr_index0
000ae3 30e0      	CPI  R30,0
000ae4 f011      	BREQ _0xD0
000ae5 50e1      	SUBI R30,LOW(1)
000ae6 c002      	RJMP _0x1B1
                 _0xD0:
000ae7 91e0 0732 	LDS  R30,_rx_counter0
                 _0x1B1:
000ae9 93e0 0730 	STS  _rx_wr_index0,R30
                 ; 0000 0078       }
                 ; 0000 0079    }
                 _0xCF:
                 _0xCE:
                 ; 0000 007A }
                 ; 0000 007B }
                 _0xCB:
000aeb 9109      	LD   R16,Y+
000aec 9119      	LD   R17,Y+
000aed 91e9      	LD   R30,Y+
000aee bfef      	OUT  SREG,R30
000aef 91f9      	LD   R31,Y+
000af0 91e9      	LD   R30,Y+
000af1 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 0082 {
                 _getchar0:
                 ; 0000 0083 char data;
                 ; 0000 0084 while (rx_counter0==0);
000af2 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xD2:
000af3 91e0 0732 	LDS  R30,_rx_counter0
000af5 30e0      	CPI  R30,0
000af6 f3e1      	BREQ _0xD2
                 ; 0000 0085 data=rx_buffer0[rx_rd_index0++];
000af7 91e0 0731 	LDS  R30,_rx_rd_index0
000af9 5fef      	SUBI R30,-LOW(1)
000afa 93e0 0731 	STS  _rx_rd_index0,R30
000afc 940e 15f1 	CALL SUBOPT_0x2D
000afe 8110      	LD   R17,Z
                 ; 0000 0086 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0087 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0088 #endif
                 ; 0000 0089 #asm("cli")
000aff 94f8      	cli
                 ; 0000 008A --rx_counter0;
000b00 91e0 0732 	LDS  R30,_rx_counter0
000b02 50e1      	SUBI R30,LOW(1)
000b03 93e0 0732 	STS  _rx_counter0,R30
                 ; 0000 008B #asm("sei")
000b05 9478      	sei
                 ; 0000 008C return data;
000b06 c1ea      	RJMP _0x2080004
                 ; 0000 008D }
                 ;
                 ;
                 ;char getchar2(void) //Юарт 2
                 ; 0000 0091 {
                 _getchar2:
                 ; 0000 0092 char data;
                 ; 0000 0093 while (rx_counter2==0);
000b07 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xD5:
000b08 91e0 062e 	LDS  R30,_rx_counter2
000b0a 30e0      	CPI  R30,0
000b0b f3e1      	BREQ _0xD5
                 ; 0000 0094 data=rx_buffer2[rx_rd_index2++];
000b0c 2dec      	MOV  R30,R12
000b0d 94c3      	INC  R12
000b0e e0f0      	LDI  R31,0
000b0f 5ee6      	SUBI R30,LOW(-_rx_buffer2)
000b10 4ff9      	SBCI R31,HIGH(-_rx_buffer2)
000b11 8110      	LD   R17,Z
                 ; 0000 0095 if (rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
000b12 e1e4      	LDI  R30,LOW(20)
000b13 15ec      	CP   R30,R12
000b14 f409      	BRNE _0xD8
000b15 24cc      	CLR  R12
                 ; 0000 0096 #asm("cli")
                 _0xD8:
000b16 94f8      	cli
                 ; 0000 0097 --rx_counter2;
000b17 91e0 062e 	LDS  R30,_rx_counter2
000b19 50e1      	SUBI R30,LOW(1)
000b1a 93e0 062e 	STS  _rx_counter2,R30
                 ; 0000 0098 #asm("sei")
000b1c 9478      	sei
                 ; 0000 0099 return data;
000b1d c1d3      	RJMP _0x2080004
                 ; 0000 009A }
                 ;
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 00AB {
                 _usart0_tx_isr:
000b1e 940e 15f6 	CALL SUBOPT_0x2E
                 ; 0000 00AC if (tx_counter0)
000b20 91e0 073d 	LDS  R30,_tx_counter0
000b22 30e0      	CPI  R30,0
000b23 f099      	BREQ _0xD9
                 ; 0000 00AD    {
                 ; 0000 00AE    --tx_counter0;
000b24 50e1      	SUBI R30,LOW(1)
000b25 93e0 073d 	STS  _tx_counter0,R30
                 ; 0000 00AF    UDR0=tx_buffer0[tx_rd_index0++];
000b27 91e0 073c 	LDS  R30,_tx_rd_index0
000b29 5fef      	SUBI R30,-LOW(1)
000b2a 93e0 073c 	STS  _tx_rd_index0,R30
000b2c 940e 15fc 	CALL SUBOPT_0x2F
000b2e 81e0      	LD   R30,Z
000b2f b9ec      	OUT  0xC,R30
                 ; 0000 00B0 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00B1    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000b30 91a0 073c 	LDS  R26,_tx_rd_index0
000b32 30a8      	CPI  R26,LOW(0x8)
000b33 f419      	BRNE _0xDA
000b34 e0e0      	LDI  R30,LOW(0)
000b35 93e0 073c 	STS  _tx_rd_index0,R30
                 ; 0000 00B2 #endif
                 ; 0000 00B3    }
                 _0xDA:
                 ; 0000 00B4 }
                 _0xD9:
000b37 c074      	RJMP _0x1B8
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;inline void putchar0_i(char c)
                 ; 0000 00BB {
                 _putchar0_i:
                 ; 0000 00BC while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xDB:
000b38 91a0 073d 	LDS  R26,_tx_counter0
000b3a 30a8      	CPI  R26,LOW(0x8)
000b3b f3e1      	BREQ _0xDB
                 ; 0000 00BD #asm("cli")
000b3c 94f8      	cli
                 ; 0000 00BE if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000b3d 91e0 073d 	LDS  R30,_tx_counter0
000b3f 30e0      	CPI  R30,0
000b40 f411      	BRNE _0xDF
000b41 995d      	SBIC 0xB,5
000b42 c016      	RJMP _0xDE
                 _0xDF:
                 ; 0000 00BF    {
                 ; 0000 00C0    tx_buffer0[tx_wr_index0++]=c;
000b43 91e0 073b 	LDS  R30,_tx_wr_index0
000b45 5fef      	SUBI R30,-LOW(1)
000b46 93e0 073b 	STS  _tx_wr_index0,R30
000b48 940e 15fc 	CALL SUBOPT_0x2F
000b4a 81a8      	LD   R26,Y
000b4b 83a0      	STD  Z+0,R26
                 ; 0000 00C1 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C2    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000b4c 91a0 073b 	LDS  R26,_tx_wr_index0
000b4e 30a8      	CPI  R26,LOW(0x8)
000b4f f419      	BRNE _0xE1
000b50 e0e0      	LDI  R30,LOW(0)
000b51 93e0 073b 	STS  _tx_wr_index0,R30
                 ; 0000 00C3 #endif
                 ; 0000 00C4    ++tx_counter0;
                 _0xE1:
000b53 91e0 073d 	LDS  R30,_tx_counter0
000b55 5fef      	SUBI R30,-LOW(1)
000b56 93e0 073d 	STS  _tx_counter0,R30
                 ; 0000 00C5    }
                 ; 0000 00C6 else
000b58 c002      	RJMP _0xE2
                 _0xDE:
                 ; 0000 00C7    UDR0=c;
000b59 81e8      	LD   R30,Y
000b5a b9ec      	OUT  0xC,R30
                 ; 0000 00C8 #asm("sei")
                 _0xE2:
000b5b 9478      	sei
000b5c c07e      	RJMP _0x2080007
                 ; 0000 00C9 }
                 ;
                 ;void putchar0(char c)
                 ; 0000 00CC {
                 _putchar0:
                 ; 0000 00CD     uart_swap = 0;
                 ;	c -> Y+0
000b5d e0e0      	LDI  R30,LOW(0)
000b5e 940e 1601 	CALL SUBOPT_0x30
                 ; 0000 00CE     putchar0_i(c);
                 ; 0000 00CF }
000b60 c07a      	RJMP _0x2080006
                 ;
                 ;void putchar2(char c)
                 ; 0000 00D2 {
                 _putchar2:
                 ; 0000 00D3     uart_swap = 2;
                 ;	c -> Y+0
000b61 e0e2      	LDI  R30,LOW(2)
000b62 940e 1601 	CALL SUBOPT_0x30
                 ; 0000 00D4     putchar0_i(c);
                 ; 0000 00D5 }
000b64 c076      	RJMP _0x2080006
                 ;
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00E9 {
                 _usart1_rx_isr:
000b65 940e 15f6 	CALL SUBOPT_0x2E
                 ; 0000 00EA char status,data;
                 ; 0000 00EB status=UCSR1A;
000b67 931a      	ST   -Y,R17
000b68 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000b69 9110 009b 	LDS  R17,155
                 ; 0000 00EC data=UDR1;
000b6b 9100 009c 	LDS  R16,156
                 ; 0000 00ED if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000b6d 2fe1      	MOV  R30,R17
000b6e 71ec      	ANDI R30,LOW(0x1C)
000b6f f4e9      	BRNE _0xE3
                 ; 0000 00EE    {
                 ; 0000 00EF    rx_buffer1[rx_wr_index1++]=data;
000b70 91e0 075e 	LDS  R30,_rx_wr_index1
000b72 5fef      	SUBI R30,-LOW(1)
000b73 93e0 075e 	STS  _rx_wr_index1,R30
000b75 940e 1607 	CALL SUBOPT_0x31
000b77 5ce2      	SUBI R30,LOW(-_rx_buffer1)
000b78 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
000b79 8300      	ST   Z,R16
                 ; 0000 00F0 #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00F1    // special case for receiver buffer size=256
                 ; 0000 00F2    if (++rx_counter1 == 0)
                 ; 0000 00F3       {
                 ; 0000 00F4 #else
                 ; 0000 00F5    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000b7a 91a0 075e 	LDS  R26,_rx_wr_index1
000b7c 32a0      	CPI  R26,LOW(0x20)
000b7d f419      	BRNE _0xE4
000b7e e0e0      	LDI  R30,LOW(0)
000b7f 93e0 075e 	STS  _rx_wr_index1,R30
                 ; 0000 00F6    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0xE4:
000b81 91a0 0760 	LDS  R26,_rx_counter1
000b83 5faf      	SUBI R26,-LOW(1)
000b84 93a0 0760 	STS  _rx_counter1,R26
000b86 32a0      	CPI  R26,LOW(0x20)
000b87 f429      	BRNE _0xE5
                 ; 0000 00F7       {
                 ; 0000 00F8       rx_counter1=0;
000b88 e0e0      	LDI  R30,LOW(0)
000b89 93e0 0760 	STS  _rx_counter1,R30
                 ; 0000 00F9 #endif
                 ; 0000 00FA       rx_buffer_overflow1=1;
000b8b 9468      	SET
000b8c f821      	BLD  R2,1
                 ; 0000 00FB       }
                 ; 0000 00FC    }
                 _0xE5:
                 ; 0000 00FD }
                 _0xE3:
000b8d 9109      	LD   R16,Y+
000b8e 9119      	LD   R17,Y+
000b8f c01c      	RJMP _0x1B8
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0102 {
                 ; 0000 0103 char data;
                 ; 0000 0104 while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 0105 data=rx_buffer1[rx_rd_index1++];
                 ; 0000 0106 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 0107 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 0108 #endif
                 ; 0000 0109 #asm("cli")
                 ; 0000 010A --rx_counter1;
                 ; 0000 010B #asm("sei")
                 ; 0000 010C return data;
                 ; 0000 010D }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 64
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 011B {
                 _usart1_tx_isr:
000b90 940e 15f6 	CALL SUBOPT_0x2E
                 ; 0000 011C if (tx_counter1)
000b92 91e0 07a3 	LDS  R30,_tx_counter1
000b94 30e0      	CPI  R30,0
000b95 f0b1      	BREQ _0xEA
                 ; 0000 011D    {
                 ; 0000 011E    --tx_counter1;
000b96 50e1      	SUBI R30,LOW(1)
000b97 93e0 07a3 	STS  _tx_counter1,R30
                 ; 0000 011F    UDR1=tx_buffer1[tx_rd_index1++];
000b99 91e0 07a2 	LDS  R30,_tx_rd_index1
000b9b 5fef      	SUBI R30,-LOW(1)
000b9c 93e0 07a2 	STS  _tx_rd_index1,R30
000b9e 940e 1607 	CALL SUBOPT_0x31
000ba0 59ef      	SUBI R30,LOW(-_tx_buffer1)
000ba1 4ff8      	SBCI R31,HIGH(-_tx_buffer1)
000ba2 81e0      	LD   R30,Z
000ba3 93e0 009c 	STS  156,R30
                 ; 0000 0120 #if TX_BUFFER_SIZE1 != 256
                 ; 0000 0121    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000ba5 91a0 07a2 	LDS  R26,_tx_rd_index1
000ba7 34a0      	CPI  R26,LOW(0x40)
000ba8 f419      	BRNE _0xEB
000ba9 e0e0      	LDI  R30,LOW(0)
000baa 93e0 07a2 	STS  _tx_rd_index1,R30
                 ; 0000 0122 #endif
                 ; 0000 0123    }
                 _0xEB:
                 ; 0000 0124 }
                 _0xEA:
                 _0x1B8:
000bac 91e9      	LD   R30,Y+
000bad bfef      	OUT  SREG,R30
000bae 91f9      	LD   R31,Y+
000baf 91e9      	LD   R30,Y+
000bb0 91a9      	LD   R26,Y+
000bb1 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0129 {
                 _putchar:
                 ; 0000 012A while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 _0xEC:
000bb2 91a0 07a3 	LDS  R26,_tx_counter1
000bb4 34a0      	CPI  R26,LOW(0x40)
000bb5 f3e1      	BREQ _0xEC
                 ; 0000 012B #asm("cli")
000bb6 94f8      	cli
                 ; 0000 012C if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
000bb7 91e0 07a3 	LDS  R30,_tx_counter1
000bb9 30e0      	CPI  R30,0
000bba f421      	BRNE _0xF0
000bbb 91e0 009b 	LDS  R30,155
000bbd 72e0      	ANDI R30,LOW(0x20)
000bbe f4c1      	BRNE _0xEF
                 _0xF0:
                 ; 0000 012D    {
                 ; 0000 012E    tx_buffer1[tx_wr_index1++]=c;
000bbf 91e0 07a1 	LDS  R30,_tx_wr_index1
000bc1 5fef      	SUBI R30,-LOW(1)
000bc2 93e0 07a1 	STS  _tx_wr_index1,R30
000bc4 940e 1607 	CALL SUBOPT_0x31
000bc6 59ef      	SUBI R30,LOW(-_tx_buffer1)
000bc7 4ff8      	SBCI R31,HIGH(-_tx_buffer1)
000bc8 81a8      	LD   R26,Y
000bc9 83a0      	STD  Z+0,R26
                 ; 0000 012F #if TX_BUFFER_SIZE1 != 256
                 ; 0000 0130    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
000bca 91a0 07a1 	LDS  R26,_tx_wr_index1
000bcc 34a0      	CPI  R26,LOW(0x40)
000bcd f419      	BRNE _0xF2
000bce e0e0      	LDI  R30,LOW(0)
000bcf 93e0 07a1 	STS  _tx_wr_index1,R30
                 ; 0000 0131 #endif
                 ; 0000 0132    ++tx_counter1;
                 _0xF2:
000bd1 91e0 07a3 	LDS  R30,_tx_counter1
000bd3 5fef      	SUBI R30,-LOW(1)
000bd4 93e0 07a3 	STS  _tx_counter1,R30
                 ; 0000 0133    }
                 ; 0000 0134 else
000bd6 c003      	RJMP _0xF3
                 _0xEF:
                 ; 0000 0135    UDR1=c;
000bd7 81e8      	LD   R30,Y
000bd8 93e0 009c 	STS  156,R30
                 ; 0000 0136 #asm("sei")
                 _0xF3:
000bda 9478      	sei
                 _0x2080007:
                 ; 0000 0137 }
                 _0x2080006:
000bdb 9621      	ADIW R28,1
000bdc 9508      	RET
                 ;#pragma used-
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;#define RS485 PORTD.4
                 ;#define BACKLIGHT PORTB.7
                 ;
                 ;#define Graph_X_Min 0
                 ;#define Graph_X_Max 478
                 ;#define Graph_Y_Min 42
                 ;#define Graph_Y_Max 232
                 ;#define Graph_Step_N 2 //1..3
                 ;
                 ;flash unsigned int Graph_X_Step = (Graph_X_Max-Graph_X_Min)/72;
                 ;flash unsigned int Graph_Y_Mid = (Graph_Y_Max-Graph_Y_Min)/2 + Graph_Y_Min;
                 ;
                 ;#define Text_StartX 16
                 ;#define Text_StartY 6
                 ;
                 ;#define Value_StartX 290
                 ;#define Value_StartY 6
                 ;#define Value_Lenght (16*4)
                 ;
                 ;#define BTN_StartX 6
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;flash unsigned int BTN1_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN1_X_Begin = BTN_StartX;
                 ;flash unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;flash unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;flash unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;flash unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;flash unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;flash unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;flash unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 016E {
                 _Repaint_Button:
                 ; 0000 016F   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000bdd 81ec      	LDD  R30,Y+4
000bde e0f0      	LDI  R31,0
                 ; 0000 0170   {
                 ; 0000 0171     case 1 :
000bdf 30e1      	CPI  R30,LOW(0x1)
000be0 e0a0      	LDI  R26,HIGH(0x1)
000be1 07fa      	CPC  R31,R26
000be2 f479      	BRNE _0xF7
                 ; 0000 0172       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000be3 e0e0     +LDI R30 , LOW ( _0xF8 + ( 0 ) )
000be4 e0f5     +LDI R31 , HIGH ( _0xF8 + ( 0 ) )
                 	__POINTW1MN _0xF8,0
000be5 93fa      	ST   -Y,R31
000be6 93ea      	ST   -Y,R30
000be7 e1e0      	LDI  R30,LOW(16)
000be8 e0f0      	LDI  R31,HIGH(16)
000be9 940e 160a 	CALL SUBOPT_0x32
000beb 940e 14dc 	CALL SUBOPT_0x11
000bed 940e 1611 	CALL SUBOPT_0x33
                 ; 0000 0173       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000bef e1e0      	LDI  R30,LOW(16)
000bf0 e0f0      	LDI  R31,HIGH(16)
000bf1 c038      	RJMP _0x1B2
                 ; 0000 0174     break;
                 ; 0000 0175     case 2 :
                 _0xF7:
000bf2 30e2      	CPI  R30,LOW(0x2)
000bf3 e0a0      	LDI  R26,HIGH(0x2)
000bf4 07fa      	CPC  R31,R26
000bf5 f479      	BRNE _0xF9
                 ; 0000 0176       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000bf6 e0e6     +LDI R30 , LOW ( _0xF8 + ( 6 ) )
000bf7 e0f5     +LDI R31 , HIGH ( _0xF8 + ( 6 ) )
                 	__POINTW1MN _0xF8,6
000bf8 93fa      	ST   -Y,R31
000bf9 93ea      	ST   -Y,R30
000bfa e8e8      	LDI  R30,LOW(136)
000bfb e0f0      	LDI  R31,HIGH(136)
000bfc 940e 160a 	CALL SUBOPT_0x32
000bfe 940e 14dc 	CALL SUBOPT_0x11
000c00 940e 1611 	CALL SUBOPT_0x33
                 ; 0000 0177       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c02 e8e8      	LDI  R30,LOW(136)
000c03 e0f0      	LDI  R31,HIGH(136)
000c04 c025      	RJMP _0x1B2
                 ; 0000 0178     break;
                 ; 0000 0179     case 3 :
                 _0xF9:
000c05 30e3      	CPI  R30,LOW(0x3)
000c06 e0a0      	LDI  R26,HIGH(0x3)
000c07 07fa      	CPC  R31,R26
000c08 f479      	BRNE _0xFA
                 ; 0000 017A       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c09 e0ec     +LDI R30 , LOW ( _0xF8 + ( 12 ) )
000c0a e0f5     +LDI R31 , HIGH ( _0xF8 + ( 12 ) )
                 	__POINTW1MN _0xF8,12
000c0b 93fa      	ST   -Y,R31
000c0c 93ea      	ST   -Y,R30
000c0d e0e0      	LDI  R30,LOW(256)
000c0e e0f1      	LDI  R31,HIGH(256)
000c0f 940e 160a 	CALL SUBOPT_0x32
000c11 940e 14dc 	CALL SUBOPT_0x11
000c13 940e 1611 	CALL SUBOPT_0x33
                 ; 0000 017B       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c15 e0e0      	LDI  R30,LOW(256)
000c16 e0f1      	LDI  R31,HIGH(256)
000c17 c012      	RJMP _0x1B2
                 ; 0000 017C     break;
                 ; 0000 017D     case 4 :
                 _0xFA:
000c18 30e4      	CPI  R30,LOW(0x4)
000c19 e0a0      	LDI  R26,HIGH(0x4)
000c1a 07fa      	CPC  R31,R26
000c1b f4d1      	BRNE _0xF6
                 ; 0000 017E       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000c1c e1e2     +LDI R30 , LOW ( _0xF8 + ( 18 ) )
000c1d e0f5     +LDI R31 , HIGH ( _0xF8 + ( 18 ) )
                 	__POINTW1MN _0xF8,18
000c1e 93fa      	ST   -Y,R31
000c1f 93ea      	ST   -Y,R30
000c20 e7e8      	LDI  R30,LOW(376)
000c21 e0f1      	LDI  R31,HIGH(376)
000c22 940e 160a 	CALL SUBOPT_0x32
000c24 940e 14dc 	CALL SUBOPT_0x11
000c26 940e 1611 	CALL SUBOPT_0x33
                 ; 0000 017F       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000c28 e7e8      	LDI  R30,LOW(376)
000c29 e0f1      	LDI  R31,HIGH(376)
                 _0x1B2:
000c2a 93fa      	ST   -Y,R31
000c2b 93ea      	ST   -Y,R30
000c2c efe7      	LDI  R30,LOW(247)
000c2d e0f0      	LDI  R31,HIGH(247)
000c2e 93fa      	ST   -Y,R31
000c2f 93ea      	ST   -Y,R30
000c30 940e 14dc 	CALL SUBOPT_0x11
000c32 940e 14dc 	CALL SUBOPT_0x11
000c34 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0180     break;
                 ; 0000 0181   }
                 _0xF6:
                 ; 0000 0182 }
000c36 c1fc      	RJMP _0x2080003
                 
                 	.DSEG
                 _0xF8:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 0185 {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 0186   // рисуем кнопки
                 ; 0000 0187   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000c37 e0e6      	LDI  R30,LOW(6)
000c38 e0f0      	LDI  R31,HIGH(6)
000c39 93fa      	ST   -Y,R31
000c3a 93ea      	ST   -Y,R30
000c3b e6ea      	LDI  R30,LOW(106)
000c3c e0f0      	LDI  R31,HIGH(106)
000c3d 940e 1618 	CALL SUBOPT_0x34
                 ; 0000 0188   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000c3f e7ee      	LDI  R30,LOW(126)
000c40 e0f0      	LDI  R31,HIGH(126)
000c41 93fa      	ST   -Y,R31
000c42 93ea      	ST   -Y,R30
000c43 eee2      	LDI  R30,LOW(226)
000c44 e0f0      	LDI  R31,HIGH(226)
000c45 940e 1618 	CALL SUBOPT_0x34
                 ; 0000 0189   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000c47 efe6      	LDI  R30,LOW(246)
000c48 e0f0      	LDI  R31,HIGH(246)
000c49 93fa      	ST   -Y,R31
000c4a 93ea      	ST   -Y,R30
000c4b e5ea      	LDI  R30,LOW(346)
000c4c e0f1      	LDI  R31,HIGH(346)
000c4d 940e 1618 	CALL SUBOPT_0x34
                 ; 0000 018A   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000c4f e6ee      	LDI  R30,LOW(366)
000c50 e0f1      	LDI  R31,HIGH(366)
000c51 93fa      	ST   -Y,R31
000c52 93ea      	ST   -Y,R30
000c53 ede2      	LDI  R30,LOW(466)
000c54 e0f1      	LDI  R31,HIGH(466)
000c55 940e 1618 	CALL SUBOPT_0x34
                 ; 0000 018B   // рисуем окантовку
                 ; 0000 018C   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000c57 e0e7      	LDI  R30,LOW(7)
000c58 e0f0      	LDI  R31,HIGH(7)
000c59 93fa      	ST   -Y,R31
000c5a 93ea      	ST   -Y,R30
000c5b e6e9      	LDI  R30,LOW(105)
000c5c e0f0      	LDI  R31,HIGH(105)
000c5d 940e 1628 	CALL SUBOPT_0x35
000c5f dd1d      	RCALL _SSD1963_DrawRect
                 ; 0000 018D   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000c60 e7ef      	LDI  R30,LOW(127)
000c61 e0f0      	LDI  R31,HIGH(127)
000c62 93fa      	ST   -Y,R31
000c63 93ea      	ST   -Y,R30
000c64 eee1      	LDI  R30,LOW(225)
000c65 e0f0      	LDI  R31,HIGH(225)
000c66 940e 1628 	CALL SUBOPT_0x35
000c68 dd14      	RCALL _SSD1963_DrawRect
                 ; 0000 018E   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000c69 efe7      	LDI  R30,LOW(247)
000c6a e0f0      	LDI  R31,HIGH(247)
000c6b 93fa      	ST   -Y,R31
000c6c 93ea      	ST   -Y,R30
000c6d e5e9      	LDI  R30,LOW(345)
000c6e e0f1      	LDI  R31,HIGH(345)
000c6f 940e 1628 	CALL SUBOPT_0x35
000c71 dd0b      	RCALL _SSD1963_DrawRect
                 ; 0000 018F   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000c72 e6ef      	LDI  R30,LOW(367)
000c73 e0f1      	LDI  R31,HIGH(367)
000c74 93fa      	ST   -Y,R31
000c75 93ea      	ST   -Y,R30
000c76 ede1      	LDI  R30,LOW(465)
000c77 e0f1      	LDI  R31,HIGH(465)
000c78 940e 1628 	CALL SUBOPT_0x35
000c7a dd02      	RCALL _SSD1963_DrawRect
                 ; 0000 0190 
                 ; 0000 0191   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
                +
000c7b e1e8     +LDI R30 , LOW ( _0xFC + ( 0 ) )
000c7c e0f5     +LDI R31 , HIGH ( _0xFC + ( 0 ) )
                 	__POINTW1MN _0xFC,0
000c7d 93fa      	ST   -Y,R31
000c7e 93ea      	ST   -Y,R30
000c7f e0e1      	LDI  R30,LOW(1)
000c80 93ea      	ST   -Y,R30
000c81 940e 14c8 	CALL SUBOPT_0xD
000c83 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 0192   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000c85 e1ed     +LDI R30 , LOW ( _0xFC + ( 5 ) )
000c86 e0f5     +LDI R31 , HIGH ( _0xFC + ( 5 ) )
                 	__POINTW1MN _0xFC,5
000c87 940e 163b 	CALL SUBOPT_0x37
000c89 940e 14c8 	CALL SUBOPT_0xD
000c8b 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 0193   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000c8d e2e1     +LDI R30 , LOW ( _0xFC + ( 9 ) )
000c8e e0f5     +LDI R31 , HIGH ( _0xFC + ( 9 ) )
                 	__POINTW1MN _0xFC,9
000c8f 93fa      	ST   -Y,R31
000c90 93ea      	ST   -Y,R30
000c91 e0e3      	LDI  R30,LOW(3)
000c92 93ea      	ST   -Y,R30
000c93 940e 14c8 	CALL SUBOPT_0xD
000c95 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 0194   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000c97 e2e5     +LDI R30 , LOW ( _0xFC + ( 13 ) )
000c98 e0f5     +LDI R31 , HIGH ( _0xFC + ( 13 ) )
                 	__POINTW1MN _0xFC,13
000c99 940e 1640 	CALL SUBOPT_0x38
000c9b 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 0195 }
000c9d 9508      	RET
                 
                 	.DSEG
                 _0xFC:
000518           	.BYTE 0x13
                 ;
                 ;char GetButton(void)
                 ; 0000 0198 {
                 
                 	.CSEG
                 _GetButton:
                 ; 0000 0199   char res = 0;
                 ; 0000 019A   if (TSC2046_GetCoordinates())
000c9e 931a      	ST   -Y,R17
                 ;	res -> R17
000c9f e010      	LDI  R17,0
000ca0 dd86      	RCALL _TSC2046_GetCoordinates
000ca1 30e0      	CPI  R30,0
000ca2 f411      	BRNE PC+3
000ca3 940c 0cf1 	JMP _0xFD
                 ; 0000 019B   {
                 ; 0000 019C     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000ca5 e0e6      	LDI  R30,LOW(6)
000ca6 e0f0      	LDI  R31,HIGH(6)
000ca7 15e4      	CP   R30,R4
000ca8 05f5      	CPC  R31,R5
000ca9 f428      	BRSH _0xFF
000caa e6ea      	LDI  R30,LOW(106)
000cab e0f0      	LDI  R31,HIGH(106)
000cac 164e      	CP   R4,R30
000cad 065f      	CPC  R5,R31
000cae f008      	BRLO _0x100
                 _0xFF:
000caf c008      	RJMP _0xFE
                 _0x100:
                 ; 0000 019D     {
                 ; 0000 019E       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
000cb0 940e 1645 	CALL SUBOPT_0x39
000cb2 f418      	BRSH _0x102
000cb3 940e 164a 	CALL SUBOPT_0x3A
000cb5 f008      	BRLO _0x103
                 _0x102:
000cb6 c001      	RJMP _0x101
                 _0x103:
000cb7 e011      	LDI  R17,LOW(1)
                 ; 0000 019F     }
                 _0x101:
                 ; 0000 01A0     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0xFE:
000cb8 e7ee      	LDI  R30,LOW(126)
000cb9 e0f0      	LDI  R31,HIGH(126)
000cba 15e4      	CP   R30,R4
000cbb 05f5      	CPC  R31,R5
000cbc f428      	BRSH _0x105
000cbd eee2      	LDI  R30,LOW(226)
000cbe e0f0      	LDI  R31,HIGH(226)
000cbf 164e      	CP   R4,R30
000cc0 065f      	CPC  R5,R31
000cc1 f008      	BRLO _0x106
                 _0x105:
000cc2 c008      	RJMP _0x104
                 _0x106:
                 ; 0000 01A1     {
                 ; 0000 01A2       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000cc3 940e 1645 	CALL SUBOPT_0x39
000cc5 f418      	BRSH _0x108
000cc6 940e 164a 	CALL SUBOPT_0x3A
000cc8 f008      	BRLO _0x109
                 _0x108:
000cc9 c001      	RJMP _0x107
                 _0x109:
000cca e012      	LDI  R17,LOW(2)
                 ; 0000 01A3     }
                 _0x107:
                 ; 0000 01A4     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0x104:
000ccb efe6      	LDI  R30,LOW(246)
000ccc e0f0      	LDI  R31,HIGH(246)
000ccd 15e4      	CP   R30,R4
000cce 05f5      	CPC  R31,R5
000ccf f428      	BRSH _0x10B
000cd0 e5ea      	LDI  R30,LOW(346)
000cd1 e0f1      	LDI  R31,HIGH(346)
000cd2 164e      	CP   R4,R30
000cd3 065f      	CPC  R5,R31
000cd4 f008      	BRLO _0x10C
                 _0x10B:
000cd5 c008      	RJMP _0x10A
                 _0x10C:
                 ; 0000 01A5     {
                 ; 0000 01A6       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000cd6 940e 1645 	CALL SUBOPT_0x39
000cd8 f418      	BRSH _0x10E
000cd9 940e 164a 	CALL SUBOPT_0x3A
000cdb f008      	BRLO _0x10F
                 _0x10E:
000cdc c001      	RJMP _0x10D
                 _0x10F:
000cdd e013      	LDI  R17,LOW(3)
                 ; 0000 01A7     }
                 _0x10D:
                 ; 0000 01A8     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x10A:
000cde e6ee      	LDI  R30,LOW(366)
000cdf e0f1      	LDI  R31,HIGH(366)
000ce0 15e4      	CP   R30,R4
000ce1 05f5      	CPC  R31,R5
000ce2 f428      	BRSH _0x111
000ce3 ede2      	LDI  R30,LOW(466)
000ce4 e0f1      	LDI  R31,HIGH(466)
000ce5 164e      	CP   R4,R30
000ce6 065f      	CPC  R5,R31
000ce7 f008      	BRLO _0x112
                 _0x111:
000ce8 c008      	RJMP _0x110
                 _0x112:
                 ; 0000 01A9     {
                 ; 0000 01AA       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
000ce9 940e 1645 	CALL SUBOPT_0x39
000ceb f418      	BRSH _0x114
000cec 940e 164a 	CALL SUBOPT_0x3A
000cee f008      	BRLO _0x115
                 _0x114:
000cef c001      	RJMP _0x113
                 _0x115:
000cf0 e014      	LDI  R17,LOW(4)
                 ; 0000 01AB     }
                 _0x113:
                 ; 0000 01AC 
                 ; 0000 01AD   }
                 _0x110:
                 ; 0000 01AE   return res;
                 _0xFD:
                 _0x2080004:
000cf1 2fe1      	MOV  R30,R17
                 _0x2080005:
000cf2 9119      	LD   R17,Y+
000cf3 9508      	RET
                 ; 0000 01AF }
                 ;
                 ;
                 ;///////////////////////////////////////////////
                 ;char State=0, ParameterState=0, ValueState=0, GraphState=0, ConfigState=0;
                 ;unsigned int WaitADC_mSec = 0, ValueUpd_mSec = 0, GraphUpd_mSec = 0;
                 ;
                 ;unsigned int GraphUpdTime = 0;
                 ;signed int Graph_X = -Graph_X_Step;
                 
                 	.DSEG
                 ;signed int Amplitude[3] = {90, 90, 50};
                 ;signed int ValueLast[3] = {0,0,0};
                 ;
                 ;//////////////////////////////////////////////
                 ;
                 ;void PutParameterText(char Number, unsigned int Color)
                 ; 0000 01BE {
                 
                 	.CSEG
                 _PutParameterText:
                 ; 0000 01BF   int X = Text_StartX;
                 ; 0000 01C0   int Y = Text_StartY;
                 ; 0000 01C1 
                 ; 0000 01C2   SSD1963_PutString16("                ", X, Y, Color, BLACK);
000cf4 940e 1975 	CALL __SAVELOCR4
                 ;	Number -> Y+6
                 ;	Color -> Y+4
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                +
000cf6 e100     +LDI R16 , LOW ( 16 )
000cf7 e010     +LDI R17 , HIGH ( 16 )
                 	__GETWRN 16,17,16
                +
000cf8 e026     +LDI R18 , LOW ( 6 )
000cf9 e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                +
000cfa e2eb     +LDI R30 , LOW ( _0x118 + ( 0 ) )
000cfb e0f5     +LDI R31 , HIGH ( _0x118 + ( 0 ) )
                 	__POINTW1MN _0x118,0
000cfc 940e 164f 	CALL SUBOPT_0x3B
000cfe 940e 1654 	CALL SUBOPT_0x3C
000d00 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01C3   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d02 e3ec     +LDI R30 , LOW ( _0x118 + ( 17 ) )
000d03 e0f5     +LDI R31 , HIGH ( _0x118 + ( 17 ) )
                 	__POINTW1MN _0x118,17
000d04 940e 164f 	CALL SUBOPT_0x3B
000d06 940e 1659 	CALL SUBOPT_0x3D
000d08 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01C4   switch (Number)
000d0a 81ee      	LDD  R30,Y+6
000d0b 940e 1660 	CALL SUBOPT_0x3E
                 ; 0000 01C5   {
                 ; 0000 01C6     case 0 :
000d0d f489      	BRNE _0x11C
                 ; 0000 01C7       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000d0e e4ed     +LDI R30 , LOW ( _0x118 + ( 34 ) )
000d0f e0f5     +LDI R31 , HIGH ( _0x118 + ( 34 ) )
                 	__POINTW1MN _0x118,34
000d10 940e 164f 	CALL SUBOPT_0x3B
000d12 940e 1654 	CALL SUBOPT_0x3C
000d14 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01C8       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d16 e5e8     +LDI R30 , LOW ( _0x118 + ( 45 ) )
000d17 e0f5     +LDI R31 , HIGH ( _0x118 + ( 45 ) )
                 	__POINTW1MN _0x118,45
000d18 940e 164f 	CALL SUBOPT_0x3B
000d1a 940e 1659 	CALL SUBOPT_0x3D
000d1c 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01C9     break;
000d1e c112      	RJMP _0x11B
                 ; 0000 01CA     case 1 :
                 _0x11C:
000d1f 30e1      	CPI  R30,LOW(0x1)
000d20 e0a0      	LDI  R26,HIGH(0x1)
000d21 07fa      	CPC  R31,R26
000d22 f489      	BRNE _0x11D
                 ; 0000 01CB       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000d23 e5ec     +LDI R30 , LOW ( _0x118 + ( 49 ) )
000d24 e0f5     +LDI R31 , HIGH ( _0x118 + ( 49 ) )
                 	__POINTW1MN _0x118,49
000d25 940e 164f 	CALL SUBOPT_0x3B
000d27 940e 1654 	CALL SUBOPT_0x3C
000d29 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01CC       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d2b e6e0     +LDI R30 , LOW ( _0x118 + ( 53 ) )
000d2c e0f5     +LDI R31 , HIGH ( _0x118 + ( 53 ) )
                 	__POINTW1MN _0x118,53
000d2d 940e 164f 	CALL SUBOPT_0x3B
000d2f 940e 1659 	CALL SUBOPT_0x3D
000d31 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01CD     break;
000d33 c0fd      	RJMP _0x11B
                 ; 0000 01CE     case 2 :
                 _0x11D:
000d34 30e2      	CPI  R30,LOW(0x2)
000d35 e0a0      	LDI  R26,HIGH(0x2)
000d36 07fa      	CPC  R31,R26
000d37 f489      	BRNE _0x11E
                 ; 0000 01CF       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000d38 e6e4     +LDI R30 , LOW ( _0x118 + ( 57 ) )
000d39 e0f5     +LDI R31 , HIGH ( _0x118 + ( 57 ) )
                 	__POINTW1MN _0x118,57
000d3a 940e 164f 	CALL SUBOPT_0x3B
000d3c 940e 1654 	CALL SUBOPT_0x3C
000d3e 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01D0       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d40 e7e5     +LDI R30 , LOW ( _0x118 + ( 74 ) )
000d41 e0f5     +LDI R31 , HIGH ( _0x118 + ( 74 ) )
                 	__POINTW1MN _0x118,74
000d42 940e 164f 	CALL SUBOPT_0x3B
000d44 940e 1659 	CALL SUBOPT_0x3D
000d46 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01D1     break;
000d48 c0e8      	RJMP _0x11B
                 ; 0000 01D2     /*
                 ; 0000 01D3     case 3 :
                 ; 0000 01D4       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 01D5       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01D6     break;
                 ; 0000 01D7     case 4 :
                 ; 0000 01D8       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 01D9       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 01DA     break;
                 ; 0000 01DB    */
                 ; 0000 01DC 
                 ; 0000 01DD     case 5:
                 _0x11E:
000d49 30e5      	CPI  R30,LOW(0x5)
000d4a e0a0      	LDI  R26,HIGH(0x5)
000d4b 07fa      	CPC  R31,R26
000d4c f5d9      	BRNE _0x11F
                 ; 0000 01DE       SSD1963_PutString16("ДИС", X, Y, Color, BLACK);
                +
000d4d e8e1     +LDI R30 , LOW ( _0x118 + ( 86 ) )
000d4e e0f5     +LDI R31 , HIGH ( _0x118 + ( 86 ) )
                 	__POINTW1MN _0x118,86
000d4f 940e 164f 	CALL SUBOPT_0x3B
000d51 940e 1654 	CALL SUBOPT_0x3C
000d53 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01DF       SSD1963_PutString16("АМП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d55 e8e5     +LDI R30 , LOW ( _0x118 + ( 90 ) )
000d56 e0f5     +LDI R31 , HIGH ( _0x118 + ( 90 ) )
                 	__POINTW1MN _0x118,90
000d57 940e 164f 	CALL SUBOPT_0x3B
000d59 940e 1659 	CALL SUBOPT_0x3D
000d5b 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 01E0       X += Value_Lenght;
                 ; 0000 01E1       SSD1963_PutValue16(GraphUpdTime, X, Y, 4, Color, BLACK);
000d5d 940e 1668 	CALL SUBOPT_0x40
000d5f 940e 166d 	CALL SUBOPT_0x41
000d61 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 01E2       X += Value_Lenght + FONT_HEIGHT + FONT_HEIGHT;
                +
000d63 5a00     +SUBI R16 , LOW ( - 96 )
000d64 4f1f     +SBCI R17 , HIGH ( - 96 )
                 	__ADDWRN 16,17,96
                 ; 0000 01E3       SSD1963_PutString16("ОВЕ", X, Y, Color, BLACK);
                +
000d65 e8e9     +LDI R30 , LOW ( _0x118 + ( 94 ) )
000d66 e0f5     +LDI R31 , HIGH ( _0x118 + ( 94 ) )
                 	__POINTW1MN _0x118,94
000d67 940e 164f 	CALL SUBOPT_0x3B
000d69 940e 1654 	CALL SUBOPT_0x3C
000d6b 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 01E4       X += Value_Lenght;
                 ; 0000 01E5       SSD1963_PutValue16(rx_buffer_overflow0, X, Y, 1, Color, BLACK);
000d6d 940e 1674 	CALL SUBOPT_0x42
000d6f 940e 1679 	CALL SUBOPT_0x43
000d71 940e 1680 	CALL SUBOPT_0x44
                 ; 0000 01E6 
                 ; 0000 01E7       X = Text_StartX + Value_Lenght;
                 ; 0000 01E8       Y = Text_StartY + FONT_HEIGHT;
                 ; 0000 01E9       SSD1963_PutValue16(Amplitude[0], X, Y, 3, Color, DGRAY);
000d73 940e 168b 	CALL SUBOPT_0x45
000d75 940e 1692 	CALL SUBOPT_0x46
                 ; 0000 01EA       X += Value_Lenght;
                 ; 0000 01EB       SSD1963_PutValue16(Amplitude[1], X, Y, 3, Color, BLACK);
000d77 940e 169d 	CALL SUBOPT_0x47
000d79 940e 168b 	CALL SUBOPT_0x45
000d7b 940e 14cd 	CALL SUBOPT_0xE
000d7d 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 01EC       X += Value_Lenght;
                 ; 0000 01ED       SSD1963_PutValue16(Amplitude[2], X, Y, 3, Color, BLACK);
000d7f 940e 16a7 	CALL SUBOPT_0x49
000d81 940e 168b 	CALL SUBOPT_0x45
000d83 940e 14cd 	CALL SUBOPT_0xE
000d85 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 01EE     break;
000d87 c0a9      	RJMP _0x11B
                 ; 0000 01EF     case 6:
                 _0x11F:
000d88 30e6      	CPI  R30,LOW(0x6)
000d89 e0a0      	LDI  R26,HIGH(0x6)
000d8a 07fa      	CPC  R31,R26
000d8b f5d9      	BRNE _0x120
                 ; 0000 01F0       SSD1963_PutString16("ДИС", X, Y, Color, BLACK);
                +
000d8c e8ed     +LDI R30 , LOW ( _0x118 + ( 98 ) )
000d8d e0f5     +LDI R31 , HIGH ( _0x118 + ( 98 ) )
                 	__POINTW1MN _0x118,98
000d8e 940e 164f 	CALL SUBOPT_0x3B
000d90 940e 1654 	CALL SUBOPT_0x3C
000d92 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 01F1       SSD1963_PutString16("АМП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000d94 e9e1     +LDI R30 , LOW ( _0x118 + ( 102 ) )
000d95 e0f5     +LDI R31 , HIGH ( _0x118 + ( 102 ) )
                 	__POINTW1MN _0x118,102
000d96 940e 164f 	CALL SUBOPT_0x3B
000d98 940e 1659 	CALL SUBOPT_0x3D
000d9a 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 01F2       X += Value_Lenght;
                 ; 0000 01F3       SSD1963_PutValue16(GraphUpdTime, X, Y, 4, Color, BLACK);
000d9c 940e 1668 	CALL SUBOPT_0x40
000d9e 940e 166d 	CALL SUBOPT_0x41
000da0 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 01F4       X += Value_Lenght + FONT_HEIGHT;
                +
000da2 5b00     +SUBI R16 , LOW ( - 80 )
000da3 4f1f     +SBCI R17 , HIGH ( - 80 )
                 	__ADDWRN 16,17,80
                 ; 0000 01F5       SSD1963_PutString16("ОВЕ", X, Y, Color, BLACK);
                +
000da4 e9e5     +LDI R30 , LOW ( _0x118 + ( 106 ) )
000da5 e0f5     +LDI R31 , HIGH ( _0x118 + ( 106 ) )
                 	__POINTW1MN _0x118,106
000da6 940e 164f 	CALL SUBOPT_0x3B
000da8 940e 1654 	CALL SUBOPT_0x3C
000daa 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 01F6       X += Value_Lenght;
                 ; 0000 01F7       SSD1963_PutValue16(rx_buffer_overflow0, X, Y, 1, Color, BLACK);
000dac 940e 1674 	CALL SUBOPT_0x42
000dae 940e 1679 	CALL SUBOPT_0x43
000db0 940e 1680 	CALL SUBOPT_0x44
                 ; 0000 01F8 
                 ; 0000 01F9       X = Text_StartX + Value_Lenght;
                 ; 0000 01FA       Y = Text_StartY + FONT_HEIGHT;
                 ; 0000 01FB       SSD1963_PutValue16(Amplitude[0], X, Y, 3, Color, BLACK);
000db2 940e 168b 	CALL SUBOPT_0x45
000db4 940e 14cd 	CALL SUBOPT_0xE
000db6 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 01FC       X += Value_Lenght;
                 ; 0000 01FD       SSD1963_PutValue16(Amplitude[1], X, Y, 3, Color, DGRAY);
000db8 940e 169d 	CALL SUBOPT_0x47
000dba 940e 168b 	CALL SUBOPT_0x45
000dbc 940e 1692 	CALL SUBOPT_0x46
                 ; 0000 01FE       X += Value_Lenght;
                 ; 0000 01FF       SSD1963_PutValue16(Amplitude[2], X, Y, 3, Color, BLACK);
000dbe 940e 16a7 	CALL SUBOPT_0x49
000dc0 940e 168b 	CALL SUBOPT_0x45
000dc2 940e 14cd 	CALL SUBOPT_0xE
000dc4 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 0200     break;
000dc6 c06a      	RJMP _0x11B
                 ; 0000 0201     case 7:
                 _0x120:
000dc7 30e7      	CPI  R30,LOW(0x7)
000dc8 e0a0      	LDI  R26,HIGH(0x7)
000dc9 07fa      	CPC  R31,R26
000dca f5e9      	BRNE _0x121
                 ; 0000 0202       SSD1963_PutString16("ДИС", X, Y, Color, BLACK);
                +
000dcb e9e9     +LDI R30 , LOW ( _0x118 + ( 110 ) )
000dcc e0f5     +LDI R31 , HIGH ( _0x118 + ( 110 ) )
                 	__POINTW1MN _0x118,110
000dcd 940e 164f 	CALL SUBOPT_0x3B
000dcf 940e 1654 	CALL SUBOPT_0x3C
000dd1 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0203       SSD1963_PutString16("АМП", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000dd3 e9ed     +LDI R30 , LOW ( _0x118 + ( 114 ) )
000dd4 e0f5     +LDI R31 , HIGH ( _0x118 + ( 114 ) )
                 	__POINTW1MN _0x118,114
000dd5 940e 164f 	CALL SUBOPT_0x3B
000dd7 940e 1659 	CALL SUBOPT_0x3D
000dd9 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 0204       X += Value_Lenght;
                 ; 0000 0205       SSD1963_PutValue16(GraphUpdTime, X, Y, 4, Color, BLACK);
000ddb 940e 1668 	CALL SUBOPT_0x40
000ddd 940e 166d 	CALL SUBOPT_0x41
000ddf 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 0206       X += Value_Lenght + FONT_HEIGHT;
                +
000de1 5b00     +SUBI R16 , LOW ( - 80 )
000de2 4f1f     +SBCI R17 , HIGH ( - 80 )
                 	__ADDWRN 16,17,80
                 ; 0000 0207       SSD1963_PutString16("ОВЕ", X, Y, Color, BLACK);
                +
000de3 eae1     +LDI R30 , LOW ( _0x118 + ( 118 ) )
000de4 e0f5     +LDI R31 , HIGH ( _0x118 + ( 118 ) )
                 	__POINTW1MN _0x118,118
000de5 940e 164f 	CALL SUBOPT_0x3B
000de7 940e 1654 	CALL SUBOPT_0x3C
000de9 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 0208       X += Value_Lenght;
                 ; 0000 0209       SSD1963_PutValue16(rx_buffer_overflow0, X, Y, 1, Color, BLACK);
000deb 940e 1674 	CALL SUBOPT_0x42
000ded 940e 1679 	CALL SUBOPT_0x43
000def 940e 1680 	CALL SUBOPT_0x44
                 ; 0000 020A 
                 ; 0000 020B       X = Text_StartX + Value_Lenght;
                 ; 0000 020C       Y = Text_StartY + FONT_HEIGHT;
                 ; 0000 020D       SSD1963_PutValue16(Amplitude[0], X, Y, 3, Color, BLACK);
000df1 940e 168b 	CALL SUBOPT_0x45
000df3 940e 14cd 	CALL SUBOPT_0xE
000df5 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 020E       X += Value_Lenght;
                 ; 0000 020F       SSD1963_PutValue16(Amplitude[1], X, Y, 3, Color, BLACK);
000df7 940e 169d 	CALL SUBOPT_0x47
000df9 940e 168b 	CALL SUBOPT_0x45
000dfb 940e 14cd 	CALL SUBOPT_0xE
000dfd 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 0210       X += Value_Lenght;
                 ; 0000 0211       SSD1963_PutValue16(Amplitude[2], X, Y, 3, Color, DGRAY);
000dff 940e 16a7 	CALL SUBOPT_0x49
000e01 940e 168b 	CALL SUBOPT_0x45
000e03 940e 16ac 	CALL SUBOPT_0x4A
000e05 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 0212     break;
000e07 c029      	RJMP _0x11B
                 ; 0000 0213     case 8:
                 _0x121:
000e08 30e8      	CPI  R30,LOW(0x8)
000e09 e0a0      	LDI  R26,HIGH(0x8)
000e0a 07fa      	CPC  R31,R26
000e0b f459      	BRNE _0x122
                 ; 0000 0214       SSD1963_PutString16(" KU", X, Y, Color, BLACK);
                +
000e0c eae5     +LDI R30 , LOW ( _0x118 + ( 122 ) )
000e0d e0f5     +LDI R31 , HIGH ( _0x118 + ( 122 ) )
                 	__POINTW1MN _0x118,122
000e0e 940e 164f 	CALL SUBOPT_0x3B
000e10 940e 1654 	CALL SUBOPT_0x3C
000e12 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0215       SSD1963_PutString16(" KI", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e14 eae9     +LDI R30 , LOW ( _0x118 + ( 126 ) )
000e15 e0f5     +LDI R31 , HIGH ( _0x118 + ( 126 ) )
                 	__POINTW1MN _0x118,126
000e16 c00e      	RJMP _0x1B3
                 ; 0000 0216       X += Value_Lenght;
                 ; 0000 0217       //SSD1963_PutValue16(Amplitude[0], X, Y, 3, Color, BLACK);
                 ; 0000 0218       X += Value_Lenght;
                 ; 0000 0219       //SSD1963_PutValue16(Amplitude[1], X, Y, 3, Color, BLACK);
                 ; 0000 021A       X += Value_Lenght;
                 ; 0000 021B       //SSD1963_PutValue16(Amplitude[2], X, Y, 3, Color, BLACK);
                 ; 0000 021C     break;
                 ; 0000 021D     case 14:
                 _0x122:
000e17 30ee      	CPI  R30,LOW(0xE)
000e18 e0a0      	LDI  R26,HIGH(0xE)
000e19 07fa      	CPC  R31,R26
000e1a f4b1      	BRNE _0x11B
                 ; 0000 021E       SSD1963_PutString16("KUI", X, Y, Color, BLACK);
                +
000e1b eaed     +LDI R30 , LOW ( _0x118 + ( 130 ) )
000e1c e0f5     +LDI R31 , HIGH ( _0x118 + ( 130 ) )
                 	__POINTW1MN _0x118,130
000e1d 940e 164f 	CALL SUBOPT_0x3B
000e1f 940e 1654 	CALL SUBOPT_0x3C
000e21 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 021F       SSD1963_PutString16("FastADC", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e23 ebe1     +LDI R30 , LOW ( _0x118 + ( 134 ) )
000e24 e0f5     +LDI R31 , HIGH ( _0x118 + ( 134 ) )
                 	__POINTW1MN _0x118,134
                 _0x1B3:
000e25 93fa      	ST   -Y,R31
000e26 93ea      	ST   -Y,R30
000e27 931a      	ST   -Y,R17
000e28 930a      	ST   -Y,R16
000e29 940e 1659 	CALL SUBOPT_0x3D
000e2b 940e 1663 	CALL SUBOPT_0x3F
                 ; 0000 0220       X += Value_Lenght;
                 ; 0000 0221       //SSD1963_PutValue16(Amplitude[0], X, Y, 3, Color, BLACK);
                 ; 0000 0222       X += Value_Lenght;
                +
000e2d 5c00     +SUBI R16 , LOW ( - 64 )
000e2e 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 0223       //SSD1963_PutValue16(Amplitude[1], X, Y, 3, Color, BLACK);
                 ; 0000 0224       X += Value_Lenght;
                +
000e2f 5c00     +SUBI R16 , LOW ( - 64 )
000e30 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 0225       //SSD1963_PutValue16(Amplitude[2], X, Y, 3, Color, BLACK);
                 ; 0000 0226     break;
                 ; 0000 0227   }
                 _0x11B:
                 ; 0000 0228 }
000e31 940e 197c 	CALL __LOADLOCR4
                 _0x2080003:
000e33 9627      	ADIW R28,7
000e34 9508      	RET
                 
                 	.DSEG
                 _0x118:
00052b           	.BYTE 0x8E
                 ;
                 ;//Функция вывода напряжения(тока) и частоты
                 ;void PutParameterValue(char v1, char v2, char v3, char fHz)
                 ; 0000 022C {
                 
                 	.CSEG
                 _PutParameterValue:
                 ; 0000 022D     int X = Value_StartX;
                 ; 0000 022E     int Y = Value_StartY ;
                 ; 0000 022F     unsigned int Color = BLUE;
                 ; 0000 0230 
                 ; 0000 0231     SSD1963_PutString16("            ", X, Y, Color, BLACK);
000e35 940e 1973 	CALL __SAVELOCR6
                 ;	v1 -> Y+9
                 ;	v2 -> Y+8
                 ;	v3 -> Y+7
                 ;	fHz -> Y+6
                 ;	X -> R16,R17
                 ;	Y -> R18,R19
                 ;	Color -> R20,R21
                +
000e37 e202     +LDI R16 , LOW ( 290 )
000e38 e011     +LDI R17 , HIGH ( 290 )
                 	__GETWRN 16,17,290
                +
000e39 e026     +LDI R18 , LOW ( 6 )
000e3a e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                +
000e3b ef48     +LDI R20 , LOW ( 248 )
000e3c e050     +LDI R21 , HIGH ( 248 )
                 	__GETWRN 20,21,248
                +
000e3d ebe9     +LDI R30 , LOW ( _0x124 + ( 0 ) )
000e3e e0f5     +LDI R31 , HIGH ( _0x124 + ( 0 ) )
                 	__POINTW1MN _0x124,0
000e3f 940e 164f 	CALL SUBOPT_0x3B
000e41 940e 16b3 	CALL SUBOPT_0x4B
000e43 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0232     SSD1963_PutString16("            ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000e45 ece6     +LDI R30 , LOW ( _0x124 + ( 13 ) )
000e46 e0f5     +LDI R31 , HIGH ( _0x124 + ( 13 ) )
                 	__POINTW1MN _0x124,13
000e47 940e 164f 	CALL SUBOPT_0x3B
000e49 01f9      	MOVW R30,R18
000e4a 9670      	ADIW R30,16
000e4b 93fa      	ST   -Y,R31
000e4c 93ea      	ST   -Y,R30
000e4d 940e 16b8 	CALL SUBOPT_0x4C
000e4f 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0233 
                 ; 0000 0234     if(ParameterState != 2)
000e51 91a0 07a5 	LDS  R26,_ParameterState
000e53 30a2      	CPI  R26,LOW(0x2)
000e54 f159      	BREQ _0x125
                 ; 0000 0235     {
                 ; 0000 0236         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
000e55 940e 16bb 	CALL SUBOPT_0x4D
000e57 940e 16be 	CALL SUBOPT_0x4E
000e59 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 0237         X += Value_Lenght;
                 ; 0000 0238         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
000e5b 940e 14e6 	CALL SUBOPT_0x13
000e5d 940e 164f 	CALL SUBOPT_0x3B
000e5f 940e 16be 	CALL SUBOPT_0x4E
000e61 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 0239         X += Value_Lenght;
                 ; 0000 023A         SSD1963_PutValue16(v3, X, Y, 3, Color, BLACK);
000e63 81ef      	LDD  R30,Y+7
000e64 e0f0      	LDI  R31,0
000e65 940e 164f 	CALL SUBOPT_0x3B
000e67 940e 16be 	CALL SUBOPT_0x4E
000e69 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 023B         X = Value_StartX + Value_Lenght;
                +
000e6b e602     +LDI R16 , LOW ( 354 )
000e6c e011     +LDI R17 , HIGH ( 354 )
                 	__GETWRN 16,17,354
                 ; 0000 023C         Y += FONT_HEIGHT;
                +
000e6d 5f20     +SUBI R18 , LOW ( - 16 )
000e6e 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 023D         SSD1963_PutValue16(fHz, X, Y, 3, Color, BLACK);
000e6f 81ee      	LDD  R30,Y+6
000e70 e0f0      	LDI  R31,0
000e71 940e 164f 	CALL SUBOPT_0x3B
000e73 940e 16be 	CALL SUBOPT_0x4E
000e75 940e 16a2 	CALL SUBOPT_0x48
                 ; 0000 023E         X += Value_Lenght;
                 ; 0000 023F         SSD1963_PutString16("ГЦ", X, Y, Color, BLACK);
                +
000e77 ede3     +LDI R30 , LOW ( _0x124 + ( 26 ) )
000e78 e0f5     +LDI R31 , HIGH ( _0x124 + ( 26 ) )
                 	__POINTW1MN _0x124,26
000e79 940e 164f 	CALL SUBOPT_0x3B
000e7b 940e 16b3 	CALL SUBOPT_0x4B
000e7d 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0240     }
                 ; 0000 0241     else
000e7f c012      	RJMP _0x126
                 _0x125:
                 ; 0000 0242     {
                 ; 0000 0243         X += Value_Lenght;
                +
000e80 5c00     +SUBI R16 , LOW ( - 64 )
000e81 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
                 ; 0000 0244         SSD1963_PutValue16(v1, X, Y, 3, Color, BLACK);
000e82 940e 16bb 	CALL SUBOPT_0x4D
000e84 940e 16be 	CALL SUBOPT_0x4E
000e86 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 0245         Y += FONT_HEIGHT;
                +
000e88 5f20     +SUBI R18 , LOW ( - 16 )
000e89 4f3f     +SBCI R19 , HIGH ( - 16 )
                 	__ADDWRN 18,19,16
                 ; 0000 0246         SSD1963_PutValue16(v2, X, Y, 3, Color, BLACK);
000e8a 940e 14e6 	CALL SUBOPT_0x13
000e8c 940e 164f 	CALL SUBOPT_0x3B
000e8e 940e 16be 	CALL SUBOPT_0x4E
000e90 940e 0841 	CALL _SSD1963_PutValue16
                 ; 0000 0247     }
                 _0x126:
                 ; 0000 0248 }
000e92 940e 197a 	CALL __LOADLOCR6
000e94 962a      	ADIW R28,10
000e95 9508      	RET
                 
                 	.DSEG
                 _0x124:
0005b9           	.BYTE 0x1D
                 ;
                 ;void StartPaint()
                 ; 0000 024B {
                 
                 	.CSEG
                 _StartPaint:
                 ; 0000 024C     //Чтоб первая точка легла
                 ; 0000 024D     Graph_X = -Graph_X_Step;
000e96 efea      	LDI  R30,LOW(65530)
000e97 efff      	LDI  R31,HIGH(65530)
000e98 940e 16c3 	CALL SUBOPT_0x4F
                 ; 0000 024E }
000e9a 9508      	RET
                 ;
                 ;inline void Paint_Phase(void)
                 ; 0000 0251 {
                 _Paint_Phase:
                 ; 0000 0252     signed int Value[3];
                 ; 0000 0253     unsigned int Color[] = {RED, YELLOW, GREEN};
                 ; 0000 0254     signed int Lenght = Graph_X + (Graph_X_Step * Graph_Step_N);
                 ; 0000 0255     signed int mid = Graph_Y_Mid;
                 ; 0000 0256     char i, j;
                 ; 0000 0257 
                 ; 0000 0258     if(Graph_X > Graph_X_Max)  //Некуда дальше
000e9b 972c      	SBIW R28,12
000e9c e0e0      	LDI  R30,LOW(0)
000e9d 83e8      	ST   Y,R30
000e9e e1ef      	LDI  R30,LOW(31)
000e9f 83e9      	STD  Y+1,R30
000ea0 e0e7      	LDI  R30,LOW(7)
000ea1 83ea      	STD  Y+2,R30
000ea2 efef      	LDI  R30,LOW(255)
000ea3 83eb      	STD  Y+3,R30
000ea4 e0e7      	LDI  R30,LOW(7)
000ea5 83ec      	STD  Y+4,R30
000ea6 eee0      	LDI  R30,LOW(224)
000ea7 83ed      	STD  Y+5,R30
000ea8 940e 1973 	CALL __SAVELOCR6
                 ;	Value -> Y+12
                 ;	Color -> Y+6
                 ;	Lenght -> R16,R17
                 ;	mid -> R18,R19
                 ;	i -> R21
                 ;	j -> R20
000eaa 940e 16c8 	CALL SUBOPT_0x50
000eac 963c      	ADIW R30,12
000ead 018f      	MOVW R16,R30
                +
000eae e829     +LDI R18 , LOW ( 137 )
000eaf e030     +LDI R19 , HIGH ( 137 )
                 	__GETWRN 18,19,137
000eb0 940e 16cd 	CALL SUBOPT_0x51
000eb2 f05c      	BRLT _0x127
                 ; 0000 0259     {
                 ; 0000 025A         GraphUpdTime = GraphUpd_mSec;
000eb3 940e 16d5 	CALL SUBOPT_0x52
                 ; 0000 025B         while(rx_counter0) getchar0();
                 _0x128:
000eb5 91e0 0732 	LDS  R30,_rx_counter0
000eb7 30e0      	CPI  R30,0
000eb8 f011      	BREQ _0x12A
000eb9 dc38      	RCALL _getchar0
000eba cffa      	RJMP _0x128
                 _0x12A:
                 ; 0000 025C GraphState = 0;
000ebb e0e0      	LDI  R30,LOW(0)
000ebc 93e0 07a7 	STS  _GraphState,R30
                 ; 0000 025D     }
                 ; 0000 025E 
                 ; 0000 025F     if( rx_counter0 < 2 || (rx_counter0 < 3 && ParameterState != 2))
                 _0x127:
000ebe 91a0 0732 	LDS  R26,_rx_counter0
000ec0 30a2      	CPI  R26,LOW(0x2)
000ec1 f038      	BRLO _0x12C
000ec2 30a3      	CPI  R26,LOW(0x3)
000ec3 f420      	BRSH _0x12D
000ec4 91a0 07a5 	LDS  R26,_ParameterState
000ec6 30a2      	CPI  R26,LOW(0x2)
000ec7 f409      	BRNE _0x12C
                 _0x12D:
000ec8 c013      	RJMP _0x12B
                 _0x12C:
                 ; 0000 0260     {
                 ; 0000 0261         if(GraphUpd_mSec > 100)
000ec9 91a0 07ad 	LDS  R26,_GraphUpd_mSec
000ecb 91b0 07ae 	LDS  R27,_GraphUpd_mSec+1
000ecd 36a5      	CPI  R26,LOW(0x65)
000ece e0e0      	LDI  R30,HIGH(0x65)
000ecf 07be      	CPC  R27,R30
000ed0 f058      	BRLO _0x130
                 ; 0000 0262         {
                 ; 0000 0263             GraphUpdTime = GraphUpd_mSec;
000ed1 940e 16d5 	CALL SUBOPT_0x52
                 ; 0000 0264             while(rx_counter0) getchar0();
                 _0x131:
000ed3 91e0 0732 	LDS  R30,_rx_counter0
000ed5 30e0      	CPI  R30,0
000ed6 f011      	BREQ _0x133
000ed7 dc1a      	RCALL _getchar0
000ed8 cffa      	RJMP _0x131
                 _0x133:
                 ; 0000 0265 GraphState = 0;
000ed9 e0e0      	LDI  R30,LOW(0)
000eda 93e0 07a7 	STS  _GraphState,R30
                 ; 0000 0266         }
                 ; 0000 0267     }
                 _0x130:
                 ; 0000 0268 
                 ; 0000 0269     if(GraphState == 0) return;
                 _0x12B:
000edc 91e0 07a7 	LDS  R30,_GraphState
000ede 30e0      	CPI  R30,0
000edf f409      	BRNE _0x134
000ee0 c184      	RJMP _0x2080002
                 ; 0000 026A 
                 ; 0000 026B     if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
                 _0x134:
                +
000ee1 3d0f     +CPI R16 , LOW ( 479 )
000ee2 e0e1     +LDI R30 , HIGH ( 479 )
000ee3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
000ee4 f014      	BRLT _0x135
                +
000ee5 ed0e     +LDI R16 , LOW ( 478 )
000ee6 e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 026C 
                 ; 0000 026D     if(Graph_X >= Graph_X_Min)
                 _0x135:
000ee7 91a0 07b2 	LDS  R26,_Graph_X+1
000ee9 23aa      	TST  R26
000eea f412      	BRPL PC+3
000eeb 940c 0f37 	JMP _0x136
                 ; 0000 026E     {
                 ; 0000 026F         // очищаем перед собой столбец пикселей
                 ; 0000 0270         SSD1963_DrawFillRect(Graph_X, Lenght+2, Graph_Y_Min, Graph_Y_Max+1, BLACK);
000eed 940e 16c8 	CALL SUBOPT_0x50
000eef 93fa      	ST   -Y,R31
000ef0 93ea      	ST   -Y,R30
000ef1 01f8      	MOVW R30,R16
000ef2 9632      	ADIW R30,2
000ef3 93fa      	ST   -Y,R31
000ef4 93ea      	ST   -Y,R30
000ef5 e2ea      	LDI  R30,LOW(42)
000ef6 e0f0      	LDI  R31,HIGH(42)
000ef7 93fa      	ST   -Y,R31
000ef8 93ea      	ST   -Y,R30
000ef9 eee9      	LDI  R30,LOW(233)
000efa e0f0      	LDI  R31,HIGH(233)
000efb 940e 14cd 	CALL SUBOPT_0xE
000efd 940e 09b7 	CALL _SSD1963_DrawFillRect
                 ; 0000 0271         //Линия нуля
                 ; 0000 0272         SSD1963_DrawFastLine(Graph_X, Lenght, mid, mid, DGRAY);
000eff 940e 16de 	CALL SUBOPT_0x53
000f01 933a      	ST   -Y,R19
000f02 932a      	ST   -Y,R18
000f03 933a      	ST   -Y,R19
000f04 932a      	ST   -Y,R18
000f05 e0e8      	LDI  R30,LOW(8456)
000f06 e2f1      	LDI  R31,HIGH(8456)
000f07 93fa      	ST   -Y,R31
000f08 93ea      	ST   -Y,R30
000f09 940e 16e0 	CALL SUBOPT_0x54
                 ; 0000 0273         SSD1963_DrawFastLine(Graph_X, Lenght, mid+45, mid+45, DGRAY);
000f0b 01f9      	MOVW R30,R18
000f0c 96bd      	ADIW R30,45
000f0d 93fa      	ST   -Y,R31
000f0e 93ea      	ST   -Y,R30
000f0f 01f9      	MOVW R30,R18
000f10 96bd      	ADIW R30,45
000f11 940e 16ac 	CALL SUBOPT_0x4A
000f13 940e 16e0 	CALL SUBOPT_0x54
                 ; 0000 0274         SSD1963_DrawFastLine(Graph_X, Lenght, mid-45, mid-45, DGRAY);
000f15 01f9      	MOVW R30,R18
000f16 97bd      	SBIW R30,45
000f17 93fa      	ST   -Y,R31
000f18 93ea      	ST   -Y,R30
000f19 01f9      	MOVW R30,R18
000f1a 97bd      	SBIW R30,45
000f1b 940e 16ac 	CALL SUBOPT_0x4A
000f1d 940e 16e0 	CALL SUBOPT_0x54
                 ; 0000 0275         SSD1963_DrawFastLine(Graph_X, Lenght, mid+90, mid+90, DGRAY);
000f1f 01f9      	MOVW R30,R18
000f20 5ae6      	SUBI R30,LOW(-90)
000f21 4fff      	SBCI R31,HIGH(-90)
000f22 93fa      	ST   -Y,R31
000f23 93ea      	ST   -Y,R30
000f24 01f9      	MOVW R30,R18
000f25 5ae6      	SUBI R30,LOW(-90)
000f26 4fff      	SBCI R31,HIGH(-90)
000f27 940e 16ac 	CALL SUBOPT_0x4A
000f29 940e 16e0 	CALL SUBOPT_0x54
                 ; 0000 0276         SSD1963_DrawFastLine(Graph_X, Lenght, mid-90, mid-90, DGRAY);
000f2b 01f9      	MOVW R30,R18
000f2c 55ea      	SUBI R30,LOW(90)
000f2d 40f0      	SBCI R31,HIGH(90)
000f2e 93fa      	ST   -Y,R31
000f2f 93ea      	ST   -Y,R30
000f30 01f9      	MOVW R30,R18
000f31 55ea      	SUBI R30,LOW(90)
000f32 40f0      	SBCI R31,HIGH(90)
000f33 940e 16ac 	CALL SUBOPT_0x4A
000f35 940e 08b1 	CALL _SSD1963_DrawFastLine
                 ; 0000 0277     }
                 ; 0000 0278 
                 ; 0000 0279     if(ParameterState != 2)
                 _0x136:
000f37 91a0 07a5 	LDS  R26,_ParameterState
000f39 30a2      	CPI  R26,LOW(0x2)
000f3a f411      	BRNE PC+3
000f3b 940c 0fcc 	JMP _0x137
                 ; 0000 027A     {
                 ; 0000 027B         for(j=0; j<Graph_Step_N; j++)
000f3d e040      	LDI  R20,LOW(0)
                 _0x139:
000f3e 3042      	CPI  R20,2
000f3f f010      	BRLO PC+3
000f40 940c 0fcb 	JMP _0x13A
                 ; 0000 027C         {
                 ; 0000 027D             if(Graph_X > Graph_X_Max) break;
000f42 940e 16cd 	CALL SUBOPT_0x51
000f44 f00c      	BRLT _0x13B
000f45 c085      	RJMP _0x13A
                 ; 0000 027E             Lenght = Graph_X + Graph_X_Step;
                 _0x13B:
000f46 940e 16e3 	CALL SUBOPT_0x55
                 ; 0000 027F             if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
000f48 f014      	BRLT _0x13C
                +
000f49 ed0e     +LDI R16 , LOW ( 478 )
000f4a e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 0280 
                 ; 0000 0281             if(rx_counter0 < 3 || (TOUCH_IRQ < 1)) break;
                 _0x13C:
000f4b 91a0 0732 	LDS  R26,_rx_counter0
000f4d 30a3      	CPI  R26,LOW(0x3)
000f4e f018      	BRLO _0x13E
000f4f 940e 15a7 	CALL SUBOPT_0x27
000f51 f408      	BRSH _0x13D
                 _0x13E:
000f52 c078      	RJMP _0x13A
                 ; 0000 0282 
                 ; 0000 0283             Value[0] = getchar0();
                 _0x13D:
000f53 940e 16ea 	CALL SUBOPT_0x56
000f55 87ec      	STD  Y+12,R30
000f56 87fd      	STD  Y+12+1,R31
                 ; 0000 0284             Value[1] = getchar0();
000f57 940e 16ea 	CALL SUBOPT_0x56
000f59 87ee      	STD  Y+14,R30
000f5a 87ff      	STD  Y+14+1,R31
                 ; 0000 0285             Value[2] = getchar0();
000f5b 940e 16ea 	CALL SUBOPT_0x56
000f5d 8be8      	STD  Y+16,R30
000f5e 8bf9      	STD  Y+16+1,R31
                 ; 0000 0286 
                 ; 0000 0287             for(i=0; i<3; i++)
000f5f e050      	LDI  R21,LOW(0)
                 _0x141:
000f60 3053      	CPI  R21,3
000f61 f010      	BRLO PC+3
000f62 940c 0fc4 	JMP _0x142
                 ; 0000 0288             {
                 ; 0000 0289                 Value[i] = 128 - Value[i];
000f64 940e 16ee 	CALL SUBOPT_0x57
000f66 0fea      	ADD  R30,R26
000f67 1ffb      	ADC  R31,R27
000f68 01bf      	MOVW R22,R30
000f69 940e 16ee 	CALL SUBOPT_0x57
000f6b 940e 16f5 	CALL SUBOPT_0x58
000f6d 940e 16fa 	CALL SUBOPT_0x59
                 ; 0000 028A                 Value[i] *= Amplitude[ParameterState];
000f6f 940e 1704 	CALL SUBOPT_0x5A
000f71 940e 1711 	CALL SUBOPT_0x5B
                 ; 0000 028B                 Value[i] >>= 7;
000f73 940e 1718 	CALL SUBOPT_0x5C
000f75 940e 171d 	CALL SUBOPT_0x5D
                 ; 0000 028C                 if(Value[i]&0x0100) Value[i] |= 0xFF00;
000f77 940e 16f5 	CALL SUBOPT_0x58
000f79 70f1      	ANDI R31,HIGH(0x100)
000f7a f039      	BREQ _0x143
000f7b 940e 16ee 	CALL SUBOPT_0x57
000f7d 940e 1718 	CALL SUBOPT_0x5C
000f7f 6fff      	ORI  R31,HIGH(0xFF00)
000f80 93fe      	ST   -X,R31
000f81 93ee      	ST   -X,R30
                 ; 0000 028D 
                 ; 0000 028E                 Value[i] += mid;
                 _0x143:
000f82 940e 16ee 	CALL SUBOPT_0x57
000f84 940e 1718 	CALL SUBOPT_0x5C
000f86 0fe2      	ADD  R30,R18
000f87 1ff3      	ADC  R31,R19
000f88 93fe      	ST   -X,R31
000f89 93ee      	ST   -X,R30
                 ; 0000 028F                 if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
000f8a 940e 16ee 	CALL SUBOPT_0x57
000f8c 940e 16f5 	CALL SUBOPT_0x58
000f8e 3ee9      	CPI  R30,LOW(0xE9)
000f8f e0a0      	LDI  R26,HIGH(0xE9)
000f90 07fa      	CPC  R31,R26
000f91 f024      	BRLT _0x144
000f92 940e 16ee 	CALL SUBOPT_0x57
000f94 940e 1724 	CALL SUBOPT_0x5E
                 ; 0000 0290                 if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x144:
000f96 940e 16ee 	CALL SUBOPT_0x57
000f98 940e 16f5 	CALL SUBOPT_0x58
000f9a 97ba      	SBIW R30,42
000f9b f424      	BRGE _0x145
000f9c 940e 16ee 	CALL SUBOPT_0x57
000f9e 940e 172b 	CALL SUBOPT_0x5F
                 ; 0000 0291 
                 ; 0000 0292                 if(Graph_X >= Graph_X_Min)
                 _0x145:
000fa0 91a0 07b2 	LDS  R26,_Graph_X+1
000fa2 23aa      	TST  R26
000fa3 f092      	BRMI _0x146
                 ; 0000 0293                 {   // пишем точку в столбце
                 ; 0000 0294                     SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
000fa4 940e 16de 	CALL SUBOPT_0x53
000fa6 940e 1732 	CALL SUBOPT_0x60
000fa8 940e 16f5 	CALL SUBOPT_0x58
000faa 940e 1739 	CALL SUBOPT_0x61
000fac 940e 173e 	CALL SUBOPT_0x62
000fae 940e 1739 	CALL SUBOPT_0x61
000fb0 940e 1743 	CALL SUBOPT_0x63
000fb2 940e 163b 	CALL SUBOPT_0x37
000fb4 940e 08cc 	CALL _SSD1963_DrawLine
                 ; 0000 0295                 }
                 ; 0000 0296                     // определяем предыдущую точку диограммы
                 ; 0000 0297                     ValueLast[i] = Value[i];
                 _0x146:
000fb6 940e 1732 	CALL SUBOPT_0x60
000fb8 0fea      	ADD  R30,R26
000fb9 1ffb      	ADC  R31,R27
000fba 010f      	MOVW R0,R30
000fbb 940e 16ee 	CALL SUBOPT_0x57
000fbd 940e 16f5 	CALL SUBOPT_0x58
000fbf 01d0      	MOVW R26,R0
000fc0 93ed      	ST   X+,R30
000fc1 93fc      	ST   X,R31
                 ; 0000 0298             }
000fc2 5f5f      	SUBI R21,-1
000fc3 cf9c      	RJMP _0x141
                 _0x142:
                 ; 0000 0299             Graph_X += Graph_X_Step; // увеличеваем Х диограммы
000fc4 940e 16c8 	CALL SUBOPT_0x50
000fc6 9636      	ADIW R30,6
000fc7 940e 16c3 	CALL SUBOPT_0x4F
                 ; 0000 029A         }
000fc9 5f4f      	SUBI R20,-1
000fca cf73      	RJMP _0x139
                 _0x13A:
                 ; 0000 029B     }
                 ; 0000 029C     else
000fcb c099      	RJMP _0x147
                 _0x137:
                 ; 0000 029D     {
                 ; 0000 029E         for(j=0; j<Graph_Step_N; j++)
000fcc e040      	LDI  R20,LOW(0)
                 _0x149:
000fcd 3042      	CPI  R20,2
000fce f010      	BRLO PC+3
000fcf 940c 1065 	JMP _0x14A
                 ; 0000 029F         {
                 ; 0000 02A0             if(Graph_X > Graph_X_Max) break;
000fd1 940e 16cd 	CALL SUBOPT_0x51
000fd3 f00c      	BRLT _0x14B
000fd4 c090      	RJMP _0x14A
                 ; 0000 02A1             Lenght = Graph_X + Graph_X_Step;
                 _0x14B:
000fd5 940e 16e3 	CALL SUBOPT_0x55
                 ; 0000 02A2             if(Lenght > Graph_X_Max) Lenght = Graph_X_Max;
000fd7 f014      	BRLT _0x14C
                +
000fd8 ed0e     +LDI R16 , LOW ( 478 )
000fd9 e011     +LDI R17 , HIGH ( 478 )
                 	__GETWRN 16,17,478
                 ; 0000 02A3 
                 ; 0000 02A4             if(rx_counter0 < 2 || (TOUCH_IRQ < 1)) break;
                 _0x14C:
000fda 91a0 0732 	LDS  R26,_rx_counter0
000fdc 30a2      	CPI  R26,LOW(0x2)
000fdd f018      	BRLO _0x14E
000fde 940e 15a7 	CALL SUBOPT_0x27
000fe0 f408      	BRSH _0x14D
                 _0x14E:
000fe1 c083      	RJMP _0x14A
                 ; 0000 02A5 
                 ; 0000 02A6             Value[0] = getchar0();
                 _0x14D:
000fe2 940e 16ea 	CALL SUBOPT_0x56
000fe4 87ec      	STD  Y+12,R30
000fe5 87fd      	STD  Y+12+1,R31
                 ; 0000 02A7             Value[1] = getchar0();
000fe6 940e 16ea 	CALL SUBOPT_0x56
000fe8 87ee      	STD  Y+14,R30
000fe9 87ff      	STD  Y+14+1,R31
                 ; 0000 02A8 
                 ; 0000 02A9             for(i=0; i<2; i++)
000fea e050      	LDI  R21,LOW(0)
                 _0x151:
000feb 3052      	CPI  R21,2
000fec f010      	BRLO PC+3
000fed 940c 105e 	JMP _0x152
                 ; 0000 02AA             {
                 ; 0000 02AB                 Value[i] = 128 - Value[i];
000fef 940e 16ee 	CALL SUBOPT_0x57
000ff1 0fea      	ADD  R30,R26
000ff2 1ffb      	ADC  R31,R27
000ff3 01bf      	MOVW R22,R30
000ff4 940e 16ee 	CALL SUBOPT_0x57
000ff6 940e 16f5 	CALL SUBOPT_0x58
000ff8 940e 16fa 	CALL SUBOPT_0x59
                 ; 0000 02AC                 Value[i] *= Amplitude[ParameterState];
000ffa 940e 1704 	CALL SUBOPT_0x5A
000ffc 940e 1711 	CALL SUBOPT_0x5B
                 ; 0000 02AD                 Value[i] >>= 7;
000ffe 940e 1718 	CALL SUBOPT_0x5C
001000 940e 171d 	CALL SUBOPT_0x5D
                 ; 0000 02AE                 if(Value[i]&0x0100) Value[i] |= 0xFF00;
001002 940e 16f5 	CALL SUBOPT_0x58
001004 70f1      	ANDI R31,HIGH(0x100)
001005 f039      	BREQ _0x153
001006 940e 16ee 	CALL SUBOPT_0x57
001008 940e 1718 	CALL SUBOPT_0x5C
00100a 6fff      	ORI  R31,HIGH(0xFF00)
00100b 93fe      	ST   -X,R31
00100c 93ee      	ST   -X,R30
                 ; 0000 02AF 
                 ; 0000 02B0                 Value[i] += mid + ((i==1)?(45):(-45));
                 _0x153:
00100d 940e 16ee 	CALL SUBOPT_0x57
00100f 0fea      	ADD  R30,R26
001010 1ffb      	ADC  R31,R27
001011 01bf      	MOVW R22,R30
001012 8000      	LD   R0,Z
001013 8011      	LDD  R1,Z+1
001014 2fa5      	MOV  R26,R21
001015 e0b0      	LDI  R27,0
001016 9711      	SBIW R26,1
001017 f419      	BRNE _0x154
001018 e2ed      	LDI  R30,LOW(45)
001019 e0f0      	LDI  R31,HIGH(45)
00101a c002      	RJMP _0x155
                 _0x154:
00101b ede3      	LDI  R30,LOW(65491)
00101c efff      	LDI  R31,HIGH(65491)
                 _0x155:
00101d 0fe2      	ADD  R30,R18
00101e 1ff3      	ADC  R31,R19
00101f 0de0      	ADD  R30,R0
001020 1df1      	ADC  R31,R1
001021 01db      	MOVW R26,R22
001022 93ed      	ST   X+,R30
001023 93fc      	ST   X,R31
                 ; 0000 02B1                 if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
001024 940e 16ee 	CALL SUBOPT_0x57
001026 940e 16f5 	CALL SUBOPT_0x58
001028 3ee9      	CPI  R30,LOW(0xE9)
001029 e0a0      	LDI  R26,HIGH(0xE9)
00102a 07fa      	CPC  R31,R26
00102b f024      	BRLT _0x157
00102c 940e 16ee 	CALL SUBOPT_0x57
00102e 940e 1724 	CALL SUBOPT_0x5E
                 ; 0000 02B2                 if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x157:
001030 940e 16ee 	CALL SUBOPT_0x57
001032 940e 16f5 	CALL SUBOPT_0x58
001034 97ba      	SBIW R30,42
001035 f424      	BRGE _0x158
001036 940e 16ee 	CALL SUBOPT_0x57
001038 940e 172b 	CALL SUBOPT_0x5F
                 ; 0000 02B3 
                 ; 0000 02B4                 if(Graph_X >= Graph_X_Min)
                 _0x158:
00103a 91a0 07b2 	LDS  R26,_Graph_X+1
00103c 23aa      	TST  R26
00103d f092      	BRMI _0x159
                 ; 0000 02B5                 {   // пишем точку в столбце
                 ; 0000 02B6                     SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
00103e 940e 16de 	CALL SUBOPT_0x53
001040 940e 1732 	CALL SUBOPT_0x60
001042 940e 16f5 	CALL SUBOPT_0x58
001044 940e 1739 	CALL SUBOPT_0x61
001046 940e 173e 	CALL SUBOPT_0x62
001048 940e 1739 	CALL SUBOPT_0x61
00104a 940e 1743 	CALL SUBOPT_0x63
00104c 940e 163b 	CALL SUBOPT_0x37
00104e 940e 08cc 	CALL _SSD1963_DrawLine
                 ; 0000 02B7                 }
                 ; 0000 02B8                     // определяем предыдущую точку диограммы
                 ; 0000 02B9                     ValueLast[i] = Value[i];
                 _0x159:
001050 940e 1732 	CALL SUBOPT_0x60
001052 0fea      	ADD  R30,R26
001053 1ffb      	ADC  R31,R27
001054 010f      	MOVW R0,R30
001055 940e 16ee 	CALL SUBOPT_0x57
001057 940e 16f5 	CALL SUBOPT_0x58
001059 01d0      	MOVW R26,R0
00105a 93ed      	ST   X+,R30
00105b 93fc      	ST   X,R31
                 ; 0000 02BA             }
00105c 5f5f      	SUBI R21,-1
00105d cf8d      	RJMP _0x151
                 _0x152:
                 ; 0000 02BB             Graph_X += Graph_X_Step; // увеличеваем Х диограммы
00105e 940e 16c8 	CALL SUBOPT_0x50
001060 9636      	ADIW R30,6
001061 940e 16c3 	CALL SUBOPT_0x4F
                 ; 0000 02BC         }
001063 5f4f      	SUBI R20,-1
001064 cf68      	RJMP _0x149
                 _0x14A:
                 ; 0000 02BD     }
                 _0x147:
                 ; 0000 02BE }
                 _0x2080002:
001065 940e 197a 	CALL __LOADLOCR6
001067 9662      	ADIW R28,18
001068 9508      	RET
                 ;
                 ;//Функция посылающаа управление куда подальше
                 ;void TestParameterFun(char a, char b, char c, char fHz)
                 ; 0000 02C2 {
                 _TestParameterFun:
                 ; 0000 02C3     RS485 = 1; //Передача
                 ;	a -> Y+3
                 ;	b -> Y+2
                 ;	c -> Y+1
                 ;	fHz -> Y+0
001069 9a94      	SBI  0x12,4
                 ; 0000 02C4     if(b > 110) printf("Напругу убавь \n");
00106a 81aa      	LDD  R26,Y+2
00106b 36af      	CPI  R26,LOW(0x6F)
00106c f020      	BRLO _0x15C
                +
00106d e6e5     +LDI R30 , LOW ( 2 * _0x0 + ( 125 ) )
00106e e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW1FN _0x0,125
00106f 940e 1748 	CALL SUBOPT_0x64
                 ; 0000 02C5     if(b < 90)  printf("Напруги прибавь \n");
                 _0x15C:
001071 81aa      	LDD  R26,Y+2
001072 35aa      	CPI  R26,LOW(0x5A)
001073 f420      	BRSH _0x15D
                +
001074 e7e5     +LDI R30 , LOW ( 2 * _0x0 + ( 141 ) )
001075 e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 141 ) )
                 	__POINTW1FN _0x0,141
001076 940e 1748 	CALL SUBOPT_0x64
                 ; 0000 02C6     if(fHz < 50)printf("Поддай оборотов \n");
                 _0x15D:
001078 81a8      	LD   R26,Y
001079 33a2      	CPI  R26,LOW(0x32)
00107a f420      	BRSH _0x15E
                +
00107b e8e7     +LDI R30 , LOW ( 2 * _0x0 + ( 159 ) )
00107c e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW1FN _0x0,159
00107d 940e 1748 	CALL SUBOPT_0x64
                 ; 0000 02C7     if(fHz > 50)printf("Не гони, помедленнее \n");
                 _0x15E:
00107f 81a8      	LD   R26,Y
001080 33a3      	CPI  R26,LOW(0x33)
001081 f020      	BRLO _0x15F
                +
001082 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 177 ) )
001083 e0f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 177 ) )
                 	__POINTW1FN _0x0,177
001084 940e 1748 	CALL SUBOPT_0x64
                 ; 0000 02C8 }
                 _0x15F:
001086 c183      	RJMP _0x2080001
                 ;
                 ;inline void main_loop()  // основной рабочий режим
                 ; 0000 02CB {
                 _main_loop:
                 ; 0000 02CC     char fHz, a, b, c;
                 ; 0000 02CD 
                 ; 0000 02CE             switch(ValueState)
001087 940e 1975 	CALL __SAVELOCR4
                 ;	fHz -> R17
                 ;	a -> R16
                 ;	b -> R19
                 ;	c -> R18
001089 91e0 07a6 	LDS  R30,_ValueState
00108b 940e 1660 	CALL SUBOPT_0x3E
                 ; 0000 02CF             {
                 ; 0000 02D0                 case 0:
00108d f011      	BREQ PC+3
00108e 940c 10dc 	JMP _0x163
                 ; 0000 02D1                   if(ValueUpd_mSec > 400) //Надо обновить значения, но как?
001090 91a0 07ab 	LDS  R26,_ValueUpd_mSec
001092 91b0 07ac 	LDS  R27,_ValueUpd_mSec+1
001094 39a1      	CPI  R26,LOW(0x191)
001095 e0e1      	LDI  R30,HIGH(0x191)
001096 07be      	CPC  R27,R30
001097 f078      	BRLO _0x164
                 ; 0000 02D2                   {
                 ; 0000 02D3                       if(ValueState < 2)
001098 91a0 07a6 	LDS  R26,_ValueState
00109a 30a2      	CPI  R26,LOW(0x2)
00109b f458      	BRSH _0x165
                 ; 0000 02D4                       {
                 ; 0000 02D5                           putchar2('S');
00109c e5e3      	LDI  R30,LOW(83)
00109d 93ea      	ST   -Y,R30
00109e dac2      	RCALL _putchar2
                 ; 0000 02D6                           ValueState = 1;
00109f e0e1      	LDI  R30,LOW(1)
0010a0 93e0 07a6 	STS  _ValueState,R30
                 ; 0000 02D7                           ValueUpd_mSec = 0;
0010a2 e0e0      	LDI  R30,LOW(0)
0010a3 93e0 07ab 	STS  _ValueUpd_mSec,R30
0010a5 93e0 07ac 	STS  _ValueUpd_mSec+1,R30
                 ; 0000 02D8                       }
                 ; 0000 02D9                   }
                 _0x165:
                 ; 0000 02DA                   if(GraphState == 0 && State == 0 && ValueState == 0) //Надо обновить график
                 _0x164:
0010a7 91a0 07a7 	LDS  R26,_GraphState
0010a9 30a0      	CPI  R26,LOW(0x0)
0010aa f441      	BRNE _0x167
0010ab 91a0 07a4 	LDS  R26,_State
0010ad 30a0      	CPI  R26,LOW(0x0)
0010ae f421      	BRNE _0x167
0010af 91a0 07a6 	LDS  R26,_ValueState
0010b1 30a0      	CPI  R26,LOW(0x0)
0010b2 f009      	BREQ _0x168
                 _0x167:
0010b3 c027      	RJMP _0x166
                 _0x168:
                 ; 0000 02DB                   {
                 ; 0000 02DC                       StartPaint();
0010b4 dde1      	RCALL _StartPaint
                 ; 0000 02DD                       while(rx_counter0) getchar0();
                 _0x169:
0010b5 91e0 0732 	LDS  R30,_rx_counter0
0010b7 30e0      	CPI  R30,0
0010b8 f019      	BREQ _0x16B
0010b9 940e 0af2 	CALL _getchar0
0010bb cff9      	RJMP _0x169
                 _0x16B:
                 ; 0000 02DE switch(ParameterState)
0010bc 91e0 07a5 	LDS  R30,_ParameterState
0010be 940e 1660 	CALL SUBOPT_0x3E
                 ; 0000 02DF                       {
                 ; 0000 02E0                           case 0: putchar0('U'); break;
0010c0 f411      	BRNE _0x16F
0010c1 e5e5      	LDI  R30,LOW(85)
0010c2 c00b      	RJMP _0x1B4
                 ; 0000 02E1                           case 1: putchar0('I'); break;
                 _0x16F:
0010c3 30e1      	CPI  R30,LOW(0x1)
0010c4 e0a0      	LDI  R26,HIGH(0x1)
0010c5 07fa      	CPC  R31,R26
0010c6 f411      	BRNE _0x170
0010c7 e4e9      	LDI  R30,LOW(73)
0010c8 c005      	RJMP _0x1B4
                 ; 0000 02E2                           case 2: putchar0('Z'); break;
                 _0x170:
0010c9 30e2      	CPI  R30,LOW(0x2)
0010ca e0a0      	LDI  R26,HIGH(0x2)
0010cb 07fa      	CPC  R31,R26
0010cc f419      	BRNE _0x16E
0010cd e5ea      	LDI  R30,LOW(90)
                 _0x1B4:
0010ce 93ea      	ST   -Y,R30
0010cf da8d      	RCALL _putchar0
                 ; 0000 02E3                       }
                 _0x16E:
                 ; 0000 02E4                       ValueState = 2;
0010d0 e0e2      	LDI  R30,LOW(2)
0010d1 93e0 07a6 	STS  _ValueState,R30
                 ; 0000 02E5                       GraphState = 1;
0010d3 e0e1      	LDI  R30,LOW(1)
0010d4 93e0 07a7 	STS  _GraphState,R30
                 ; 0000 02E6                       GraphUpd_mSec = 0;
0010d6 e0e0      	LDI  R30,LOW(0)
0010d7 93e0 07ad 	STS  _GraphUpd_mSec,R30
0010d9 93e0 07ae 	STS  _GraphUpd_mSec+1,R30
                 ; 0000 02E7                   }
                 ; 0000 02E8                 break;
                 _0x166:
0010db c054      	RJMP _0x162
                 ; 0000 02E9                 case 1:
                 _0x163:
0010dc 30e1      	CPI  R30,LOW(0x1)
0010dd e0a0      	LDI  R26,HIGH(0x1)
0010de 07fa      	CPC  R31,R26
0010df f011      	BREQ PC+3
0010e0 940c 1121 	JMP _0x172
                 ; 0000 02EA                   if(rx_counter2 > 8)
0010e2 91a0 062e 	LDS  R26,_rx_counter2
0010e4 30a9      	CPI  R26,LOW(0x9)
0010e5 f1d0      	BRLO _0x173
                 ; 0000 02EB                   {
                 ; 0000 02EC                       fHz = getchar2();
0010e6 940e 0b07 	CALL _getchar2
0010e8 2f1e      	MOV  R17,R30
                 ; 0000 02ED                       a = getchar2();
0010e9 940e 174f 	CALL SUBOPT_0x65
                 ; 0000 02EE                       b = getchar2();
                 ; 0000 02EF                       c = getchar2();
                 ; 0000 02F0                       TestParameterFun(a, b, c, fHz);
0010eb 930a      	ST   -Y,R16
0010ec 933a      	ST   -Y,R19
0010ed 932a      	ST   -Y,R18
0010ee 931a      	ST   -Y,R17
0010ef df79      	RCALL _TestParameterFun
                 ; 0000 02F1 
                 ; 0000 02F2                       if(State == 0) //Надо обновить значения на дисплее
0010f0 91e0 07a4 	LDS  R30,_State
0010f2 30e0      	CPI  R30,0
0010f3 f511      	BRNE _0x174
                 ; 0000 02F3                       {
                 ; 0000 02F4                         switch(ParameterState)
0010f4 91e0 07a5 	LDS  R30,_ParameterState
0010f6 e0f0      	LDI  R31,0
                 ; 0000 02F5                         {
                 ; 0000 02F6                           case 2:
0010f7 30e2      	CPI  R30,LOW(0x2)
0010f8 e0a0      	LDI  R26,HIGH(0x2)
0010f9 07fa      	CPC  R31,R26
0010fa f469      	BRNE _0x178
                 ; 0000 02F7                               {
                 ; 0000 02F8                               getchar2();
0010fb 940e 0b07 	CALL _getchar2
                 ; 0000 02F9                               getchar2();
0010fd 940e 0b07 	CALL _getchar2
                 ; 0000 02FA                               getchar2();
0010ff 940e 0b07 	CALL _getchar2
                 ; 0000 02FB                               }
                 ; 0000 02FC                               a = getchar2();
001101 940e 0b07 	CALL _getchar2
001103 2f0e      	MOV  R16,R30
                 ; 0000 02FD                               b = getchar2();
001104 940e 0b07 	CALL _getchar2
001106 2f3e      	MOV  R19,R30
                 ; 0000 02FE                               PutParameterValue(a, b, c, fHz);
001107 c009      	RJMP _0x1B5
                 ; 0000 02FF                           break;
                 ; 0000 0300                           case 1:
                 _0x178:
001108 30e1      	CPI  R30,LOW(0x1)
001109 e0a0      	LDI  R26,HIGH(0x1)
00110a 07fa      	CPC  R31,R26
00110b f419      	BRNE _0x179
                 ; 0000 0301                               a = getchar2();
00110c 940e 174f 	CALL SUBOPT_0x65
                 ; 0000 0302                               b = getchar2();
                 ; 0000 0303                               c = getchar2();
                 ; 0000 0304                           case 0:
00110e c002      	RJMP _0x17A
                 _0x179:
00110f 9730      	SBIW R30,0
001110 f429      	BRNE _0x177
                 _0x17A:
                 ; 0000 0305                               PutParameterValue(a, b, c, fHz);
                 _0x1B5:
001111 930a      	ST   -Y,R16
001112 933a      	ST   -Y,R19
001113 932a      	ST   -Y,R18
001114 931a      	ST   -Y,R17
001115 dd1f      	RCALL _PutParameterValue
                 ; 0000 0306                           break;
                 ; 0000 0307                         }
                 _0x177:
                 ; 0000 0308                       }
                 ; 0000 0309 
                 ; 0000 030A                       while(rx_counter2) getchar2();
                 _0x174:
                 _0x17C:
001116 91e0 062e 	LDS  R30,_rx_counter2
001118 30e0      	CPI  R30,0
001119 f019      	BREQ _0x17E
00111a 940e 0b07 	CALL _getchar2
00111c cff9      	RJMP _0x17C
                 _0x17E:
                 ; 0000 030B ValueState = 0;
00111d e0e0      	LDI  R30,LOW(0)
00111e 93e0 07a6 	STS  _ValueState,R30
                 ; 0000 030C                   }
                 ; 0000 030D                 break;
                 _0x173:
001120 c00f      	RJMP _0x162
                 ; 0000 030E                 case 2:
                 _0x172:
001121 30e2      	CPI  R30,LOW(0x2)
001122 e0a0      	LDI  R26,HIGH(0x2)
001123 07fa      	CPC  R31,R26
001124 f459      	BRNE _0x162
                 ; 0000 030F                     if(GraphUpd_mSec > 200)
001125 91a0 07ad 	LDS  R26,_GraphUpd_mSec
001127 91b0 07ae 	LDS  R27,_GraphUpd_mSec+1
001129 3ca9      	CPI  R26,LOW(0xC9)
00112a e0e0      	LDI  R30,HIGH(0xC9)
00112b 07be      	CPC  R27,R30
00112c f018      	BRLO _0x180
                 ; 0000 0310                     {
                 ; 0000 0311                         ValueState = 0;
00112d e0e0      	LDI  R30,LOW(0)
00112e 93e0 07a6 	STS  _ValueState,R30
                 ; 0000 0312                     }
                 ; 0000 0313                 break;
                 _0x180:
                 ; 0000 0314             }
                 _0x162:
                 ; 0000 0315 
                 ; 0000 0316             switch(State)
001130 91e0 07a4 	LDS  R30,_State
001132 940e 1660 	CALL SUBOPT_0x3E
                 ; 0000 0317             {
                 ; 0000 0318                 case 0: // основной рабочий режим
001134 f011      	BREQ PC+3
001135 940c 1187 	JMP _0x184
                 ; 0000 0319                 {
                 ; 0000 031A                       if(GraphState) Paint_Phase(); //Рисуем график
001137 91e0 07a7 	LDS  R30,_GraphState
001139 30e0      	CPI  R30,0
00113a f009      	BREQ _0x185
00113b dd5f      	RCALL _Paint_Phase
                 ; 0000 031B 
                 ; 0000 031C                       switch (GetButton())
                 _0x185:
00113c db61      	RCALL _GetButton
                 ; 0000 031D                       {
                 ; 0000 031E                           case 1:  //Переключение графиков
00113d 30e1      	CPI  R30,LOW(0x1)
00113e f479      	BRNE _0x189
                 ; 0000 031F                               if(++ParameterState > 2) ParameterState = 0;
00113f 91a0 07a5 	LDS  R26,_ParameterState
001141 5faf      	SUBI R26,-LOW(1)
001142 93a0 07a5 	STS  _ParameterState,R26
001144 30a3      	CPI  R26,LOW(0x3)
001145 f018      	BRLO _0x18A
001146 e0e0      	LDI  R30,LOW(0)
001147 93e0 07a5 	STS  _ParameterState,R30
                 ; 0000 0320                               PutParameterText(ParameterState, BLUE);
                 _0x18A:
001149 940e 1759 	CALL SUBOPT_0x66
                 ; 0000 0321                               delay_ms(100);
00114b e6e4      	LDI  R30,LOW(100)
00114c e0f0      	LDI  R31,HIGH(100)
00114d c034      	RJMP _0x1B6
                 ; 0000 0322                           break;
                 ; 0000 0323                           case 2:
                 _0x189:
00114e 30e2      	CPI  R30,LOW(0x2)
00114f f481      	BRNE _0x18B
                 ; 0000 0324                               if(Amplitude[ParameterState] < 200)
001150 940e 1762 	CALL SUBOPT_0x67
001152 940e 16f5 	CALL SUBOPT_0x58
001154 3ce8      	CPI  R30,LOW(0xC8)
001155 e0a0      	LDI  R26,HIGH(0xC8)
001156 07fa      	CPC  R31,R26
001157 f43c      	BRGE _0x18C
                 ; 0000 0325                               {
                 ; 0000 0326                                   Amplitude[ParameterState] += 10;
001158 940e 1762 	CALL SUBOPT_0x67
00115a 940e 1718 	CALL SUBOPT_0x5C
00115c 963a      	ADIW R30,10
00115d 940e 176a 	CALL SUBOPT_0x68
                 ; 0000 0327                                   delay_ms(20);
                 ; 0000 0328                               }
                 ; 0000 0329                           break;
                 _0x18C:
00115f c026      	RJMP _0x188
                 ; 0000 032A                           case 3 :
                 _0x18B:
001160 30e3      	CPI  R30,LOW(0x3)
001161 f471      	BRNE _0x18D
                 ; 0000 032B                               if(Amplitude[ParameterState] > 20)
001162 940e 1762 	CALL SUBOPT_0x67
001164 940e 16f5 	CALL SUBOPT_0x58
001166 9775      	SBIW R30,21
001167 f03c      	BRLT _0x18E
                 ; 0000 032C                               {
                 ; 0000 032D                                   Amplitude[ParameterState] -= 10;
001168 940e 1762 	CALL SUBOPT_0x67
00116a 940e 1718 	CALL SUBOPT_0x5C
00116c 973a      	SBIW R30,10
00116d 940e 176a 	CALL SUBOPT_0x68
                 ; 0000 032E                                   delay_ms(20);
                 ; 0000 032F                               }
                 ; 0000 0330                           break;
                 _0x18E:
00116f c016      	RJMP _0x188
                 ; 0000 0331                           case 4 :  //Уходим в настройки
                 _0x18D:
001170 30e4      	CPI  R30,LOW(0x4)
001171 f4a1      	BRNE _0x188
                 ; 0000 0332                               State = 5;
001172 e0e5      	LDI  R30,LOW(5)
001173 93e0 07a4 	STS  _State,R30
                 ; 0000 0333                               ConfigState = 0;
001175 e0e0      	LDI  R30,LOW(0)
001176 93e0 07a8 	STS  _ConfigState,R30
                 ; 0000 0334                               Repaint_Button("СТАРТ", 4, BLACK, WHITE);
                +
001178 ede6     +LDI R30 , LOW ( _0x190 + ( 0 ) )
001179 e0f5     +LDI R31 , HIGH ( _0x190 + ( 0 ) )
                 	__POINTW1MN _0x190,0
00117a 940e 1640 	CALL SUBOPT_0x38
00117c 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 0335                               PutParameterText(ConfigState + State, PURPLE);
00117e 940e 176f 	CALL SUBOPT_0x69
                 ; 0000 0336                               delay_ms(200);
001180 ece8      	LDI  R30,LOW(200)
001181 e0f0      	LDI  R31,HIGH(200)
                 _0x1B6:
001182 93fa      	ST   -Y,R31
001183 93ea      	ST   -Y,R30
001184 940e 17bc 	CALL _delay_ms
                 ; 0000 0337                           break;
                 ; 0000 0338                       }
                 _0x188:
                 ; 0000 0339                 }
                 ; 0000 033A                 break;
001186 c081      	RJMP _0x183
                 ; 0000 033B                 case 5: // настройки
                 _0x184:
001187 30e5      	CPI  R30,LOW(0x5)
001188 e0a0      	LDI  R26,HIGH(0x5)
001189 07fa      	CPC  R31,R26
00118a f011      	BREQ PC+3
00118b 940c 11e1 	JMP _0x191
                 ; 0000 033C                 {
                 ; 0000 033D                     switch (GetButton())
00118d db10      	RCALL _GetButton
                 ; 0000 033E                     {
                 ; 0000 033F                         case 1:
00118e 30e1      	CPI  R30,LOW(0x1)
00118f f479      	BRNE _0x195
                 ; 0000 0340                             if(++ConfigState > 2) ConfigState = 0;
001190 91a0 07a8 	LDS  R26,_ConfigState
001192 5faf      	SUBI R26,-LOW(1)
001193 93a0 07a8 	STS  _ConfigState,R26
001195 30a3      	CPI  R26,LOW(0x3)
001196 f018      	BRLO _0x196
001197 e0e0      	LDI  R30,LOW(0)
001198 93e0 07a8 	STS  _ConfigState,R30
                 ; 0000 0341                             PutParameterText(ConfigState + State, PURPLE);
                 _0x196:
00119a 940e 176f 	CALL SUBOPT_0x69
                 ; 0000 0342                             delay_ms(100);
00119c e6e4      	LDI  R30,LOW(100)
00119d e0f0      	LDI  R31,HIGH(100)
00119e c03d      	RJMP _0x1B7
                 ; 0000 0343                         break;
                 ; 0000 0344                         case 2:
                 _0x195:
00119f 30e2      	CPI  R30,LOW(0x2)
0011a0 f4b1      	BRNE _0x197
                 ; 0000 0345                              if(Amplitude[ConfigState] < 200)
0011a1 940e 177b 	CALL SUBOPT_0x6A
0011a3 940e 16f5 	CALL SUBOPT_0x58
0011a5 3ce8      	CPI  R30,LOW(0xC8)
0011a6 e0a0      	LDI  R26,HIGH(0xC8)
0011a7 07fa      	CPC  R31,R26
0011a8 f46c      	BRGE _0x198
                 ; 0000 0346                               {
                 ; 0000 0347                                   Amplitude[ConfigState] += 10;
0011a9 940e 177b 	CALL SUBOPT_0x6A
0011ab 940e 1718 	CALL SUBOPT_0x5C
0011ad 963a      	ADIW R30,10
0011ae 93fe      	ST   -X,R31
0011af 93ee      	ST   -X,R30
                 ; 0000 0348                                   PutParameterText(ConfigState + State, PURPLE);
0011b0 940e 176f 	CALL SUBOPT_0x69
                 ; 0000 0349                                   delay_ms(20);
0011b2 e1e4      	LDI  R30,LOW(20)
0011b3 e0f0      	LDI  R31,HIGH(20)
0011b4 940e 14b5 	CALL SUBOPT_0x9
                 ; 0000 034A                               }
                 ; 0000 034B                         break;
                 _0x198:
0011b6 c029      	RJMP _0x194
                 ; 0000 034C                         case 3:
                 _0x197:
0011b7 30e3      	CPI  R30,LOW(0x3)
0011b8 f4a1      	BRNE _0x199
                 ; 0000 034D                               if(Amplitude[ConfigState] > 20)
0011b9 940e 177b 	CALL SUBOPT_0x6A
0011bb 940e 16f5 	CALL SUBOPT_0x58
0011bd 9775      	SBIW R30,21
0011be f06c      	BRLT _0x19A
                 ; 0000 034E                               {
                 ; 0000 034F                                   Amplitude[ConfigState] -= 10;
0011bf 940e 177b 	CALL SUBOPT_0x6A
0011c1 940e 1718 	CALL SUBOPT_0x5C
0011c3 973a      	SBIW R30,10
0011c4 93fe      	ST   -X,R31
0011c5 93ee      	ST   -X,R30
                 ; 0000 0350                                   PutParameterText(ConfigState + State, PURPLE);
0011c6 940e 176f 	CALL SUBOPT_0x69
                 ; 0000 0351                                   delay_ms(20);
0011c8 e1e4      	LDI  R30,LOW(20)
0011c9 e0f0      	LDI  R31,HIGH(20)
0011ca 940e 14b5 	CALL SUBOPT_0x9
                 ; 0000 0352                               }
                 ; 0000 0353                         break;
                 _0x19A:
0011cc c013      	RJMP _0x194
                 ; 0000 0354                         case 4:
                 _0x199:
0011cd 30e4      	CPI  R30,LOW(0x4)
0011ce f489      	BRNE _0x194
                 ; 0000 0355                             State = 0;
0011cf e0e0      	LDI  R30,LOW(0)
0011d0 93e0 07a4 	STS  _State,R30
                 ; 0000 0356                             Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
0011d2 edec     +LDI R30 , LOW ( _0x190 + ( 6 ) )
0011d3 e0f5     +LDI R31 , HIGH ( _0x190 + ( 6 ) )
                 	__POINTW1MN _0x190,6
0011d4 940e 1640 	CALL SUBOPT_0x38
0011d6 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 0357                             PutParameterText(ParameterState, BLUE);
0011d8 940e 1759 	CALL SUBOPT_0x66
                 ; 0000 0358                             delay_ms(200);
0011da ece8      	LDI  R30,LOW(200)
0011db e0f0      	LDI  R31,HIGH(200)
                 _0x1B7:
0011dc 93fa      	ST   -Y,R31
0011dd 93ea      	ST   -Y,R30
0011de 940e 17bc 	CALL _delay_ms
                 ; 0000 0359                         break;
                 ; 0000 035A                     }
                 _0x194:
                 ; 0000 035B                 }
                 ; 0000 035C                 break;
0011e0 c027      	RJMP _0x183
                 ; 0000 035D                 case 200 : // пауза
                 _0x191:
0011e1 3ce8      	CPI  R30,LOW(0xC8)
0011e2 e0a0      	LDI  R26,HIGH(0xC8)
0011e3 07fa      	CPC  R31,R26
0011e4 f4b9      	BRNE _0x19C
                 ; 0000 035E                 //Sleep_mSec = 0;
                 ; 0000 035F                     switch (GetButton())
0011e5 dab8      	RCALL _GetButton
                 ; 0000 0360                     {
                 ; 0000 0361                         case 1:
0011e6 30e1      	CPI  R30,LOW(0x1)
0011e7 f099      	BREQ _0x19F
                 ; 0000 0362                         break;
                 ; 0000 0363                         case 2:
0011e8 30e2      	CPI  R30,LOW(0x2)
0011e9 f089      	BREQ _0x19F
                 ; 0000 0364                         break;
                 ; 0000 0365                         case 3:
0011ea 30e3      	CPI  R30,LOW(0x3)
0011eb f079      	BREQ _0x19F
                 ; 0000 0366                         break;
                 ; 0000 0367                         case 4:
0011ec 30e4      	CPI  R30,LOW(0x4)
0011ed f469      	BRNE _0x19F
                 ; 0000 0368                             State = 0;
0011ee e0e0      	LDI  R30,LOW(0)
0011ef 93e0 07a4 	STS  _State,R30
                 ; 0000 0369                             Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
0011f1 eee2     +LDI R30 , LOW ( _0x190 + ( 12 ) )
0011f2 e0f5     +LDI R31 , HIGH ( _0x190 + ( 12 ) )
                 	__POINTW1MN _0x190,12
0011f3 940e 1640 	CALL SUBOPT_0x38
0011f5 940e 1635 	CALL SUBOPT_0x36
                 ; 0000 036A                             delay_ms(250);
0011f7 efea      	LDI  R30,LOW(250)
0011f8 e0f0      	LDI  R31,HIGH(250)
0011f9 940e 14b5 	CALL SUBOPT_0x9
                 ; 0000 036B                         break;
                 ; 0000 036C                     }
                 _0x19F:
                 ; 0000 036D 
                 ; 0000 036E                 break;
0011fb c00c      	RJMP _0x183
                 ; 0000 036F                 case 250 : // сп¤щий режим
                 _0x19C:
0011fc 3fea      	CPI  R30,LOW(0xFA)
0011fd e0a0      	LDI  R26,HIGH(0xFA)
0011fe 07fa      	CPC  R31,R26
0011ff f441      	BRNE _0x183
                 ; 0000 0370                 {
                 ; 0000 0371                     if (TSC2046_GetCoordinates() > 0)
001200 940e 0a27 	CALL _TSC2046_GetCoordinates
001202 30e1      	CPI  R30,LOW(0x1)
001203 f020      	BRLO _0x1A5
                 ; 0000 0372                     {
                 ; 0000 0373                         State = 0;
001204 e0e0      	LDI  R30,LOW(0)
001205 93e0 07a4 	STS  _State,R30
                 ; 0000 0374                         BACKLIGHT = 0; //On
001207 98c7      	CBI  0x18,7
                 ; 0000 0375                     }
                 ; 0000 0376                 }
                 _0x1A5:
                 ; 0000 0377                 break;
                 ; 0000 0378             }
                 _0x183:
                 ; 0000 0379 }
001208 940e 197c 	CALL __LOADLOCR4
                 _0x2080001:
00120a 9624      	ADIW R28,4
00120b 9508      	RET
                 
                 	.DSEG
                 _0x190:
0005d6           	.BYTE 0x12
                 ;
                 ;// Timer 0 overflow interrupt 1 ms
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 037D {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00120c 93aa      	ST   -Y,R26
00120d 93ba      	ST   -Y,R27
00120e 93ea      	ST   -Y,R30
00120f 93fa      	ST   -Y,R31
001210 b7ef      	IN   R30,SREG
001211 93ea      	ST   -Y,R30
                 ; 0000 037E // Reinitialize Timer 0 value
                 ; 0000 037F TCNT0=0x06;
001212 e0e6      	LDI  R30,LOW(6)
001213 bfe2      	OUT  0x32,R30
                 ; 0000 0380 // Place your code here
                 ; 0000 0381 WaitADC_mSec++;
001214 eaa9      	LDI  R26,LOW(_WaitADC_mSec)
001215 e0b7      	LDI  R27,HIGH(_WaitADC_mSec)
001216 940e 1783 	CALL SUBOPT_0x6B
                 ; 0000 0382 ValueUpd_mSec++;
001218 eaab      	LDI  R26,LOW(_ValueUpd_mSec)
001219 e0b7      	LDI  R27,HIGH(_ValueUpd_mSec)
00121a 940e 1783 	CALL SUBOPT_0x6B
                 ; 0000 0383 GraphUpd_mSec++;
00121c eaad      	LDI  R26,LOW(_GraphUpd_mSec)
00121d e0b7      	LDI  R27,HIGH(_GraphUpd_mSec)
00121e 940e 1783 	CALL SUBOPT_0x6B
                 ; 0000 0384 }
001220 91e9      	LD   R30,Y+
001221 bfef      	OUT  SREG,R30
001222 91f9      	LD   R31,Y+
001223 91e9      	LD   R30,Y+
001224 91b9      	LD   R27,Y+
001225 91a9      	LD   R26,Y+
001226 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0389 {
                 _main:
                 ; 0000 038A // Declare your local variables here
                 ; 0000 038B {
                 ; 0000 038C // Input/Output Ports initialization
                 ; 0000 038D // Port A initialization
                 ; 0000 038E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 038F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0390 PORTA=0x00;
001227 e0e0      	LDI  R30,LOW(0)
001228 bbeb      	OUT  0x1B,R30
                 ; 0000 0391 DDRA=0x00;
001229 bbea      	OUT  0x1A,R30
                 ; 0000 0392 
                 ; 0000 0393 // Port B initialization
                 ; 0000 0394 // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 0395 // State7=1 State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
                 ; 0000 0396 PORTB=0x80;
00122a e8e0      	LDI  R30,LOW(128)
00122b bbe8      	OUT  0x18,R30
                 ; 0000 0397 DDRB=0x87;
00122c e8e7      	LDI  R30,LOW(135)
00122d bbe7      	OUT  0x17,R30
                 ; 0000 0398 
                 ; 0000 0399 // Port C initialization
                 ; 0000 039A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 039B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 039C PORTC=0x00;
00122e e0e0      	LDI  R30,LOW(0)
00122f bbe5      	OUT  0x15,R30
                 ; 0000 039D DDRC=0x00;
001230 bbe4      	OUT  0x14,R30
                 ; 0000 039E 
                 ; 0000 039F // Port D initialization
                 ; 0000 03A0 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03A1 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 03A2 PORTD=0x00;
001231 bbe2      	OUT  0x12,R30
                 ; 0000 03A3 DDRD=0x10;
001232 e1e0      	LDI  R30,LOW(16)
001233 bbe1      	OUT  0x11,R30
                 ; 0000 03A4 
                 ; 0000 03A5 // Port E initialization
                 ; 0000 03A6 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03A7 // State7=T State6=T State5=T State4=1 State3=T State2=T State1=T State0=T
                 ; 0000 03A8 PORTE=0x10;
001234 b9e3      	OUT  0x3,R30
                 ; 0000 03A9 DDRE=0x10;  //PE4 - CD off
001235 b9e2      	OUT  0x2,R30
                 ; 0000 03AA 
                 ; 0000 03AB // Port F initialization
                 ; 0000 03AC // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03AD // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03AE PORTF=0x00;
001236 e0e0      	LDI  R30,LOW(0)
001237 93e0 0062 	STS  98,R30
                 ; 0000 03AF DDRF=0x00;
001239 93e0 0061 	STS  97,R30
                 ; 0000 03B0 
                 ; 0000 03B1 // Port G initialization
                 ; 0000 03B2 // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 03B3 // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 03B4 PORTG=0x00;
00123b 93e0 0065 	STS  101,R30
                 ; 0000 03B5 DDRG=0x00;
00123d 93e0 0064 	STS  100,R30
                 ; 0000 03B6 
                 ; 0000 03B7 // Timer/Counter 0 initialization
                 ; 0000 03B8 // Clock source: System Clock
                 ; 0000 03B9 // Clock value: 250,000 kHz
                 ; 0000 03BA // Mode: Normal top=0xFF
                 ; 0000 03BB // OC0 output: Disconnected
                 ; 0000 03BC ASSR=0x00;
00123f bfe0      	OUT  0x30,R30
                 ; 0000 03BD TCCR0=0x04;
001240 e0e4      	LDI  R30,LOW(4)
001241 bfe3      	OUT  0x33,R30
                 ; 0000 03BE TCNT0=0x06;
001242 e0e6      	LDI  R30,LOW(6)
001243 bfe2      	OUT  0x32,R30
                 ; 0000 03BF OCR0=0x00;
001244 e0e0      	LDI  R30,LOW(0)
001245 bfe1      	OUT  0x31,R30
                 ; 0000 03C0 
                 ; 0000 03C1 // Timer/Counter 1 initialization
                 ; 0000 03C2 // Clock source: System Clock
                 ; 0000 03C3 // Clock value: Timer1 Stopped
                 ; 0000 03C4 // Mode: Normal top=0xFFFF
                 ; 0000 03C5 // OC1A output: Discon.
                 ; 0000 03C6 // OC1B output: Discon.
                 ; 0000 03C7 // OC1C output: Discon.
                 ; 0000 03C8 // Noise Canceler: Off
                 ; 0000 03C9 // Input Capture on Falling Edge
                 ; 0000 03CA // Timer1 Overflow Interrupt: Off
                 ; 0000 03CB // Input Capture Interrupt: Off
                 ; 0000 03CC // Compare A Match Interrupt: Off
                 ; 0000 03CD // Compare B Match Interrupt: Off
                 ; 0000 03CE // Compare C Match Interrupt: Off
                 ; 0000 03CF TCCR1A=0x00;
001246 bdef      	OUT  0x2F,R30
                 ; 0000 03D0 TCCR1B=0x00;
001247 bdee      	OUT  0x2E,R30
                 ; 0000 03D1 TCNT1H=0x00;
001248 bded      	OUT  0x2D,R30
                 ; 0000 03D2 TCNT1L=0x00;
001249 bdec      	OUT  0x2C,R30
                 ; 0000 03D3 ICR1H=0x00;
00124a bde7      	OUT  0x27,R30
                 ; 0000 03D4 ICR1L=0x00;
00124b bde6      	OUT  0x26,R30
                 ; 0000 03D5 OCR1AH=0x00;
00124c bdeb      	OUT  0x2B,R30
                 ; 0000 03D6 OCR1AL=0x00;
00124d bdea      	OUT  0x2A,R30
                 ; 0000 03D7 OCR1BH=0x00;
00124e bde9      	OUT  0x29,R30
                 ; 0000 03D8 OCR1BL=0x00;
00124f bde8      	OUT  0x28,R30
                 ; 0000 03D9 OCR1CH=0x00;
001250 93e0 0079 	STS  121,R30
                 ; 0000 03DA OCR1CL=0x00;
001252 93e0 0078 	STS  120,R30
                 ; 0000 03DB 
                 ; 0000 03DC // Timer/Counter 2 initialization
                 ; 0000 03DD // Clock source: System Clock
                 ; 0000 03DE // Clock value: Timer2 Stopped
                 ; 0000 03DF // Mode: Normal top=0xFF
                 ; 0000 03E0 // OC2 output: Disconnected
                 ; 0000 03E1 TCCR2=0x00;
001254 bde5      	OUT  0x25,R30
                 ; 0000 03E2 TCNT2=0x00;
001255 bde4      	OUT  0x24,R30
                 ; 0000 03E3 OCR2=0x00;
001256 bde3      	OUT  0x23,R30
                 ; 0000 03E4 
                 ; 0000 03E5 // Timer/Counter 3 initialization
                 ; 0000 03E6 // Clock source: System Clock
                 ; 0000 03E7 // Clock value: Timer3 Stopped
                 ; 0000 03E8 // Mode: Normal top=0xFFFF
                 ; 0000 03E9 // OC3A output: Discon.
                 ; 0000 03EA // OC3B output: Discon.
                 ; 0000 03EB // OC3C output: Discon.
                 ; 0000 03EC // Noise Canceler: Off
                 ; 0000 03ED // Input Capture on Falling Edge
                 ; 0000 03EE // Timer3 Overflow Interrupt: Off
                 ; 0000 03EF // Input Capture Interrupt: Off
                 ; 0000 03F0 // Compare A Match Interrupt: Off
                 ; 0000 03F1 // Compare B Match Interrupt: Off
                 ; 0000 03F2 // Compare C Match Interrupt: Off
                 ; 0000 03F3 TCCR3A=0x00;
001257 93e0 008b 	STS  139,R30
                 ; 0000 03F4 TCCR3B=0x00;
001259 93e0 008a 	STS  138,R30
                 ; 0000 03F5 TCNT3H=0x00;
00125b 93e0 0089 	STS  137,R30
                 ; 0000 03F6 TCNT3L=0x00;
00125d 93e0 0088 	STS  136,R30
                 ; 0000 03F7 ICR3H=0x00;
00125f 93e0 0081 	STS  129,R30
                 ; 0000 03F8 ICR3L=0x00;
001261 93e0 0080 	STS  128,R30
                 ; 0000 03F9 OCR3AH=0x00;
001263 93e0 0087 	STS  135,R30
                 ; 0000 03FA OCR3AL=0x00;
001265 93e0 0086 	STS  134,R30
                 ; 0000 03FB OCR3BH=0x00;
001267 93e0 0085 	STS  133,R30
                 ; 0000 03FC OCR3BL=0x00;
001269 93e0 0084 	STS  132,R30
                 ; 0000 03FD OCR3CH=0x00;
00126b 93e0 0083 	STS  131,R30
                 ; 0000 03FE OCR3CL=0x00;
00126d 93e0 0082 	STS  130,R30
                 ; 0000 03FF 
                 ; 0000 0400 // External Interrupt(s) initialization
                 ; 0000 0401 // INT0: Off
                 ; 0000 0402 // INT1: Off
                 ; 0000 0403 // INT2: Off
                 ; 0000 0404 // INT3: Off
                 ; 0000 0405 // INT4: Off
                 ; 0000 0406 // INT5: Off
                 ; 0000 0407 // INT6: Off
                 ; 0000 0408 // INT7: Off
                 ; 0000 0409 EICRA=0x00;
00126f 93e0 006a 	STS  106,R30
                 ; 0000 040A EICRB=0x00;
001271 bfea      	OUT  0x3A,R30
                 ; 0000 040B EIMSK=0x00;
001272 bfe9      	OUT  0x39,R30
                 ; 0000 040C 
                 ; 0000 040D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 040E TIMSK=0x01;
001273 e0e1      	LDI  R30,LOW(1)
001274 bfe7      	OUT  0x37,R30
                 ; 0000 040F 
                 ; 0000 0410 ETIMSK=0x00;
001275 e0e0      	LDI  R30,LOW(0)
001276 93e0 007d 	STS  125,R30
                 ; 0000 0411 
                 ; 0000 0412 // USART0 initialization
                 ; 0000 0413 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0414 // USART0 Receiver: On
                 ; 0000 0415 // USART0 Transmitter: On
                 ; 0000 0416 // USART0 Mode: Asynchronous
                 ; 0000 0417 // USART0 Baud Rate: 115200
                 ; 0000 0418 UCSR0A=0x00;
001278 b9eb      	OUT  0xB,R30
                 ; 0000 0419 UCSR0B=0xD8;
001279 ede8      	LDI  R30,LOW(216)
00127a b9ea      	OUT  0xA,R30
                 ; 0000 041A UCSR0C=0x06;
00127b e0e6      	LDI  R30,LOW(6)
00127c 93e0 0095 	STS  149,R30
                 ; 0000 041B UBRR0H=0x00;
00127e e0e0      	LDI  R30,LOW(0)
00127f 93e0 0090 	STS  144,R30
                 ; 0000 041C UBRR0L=0x08;
001281 e0e8      	LDI  R30,LOW(8)
001282 b9e9      	OUT  0x9,R30
                 ; 0000 041D 
                 ; 0000 041E // USART1 initialization
                 ; 0000 041F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0420 // USART1 Receiver: On
                 ; 0000 0421 // USART1 Transmitter: On
                 ; 0000 0422 // USART1 Mode: Asynchronous
                 ; 0000 0423 // USART1 Baud Rate: 9600
                 ; 0000 0424 UCSR1A=0x00;
001283 e0e0      	LDI  R30,LOW(0)
001284 93e0 009b 	STS  155,R30
                 ; 0000 0425 UCSR1B=0xD8;
001286 ede8      	LDI  R30,LOW(216)
001287 93e0 009a 	STS  154,R30
                 ; 0000 0426 UCSR1C=0x06;
001289 e0e6      	LDI  R30,LOW(6)
00128a 93e0 009d 	STS  157,R30
                 ; 0000 0427 UBRR1H=0x00;
00128c e0e0      	LDI  R30,LOW(0)
00128d 93e0 0098 	STS  152,R30
                 ; 0000 0428 UBRR1L=0x67;
00128f e6e7      	LDI  R30,LOW(103)
001290 93e0 0099 	STS  153,R30
                 ; 0000 0429 
                 ; 0000 042A // Analog Comparator initialization
                 ; 0000 042B // Analog Comparator: Off
                 ; 0000 042C // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 042D ACSR=0x80;
001292 e8e0      	LDI  R30,LOW(128)
001293 b9e8      	OUT  0x8,R30
                 ; 0000 042E SFIOR=0x00;
001294 e0e0      	LDI  R30,LOW(0)
001295 bde0      	OUT  0x20,R30
                 ; 0000 042F 
                 ; 0000 0430 // ADC initialization
                 ; 0000 0431 // ADC disabled
                 ; 0000 0432 ADCSRA=0x00;
001296 b9e6      	OUT  0x6,R30
                 ; 0000 0433 
                 ; 0000 0434 // SPI initialization
                 ; 0000 0435 // SPI Type: Master
                 ; 0000 0436 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 0437 // SPI Clock Phase: Cycle Start
                 ; 0000 0438 // SPI Clock Polarity: Low
                 ; 0000 0439 // SPI Data Order: MSB First
                 ; 0000 043A SPCR=0x52;
001297 e5e2      	LDI  R30,LOW(82)
001298 b9ed      	OUT  0xD,R30
                 ; 0000 043B SPSR=0x00;
001299 e0e0      	LDI  R30,LOW(0)
00129a b9ee      	OUT  0xE,R30
                 ; 0000 043C 
                 ; 0000 043D // TWI initialization
                 ; 0000 043E // TWI disabled
                 ; 0000 043F TWCR=0x00;
00129b 93e0 0074 	STS  116,R30
                 ; 0000 0440 }
                 ; 0000 0441 {
                 ; 0000 0442 // Global enable interrupts
                 ; 0000 0443 #asm("sei")
00129d 9478      	sei
                 ; 0000 0444 
                 ; 0000 0445 SSD1963_Init();
00129e 940e 057c 	CALL _SSD1963_Init
                 ; 0000 0446 TSC2046_Init();
0012a0 940e 0a7e 	CALL _TSC2046_Init
                 ; 0000 0447 SSD1963_ClearScreen(BLACK);
0012a2 940e 14c8 	CALL SUBOPT_0xD
0012a4 940e 061e 	CALL _SSD1963_ClearScreen
                 ; 0000 0448 
                 ; 0000 0449   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLUE, BLACK);
                +
0012a6 eee8     +LDI R30 , LOW ( _0x1A8 + ( 0 ) )
0012a7 e0f5     +LDI R31 , HIGH ( _0x1A8 + ( 0 ) )
                 	__POINTW1MN _0x1A8,0
0012a8 940e 1789 	CALL SUBOPT_0x6C
0012aa e7e0      	LDI  R30,LOW(112)
0012ab e0f0      	LDI  R31,HIGH(112)
0012ac 93fa      	ST   -Y,R31
0012ad 93ea      	ST   -Y,R30
0012ae efe8      	LDI  R30,LOW(248)
0012af e0f0      	LDI  R31,HIGH(248)
0012b0 940e 14cd 	CALL SUBOPT_0xE
0012b2 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 044A   BACKLIGHT = 0; //On
0012b4 98c7      	CBI  0x18,7
                 ; 0000 044B   delay_ms(200);
0012b5 940e 1494 	CALL SUBOPT_0x4
                 ; 0000 044C   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), RED, BLACK);
                +
0012b7 eeef     +LDI R30 , LOW ( _0x1A8 + ( 7 ) )
0012b8 e0f5     +LDI R31 , HIGH ( _0x1A8 + ( 7 ) )
                 	__POINTW1MN _0x1A8,7
0012b9 940e 1789 	CALL SUBOPT_0x6C
0012bb e8e0      	LDI  R30,LOW(128)
0012bc e0f0      	LDI  R31,HIGH(128)
0012bd 93fa      	ST   -Y,R31
0012be 93ea      	ST   -Y,R30
0012bf e0e0      	LDI  R30,LOW(7936)
0012c0 e1ff      	LDI  R31,HIGH(7936)
0012c1 940e 14cd 	CALL SUBOPT_0xE
0012c3 940e 1790 	CALL SUBOPT_0x6D
                 ; 0000 044D   delay_ms(200);
                 ; 0000 044E   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, GREEN, BLACK);
                +
0012c5 efe6     +LDI R30 , LOW ( _0x1A8 + ( 14 ) )
0012c6 e0f5     +LDI R31 , HIGH ( _0x1A8 + ( 14 ) )
                 	__POINTW1MN _0x1A8,14
0012c7 940e 1789 	CALL SUBOPT_0x6C
0012c9 e9e0      	LDI  R30,LOW(144)
0012ca e0f0      	LDI  R31,HIGH(144)
0012cb 93fa      	ST   -Y,R31
0012cc 93ea      	ST   -Y,R30
0012cd e0e7      	LDI  R30,LOW(57351)
0012ce eef0      	LDI  R31,HIGH(57351)
0012cf 940e 14cd 	CALL SUBOPT_0xE
0012d1 940e 1790 	CALL SUBOPT_0x6D
                 ; 0000 044F   delay_ms(200);
                 ; 0000 0450   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
0012d3 efed     +LDI R30 , LOW ( _0x1A8 + ( 21 ) )
0012d4 e0f5     +LDI R31 , HIGH ( _0x1A8 + ( 21 ) )
                 	__POINTW1MN _0x1A8,21
0012d5 940e 1789 	CALL SUBOPT_0x6C
0012d7 e7e0      	LDI  R30,LOW(112)
0012d8 e0f0      	LDI  R31,HIGH(112)
0012d9 940e 14cd 	CALL SUBOPT_0xE
0012db 940e 14c8 	CALL SUBOPT_0xD
0012dd 940e 1790 	CALL SUBOPT_0x6D
                 ; 0000 0451   delay_ms(200);
                 ; 0000 0452   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
0012df e0e4     +LDI R30 , LOW ( _0x1A8 + ( 28 ) )
0012e0 e0f6     +LDI R31 , HIGH ( _0x1A8 + ( 28 ) )
                 	__POINTW1MN _0x1A8,28
0012e1 940e 1789 	CALL SUBOPT_0x6C
0012e3 e8e0      	LDI  R30,LOW(128)
0012e4 e0f0      	LDI  R31,HIGH(128)
0012e5 940e 14cd 	CALL SUBOPT_0xE
0012e7 940e 14c8 	CALL SUBOPT_0xD
0012e9 940e 1790 	CALL SUBOPT_0x6D
                 ; 0000 0453   delay_ms(200);
                 ; 0000 0454   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
0012eb e0eb     +LDI R30 , LOW ( _0x1A8 + ( 35 ) )
0012ec e0f6     +LDI R31 , HIGH ( _0x1A8 + ( 35 ) )
                 	__POINTW1MN _0x1A8,35
0012ed 940e 1789 	CALL SUBOPT_0x6C
0012ef e9e0      	LDI  R30,LOW(144)
0012f0 e0f0      	LDI  R31,HIGH(144)
0012f1 940e 14cd 	CALL SUBOPT_0xE
0012f3 940e 14c8 	CALL SUBOPT_0xD
0012f5 940e 0827 	CALL _SSD1963_PutString16
                 ; 0000 0455 
                 ; 0000 0456 Prepare_Screen();
0012f7 d93f      	RCALL _Prepare_Screen
                 ; 0000 0457 
                 ; 0000 0458 // Watchdog Timer initialization
                 ; 0000 0459 // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 045A #pragma optsize-
                 ; 0000 045B #asm("wdr")
0012f8 95a8      	wdr
                 ; 0000 045C //WDTCR=0x1F;
                 ; 0000 045D //WDTCR=0x0F;
                 ; 0000 045E #ifdef _OPTIMIZE_SIZE_
                 ; 0000 045F #pragma optsize+
                 ; 0000 0460 #endif
                 ; 0000 0461 }
                 ; 0000 0462 
                 ; 0000 0463 PutParameterText(ParameterState, BLUE);
0012f9 940e 1759 	CALL SUBOPT_0x66
                 ; 0000 0464 while (1)
                 _0x1AB:
                 ; 0000 0465       {
                 ; 0000 0466       #asm("wdr")
0012fb 95a8      	wdr
                 ; 0000 0467       main_loop();
0012fc dd8a      	RCALL _main_loop
                 ; 0000 0468       }
0012fd cffd      	RJMP _0x1AB
                 ; 0000 0469 }
                 _0x1AE:
0012fe cfff      	RJMP _0x1AE
                 
                 	.DSEG
                 _0x1A8:
0005e8           	.BYTE 0x2A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
0012ff 81e8      	LD   R30,Y
001300 b9ef      	OUT  0xF,R30
                 _0x2000003:
001301 9b77      	SBIS 0xE,7
001302 cffe      	RJMP _0x2000003
001303 b1ef      	IN   R30,0xF
001304 9621      	ADIW R28,1
001305 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G101:
001306 81ea      	LDD  R30,Y+2
001307 93ea      	ST   -Y,R30
001308 940e 0bb2 	CALL _putchar
00130a 81a8      	LD   R26,Y
00130b 81b9      	LDD  R27,Y+1
00130c 940e 1783 	CALL SUBOPT_0x6B
00130e 9623      	ADIW R28,3
00130f 9508      	RET
                 __print_G101:
001310 9726      	SBIW R28,6
001311 940e 1973 	CALL __SAVELOCR6
001313 e010      	LDI  R17,0
001314 85ac      	LDD  R26,Y+12
001315 85bd      	LDD  R27,Y+12+1
001316 e0e0      	LDI  R30,LOW(0)
001317 e0f0      	LDI  R31,HIGH(0)
001318 93ed      	ST   X+,R30
001319 93fc      	ST   X,R31
                 _0x2020016:
00131a 89ea      	LDD  R30,Y+18
00131b 89fb      	LDD  R31,Y+18+1
00131c 9631      	ADIW R30,1
00131d 8bea      	STD  Y+18,R30
00131e 8bfb      	STD  Y+18+1,R31
00131f 9731      	SBIW R30,1
001320 91e4      	LPM  R30,Z
001321 2f2e      	MOV  R18,R30
001322 30e0      	CPI  R30,0
001323 f411      	BRNE PC+3
001324 940c 143d 	JMP _0x2020018
001326 2fe1      	MOV  R30,R17
001327 30e0      	CPI  R30,0
001328 f439      	BRNE _0x202001C
001329 3225      	CPI  R18,37
00132a f411      	BRNE _0x202001D
00132b e011      	LDI  R17,LOW(1)
00132c c002      	RJMP _0x202001E
                 _0x202001D:
00132d 940e 1793 	CALL SUBOPT_0x6E
                 _0x202001E:
00132f c10c      	RJMP _0x202001B
                 _0x202001C:
001330 30e1      	CPI  R30,LOW(0x1)
001331 f4a9      	BRNE _0x202001F
001332 3225      	CPI  R18,37
001333 f419      	BRNE _0x2020020
001334 940e 1793 	CALL SUBOPT_0x6E
001336 c104      	RJMP _0x20200C9
                 _0x2020020:
001337 e012      	LDI  R17,LOW(2)
001338 e040      	LDI  R20,LOW(0)
001339 e000      	LDI  R16,LOW(0)
00133a 322d      	CPI  R18,45
00133b f411      	BRNE _0x2020021
00133c e001      	LDI  R16,LOW(1)
00133d c0fe      	RJMP _0x202001B
                 _0x2020021:
00133e 322b      	CPI  R18,43
00133f f411      	BRNE _0x2020022
001340 e24b      	LDI  R20,LOW(43)
001341 c0fa      	RJMP _0x202001B
                 _0x2020022:
001342 3220      	CPI  R18,32
001343 f411      	BRNE _0x2020023
001344 e240      	LDI  R20,LOW(32)
001345 c0f6      	RJMP _0x202001B
                 _0x2020023:
001346 c002      	RJMP _0x2020024
                 _0x202001F:
001347 30e2      	CPI  R30,LOW(0x2)
001348 f439      	BRNE _0x2020025
                 _0x2020024:
001349 e050      	LDI  R21,LOW(0)
00134a e013      	LDI  R17,LOW(3)
00134b 3320      	CPI  R18,48
00134c f411      	BRNE _0x2020026
00134d 6800      	ORI  R16,LOW(128)
00134e c0ed      	RJMP _0x202001B
                 _0x2020026:
00134f c004      	RJMP _0x2020027
                 _0x2020025:
001350 30e3      	CPI  R30,LOW(0x3)
001351 f011      	BREQ PC+3
001352 940c 143c 	JMP _0x202001B
                 _0x2020027:
001354 3320      	CPI  R18,48
001355 f010      	BRLO _0x202002A
001356 332a      	CPI  R18,58
001357 f008      	BRLO _0x202002B
                 _0x202002A:
001358 c007      	RJMP _0x2020029
                 _0x202002B:
001359 e0aa      	LDI  R26,LOW(10)
00135a 9f5a      	MUL  R21,R26
00135b 2d50      	MOV  R21,R0
00135c 2fe2      	MOV  R30,R18
00135d 53e0      	SUBI R30,LOW(48)
00135e 0f5e      	ADD  R21,R30
00135f c0dc      	RJMP _0x202001B
                 _0x2020029:
001360 2fe2      	MOV  R30,R18
001361 36e3      	CPI  R30,LOW(0x63)
001362 f449      	BRNE _0x202002F
001363 940e 179c 	CALL SUBOPT_0x6F
001365 89e8      	LDD  R30,Y+16
001366 89f9      	LDD  R31,Y+16+1
001367 81a4      	LDD  R26,Z+4
001368 93aa      	ST   -Y,R26
001369 940e 17a2 	CALL SUBOPT_0x70
00136b c0cf      	RJMP _0x2020030
                 _0x202002F:
00136c 37e3      	CPI  R30,LOW(0x73)
00136d f441      	BRNE _0x2020032
00136e 940e 179c 	CALL SUBOPT_0x6F
001370 940e 17aa 	CALL SUBOPT_0x71
001372 940e 146a 	CALL _strlen
001374 2f1e      	MOV  R17,R30
001375 c00a      	RJMP _0x2020033
                 _0x2020032:
001376 37e0      	CPI  R30,LOW(0x70)
001377 f461      	BRNE _0x2020035
001378 940e 179c 	CALL SUBOPT_0x6F
00137a 940e 17aa 	CALL SUBOPT_0x71
00137c 940e 1474 	CALL _strlenf
00137e 2f1e      	MOV  R17,R30
00137f 6008      	ORI  R16,LOW(8)
                 _0x2020033:
001380 6002      	ORI  R16,LOW(2)
001381 770f      	ANDI R16,LOW(127)
001382 e030      	LDI  R19,LOW(0)
001383 c035      	RJMP _0x2020036
                 _0x2020035:
001384 36e4      	CPI  R30,LOW(0x64)
001385 f011      	BREQ _0x2020039
001386 36e9      	CPI  R30,LOW(0x69)
001387 f411      	BRNE _0x202003A
                 _0x2020039:
001388 6004      	ORI  R16,LOW(4)
001389 c002      	RJMP _0x202003B
                 _0x202003A:
00138a 37e5      	CPI  R30,LOW(0x75)
00138b f431      	BRNE _0x202003C
                 _0x202003B:
00138c ecec      	LDI  R30,LOW(_tbl10_G101*2)
00138d e0f7      	LDI  R31,HIGH(_tbl10_G101*2)
00138e 83ee      	STD  Y+6,R30
00138f 83ff      	STD  Y+6+1,R31
001390 e015      	LDI  R17,LOW(5)
001391 c00d      	RJMP _0x202003D
                 _0x202003C:
001392 35e8      	CPI  R30,LOW(0x58)
001393 f411      	BRNE _0x202003F
001394 6008      	ORI  R16,LOW(8)
001395 c004      	RJMP _0x2020040
                 _0x202003F:
001396 37e8      	CPI  R30,LOW(0x78)
001397 f011      	BREQ PC+3
001398 940c 143b 	JMP _0x2020071
                 _0x2020040:
00139a ede6      	LDI  R30,LOW(_tbl16_G101*2)
00139b e0f7      	LDI  R31,HIGH(_tbl16_G101*2)
00139c 83ee      	STD  Y+6,R30
00139d 83ff      	STD  Y+6+1,R31
00139e e014      	LDI  R17,LOW(4)
                 _0x202003D:
00139f ff02      	SBRS R16,2
0013a0 c014      	RJMP _0x2020042
0013a1 940e 179c 	CALL SUBOPT_0x6F
0013a3 940e 17b4 	CALL SUBOPT_0x72
0013a5 85ab      	LDD  R26,Y+11
0013a6 23aa      	TST  R26
0013a7 f43a      	BRPL _0x2020043
0013a8 85ea      	LDD  R30,Y+10
0013a9 85fb      	LDD  R31,Y+10+1
0013aa 940e 18aa 	CALL __ANEGW1
0013ac 87ea      	STD  Y+10,R30
0013ad 87fb      	STD  Y+10+1,R31
0013ae e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0013af 3040      	CPI  R20,0
0013b0 f011      	BREQ _0x2020044
0013b1 5f1f      	SUBI R17,-LOW(1)
0013b2 c001      	RJMP _0x2020045
                 _0x2020044:
0013b3 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0013b4 c004      	RJMP _0x2020046
                 _0x2020042:
0013b5 940e 179c 	CALL SUBOPT_0x6F
0013b7 940e 17b4 	CALL SUBOPT_0x72
                 _0x2020046:
                 _0x2020036:
0013b9 fd00      	SBRC R16,0
0013ba c011      	RJMP _0x2020047
                 _0x2020048:
0013bb 1715      	CP   R17,R21
0013bc f478      	BRSH _0x202004A
0013bd ff07      	SBRS R16,7
0013be c008      	RJMP _0x202004B
0013bf ff02      	SBRS R16,2
0013c0 c004      	RJMP _0x202004C
0013c1 7f0b      	ANDI R16,LOW(251)
0013c2 2f24      	MOV  R18,R20
0013c3 5011      	SUBI R17,LOW(1)
0013c4 c001      	RJMP _0x202004D
                 _0x202004C:
0013c5 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0013c6 c001      	RJMP _0x202004E
                 _0x202004B:
0013c7 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0013c8 940e 1793 	CALL SUBOPT_0x6E
0013ca 5051      	SUBI R21,LOW(1)
0013cb cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0013cc 2f31      	MOV  R19,R17
0013cd ff01      	SBRS R16,1
0013ce c017      	RJMP _0x202004F
                 _0x2020050:
0013cf 3030      	CPI  R19,0
0013d0 f0a1      	BREQ _0x2020052
0013d1 ff03      	SBRS R16,3
0013d2 c006      	RJMP _0x2020053
0013d3 81ee      	LDD  R30,Y+6
0013d4 81ff      	LDD  R31,Y+6+1
0013d5 9125      	LPM  R18,Z+
0013d6 83ee      	STD  Y+6,R30
0013d7 83ff      	STD  Y+6+1,R31
0013d8 c005      	RJMP _0x2020054
                 _0x2020053:
0013d9 81ae      	LDD  R26,Y+6
0013da 81bf      	LDD  R27,Y+6+1
0013db 912d      	LD   R18,X+
0013dc 83ae      	STD  Y+6,R26
0013dd 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0013de 940e 1793 	CALL SUBOPT_0x6E
0013e0 3050      	CPI  R21,0
0013e1 f009      	BREQ _0x2020055
0013e2 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0013e3 5031      	SUBI R19,LOW(1)
0013e4 cfea      	RJMP _0x2020050
                 _0x2020052:
0013e5 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0013e6 e320      	LDI  R18,LOW(48)
0013e7 81ee      	LDD  R30,Y+6
0013e8 81ff      	LDD  R31,Y+6+1
0013e9 940e 1963 	CALL __GETW1PF
0013eb 87e8      	STD  Y+8,R30
0013ec 87f9      	STD  Y+8+1,R31
0013ed 81ee      	LDD  R30,Y+6
0013ee 81ff      	LDD  R31,Y+6+1
0013ef 9632      	ADIW R30,2
0013f0 83ee      	STD  Y+6,R30
0013f1 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0013f2 85e8      	LDD  R30,Y+8
0013f3 85f9      	LDD  R31,Y+8+1
0013f4 85aa      	LDD  R26,Y+10
0013f5 85bb      	LDD  R27,Y+10+1
0013f6 17ae      	CP   R26,R30
0013f7 07bf      	CPC  R27,R31
0013f8 f050      	BRLO _0x202005C
0013f9 5f2f      	SUBI R18,-LOW(1)
0013fa 85a8      	LDD  R26,Y+8
0013fb 85b9      	LDD  R27,Y+8+1
0013fc 85ea      	LDD  R30,Y+10
0013fd 85fb      	LDD  R31,Y+10+1
0013fe 1bea      	SUB  R30,R26
0013ff 0bfb      	SBC  R31,R27
001400 87ea      	STD  Y+10,R30
001401 87fb      	STD  Y+10+1,R31
001402 cfef      	RJMP _0x202005A
                 _0x202005C:
001403 332a      	CPI  R18,58
001404 f028      	BRLO _0x202005D
001405 ff03      	SBRS R16,3
001406 c002      	RJMP _0x202005E
001407 5f29      	SUBI R18,-LOW(7)
001408 c001      	RJMP _0x202005F
                 _0x202005E:
001409 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00140a fd04      	SBRC R16,4
00140b c01a      	RJMP _0x2020061
00140c 3321      	CPI  R18,49
00140d f420      	BRSH _0x2020063
00140e 85a8      	LDD  R26,Y+8
00140f 85b9      	LDD  R27,Y+8+1
001410 9711      	SBIW R26,1
001411 f409      	BRNE _0x2020062
                 _0x2020063:
001412 c009      	RJMP _0x20200CA
                 _0x2020062:
001413 1753      	CP   R21,R19
001414 f010      	BRLO _0x2020067
001415 ff00      	SBRS R16,0
001416 c001      	RJMP _0x2020068
                 _0x2020067:
001417 c013      	RJMP _0x2020066
                 _0x2020068:
001418 e220      	LDI  R18,LOW(32)
001419 ff07      	SBRS R16,7
00141a c00b      	RJMP _0x2020069
00141b e320      	LDI  R18,LOW(48)
                 _0x20200CA:
00141c 6100      	ORI  R16,LOW(16)
00141d ff02      	SBRS R16,2
00141e c007      	RJMP _0x202006A
00141f 7f0b      	ANDI R16,LOW(251)
001420 934a      	ST   -Y,R20
001421 940e 17a2 	CALL SUBOPT_0x70
001423 3050      	CPI  R21,0
001424 f009      	BREQ _0x202006B
001425 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
001426 940e 1793 	CALL SUBOPT_0x6E
001428 3050      	CPI  R21,0
001429 f009      	BREQ _0x202006C
00142a 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00142b 5031      	SUBI R19,LOW(1)
00142c 85a8      	LDD  R26,Y+8
00142d 85b9      	LDD  R27,Y+8+1
00142e 9712      	SBIW R26,2
00142f f008      	BRLO _0x2020059
001430 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
001431 ff00      	SBRS R16,0
001432 c008      	RJMP _0x202006D
                 _0x202006E:
001433 3050      	CPI  R21,0
001434 f031      	BREQ _0x2020070
001435 5051      	SUBI R21,LOW(1)
001436 e2e0      	LDI  R30,LOW(32)
001437 93ea      	ST   -Y,R30
001438 940e 17a2 	CALL SUBOPT_0x70
00143a cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200C9:
00143b e010      	LDI  R17,LOW(0)
                 _0x202001B:
00143c cedd      	RJMP _0x2020016
                 _0x2020018:
00143d 85ac      	LDD  R26,Y+12
00143e 85bd      	LDD  R27,Y+12+1
00143f 940e 195f 	CALL __GETW1P
001441 940e 197a 	CALL __LOADLOCR6
001443 9664      	ADIW R28,20
001444 9508      	RET
                 _printf:
001445 92ff      	PUSH R15
001446 2ef8      	MOV  R15,R24
001447 9726      	SBIW R28,6
001448 931a      	ST   -Y,R17
001449 930a      	ST   -Y,R16
00144a 01de      	MOVW R26,R28
00144b 9614      	ADIW R26,4
00144c 940e 18a1 	CALL __ADDW2R15
00144e 018d      	MOVW R16,R26
00144f e0e0      	LDI  R30,LOW(0)
001450 83ec      	STD  Y+4,R30
001451 83ed      	STD  Y+4+1,R30
001452 83ee      	STD  Y+6,R30
001453 83ef      	STD  Y+6+1,R30
001454 01de      	MOVW R26,R28
001455 9618      	ADIW R26,8
001456 940e 18a1 	CALL __ADDW2R15
001458 940e 195f 	CALL __GETW1P
00145a 940e 164f 	CALL SUBOPT_0x3B
00145c e0e6      	LDI  R30,LOW(_put_usart_G101)
00145d e1f3      	LDI  R31,HIGH(_put_usart_G101)
00145e 93fa      	ST   -Y,R31
00145f 93ea      	ST   -Y,R30
001460 01fe      	MOVW R30,R28
001461 9638      	ADIW R30,8
001462 93fa      	ST   -Y,R31
001463 93ea      	ST   -Y,R30
001464 deab      	RCALL __print_G101
001465 8119      	LDD  R17,Y+1
001466 8108      	LDD  R16,Y+0
001467 9628      	ADIW R28,8
001468 90ff      	POP  R15
001469 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00146a 91a9          ld   r26,y+
00146b 91b9          ld   r27,y+
00146c 27ee          clr  r30
00146d 27ff          clr  r31
                 strlen0:
00146e 916d          ld   r22,x+
00146f 2366          tst  r22
001470 f011          breq strlen1
001471 9631          adiw r30,1
001472 cffb          rjmp strlen0
                 strlen1:
001473 9508          ret
                 _strlenf:
001474 27aa          clr  r26
001475 27bb          clr  r27
001476 91e9          ld   r30,y+
001477 91f9          ld   r31,y+
                 strlenf0:
001478 9005      	lpm  r0,z+
001479 2000          tst  r0
00147a f011          breq strlenf1
00147b 9611          adiw r26,1
00147c cffb          rjmp strlenf0
                 strlenf1:
00147d 01fd          movw r30,r26
00147e 9508          ret
                 
                 	.DSEG
                 _tempX:
000612           	.BYTE 0x4
                 _tempY:
000616           	.BYTE 0x4
                 _rx_buffer2:
00061a           	.BYTE 0x14
                 _rx_counter2:
00062e           	.BYTE 0x1
                 _uart_swap:
00062f           	.BYTE 0x1
                 _rx_buffer0:
000630           	.BYTE 0x100
                 _rx_wr_index0:
000730           	.BYTE 0x1
                 _rx_rd_index0:
000731           	.BYTE 0x1
                 _rx_counter0:
000732           	.BYTE 0x1
                 _tx_buffer0:
000733           	.BYTE 0x8
                 _tx_wr_index0:
00073b           	.BYTE 0x1
                 _tx_rd_index0:
00073c           	.BYTE 0x1
                 _tx_counter0:
00073d           	.BYTE 0x1
                 _rx_buffer1:
00073e           	.BYTE 0x20
                 _rx_wr_index1:
00075e           	.BYTE 0x1
                 _rx_rd_index1:
00075f           	.BYTE 0x1
                 _rx_counter1:
000760           	.BYTE 0x1
                 _tx_buffer1:
000761           	.BYTE 0x40
                 _tx_wr_index1:
0007a1           	.BYTE 0x1
                 _tx_rd_index1:
0007a2           	.BYTE 0x1
                 _tx_counter1:
0007a3           	.BYTE 0x1
                 _State:
0007a4           	.BYTE 0x1
                 _ParameterState:
0007a5           	.BYTE 0x1
                 _ValueState:
0007a6           	.BYTE 0x1
                 _GraphState:
0007a7           	.BYTE 0x1
                 _ConfigState:
0007a8           	.BYTE 0x1
                 _WaitADC_mSec:
0007a9           	.BYTE 0x2
                 _ValueUpd_mSec:
0007ab           	.BYTE 0x2
                 _GraphUpd_mSec:
0007ad           	.BYTE 0x2
                 _GraphUpdTime:
0007af           	.BYTE 0x2
                 _Graph_X:
0007b1           	.BYTE 0x2
                 _Amplitude:
0007b3           	.BYTE 0x6
                 _ValueLast:
0007b9           	.BYTE 0x6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00147f 81e8      	LD   R30,Y
001480 e0f0      	LDI  R31,0
001481 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
001482 e6e4      	LDI  R30,LOW(100)
001483 e0f0      	LDI  R31,HIGH(100)
001484 93fa      	ST   -Y,R31
001485 93ea      	ST   -Y,R30
001486 940c 17bc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
001488 81e8      	LD   R30,Y
001489 93ea      	ST   -Y,R30
00148a 940e 0521 	CALL _RotateByte
00148c bbeb      	OUT  0x1B,R30
00148d e0e0      	LDI  R30,LOW(0)
00148e bbe5      	OUT  0x15,R30
00148f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
001490 e0e1      	LDI  R30,LOW(1)
001491 93ea      	ST   -Y,R30
001492 940c 0550 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4:
001494 ece8      	LDI  R30,LOW(200)
001495 e0f0      	LDI  R31,HIGH(200)
001496 93fa      	ST   -Y,R31
001497 93ea      	ST   -Y,R30
001498 940c 17bc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00149a 93ea      	ST   -Y,R30
00149b 940e 055c 	CALL _SSD1963_WriteData_b8
00149d e0e4      	LDI  R30,LOW(4)
00149e 93ea      	ST   -Y,R30
00149f 940c 055c 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0014a1 93ea      	ST   -Y,R30
0014a2 940e 0550 	CALL _SSD1963_WriteCmd
0014a4 e0e1      	LDI  R30,LOW(1)
0014a5 93ea      	ST   -Y,R30
0014a6 940c 055c 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0014a8 e0e1      	LDI  R30,LOW(1)
0014a9 e0f0      	LDI  R31,HIGH(1)
0014aa 93fa      	ST   -Y,R31
0014ab 93ea      	ST   -Y,R30
0014ac 940c 17bc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
0014ae 93ea      	ST   -Y,R30
0014af 940e 0550 	CALL _SSD1963_WriteCmd
0014b1 e0e3      	LDI  R30,LOW(3)
0014b2 93ea      	ST   -Y,R30
0014b3 940c 055c 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
0014b5 93fa      	ST   -Y,R31
0014b6 93ea      	ST   -Y,R30
0014b7 940c 17bc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
0014b9 93ea      	ST   -Y,R30
0014ba 940e 055c 	CALL _SSD1963_WriteData_b8
0014bc e0e0      	LDI  R30,LOW(0)
0014bd 93ea      	ST   -Y,R30
0014be 940c 055c 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0014c0 e0e1      	LDI  R30,LOW(1)
0014c1 93ea      	ST   -Y,R30
0014c2 940c 055c 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0014c4 93ea      	ST   -Y,R30
0014c5 940e 055c 	CALL _SSD1963_WriteData_b8
0014c7 cff8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 65 TIMES, CODE SIZE REDUCTION:125 WORDS
                 SUBOPT_0xD:
0014c8 e0e0      	LDI  R30,LOW(0)
0014c9 e0f0      	LDI  R31,HIGH(0)
0014ca 93fa      	ST   -Y,R31
0014cb 93ea      	ST   -Y,R30
0014cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 44 TIMES, CODE SIZE REDUCTION:83 WORDS
                 SUBOPT_0xE:
0014cd 93fa      	ST   -Y,R31
0014ce 93ea      	ST   -Y,R30
0014cf cff8      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xF:
0014d0 93fa      	ST   -Y,R31
0014d1 93ea      	ST   -Y,R30
0014d2 940e 05fe 	CALL _SSD1963_SetArea
0014d4 e2ec      	LDI  R30,LOW(44)
0014d5 93ea      	ST   -Y,R30
0014d6 940c 0550 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0014d8 93fa      	ST   -Y,R31
0014d9 93ea      	ST   -Y,R30
0014da 940c 0569 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 29 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x11:
0014dc 85e8      	LDD  R30,Y+8
0014dd 85f9      	LDD  R31,Y+8+1
0014de 93fa      	ST   -Y,R31
0014df 93ea      	ST   -Y,R30
0014e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
0014e1 85ea      	LDD  R30,Y+10
0014e2 85fb      	LDD  R31,Y+10+1
0014e3 93fa      	ST   -Y,R31
0014e4 93ea      	ST   -Y,R30
0014e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0014e6 85e8      	LDD  R30,Y+8
0014e7 e0f0      	LDI  R31,0
0014e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x14:
0014e9 81ef      	LDD  R30,Y+7
0014ea 85f8      	LDD  R31,Y+7+1
0014eb 93fa      	ST   -Y,R31
0014ec 93ea      	ST   -Y,R30
0014ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
0014ee 940e 18fe 	CALL __DIVW21U
0014f0 5de0      	SUBI R30,-LOW(48)
0014f1 93ea      	ST   -Y,R30
0014f2 cfe9      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
0014f3 940e 0683 	CALL _SSD1963_PutChar16
0014f5 85a9      	LDD  R26,Y+9
0014f6 85ba      	LDD  R27,Y+9+1
0014f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x17:
0014f8 940e 193b 	CALL __MODW21U
0014fa 87e9      	STD  Y+9,R30
0014fb 87fa      	STD  Y+9+1,R31
0014fc 81ef      	LDD  R30,Y+7
0014fd 85f8      	LDD  R31,Y+7+1
0014fe 9670      	ADIW R30,16
0014ff 83ef      	STD  Y+7,R30
001500 87f8      	STD  Y+7+1,R31
001501 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x18:
001502 9728      	SBIW R28,8
001503 931a      	ST   -Y,R17
001504 930a      	ST   -Y,R16
001505 89ea      	LDD  R30,Y+18
001506 89fb      	LDD  R31,Y+18+1
001507 93fa      	ST   -Y,R31
001508 93ea      	ST   -Y,R30
001509 89ea      	LDD  R30,Y+18
00150a 89fb      	LDD  R31,Y+18+1
00150b 93fa      	ST   -Y,R31
00150c 93ea      	ST   -Y,R30
00150d 89ea      	LDD  R30,Y+18
00150e 89fb      	LDD  R31,Y+18+1
00150f 93fa      	ST   -Y,R31
001510 93ea      	ST   -Y,R30
001511 89ea      	LDD  R30,Y+18
001512 89fb      	LDD  R31,Y+18+1
001513 cfbc      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
001514 89aa      	LDD  R26,Y+18
001515 89bb      	LDD  R27,Y+18+1
001516 89e8      	LDD  R30,Y+16
001517 89f9      	LDD  R31,Y+16+1
001518 1bea      	SUB  R30,R26
001519 0bfb      	SBC  R31,R27
00151a 9631      	ADIW R30,1
00151b 018f      	MOVW R16,R30
00151c 2311      	TST  R17
00151d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
00151e 01f8      	MOVW R30,R16
00151f efaf      	LDI  R26,LOW(65535)
001520 efbf      	LDI  R27,HIGH(65535)
001521 940e 18f4 	CALL __MULW12
001523 018f      	MOVW R16,R30
001524 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1B:
001525 85ae      	LDD  R26,Y+14
001526 85bf      	LDD  R27,Y+14+1
001527 85ec      	LDD  R30,Y+12
001528 85fd      	LDD  R31,Y+12+1
001529 1bea      	SUB  R30,R26
00152a 0bfb      	SBC  R31,R27
00152b 9631      	ADIW R30,1
00152c 2766      	CLR  R22
00152d 2777      	CLR  R23
                +
00152e 83ea     +STD Y + 2 , R30
00152f 83fb     +STD Y + 2 + 1 , R31
001530 836c     +STD Y + 2 + 2 , R22
001531 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001532 81ad      	LDD  R26,Y+5
001533 23aa      	TST  R26
001534 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
                +
001535 81ea     +LDD R30 , Y + 2
001536 81fb     +LDD R31 , Y + 2 + 1
001537 816c     +LDD R22 , Y + 2 + 2
001538 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
001539 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
                +
00153a efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
00153b efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
00153c ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
00153d ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
00153e 940e 18f9 	CALL __MULD12
                +
001540 83ea     +STD Y + 2 , R30
001541 83fb     +STD Y + 2 + 1 , R31
001542 836c     +STD Y + 2 + 2 , R22
001543 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001544 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1E:
001545 01f8      	MOVW R30,R16
                +
001546 81aa     +LDD R26 , Y + 2
001547 81bb     +LDD R27 , Y + 2 + 1
001548 818c     +LDD R24 , Y + 2 + 2
001549 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00154a 940e 18c7 	CALL __CWD1
00154c 940e 18f9 	CALL __MULD12
                +
00154e 83ea     +STD Y + 2 , R30
00154f 83fb     +STD Y + 2 + 1 , R31
001550 836c     +STD Y + 2 + 2 , R22
001551 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001552 e0e0      	LDI  R30,LOW(0)
                +
001553 83ee     +STD Y + 6 , R30
001554 83ef     +STD Y + 6 + 1 , R30
001555 87e8     +STD Y + 6 + 2 , R30
001556 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
001557 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
001558 dfdc      	RCALL SUBOPT_0x1C
                +
001559 81ae     +LDD R26 , Y + 6
00155a 81bf     +LDD R27 , Y + 6 + 1
00155b 8588     +LDD R24 , Y + 6 + 2
00155c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00155d 940e 196e 	CALL __CPD21
00155f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
                +
001560 81ee     +LDD R30 , Y + 6
001561 81ff     +LDD R31 , Y + 6 + 1
001562 8568     +LDD R22 , Y + 6 + 2
001563 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
001564 5fef     +SUBI R30 , LOW ( - 1 )
001565 4fff     +SBCI R31 , HIGH ( - 1 )
001566 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001567 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
001568 83ee     +STD Y + 6 , R30
001569 83ff     +STD Y + 6 + 1 , R31
00156a 8768     +STD Y + 6 + 2 , R22
00156b 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
00156c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
00156d e0f0      	LDI  R31,0
00156e 8dab      	LDD  R26,Y+27
00156f 8dbc      	LDD  R27,Y+27+1
001570 0fea      	ADD  R30,R26
001571 1ffb      	ADC  R31,R27
001572 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
001573 85e8      	LDD  R30,Y+8
001574 85f9      	LDD  R31,Y+8+1
001575 1bea      	SUB  R30,R26
001576 0bfb      	SBC  R31,R27
001577 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
001578 85ac      	LDD  R26,Y+12
001579 85bd      	LDD  R27,Y+12+1
00157a 0fea      	ADD  R30,R26
00157b 1ffb      	ADC  R31,R27
00157c 93fa      	ST   -Y,R31
00157d 93ea      	ST   -Y,R30
00157e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x24:
00157f 93ea      	ST   -Y,R30
001580 940e 12ff 	CALL _spi
                +
001582 e980     +LDI R24 , LOW ( 400 )
001583 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
001584 9701     +SBIW R24 , 1
001585 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
001586 e0e0      	LDI  R30,LOW(0)
001587 93ea      	ST   -Y,R30
001588 940e 12ff 	CALL _spi
00158a 2f0e      	MOV  R16,R30
00158b 2711      	CLR  R17
00158c 2f10      	MOV  R17,R16
00158d 2700      	CLR  R16
00158e e0e0      	LDI  R30,LOW(0)
00158f 93ea      	ST   -Y,R30
001590 940e 12ff 	CALL _spi
001592 e0f0      	LDI  R31,0
                +
001593 0f0e     +ADD R16 , R30
001594 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
001595 9a1a      	SBI  0x3,2
001596 01f8      	MOVW R30,R16
001597 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
001598 01f8      	MOVW R30,R16
001599 940e 18c7 	CALL __CWD1
00159b 940e 182e 	CALL __CDF1
00159d 01df      	MOVW R26,R30
00159e 01cb      	MOVW R24,R22
00159f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
0015a0 940e 185c 	CALL __DIVF21
0015a2 940e 17f7 	CALL __CFD1
0015a4 018f      	MOVW R16,R30
0015a5 01f8      	MOVW R30,R16
0015a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
0015a7 e0a0      	LDI  R26,0
0015a8 990b      	SBIC 0x1,3
0015a9 e0a1      	LDI  R26,1
0015aa 30a1      	CPI  R26,LOW(0x1)
0015ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x28:
0015ac e0e0      	LDI  R30,LOW(0)
0015ad 93e0 0612 	STS  _tempX,R30
0015af 93e0 0613 	STS  _tempX+1,R30
0015b1 93e0 0614 	STS  _tempX+2,R30
0015b3 93e0 0615 	STS  _tempX+3,R30
0015b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x29:
0015b6 e0e0      	LDI  R30,LOW(0)
0015b7 93e0 0616 	STS  _tempY,R30
0015b9 93e0 0617 	STS  _tempY+1,R30
0015bb 93e0 0618 	STS  _tempY+2,R30
0015bd 93e0 0619 	STS  _tempY+3,R30
0015bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2A:
0015c0 91a0 0612 	LDS  R26,_tempX
0015c2 91b0 0613 	LDS  R27,_tempX+1
0015c4 9180 0614 	LDS  R24,_tempX+2
0015c6 9190 0615 	LDS  R25,_tempX+3
0015c8 2766      	CLR  R22
0015c9 2777      	CLR  R23
0015ca 940e 18a5 	CALL __ADDD12
0015cc 93e0 0612 	STS  _tempX,R30
0015ce 93f0 0613 	STS  _tempX+1,R31
0015d0 9360 0614 	STS  _tempX+2,R22
0015d2 9370 0615 	STS  _tempX+3,R23
0015d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2B:
0015d5 91a0 0616 	LDS  R26,_tempY
0015d7 91b0 0617 	LDS  R27,_tempY+1
0015d9 9180 0618 	LDS  R24,_tempY+2
0015db 9190 0619 	LDS  R25,_tempY+3
0015dd 2766      	CLR  R22
0015de 2777      	CLR  R23
0015df 940e 18a5 	CALL __ADDD12
0015e1 93e0 0616 	STS  _tempY,R30
0015e3 93f0 0617 	STS  _tempY+1,R31
0015e5 9360 0618 	STS  _tempY+2,R22
0015e7 9370 0619 	STS  _tempY+3,R23
0015e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
                +
0015ea e1e0     +LDI R30 , LOW ( 0x10 )
0015eb e0f0     +LDI R31 , HIGH ( 0x10 )
0015ec e060     +LDI R22 , BYTE3 ( 0x10 )
0015ed e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0015ee 940e 1936 	CALL __DIVD21
0015f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
0015f1 50e1      	SUBI R30,LOW(1)
0015f2 e0f0      	LDI  R31,0
0015f3 5de0      	SUBI R30,LOW(-_rx_buffer0)
0015f4 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0015f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
0015f6 93aa      	ST   -Y,R26
0015f7 93ea      	ST   -Y,R30
0015f8 93fa      	ST   -Y,R31
0015f9 b7ef      	IN   R30,SREG
0015fa 93ea      	ST   -Y,R30
0015fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
0015fc 50e1      	SUBI R30,LOW(1)
0015fd e0f0      	LDI  R31,0
0015fe 5ced      	SUBI R30,LOW(-_tx_buffer0)
0015ff 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
001600 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
001601 93e0 062f 	STS  _uart_swap,R30
001603 81e8      	LD   R30,Y
001604 93ea      	ST   -Y,R30
001605 940c 0b38 	JMP  _putchar0_i
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
001607 50e1      	SUBI R30,LOW(1)
001608 e0f0      	LDI  R31,0
001609 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x32:
00160a 93fa      	ST   -Y,R31
00160b 93ea      	ST   -Y,R30
00160c efe7      	LDI  R30,LOW(247)
00160d e0f0      	LDI  R31,HIGH(247)
00160e 93fa      	ST   -Y,R31
00160f 93ea      	ST   -Y,R30
001610 cecb      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x33:
001611 940e 0827 	CALL _SSD1963_PutString16
001613 81ed      	LDD  R30,Y+5
001614 81fe      	LDD  R31,Y+5+1
001615 93fa      	ST   -Y,R31
001616 93ea      	ST   -Y,R30
001617 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x34:
001618 93fa      	ST   -Y,R31
001619 93ea      	ST   -Y,R30
00161a efe0      	LDI  R30,LOW(240)
00161b e0f0      	LDI  R31,HIGH(240)
00161c 93fa      	ST   -Y,R31
00161d 93ea      	ST   -Y,R30
00161e e0ee      	LDI  R30,LOW(270)
00161f e0f1      	LDI  R31,HIGH(270)
001620 93fa      	ST   -Y,R31
001621 93ea      	ST   -Y,R30
001622 efef      	LDI  R30,LOW(65535)
001623 efff      	LDI  R31,HIGH(65535)
001624 93fa      	ST   -Y,R31
001625 93ea      	ST   -Y,R30
001626 940c 09b7 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x35:
001628 93fa      	ST   -Y,R31
001629 93ea      	ST   -Y,R30
00162a efe1      	LDI  R30,LOW(241)
00162b e0f0      	LDI  R31,HIGH(241)
00162c 93fa      	ST   -Y,R31
00162d 93ea      	ST   -Y,R30
00162e e0ed      	LDI  R30,LOW(269)
00162f e0f1      	LDI  R31,HIGH(269)
001630 93fa      	ST   -Y,R31
001631 93ea      	ST   -Y,R30
001632 e0e1      	LDI  R30,LOW(1)
001633 e0f0      	LDI  R31,HIGH(1)
001634 ce98      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x36:
001635 efef      	LDI  R30,LOW(65535)
001636 efff      	LDI  R31,HIGH(65535)
001637 93fa      	ST   -Y,R31
001638 93ea      	ST   -Y,R30
001639 940c 0bdd 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
00163b 93fa      	ST   -Y,R31
00163c 93ea      	ST   -Y,R30
00163d e0e2      	LDI  R30,LOW(2)
00163e 93ea      	ST   -Y,R30
00163f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x38:
001640 93fa      	ST   -Y,R31
001641 93ea      	ST   -Y,R30
001642 e0e4      	LDI  R30,LOW(4)
001643 93ea      	ST   -Y,R30
001644 ce83      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x39:
001645 efe0      	LDI  R30,LOW(240)
001646 e0f0      	LDI  R31,HIGH(240)
001647 15e6      	CP   R30,R6
001648 05f7      	CPC  R31,R7
001649 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
00164a e0ee      	LDI  R30,LOW(270)
00164b e0f1      	LDI  R31,HIGH(270)
00164c 166e      	CP   R6,R30
00164d 067f      	CPC  R7,R31
00164e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 51 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0x3B:
00164f 93fa      	ST   -Y,R31
001650 93ea      	ST   -Y,R30
001651 931a      	ST   -Y,R17
001652 930a      	ST   -Y,R16
001653 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x3C:
001654 933a      	ST   -Y,R19
001655 932a      	ST   -Y,R18
001656 85ea      	LDD  R30,Y+10
001657 85fb      	LDD  R31,Y+10+1
001658 ce74      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x3D:
001659 01f9      	MOVW R30,R18
00165a 9670      	ADIW R30,16
00165b 93fa      	ST   -Y,R31
00165c 93ea      	ST   -Y,R30
00165d 85ea      	LDD  R30,Y+10
00165e 85fb      	LDD  R31,Y+10+1
00165f ce6d      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
001660 e0f0      	LDI  R31,0
001661 9730      	SBIW R30,0
001662 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3F:
001663 940e 0827 	CALL _SSD1963_PutString16
                +
001665 5c00     +SUBI R16 , LOW ( - 64 )
001666 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
001667 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x40:
001668 91e0 07af 	LDS  R30,_GraphUpdTime
00166a 91f0 07b0 	LDS  R31,_GraphUpdTime+1
00166c cfe2      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
00166d 933a      	ST   -Y,R19
00166e 932a      	ST   -Y,R18
00166f e0e4      	LDI  R30,LOW(4)
001670 93ea      	ST   -Y,R30
001671 85eb      	LDD  R30,Y+11
001672 85fc      	LDD  R31,Y+11+1
001673 ce59      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x42:
001674 e0e0      	LDI  R30,0
001675 fc20      	SBRC R2,0
001676 e0e1      	LDI  R30,1
001677 e0f0      	LDI  R31,0
001678 cfd6      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x43:
001679 933a      	ST   -Y,R19
00167a 932a      	ST   -Y,R18
00167b e0e1      	LDI  R30,LOW(1)
00167c 93ea      	ST   -Y,R30
00167d 85eb      	LDD  R30,Y+11
00167e 85fc      	LDD  R31,Y+11+1
00167f ce4d      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x44:
001680 940e 0841 	CALL _SSD1963_PutValue16
                +
001682 e500     +LDI R16 , LOW ( 80 )
001683 e010     +LDI R17 , HIGH ( 80 )
                 	__GETWRN 16,17,80
                +
001684 e126     +LDI R18 , LOW ( 22 )
001685 e030     +LDI R19 , HIGH ( 22 )
                 	__GETWRN 18,19,22
001686 91e0 07b3 	LDS  R30,_Amplitude
001688 91f0 07b4 	LDS  R31,_Amplitude+1
00168a cfc4      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x45:
00168b 933a      	ST   -Y,R19
00168c 932a      	ST   -Y,R18
00168d e0e3      	LDI  R30,LOW(3)
00168e 93ea      	ST   -Y,R30
00168f 85eb      	LDD  R30,Y+11
001690 85fc      	LDD  R31,Y+11+1
001691 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x46:
001692 93fa      	ST   -Y,R31
001693 93ea      	ST   -Y,R30
001694 e0e8      	LDI  R30,LOW(8456)
001695 e2f1      	LDI  R31,HIGH(8456)
001696 93fa      	ST   -Y,R31
001697 93ea      	ST   -Y,R30
001698 940e 0841 	CALL _SSD1963_PutValue16
                +
00169a 5c00     +SUBI R16 , LOW ( - 64 )
00169b 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
00169c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x47:
                +
00169d 91e0 07b5+LDS R30 , _Amplitude + ( 2 )
00169f 91f0 07b6+LDS R31 , _Amplitude + ( 2 ) + 1
                 	__GETW1MN _Amplitude,2
0016a1 cfad      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x48:
0016a2 940e 0841 	CALL _SSD1963_PutValue16
                +
0016a4 5c00     +SUBI R16 , LOW ( - 64 )
0016a5 4f1f     +SBCI R17 , HIGH ( - 64 )
                 	__ADDWRN 16,17,64
0016a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x49:
                +
0016a7 91e0 07b7+LDS R30 , _Amplitude + ( 4 )
0016a9 91f0 07b8+LDS R31 , _Amplitude + ( 4 ) + 1
                 	__GETW1MN _Amplitude,4
0016ab cfa3      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4A:
0016ac 93fa      	ST   -Y,R31
0016ad 93ea      	ST   -Y,R30
0016ae e0e8      	LDI  R30,LOW(8456)
0016af e2f1      	LDI  R31,HIGH(8456)
0016b0 93fa      	ST   -Y,R31
0016b1 93ea      	ST   -Y,R30
0016b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
0016b3 933a      	ST   -Y,R19
0016b4 932a      	ST   -Y,R18
0016b5 935a      	ST   -Y,R21
0016b6 934a      	ST   -Y,R20
0016b7 ce10      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4C:
0016b8 935a      	ST   -Y,R21
0016b9 934a      	ST   -Y,R20
0016ba ce0d      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4D:
0016bb 85e9      	LDD  R30,Y+9
0016bc e0f0      	LDI  R31,0
0016bd cf91      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4E:
0016be 933a      	ST   -Y,R19
0016bf 932a      	ST   -Y,R18
0016c0 e0e3      	LDI  R30,LOW(3)
0016c1 93ea      	ST   -Y,R30
0016c2 cff5      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4F:
0016c3 93e0 07b1 	STS  _Graph_X,R30
0016c5 93f0 07b2 	STS  _Graph_X+1,R31
0016c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x50:
0016c8 91e0 07b1 	LDS  R30,_Graph_X
0016ca 91f0 07b2 	LDS  R31,_Graph_X+1
0016cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x51:
0016cd 91a0 07b1 	LDS  R26,_Graph_X
0016cf 91b0 07b2 	LDS  R27,_Graph_X+1
0016d1 3daf      	CPI  R26,LOW(0x1DF)
0016d2 e0e1      	LDI  R30,HIGH(0x1DF)
0016d3 07be      	CPC  R27,R30
0016d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
0016d5 91e0 07ad 	LDS  R30,_GraphUpd_mSec
0016d7 91f0 07ae 	LDS  R31,_GraphUpd_mSec+1
0016d9 93e0 07af 	STS  _GraphUpdTime,R30
0016db 93f0 07b0 	STS  _GraphUpdTime+1,R31
0016dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x53:
0016de dfe9      	RCALL SUBOPT_0x50
0016df cf6f      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
0016e0 940e 08b1 	CALL _SSD1963_DrawFastLine
0016e2 cffb      	RJMP SUBOPT_0x53
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x55:
0016e3 dfe4      	RCALL SUBOPT_0x50
0016e4 9636      	ADIW R30,6
0016e5 018f      	MOVW R16,R30
                +
0016e6 3d0f     +CPI R16 , LOW ( 479 )
0016e7 e0e1     +LDI R30 , HIGH ( 479 )
0016e8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,479
0016e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x56:
0016ea 940e 0af2 	CALL _getchar0
0016ec e0f0      	LDI  R31,0
0016ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:135 WORDS
                 SUBOPT_0x57:
0016ee 2fe5      	MOV  R30,R21
0016ef e0f0      	LDI  R31,0
0016f0 01de      	MOVW R26,R28
0016f1 961c      	ADIW R26,12
0016f2 0fee      	LSL  R30
0016f3 1fff      	ROL  R31
0016f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x58:
0016f5 0fae      	ADD  R26,R30
0016f6 1fbf      	ADC  R27,R31
0016f7 940e 195f 	CALL __GETW1P
0016f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x59:
0016fa e8a0      	LDI  R26,LOW(128)
0016fb e0b0      	LDI  R27,HIGH(128)
0016fc 940e 1967 	CALL __SWAPW12
0016fe 1bea      	SUB  R30,R26
0016ff 0bfb      	SBC  R31,R27
001700 01db      	MOVW R26,R22
001701 93ed      	ST   X+,R30
001702 93fc      	ST   X,R31
001703 cfea      	RJMP SUBOPT_0x57
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5A:
001704 0fea      	ADD  R30,R26
001705 1ffb      	ADC  R31,R27
001706 01bf      	MOVW R22,R30
001707 8000      	LD   R0,Z
001708 8011      	LDD  R1,Z+1
001709 91e0 07a5 	LDS  R30,_ParameterState
00170b eba3      	LDI  R26,LOW(_Amplitude)
00170c e0b7      	LDI  R27,HIGH(_Amplitude)
00170d e0f0      	LDI  R31,0
00170e 0fee      	LSL  R30
00170f 1fff      	ROL  R31
001710 cfe4      	RJMP SUBOPT_0x58
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5B:
001711 01d0      	MOVW R26,R0
001712 940e 18f4 	CALL __MULW12
001714 01db      	MOVW R26,R22
001715 93ed      	ST   X+,R30
001716 93fc      	ST   X,R31
001717 cfd6      	RJMP SUBOPT_0x57
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5C:
001718 0fae      	ADD  R26,R30
001719 1fbf      	ADC  R27,R31
00171a 91ed      	LD   R30,X+
00171b 91fd      	LD   R31,X+
00171c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5D:
00171d 940e 18c0 	CALL __ASRW3
00171f 940e 18be 	CALL __ASRW4
001721 93fe      	ST   -X,R31
001722 93ee      	ST   -X,R30
001723 cfca      	RJMP SUBOPT_0x57
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5E:
001724 0fae      	ADD  R26,R30
001725 1fbf      	ADC  R27,R31
001726 eee8      	LDI  R30,LOW(232)
001727 e0f0      	LDI  R31,HIGH(232)
001728 93ed      	ST   X+,R30
001729 93fc      	ST   X,R31
00172a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5F:
00172b 0fae      	ADD  R26,R30
00172c 1fbf      	ADC  R27,R31
00172d e2ea      	LDI  R30,LOW(42)
00172e e0f0      	LDI  R31,HIGH(42)
00172f 93ed      	ST   X+,R30
001730 93fc      	ST   X,R31
001731 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x60:
001732 2fe5      	MOV  R30,R21
001733 eba9      	LDI  R26,LOW(_ValueLast)
001734 e0b7      	LDI  R27,HIGH(_ValueLast)
001735 e0f0      	LDI  R31,0
001736 0fee      	LSL  R30
001737 1fff      	ROL  R31
001738 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x61:
001739 93fa      	ST   -Y,R31
00173a 93ea      	ST   -Y,R30
00173b 2fe5      	MOV  R30,R21
00173c e0f0      	LDI  R31,0
00173d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
00173e 01de      	MOVW R26,R28
00173f 9652      	ADIW R26,18
001740 0fee      	LSL  R30
001741 1fff      	ROL  R31
001742 cfb2      	RJMP SUBOPT_0x58
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x63:
001743 01de      	MOVW R26,R28
001744 961e      	ADIW R26,14
001745 0fee      	LSL  R30
001746 1fff      	ROL  R31
001747 cfad      	RJMP SUBOPT_0x58
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x64:
001748 93fa      	ST   -Y,R31
001749 93ea      	ST   -Y,R30
00174a e080      	LDI  R24,0
00174b 940e 1445 	CALL _printf
00174d 9622      	ADIW R28,2
00174e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x65:
00174f 940e 0b07 	CALL _getchar2
001751 2f0e      	MOV  R16,R30
001752 940e 0b07 	CALL _getchar2
001754 2f3e      	MOV  R19,R30
001755 940e 0b07 	CALL _getchar2
001757 2f2e      	MOV  R18,R30
001758 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x66:
001759 91e0 07a5 	LDS  R30,_ParameterState
00175b 93ea      	ST   -Y,R30
00175c efe8      	LDI  R30,LOW(248)
00175d e0f0      	LDI  R31,HIGH(248)
00175e 93fa      	ST   -Y,R31
00175f 93ea      	ST   -Y,R30
001760 940c 0cf4 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x67:
001762 91e0 07a5 	LDS  R30,_ParameterState
001764 eba3      	LDI  R26,LOW(_Amplitude)
001765 e0b7      	LDI  R27,HIGH(_Amplitude)
001766 e0f0      	LDI  R31,0
001767 0fee      	LSL  R30
001768 1fff      	ROL  R31
001769 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x68:
00176a 93fe      	ST   -X,R31
00176b 93ee      	ST   -X,R30
00176c e1e4      	LDI  R30,LOW(20)
00176d e0f0      	LDI  R31,HIGH(20)
00176e cd46      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x69:
00176f 91e0 07a4 	LDS  R30,_State
001771 91a0 07a8 	LDS  R26,_ConfigState
001773 0fea      	ADD  R30,R26
001774 93ea      	ST   -Y,R30
001775 e0ef      	LDI  R30,LOW(30735)
001776 e7f8      	LDI  R31,HIGH(30735)
001777 93fa      	ST   -Y,R31
001778 93ea      	ST   -Y,R30
001779 940c 0cf4 	JMP  _PutParameterText
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6A:
00177b 91e0 07a8 	LDS  R30,_ConfigState
00177d eba3      	LDI  R26,LOW(_Amplitude)
00177e e0b7      	LDI  R27,HIGH(_Amplitude)
00177f e0f0      	LDI  R31,0
001780 0fee      	LSL  R30
001781 1fff      	ROL  R31
001782 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6B:
001783 91ed      	LD   R30,X+
001784 91fd      	LD   R31,X+
001785 9631      	ADIW R30,1
001786 93fe      	ST   -X,R31
001787 93ee      	ST   -X,R30
001788 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6C:
001789 93fa      	ST   -Y,R31
00178a 93ea      	ST   -Y,R30
00178b ece0      	LDI  R30,LOW(192)
00178c e0f0      	LDI  R31,HIGH(192)
00178d 93fa      	ST   -Y,R31
00178e 93ea      	ST   -Y,R30
00178f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6D:
001790 940e 0827 	CALL _SSD1963_PutString16
001792 cd01      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6E:
001793 932a      	ST   -Y,R18
001794 85ed      	LDD  R30,Y+13
001795 85fe      	LDD  R31,Y+13+1
001796 93fa      	ST   -Y,R31
001797 93ea      	ST   -Y,R30
001798 89e9      	LDD  R30,Y+17
001799 89fa      	LDD  R31,Y+17+1
00179a 9509      	ICALL
00179b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6F:
00179c 89e8      	LDD  R30,Y+16
00179d 89f9      	LDD  R31,Y+16+1
00179e 9734      	SBIW R30,4
00179f 8be8      	STD  Y+16,R30
0017a0 8bf9      	STD  Y+16+1,R31
0017a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x70:
0017a2 85ed      	LDD  R30,Y+13
0017a3 85fe      	LDD  R31,Y+13+1
0017a4 93fa      	ST   -Y,R31
0017a5 93ea      	ST   -Y,R30
0017a6 89e9      	LDD  R30,Y+17
0017a7 89fa      	LDD  R31,Y+17+1
0017a8 9509      	ICALL
0017a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x71:
0017aa 89a8      	LDD  R26,Y+16
0017ab 89b9      	LDD  R27,Y+16+1
0017ac 9614      	ADIW R26,4
0017ad 940e 195f 	CALL __GETW1P
0017af 83ee      	STD  Y+6,R30
0017b0 83ff      	STD  Y+6+1,R31
0017b1 93fa      	ST   -Y,R31
0017b2 93ea      	ST   -Y,R30
0017b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x72:
0017b4 89a8      	LDD  R26,Y+16
0017b5 89b9      	LDD  R27,Y+16+1
0017b6 9614      	ADIW R26,4
0017b7 940e 195f 	CALL __GETW1P
0017b9 87ea      	STD  Y+10,R30
0017ba 87fb      	STD  Y+10+1,R31
0017bb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0017bc 91e9      	ld   r30,y+
0017bd 91f9      	ld   r31,y+
0017be 9630      	adiw r30,0
0017bf f039      	breq __delay_ms1
                 __delay_ms0:
                +
0017c0 ea80     +LDI R24 , LOW ( 0xFA0 )
0017c1 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0017c2 9701     +SBIW R24 , 1
0017c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0017c4 95a8      	wdr
0017c5 9731      	sbiw r30,1
0017c6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0017c7 9508      	ret
                 
                 __ROUND_REPACK:
0017c8 2355      	TST  R21
0017c9 f442      	BRPL __REPACK
0017ca 3850      	CPI  R21,0x80
0017cb f411      	BRNE __ROUND_REPACK0
0017cc ffe0      	SBRS R30,0
0017cd c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0017ce 9631      	ADIW R30,1
0017cf 1f69      	ADC  R22,R25
0017d0 1f79      	ADC  R23,R25
0017d1 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0017d2 e850      	LDI  R21,0x80
0017d3 2757      	EOR  R21,R23
0017d4 f411      	BRNE __REPACK0
0017d5 935f      	PUSH R21
0017d6 c073      	RJMP __ZERORES
                 __REPACK0:
0017d7 3f5f      	CPI  R21,0xFF
0017d8 f031      	BREQ __REPACK1
0017d9 0f66      	LSL  R22
0017da 0c00      	LSL  R0
0017db 9557      	ROR  R21
0017dc 9567      	ROR  R22
0017dd 2f75      	MOV  R23,R21
0017de 9508      	RET
                 __REPACK1:
0017df 935f      	PUSH R21
0017e0 2000      	TST  R0
0017e1 f00a      	BRMI __REPACK2
0017e2 c073      	RJMP __MAXRES
                 __REPACK2:
0017e3 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0017e4 e850      	LDI  R21,0x80
0017e5 2e19      	MOV  R1,R25
0017e6 2215      	AND  R1,R21
0017e7 0f88      	LSL  R24
0017e8 1f99      	ROL  R25
0017e9 2795      	EOR  R25,R21
0017ea 0f55      	LSL  R21
0017eb 9587      	ROR  R24
                 
                 __UNPACK1:
0017ec e850      	LDI  R21,0x80
0017ed 2e07      	MOV  R0,R23
0017ee 2205      	AND  R0,R21
0017ef 0f66      	LSL  R22
0017f0 1f77      	ROL  R23
0017f1 2775      	EOR  R23,R21
0017f2 0f55      	LSL  R21
0017f3 9567      	ROR  R22
0017f4 9508      	RET
                 
                 __CFD1U:
0017f5 9468      	SET
0017f6 c001      	RJMP __CFD1U0
                 __CFD1:
0017f7 94e8      	CLT
                 __CFD1U0:
0017f8 935f      	PUSH R21
0017f9 dff2      	RCALL __UNPACK1
0017fa 3870      	CPI  R23,0x80
0017fb f018      	BRLO __CFD10
0017fc 3f7f      	CPI  R23,0xFF
0017fd f408      	BRCC __CFD10
0017fe c04b      	RJMP __ZERORES
                 __CFD10:
0017ff e156      	LDI  R21,22
001800 1b57      	SUB  R21,R23
001801 f4aa      	BRPL __CFD11
001802 9551      	NEG  R21
001803 3058      	CPI  R21,8
001804 f40e      	BRTC __CFD19
001805 3059      	CPI  R21,9
                 __CFD19:
001806 f030      	BRLO __CFD17
001807 efef      	SER  R30
001808 efff      	SER  R31
001809 ef6f      	SER  R22
00180a e77f      	LDI  R23,0x7F
00180b f977      	BLD  R23,7
00180c c01a      	RJMP __CFD15
                 __CFD17:
00180d 2777      	CLR  R23
00180e 2355      	TST  R21
00180f f0b9      	BREQ __CFD15
                 __CFD18:
001810 0fee      	LSL  R30
001811 1fff      	ROL  R31
001812 1f66      	ROL  R22
001813 1f77      	ROL  R23
001814 955a      	DEC  R21
001815 f7d1      	BRNE __CFD18
001816 c010      	RJMP __CFD15
                 __CFD11:
001817 2777      	CLR  R23
                 __CFD12:
001818 3058      	CPI  R21,8
001819 f028      	BRLO __CFD13
00181a 2fef      	MOV  R30,R31
00181b 2ff6      	MOV  R31,R22
00181c 2f67      	MOV  R22,R23
00181d 5058      	SUBI R21,8
00181e cff9      	RJMP __CFD12
                 __CFD13:
00181f 2355      	TST  R21
001820 f031      	BREQ __CFD15
                 __CFD14:
001821 9576      	LSR  R23
001822 9567      	ROR  R22
001823 95f7      	ROR  R31
001824 95e7      	ROR  R30
001825 955a      	DEC  R21
001826 f7d1      	BRNE __CFD14
                 __CFD15:
001827 2000      	TST  R0
001828 f40a      	BRPL __CFD16
001829 d084      	RCALL __ANEGD1
                 __CFD16:
00182a 915f      	POP  R21
00182b 9508      	RET
                 
                 __CDF1U:
00182c 9468      	SET
00182d c001      	RJMP __CDF1U0
                 __CDF1:
00182e 94e8      	CLT
                 __CDF1U0:
00182f 9730      	SBIW R30,0
001830 4060      	SBCI R22,0
001831 4070      	SBCI R23,0
001832 f0b1      	BREQ __CDF10
001833 2400      	CLR  R0
001834 f026      	BRTS __CDF11
001835 2377      	TST  R23
001836 f412      	BRPL __CDF11
001837 9400      	COM  R0
001838 d075      	RCALL __ANEGD1
                 __CDF11:
001839 2e17      	MOV  R1,R23
00183a e17e      	LDI  R23,30
00183b 2011      	TST  R1
                 __CDF12:
00183c f032      	BRMI __CDF13
00183d 957a      	DEC  R23
00183e 0fee      	LSL  R30
00183f 1fff      	ROL  R31
001840 1f66      	ROL  R22
001841 1c11      	ROL  R1
001842 cff9      	RJMP __CDF12
                 __CDF13:
001843 2fef      	MOV  R30,R31
001844 2ff6      	MOV  R31,R22
001845 2d61      	MOV  R22,R1
001846 935f      	PUSH R21
001847 df8a      	RCALL __REPACK
001848 915f      	POP  R21
                 __CDF10:
001849 9508      	RET
                 
                 __ZERORES:
00184a 27ee      	CLR  R30
00184b 27ff      	CLR  R31
00184c 2766      	CLR  R22
00184d 2777      	CLR  R23
00184e 915f      	POP  R21
00184f 9508      	RET
                 
                 __MINRES:
001850 efef      	SER  R30
001851 efff      	SER  R31
001852 e76f      	LDI  R22,0x7F
001853 ef7f      	SER  R23
001854 915f      	POP  R21
001855 9508      	RET
                 
                 __MAXRES:
001856 efef      	SER  R30
001857 efff      	SER  R31
001858 e76f      	LDI  R22,0x7F
001859 e77f      	LDI  R23,0x7F
00185a 915f      	POP  R21
00185b 9508      	RET
                 
                 __DIVF21:
00185c 935f      	PUSH R21
00185d df86      	RCALL __UNPACK
00185e 3870      	CPI  R23,0x80
00185f f421      	BRNE __DIVF210
001860 2011      	TST  R1
                 __DIVF211:
001861 f40a      	BRPL __DIVF219
001862 cfed      	RJMP __MINRES
                 __DIVF219:
001863 cff2      	RJMP __MAXRES
                 __DIVF210:
001864 3890      	CPI  R25,0x80
001865 f409      	BRNE __DIVF218
                 __DIVF217:
001866 cfe3      	RJMP __ZERORES
                 __DIVF218:
001867 2401      	EOR  R0,R1
001868 9408      	SEC
001869 0b97      	SBC  R25,R23
00186a f41b      	BRVC __DIVF216
00186b f3d4      	BRLT __DIVF217
00186c 2000      	TST  R0
00186d cff3      	RJMP __DIVF211
                 __DIVF216:
00186e 2f79      	MOV  R23,R25
00186f 931f      	PUSH R17
001870 932f      	PUSH R18
001871 933f      	PUSH R19
001872 934f      	PUSH R20
001873 2411      	CLR  R1
001874 2711      	CLR  R17
001875 2722      	CLR  R18
001876 2733      	CLR  R19
001877 2744      	CLR  R20
001878 2755      	CLR  R21
001879 e290      	LDI  R25,32
                 __DIVF212:
00187a 17ae      	CP   R26,R30
00187b 07bf      	CPC  R27,R31
00187c 0786      	CPC  R24,R22
00187d 0741      	CPC  R20,R17
00187e f030      	BRLO __DIVF213
00187f 1bae      	SUB  R26,R30
001880 0bbf      	SBC  R27,R31
001881 0b86      	SBC  R24,R22
001882 0b41      	SBC  R20,R17
001883 9408      	SEC
001884 c001      	RJMP __DIVF214
                 __DIVF213:
001885 9488      	CLC
                 __DIVF214:
001886 1f55      	ROL  R21
001887 1f22      	ROL  R18
001888 1f33      	ROL  R19
001889 1c11      	ROL  R1
00188a 1faa      	ROL  R26
00188b 1fbb      	ROL  R27
00188c 1f88      	ROL  R24
00188d 1f44      	ROL  R20
00188e 959a      	DEC  R25
00188f f751      	BRNE __DIVF212
001890 01f9      	MOVW R30,R18
001891 2d61      	MOV  R22,R1
001892 914f      	POP  R20
001893 913f      	POP  R19
001894 912f      	POP  R18
001895 911f      	POP  R17
001896 2366      	TST  R22
001897 f032      	BRMI __DIVF215
001898 0f55      	LSL  R21
001899 1fee      	ROL  R30
00189a 1fff      	ROL  R31
00189b 1f66      	ROL  R22
00189c 957a      	DEC  R23
00189d f243      	BRVS __DIVF217
                 __DIVF215:
00189e df29      	RCALL __ROUND_REPACK
00189f 915f      	POP  R21
0018a0 9508      	RET
                 
                 __ADDW2R15:
0018a1 2400      	CLR  R0
0018a2 0daf      	ADD  R26,R15
0018a3 1db0      	ADC  R27,R0
0018a4 9508      	RET
                 
                 __ADDD12:
0018a5 0fea      	ADD  R30,R26
0018a6 1ffb      	ADC  R31,R27
0018a7 1f68      	ADC  R22,R24
0018a8 1f79      	ADC  R23,R25
0018a9 9508      	RET
                 
                 __ANEGW1:
0018aa 95f1      	NEG  R31
0018ab 95e1      	NEG  R30
0018ac 40f0      	SBCI R31,0
0018ad 9508      	RET
                 
                 __ANEGD1:
0018ae 95f0      	COM  R31
0018af 9560      	COM  R22
0018b0 9570      	COM  R23
0018b1 95e1      	NEG  R30
0018b2 4fff      	SBCI R31,-1
0018b3 4f6f      	SBCI R22,-1
0018b4 4f7f      	SBCI R23,-1
0018b5 9508      	RET
                 
                 __LSRB12:
0018b6 23ee      	TST  R30
0018b7 2e0e      	MOV  R0,R30
0018b8 2fea      	MOV  R30,R26
0018b9 f019      	BREQ __LSRB12R
                 __LSRB12L:
0018ba 95e6      	LSR  R30
0018bb 940a      	DEC  R0
0018bc f7e9      	BRNE __LSRB12L
                 __LSRB12R:
0018bd 9508      	RET
                 
                 __ASRW4:
0018be 95f5      	ASR  R31
0018bf 95e7      	ROR  R30
                 __ASRW3:
0018c0 95f5      	ASR  R31
0018c1 95e7      	ROR  R30
                 __ASRW2:
0018c2 95f5      	ASR  R31
0018c3 95e7      	ROR  R30
0018c4 95f5      	ASR  R31
0018c5 95e7      	ROR  R30
0018c6 9508      	RET
                 
                 __CWD1:
0018c7 2f6f      	MOV  R22,R31
0018c8 0f66      	ADD  R22,R22
0018c9 0b66      	SBC  R22,R22
0018ca 2f76      	MOV  R23,R22
0018cb 9508      	RET
                 
                 __MULW12U:
0018cc 9ffa      	MUL  R31,R26
0018cd 2df0      	MOV  R31,R0
0018ce 9feb      	MUL  R30,R27
0018cf 0df0      	ADD  R31,R0
0018d0 9fea      	MUL  R30,R26
0018d1 2de0      	MOV  R30,R0
0018d2 0df1      	ADD  R31,R1
0018d3 9508      	RET
                 
                 __MULD12U:
0018d4 9f7a      	MUL  R23,R26
0018d5 2d70      	MOV  R23,R0
0018d6 9f6b      	MUL  R22,R27
0018d7 0d70      	ADD  R23,R0
0018d8 9ff8      	MUL  R31,R24
0018d9 0d70      	ADD  R23,R0
0018da 9fe9      	MUL  R30,R25
0018db 0d70      	ADD  R23,R0
0018dc 9f6a      	MUL  R22,R26
0018dd 2d60      	MOV  R22,R0
0018de 0d71      	ADD  R23,R1
0018df 9ffb      	MUL  R31,R27
0018e0 0d60      	ADD  R22,R0
0018e1 1d71      	ADC  R23,R1
0018e2 9fe8      	MUL  R30,R24
0018e3 0d60      	ADD  R22,R0
0018e4 1d71      	ADC  R23,R1
0018e5 2788      	CLR  R24
0018e6 9ffa      	MUL  R31,R26
0018e7 2df0      	MOV  R31,R0
0018e8 0d61      	ADD  R22,R1
0018e9 1f78      	ADC  R23,R24
0018ea 9feb      	MUL  R30,R27
0018eb 0df0      	ADD  R31,R0
0018ec 1d61      	ADC  R22,R1
0018ed 1f78      	ADC  R23,R24
0018ee 9fea      	MUL  R30,R26
0018ef 2de0      	MOV  R30,R0
0018f0 0df1      	ADD  R31,R1
0018f1 1f68      	ADC  R22,R24
0018f2 1f78      	ADC  R23,R24
0018f3 9508      	RET
                 
                 __MULW12:
0018f4 d049      	RCALL __CHKSIGNW
0018f5 dfd6      	RCALL __MULW12U
0018f6 f40e      	BRTC __MULW121
0018f7 dfb2      	RCALL __ANEGW1
                 __MULW121:
0018f8 9508      	RET
                 
                 __MULD12:
0018f9 d052      	RCALL __CHKSIGND
0018fa dfd9      	RCALL __MULD12U
0018fb f40e      	BRTC __MULD121
0018fc dfb1      	RCALL __ANEGD1
                 __MULD121:
0018fd 9508      	RET
                 
                 __DIVW21U:
0018fe 2400      	CLR  R0
0018ff 2411      	CLR  R1
001900 e190      	LDI  R25,16
                 __DIVW21U1:
001901 0faa      	LSL  R26
001902 1fbb      	ROL  R27
001903 1c00      	ROL  R0
001904 1c11      	ROL  R1
001905 1a0e      	SUB  R0,R30
001906 0a1f      	SBC  R1,R31
001907 f418      	BRCC __DIVW21U2
001908 0e0e      	ADD  R0,R30
001909 1e1f      	ADC  R1,R31
00190a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00190b 60a1      	SBR  R26,1
                 __DIVW21U3:
00190c 959a      	DEC  R25
00190d f799      	BRNE __DIVW21U1
00190e 01fd      	MOVW R30,R26
00190f 01d0      	MOVW R26,R0
001910 9508      	RET
                 
                 __DIVD21U:
001911 933f      	PUSH R19
001912 934f      	PUSH R20
001913 935f      	PUSH R21
001914 2400      	CLR  R0
001915 2411      	CLR  R1
001916 2744      	CLR  R20
001917 2755      	CLR  R21
001918 e230      	LDI  R19,32
                 __DIVD21U1:
001919 0faa      	LSL  R26
00191a 1fbb      	ROL  R27
00191b 1f88      	ROL  R24
00191c 1f99      	ROL  R25
00191d 1c00      	ROL  R0
00191e 1c11      	ROL  R1
00191f 1f44      	ROL  R20
001920 1f55      	ROL  R21
001921 1a0e      	SUB  R0,R30
001922 0a1f      	SBC  R1,R31
001923 0b46      	SBC  R20,R22
001924 0b57      	SBC  R21,R23
001925 f428      	BRCC __DIVD21U2
001926 0e0e      	ADD  R0,R30
001927 1e1f      	ADC  R1,R31
001928 1f46      	ADC  R20,R22
001929 1f57      	ADC  R21,R23
00192a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00192b 60a1      	SBR  R26,1
                 __DIVD21U3:
00192c 953a      	DEC  R19
00192d f759      	BRNE __DIVD21U1
00192e 01fd      	MOVW R30,R26
00192f 01bc      	MOVW R22,R24
001930 01d0      	MOVW R26,R0
001931 01ca      	MOVW R24,R20
001932 915f      	POP  R21
001933 914f      	POP  R20
001934 913f      	POP  R19
001935 9508      	RET
                 
                 __DIVD21:
001936 d015      	RCALL __CHKSIGND
001937 dfd9      	RCALL __DIVD21U
001938 f40e      	BRTC __DIVD211
001939 df74      	RCALL __ANEGD1
                 __DIVD211:
00193a 9508      	RET
                 
                 __MODW21U:
00193b dfc2      	RCALL __DIVW21U
00193c 01fd      	MOVW R30,R26
00193d 9508      	RET
                 
                 __CHKSIGNW:
00193e 94e8      	CLT
00193f fff7      	SBRS R31,7
001940 c002      	RJMP __CHKSW1
001941 df68      	RCALL __ANEGW1
001942 9468      	SET
                 __CHKSW1:
001943 ffb7      	SBRS R27,7
001944 c006      	RJMP __CHKSW2
001945 95a0      	COM  R26
001946 95b0      	COM  R27
001947 9611      	ADIW R26,1
001948 f800      	BLD  R0,0
001949 9403      	INC  R0
00194a fa00      	BST  R0,0
                 __CHKSW2:
00194b 9508      	RET
                 
                 __CHKSIGND:
00194c 94e8      	CLT
00194d ff77      	SBRS R23,7
00194e c002      	RJMP __CHKSD1
00194f df5e      	RCALL __ANEGD1
001950 9468      	SET
                 __CHKSD1:
001951 ff97      	SBRS R25,7
001952 c00b      	RJMP __CHKSD2
001953 2400      	CLR  R0
001954 95a0      	COM  R26
001955 95b0      	COM  R27
001956 9580      	COM  R24
001957 9590      	COM  R25
001958 9611      	ADIW R26,1
001959 1d80      	ADC  R24,R0
00195a 1d90      	ADC  R25,R0
00195b f800      	BLD  R0,0
00195c 9403      	INC  R0
00195d fa00      	BST  R0,0
                 __CHKSD2:
00195e 9508      	RET
                 
                 __GETW1P:
00195f 91ed      	LD   R30,X+
001960 91fc      	LD   R31,X
001961 9711      	SBIW R26,1
001962 9508      	RET
                 
                 __GETW1PF:
001963 9005      	LPM  R0,Z+
001964 91f4      	LPM  R31,Z
001965 2de0      	MOV  R30,R0
001966 9508      	RET
                 
                 __SWAPW12:
001967 2e1b      	MOV  R1,R27
001968 2fbf      	MOV  R27,R31
001969 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00196a 2e1a      	MOV  R1,R26
00196b 2fae      	MOV  R26,R30
00196c 2de1      	MOV  R30,R1
00196d 9508      	RET
                 
                 __CPD21:
00196e 17ae      	CP   R26,R30
00196f 07bf      	CPC  R27,R31
001970 0786      	CPC  R24,R22
001971 0797      	CPC  R25,R23
001972 9508      	RET
                 
                 __SAVELOCR6:
001973 935a      	ST   -Y,R21
                 __SAVELOCR5:
001974 934a      	ST   -Y,R20
                 __SAVELOCR4:
001975 933a      	ST   -Y,R19
                 __SAVELOCR3:
001976 932a      	ST   -Y,R18
                 __SAVELOCR2:
001977 931a      	ST   -Y,R17
001978 930a      	ST   -Y,R16
001979 9508      	RET
                 
                 __LOADLOCR6:
00197a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00197b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00197c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00197d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00197e 8119      	LDD  R17,Y+1
00197f 8108      	LD   R16,Y
001980 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  62 r1 :  36 r2 :   3 r3 :   0 r4 :  10 r5 :   8 r6 :   4 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   4 r13:   4 r14:   0 r15:   4 
r16: 108 r17: 105 r18:  66 r19:  40 r20:  37 r21:  78 r22:  76 r23:  66 
r24:  47 r25:  31 r26: 437 r27: 125 r28:  32 r29:   1 r30:1276 r31: 649 
x  :  45 y  : 685 z  :  27 
Registers used: 29 out of 35 (82.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  39 add   :  38 
adiw  :  54 and   :   3 andi  :  15 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  44 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  36 
brlt  :  12 brmi  :   5 brne  : 151 brpl  :  17 brsh  :  24 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 618 
cbi   :  17 cbr   :   0 clc   :   1 clh   :   0 cli   :   5 cln   :   0 
clr   :  39 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  24 cpc   : 119 cpi   : 200 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   8 inc   :   4 jmp   :  68 ld    :  57 ldd   : 236 
ldi   : 810 lds   : 112 lpm   :  16 lsl   :  22 lsr   :   2 mov   :  62 
movw  :  70 mul   :  14 muls  :   0 mulsu :   0 neg   :   4 nop   :   9 
or    :   3 ori   :  10 out   :  61 pop   :  14 push  :  13 rcall :  90 
ret   : 130 reti  :   3 rjmp  : 253 rol   :  37 ror   :  12 sbc   :  17 
sbci  :  38 sbi   :  20 sbic  :   2 sbis  :   1 sbiw  :  31 sbr   :   2 
sbrc  :   3 sbrs  :  15 sec   :   2 seh   :   0 sei   :   5 sen   :   0 
ser   :   8 ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 358 std   :  93 sts   :  96 sub   :  12 subi  :  76 
swap  :   1 tst   :  25 wdr   :   3 
Instructions used: 81 out of 117 (69.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003302  10694   2364  13058  131072  10.0%
[.dseg] 0x000100 0x0007bf      0    703    703    4351  16.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
