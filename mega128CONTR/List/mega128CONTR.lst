
AVRASM ver. 2.1.30  D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm Thu Jul 30 10:38:03 2015

D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1061): warning: Register r4 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1065): warning: Register r13 already defined by the .DEF directive
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _TOUCH_X=R4
                 	.DEF _TOUCH_Y=R6
                 	.DEF _TOUCH_X_LAST=R8
                 	.DEF _TOUCH_Y_LAST=R10
                 	.DEF _rx_wr_index0=R13
                 	.DEF _rx_rd_index0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0474 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0d7d 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 09ca 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0a03 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0a43 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0a6e 	JMP  _usart1_tx_isr
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _blank_symb:
000046 0000
000047 0000
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004a 0000
00004b 0000
00004c 0000
00004d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_46:
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 8001
000063 8001
000064 0000
000065 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_UP:
000066 0000
000067 8001
000068 c003
000069 e007      	.DB  0x0,0x0,0x1,0x80,0x3,0xC0,0x7,0xE0
00006a 6006
00006b 300c
00006c 300c
00006d 1818      	.DB  0x6,0x60,0xC,0x30,0xC,0x30,0x18,0x18
00006e 1818
00006f 0c30
000070 0c30
000071 0660      	.DB  0x18,0x18,0x30,0xC,0x30,0xC,0x60,0x6
000072 0660
000073 fe7f
000074 fe7f
000075 0000      	.DB  0x60,0x6,0x7F,0xFE,0x7F,0xFE,0x0,0x0
                 _S_DOWN:
000076 0000
000077 fe7f
000078 fe7f
000079 0660      	.DB  0x0,0x0,0x7F,0xFE,0x7F,0xFE,0x60,0x6
00007a 0660
00007b 0c30
00007c 0c30
00007d 1818      	.DB  0x60,0x6,0x30,0xC,0x30,0xC,0x18,0x18
00007e 1818
00007f 300c
000080 300c
000081 6006      	.DB  0x18,0x18,0xC,0x30,0xC,0x30,0x6,0x60
000082 e007
000083 c003
000084 8001
000085 0000      	.DB  0x7,0xE0,0x3,0xC0,0x1,0x80,0x0,0x0
                 _S_48:
000086 0000
000087 e007
000088 300c
000089 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00008a 1818
00008b 1818
00008c 1818
00008d 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
00008e 1818
00008f 1818
000090 1818
000091 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000092 300c
000093 e007
000094 0000
000095 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_49:
000096 0000
000097 8001
000098 8003
000099 8007      	.DB  0x0,0x0,0x1,0x80,0x3,0x80,0x7,0x80
00009a 8001
00009b 8001
00009c 8001
00009d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00009e 8001
00009f 8001
0000a0 8001
0000a1 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
0000a2 8001
0000a3 c003
0000a4 0000
0000a5 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_50:
0000a6 0000
0000a7 e007
0000a8 300c
0000a9 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
0000aa 0810
0000ab 1800
0000ac 3000
0000ad 6000      	.DB  0x10,0x8,0x0,0x18,0x0,0x30,0x0,0x60
0000ae c000
0000af 8001
0000b0 0003
0000b1 0006      	.DB  0x0,0xC0,0x1,0x80,0x3,0x0,0x6,0x0
0000b2 180c
0000b3 f81f
0000b4 0000
0000b5 0000      	.DB  0xC,0x18,0x1F,0xF8,0x0,0x0,0x0,0x0
                 _S_51:
0000b6 0000
0000b7 e007
0000b8 1008
0000b9 0810      	.DB  0x0,0x0,0x7,0xE0,0x8,0x10,0x10,0x8
0000ba 0810
0000bb 1000
0000bc e000
0000bd 3000      	.DB  0x10,0x8,0x0,0x10,0x0,0xE0,0x0,0x30
0000be 1800
0000bf 0800
0000c0 0800
0000c1 1818      	.DB  0x0,0x18,0x0,0x8,0x0,0x8,0x18,0x18
0000c2 300c
0000c3 e007
0000c4 0000
0000c5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_52:
0000c6 0000
0000c7 3000
0000c8 7000
0000c9 f000      	.DB  0x0,0x0,0x0,0x30,0x0,0x70,0x0,0xF0
0000ca b001
0000cb 3003
0000cc 3006
0000cd 300c      	.DB  0x1,0xB0,0x3,0x30,0x6,0x30,0xC,0x30
0000ce 3018
0000cf f81f
0000d0 3000
0000d1 3000      	.DB  0x18,0x30,0x1F,0xF8,0x0,0x30,0x0,0x30
0000d2 3000
0000d3 7800
0000d4 0000
0000d5 0000      	.DB  0x0,0x30,0x0,0x78,0x0,0x0,0x0,0x0
                 _S_53:
0000d6 0000
0000d7 f80f
0000d8 f00f
0000d9 0008      	.DB  0x0,0x0,0xF,0xF8,0xF,0xF0,0x8,0x0
0000da 0010
0000db 0010
0000dc e01f
0000dd 3000      	.DB  0x10,0x0,0x10,0x0,0x1F,0xE0,0x0,0x30
0000de 1800
0000df 1800
0000e0 1800
0000e1 1818      	.DB  0x0,0x18,0x0,0x18,0x0,0x18,0x18,0x18
0000e2 301c
0000e3 e00f
0000e4 0000
0000e5 0000      	.DB  0x1C,0x30,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_54:
0000e6 0000
0000e7 e003
0000e8 1006
0000e9 000c      	.DB  0x0,0x0,0x3,0xE0,0x6,0x10,0xC,0x0
0000ea 0008
0000eb 0018
0000ec e01f
0000ed 301c      	.DB  0x8,0x0,0x18,0x0,0x1F,0xE0,0x1C,0x30
0000ee 1818
0000ef 1818
0000f0 1818
0000f1 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
0000f2 300c
0000f3 e007
0000f4 0000
0000f5 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_55:
0000f6 0000
0000f7 f81f
0000f8 1810
0000f9 1000      	.DB  0x0,0x0,0x1F,0xF8,0x10,0x18,0x0,0x10
0000fa 2000
0000fb 2000
0000fc 4000
0000fd 4000      	.DB  0x0,0x20,0x0,0x20,0x0,0x40,0x0,0x40
0000fe 8000
0000ff 8000
000100 0001
000101 0001      	.DB  0x0,0x80,0x0,0x80,0x1,0x0,0x1,0x0
000102 0002
000103 0002
000104 0000
000105 0000      	.DB  0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0
                 _S_56:
000106 0000
000107 e007
000108 300c
000109 1008      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x8,0x10
00010a 1008
00010b 300c
00010c e007
00010d 300c      	.DB  0x8,0x10,0xC,0x30,0x7,0xE0,0xC,0x30
00010e 1818
00010f 1818
000110 1818
000111 1818      	.DB  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
000112 300c
000113 e007
000114 0000
000115 0000      	.DB  0xC,0x30,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_57:
000116 0000
000117 e007
000118 300c
000119 1818      	.DB  0x0,0x0,0x7,0xE0,0xC,0x30,0x18,0x18
00011a 1818
00011b 1818
00011c 380c
00011d f807      	.DB  0x18,0x18,0x18,0x18,0xC,0x38,0x7,0xF8
00011e 1800
00011f 1000
000120 2000
000121 2000      	.DB  0x0,0x18,0x0,0x10,0x0,0x20,0x0,0x20
000122 c000
000123 0003
000124 0000
000125 0000      	.DB  0x0,0xC0,0x3,0x0,0x0,0x0,0x0,0x0
                 _S_32:
000126 0000
000127 0000
000128 0000
000129 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012a 0000
00012b 0000
00012c 0000
00012d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012e 0000
00012f 0000
000130 0000
000131 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000132 0000
000133 0000
000134 0000
000135 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_33:
000136 0000
000137 8001
000138 8001
000139 8001      	.DB  0x0,0x0,0x1,0x80,0x1,0x80,0x1,0x80
00013a 8001
00013b 8001
00013c 8001
00013d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00013e 8001
00013f 8001
000140 8001
000141 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
000142 8001
000143 8001
000144 0000
000145 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_40:
000146 0000
000147 6000
000148 8000
000149 0001      	.DB  0x0,0x0,0x0,0x60,0x0,0x80,0x1,0x0
00014a 0002
00014b 0002
00014c 0004
00014d 0004      	.DB  0x2,0x0,0x2,0x0,0x4,0x0,0x4,0x0
00014e 0004
00014f 0002
000150 0002
000151 0001      	.DB  0x4,0x0,0x2,0x0,0x2,0x0,0x1,0x0
000152 8000
000153 6000
000154 0000
000155 0000      	.DB  0x0,0x80,0x0,0x60,0x0,0x0,0x0,0x0
                 _S_41:
000156 0000
000157 0006
000158 0001
000159 8000      	.DB  0x0,0x0,0x6,0x0,0x1,0x0,0x0,0x80
00015a 4000
00015b 4000
00015c 2000
00015d 2000      	.DB  0x0,0x40,0x0,0x40,0x0,0x20,0x0,0x20
00015e 2000
00015f 4000
000160 4000
000161 8000      	.DB  0x0,0x20,0x0,0x40,0x0,0x40,0x0,0x80
000162 0001
000163 0006
000164 0000
000165 0000      	.DB  0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x0
                 _S_47:
000166 0000
000167 0000
000168 0800
000169 1800      	.DB  0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x18
00016a 3000
00016b 6000
00016c c000
00016d 8001      	.DB  0x0,0x30,0x0,0x60,0x0,0xC0,0x1,0x80
00016e 0003
00016f 0006
000170 000c
000171 0018      	.DB  0x3,0x0,0x6,0x0,0xC,0x0,0x18,0x0
000172 0010
000173 0000
000174 0000
000175 0000      	.DB  0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_43:
000176 0000
000177 0000
000178 8001
000179 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
00017a 8001
00017b 8001
00017c 8001
00017d fc3f      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x3F,0xFC
00017e fc3f
00017f 8001
000180 8001
000181 8001      	.DB  0x3F,0xFC,0x1,0x80,0x1,0x80,0x1,0x80
000182 8001
000183 8001
000184 0000
000185 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_45:
000186 0000
000187 0000
000188 0000
000189 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018a 0000
00018b 0000
00018c 0000
00018d fc3f      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x3F,0xFC
00018e fc3f
00018f 0000
000190 0000
000191 0000      	.DB  0x3F,0xFC,0x0,0x0,0x0,0x0,0x0,0x0
000192 0000
000193 0000
000194 0000
000195 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_58:
000196 0000
000197 0000
000198 0000
000199 8001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80
00019a 8001
00019b 0000
00019c 0000
00019d 0000      	.DB  0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0
00019e 0000
00019f 0000
0001a0 8001
0001a1 8001      	.DB  0x0,0x0,0x0,0x0,0x1,0x80,0x1,0x80
0001a2 0000
0001a3 0000
0001a4 0000
0001a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_60:
0001a6 0000
0001a7 3000
0001a8 6000
0001a9 c000      	.DB  0x0,0x0,0x0,0x30,0x0,0x60,0x0,0xC0
0001aa 8001
0001ab 0003
0001ac 0006
0001ad 000c      	.DB  0x1,0x80,0x3,0x0,0x6,0x0,0xC,0x0
0001ae 0006
0001af 0003
0001b0 8001
0001b1 c000      	.DB  0x6,0x0,0x3,0x0,0x1,0x80,0x0,0xC0
0001b2 6000
0001b3 3000
0001b4 0000
0001b5 0000      	.DB  0x0,0x60,0x0,0x30,0x0,0x0,0x0,0x0
                 _S_61:
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ba f00f
0001bb f00f
0001bc 0000
0001bd 0000      	.DB  0xF,0xF0,0xF,0xF0,0x0,0x0,0x0,0x0
0001be 0000
0001bf f00f
0001c0 f00f
0001c1 0000      	.DB  0x0,0x0,0xF,0xF0,0xF,0xF0,0x0,0x0
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _S_62:
0001c6 0000
0001c7 000c
0001c8 0006
0001c9 0003      	.DB  0x0,0x0,0xC,0x0,0x6,0x0,0x3,0x0
0001ca 8001
0001cb c000
0001cc 6000
0001cd 3000      	.DB  0x1,0x80,0x0,0xC0,0x0,0x60,0x0,0x30
0001ce 6000
0001cf c000
0001d0 8001
0001d1 0003      	.DB  0x0,0x60,0x0,0xC0,0x1,0x80,0x3,0x0
0001d2 0006
0001d3 000c
0001d4 0000
0001d5 0000      	.DB  0x6,0x0,0xC,0x0,0x0,0x0,0x0,0x0
                 _S_63:
0001d6 0000
0001d7 c003
0001d8 6006
0001d9 300c      	.DB  0x0,0x0,0x3,0xC0,0x6,0x60,0xC,0x30
0001da 300c
0001db 3004
0001dc 6000
0001dd c000      	.DB  0xC,0x30,0x4,0x30,0x0,0x60,0x0,0xC0
0001de 8001
0001df 8001
0001e0 8001
0001e1 0000      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x0,0x0
0001e2 8001
0001e3 8001
0001e4 0000
0001e5 0000      	.DB  0x1,0x80,0x1,0x80,0x0,0x0,0x0,0x0
                 _S_192:
0001e6 0000
0001e7 e000
0001e8 e000
0001e9 2001      	.DB  0x0,0x0,0x0,0xE0,0x0,0xE0,0x1,0x20
0001ea 2001
0001eb 3002
0001ec 1002
0001ed 1004      	.DB  0x1,0x20,0x2,0x30,0x2,0x10,0x4,0x10
0001ee 1804
0001ef f80f
0001f0 1818
0001f1 0c10      	.DB  0x4,0x18,0xF,0xF8,0x18,0x18,0x10,0xC
0001f2 0c30
0001f3 1e78
0001f4 0000
0001f5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_193:
0001f6 0000
0001f7 fe7f
0001f8 1e30
0001f9 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
0001fa 0030
0001fb 0030
0001fc f83f
0001fd fc3f      	.DB  0x30,0x0,0x30,0x0,0x3F,0xF8,0x3F,0xFC
0001fe 0e30
0001ff 0630
000200 0630
000201 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000202 fc3f
000203 f87f
000204 0000
000205 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_194:
000206 0000
000207 f07f
000208 1830
000209 0c30      	.DB  0x0,0x0,0x7F,0xF0,0x30,0x18,0x30,0xC
00020a 0c30
00020b 1830
00020c f83f
00020d fc3f      	.DB  0x30,0xC,0x30,0x18,0x3F,0xF8,0x3F,0xFC
00020e 0e30
00020f 0630
000210 0630
000211 0e30      	.DB  0x30,0xE,0x30,0x6,0x30,0x6,0x30,0xE
000212 fc3f
000213 f87f
000214 0000
000215 0000      	.DB  0x3F,0xFC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_195:
000216 0000
000217 fe7f
000218 1e30
000219 0230      	.DB  0x0,0x0,0x7F,0xFE,0x30,0x1E,0x30,0x2
00021a 0030
00021b 0030
00021c 0030
00021d 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
00021e 0030
00021f 0030
000220 0030
000221 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
000222 0030
000223 0078
000224 0000
000225 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_196:
000226 0000
000227 fc03
000228 1801
000229 1801      	.DB  0x0,0x0,0x3,0xFC,0x1,0x18,0x1,0x18
00022a 1801
00022b 1801
00022c 1801
00022d 1801      	.DB  0x1,0x18,0x1,0x18,0x1,0x18,0x1,0x18
00022e 1802
00022f 1804
000230 1808
000231 fc3f      	.DB  0x2,0x18,0x4,0x18,0x8,0x18,0x3F,0xFC
000232 3c38
000233 0c30
000234 0420
000235 0000      	.DB  0x38,0x3C,0x30,0xC,0x20,0x4,0x0,0x0
                 _S_197:
000236 0000
000237 fc7f
000238 1c30
000239 0430      	.DB  0x0,0x0,0x7F,0xFC,0x30,0x1C,0x30,0x4
00023a 0030
00023b 8030
00023c 803f
00023d 803f      	.DB  0x30,0x0,0x30,0x80,0x3F,0x80,0x3F,0x80
00023e 8030
00023f 0030
000240 0030
000241 0430      	.DB  0x30,0x80,0x30,0x0,0x30,0x0,0x30,0x4
000242 1c30
000243 fc7f
000244 0000
000245 0000      	.DB  0x30,0x1C,0x7F,0xFC,0x0,0x0,0x0,0x0
                 _S_198:
000246 0000
000247 c663
000248 8a51
000249 8811      	.DB  0x0,0x0,0x63,0xC6,0x51,0x8A,0x11,0x88
00024a 9009
00024b 9009
00024c e007
00024d e007      	.DB  0x9,0x90,0x9,0x90,0x7,0xE0,0x7,0xE0
00024e b00d
00024f 9819
000250 8811
000251 8c31      	.DB  0xD,0xB0,0x19,0x98,0x11,0x88,0x31,0x8C
000252 8421
000253 c663
000254 0000
000255 0000      	.DB  0x21,0x84,0x63,0xC6,0x0,0x0,0x0,0x0
                 _S_199:
000256 0000
000257 e00f
000258 3838
000259 0c60      	.DB  0x0,0x0,0xF,0xE0,0x38,0x38,0x60,0xC
00025a 0400
00025b 0c00
00025c f803
00025d 0800      	.DB  0x0,0x4,0x0,0xC,0x3,0xF8,0x0,0x8
00025e 0400
00025f 0600
000260 0600
000261 0c60      	.DB  0x0,0x4,0x0,0x6,0x0,0x6,0x60,0xC
000262 f83f
000263 e00f
000264 0000
000265 0000      	.DB  0x3F,0xF8,0xF,0xE0,0x0,0x0,0x0,0x0
                 _S_200:
000266 0000
000267 1e78
000268 0c30
000269 1c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0x1C
00026a 3c30
00026b 6c30
00026c cc30
00026d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00026e 0c33
00026f 0c36
000270 0c3c
000271 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000272 0c30
000273 1e78
000274 0000
000275 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_201:
000276 c003
000277 9e79
000278 0c30
000279 1c30      	.DB  0x3,0xC0,0x79,0x9E,0x30,0xC,0x30,0x1C
00027a 3c30
00027b 6c30
00027c cc30
00027d 8c31      	.DB  0x30,0x3C,0x30,0x6C,0x30,0xCC,0x31,0x8C
00027e 0c33
00027f 0c36
000280 0c3c
000281 0c38      	.DB  0x33,0xC,0x36,0xC,0x3C,0xC,0x38,0xC
000282 0c30
000283 1e78
000284 0000
000285 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_202:
000286 0000
000287 3c78
000288 6c30
000289 c030      	.DB  0x0,0x0,0x78,0x3C,0x30,0x6C,0x30,0xC0
00028a 8031
00028b 0033
00028c 003f
00028d 8039      	.DB  0x31,0x80,0x33,0x0,0x3F,0x0,0x39,0x80
00028e c030
00028f 6030
000290 3030
000291 1830      	.DB  0x30,0xC0,0x30,0x60,0x30,0x30,0x30,0x18
000292 0c30
000293 1e78
000294 0000
000295 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_203:
000296 0000
000297 fe01
000298 8c00
000299 8c00      	.DB  0x0,0x0,0x1,0xFE,0x0,0x8C,0x0,0x8C
00029a 8c00
00029b 8c00
00029c 0c01
00029d 0c01      	.DB  0x0,0x8C,0x0,0x8C,0x1,0xC,0x1,0xC
00029e 0c01
00029f 0c02
0002a0 0c02
0002a1 0c04      	.DB  0x1,0xC,0x2,0xC,0x2,0xC,0x4,0xC
0002a2 0c68
0002a3 1e70
0002a4 0000
0002a5 0000      	.DB  0x68,0xC,0x70,0x1E,0x0,0x0,0x0,0x0
                 _S_204:
0002a6 0000
0002a7 0e70
0002a8 1c38
0002a9 1c38      	.DB  0x0,0x0,0x70,0xE,0x38,0x1C,0x38,0x1C
0002aa 2c34
0002ab 2c34
0002ac 2c34
0002ad 4c32      	.DB  0x34,0x2C,0x34,0x2C,0x34,0x2C,0x32,0x4C
0002ae 4c32
0002af 4c32
0002b0 8c31
0002b1 8c31      	.DB  0x32,0x4C,0x32,0x4C,0x31,0x8C,0x31,0x8C
0002b2 8c31
0002b3 1e78
0002b4 0000
0002b5 0000      	.DB  0x31,0x8C,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_205:
0002b6 0000
0002b7 1e78
0002b8 0c30
0002b9 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
0002ba 0c30
0002bb 0c30
0002bc fc3f
0002bd fc3f      	.DB  0x30,0xC,0x30,0xC,0x3F,0xFC,0x3F,0xFC
0002be 0c30
0002bf 0c30
0002c0 0c30
0002c1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002c2 0c30
0002c3 1e78
0002c4 0000
0002c5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_206:
0002c6 0000
0002c7 e007
0002c8 781e
0002c9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002ca 0c30
0002cb 0e70
0002cc 0e70
0002cd 0e70      	.DB  0x30,0xC,0x70,0xE,0x70,0xE,0x70,0xE
0002ce 0e70
0002cf 0e70
0002d0 0c30
0002d1 1c38      	.DB  0x70,0xE,0x70,0xE,0x30,0xC,0x38,0x1C
0002d2 781e
0002d3 e007
0002d4 0000
0002d5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_207:
0002d6 0000
0002d7 fe7f
0002d8 fc3f
0002d9 0c30      	.DB  0x0,0x0,0x7F,0xFE,0x3F,0xFC,0x30,0xC
0002da 0c30
0002db 0c30
0002dc 0c30
0002dd 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002de 0c30
0002df 0c30
0002e0 0c30
0002e1 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
0002e2 0c30
0002e3 1e78
0002e4 0000
0002e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_208:
0002e6 0000
0002e7 f87f
0002e8 0c30
0002e9 0630      	.DB  0x0,0x0,0x7F,0xF8,0x30,0xC,0x30,0x6
0002ea 0630
0002eb 0630
0002ec 0c30
0002ed f83f      	.DB  0x30,0x6,0x30,0x6,0x30,0xC,0x3F,0xF8
0002ee 0030
0002ef 0030
0002f0 0030
0002f1 0030      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x30,0x0
0002f2 0030
0002f3 0078
0002f4 0000
0002f5 0000      	.DB  0x30,0x0,0x78,0x0,0x0,0x0,0x0,0x0
                 _S_209:
0002f6 0000
0002f7 e007
0002f8 781e
0002f9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0002fa 0430
0002fb 0070
0002fc 0070
0002fd 0070      	.DB  0x30,0x4,0x70,0x0,0x70,0x0,0x70,0x0
0002fe 0070
0002ff 0070
000300 0430
000301 1c38      	.DB  0x70,0x0,0x70,0x0,0x30,0x4,0x38,0x1C
000302 781e
000303 e007
000304 0000
000305 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_210:
000306 0000
000307 fe7f
000308 8661
000309 8241      	.DB  0x0,0x0,0x7F,0xFE,0x61,0x86,0x41,0x82
00030a 8001
00030b 8001
00030c 8001
00030d 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
00030e 8001
00030f 8001
000310 8001
000311 8001      	.DB  0x1,0x80,0x1,0x80,0x1,0x80,0x1,0x80
000312 8001
000313 c003
000314 0000
000315 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_211:
000316 0000
000317 0e78
000318 0430
000319 0418      	.DB  0x0,0x0,0x78,0xE,0x30,0x4,0x18,0x4
00031a 080c
00031b 0806
00031c 1003
00031d 9001      	.DB  0xC,0x8,0x6,0x8,0x3,0x10,0x1,0x90
00031e e000
00031f 6000
000320 4000
000321 400c      	.DB  0x0,0xE0,0x0,0x60,0x0,0x40,0xC,0x40
000322 800c
000323 0007
000324 0000
000325 0000      	.DB  0xC,0x80,0x7,0x0,0x0,0x0,0x0,0x0
                 _S_212:
000326 0000
000327 c003
000328 8001
000329 f00f      	.DB  0x0,0x0,0x3,0xC0,0x1,0x80,0xF,0xF0
00032a 9c39
00032b 8661
00032c 8241
00032d 8241      	.DB  0x39,0x9C,0x61,0x86,0x41,0x82,0x41,0x82
00032e 8661
00032f 9c39
000330 f00f
000331 8001      	.DB  0x61,0x86,0x39,0x9C,0xF,0xF0,0x1,0x80
000332 8001
000333 c003
000334 0000
000335 0000      	.DB  0x1,0x80,0x3,0xC0,0x0,0x0,0x0,0x0
                 _S_213:
000336 0000
000337 1e78
000338 0430
000339 0818      	.DB  0x0,0x0,0x78,0x1E,0x30,0x4,0x18,0x8
00033a 100c
00033b 2006
00033c 4003
00033d 8001      	.DB  0xC,0x10,0x6,0x20,0x3,0x40,0x1,0x80
00033e c002
00033f 6004
000340 3008
000341 1810      	.DB  0x2,0xC0,0x4,0x60,0x8,0x30,0x10,0x18
000342 0c20
000343 1e78
000344 0000
000345 0000      	.DB  0x20,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _S_214:
000346 0000
000347 1e78
000348 0c30
000349 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00034a 0c30
00034b 0c30
00034c 0c30
00034d 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
00034e 0c30
00034f 0c30
000350 0c30
000351 0c30      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x30,0xC
000352 0c30
000353 fe7f
000354 0600
000355 0200      	.DB  0x30,0xC,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_215:
000356 0000
000357 1e78
000358 0c30
000359 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00035a 0c30
00035b 0c30
00035c 0c38
00035d fc1f      	.DB  0x30,0xC,0x30,0xC,0x38,0xC,0x1F,0xFC
00035e 0c00
00035f 0c00
000360 0c00
000361 0c00      	.DB  0x0,0xC,0x0,0xC,0x0,0xC,0x0,0xC
000362 0c00
000363 1e00
000364 0000
000365 0000      	.DB  0x0,0xC,0x0,0x1E,0x0,0x0,0x0,0x0
                 _S_216:
000366 0000
000367 de7b
000368 8c31
000369 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00036a 8c31
00036b 8c31
00036c 8c31
00036d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00036e 8c31
00036f 8c31
000370 8c31
000371 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000372 8c31
000373 fe7f
000374 0000
000375 0000      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x0,0x0,0x0
                 _S_217:
000376 0000
000377 de7b
000378 8c31
000379 8c31      	.DB  0x0,0x0,0x7B,0xDE,0x31,0x8C,0x31,0x8C
00037a 8c31
00037b 8c31
00037c 8c31
00037d 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
00037e 8c31
00037f 8c31
000380 8c31
000381 8c31      	.DB  0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C
000382 8c31
000383 fe7f
000384 0600
000385 0200      	.DB  0x31,0x8C,0x7F,0xFE,0x0,0x6,0x0,0x2
                 _S_218:
000386 0000
000387 007c
000388 0058
000389 0058      	.DB  0x0,0x0,0x7C,0x0,0x58,0x0,0x58,0x0
00038a 0058
00038b 0018
00038c 0018
00038d f81f      	.DB  0x58,0x0,0x18,0x0,0x18,0x0,0x1F,0xF8
00038e 0c18
00038f 0618
000390 0618
000391 0618      	.DB  0x18,0xC,0x18,0x6,0x18,0x6,0x18,0x6
000392 0c18
000393 f83f
000394 0000
000395 0000      	.DB  0x18,0xC,0x3F,0xF8,0x0,0x0,0x0,0x0
                 _S_219:
000396 0000
000397 1e78
000398 0c30
000399 0c30      	.DB  0x0,0x0,0x78,0x1E,0x30,0xC,0x30,0xC
00039a 0c30
00039b 0c30
00039c 0c30
00039d 8c3f      	.DB  0x30,0xC,0x30,0xC,0x30,0xC,0x3F,0x8C
00039e 4c30
00039f 2c30
0003a0 2c30
0003a1 2c30      	.DB  0x30,0x4C,0x30,0x2C,0x30,0x2C,0x30,0x2C
0003a2 4c30
0003a3 9e7f
0003a4 0000
0003a5 0000      	.DB  0x30,0x4C,0x7F,0x9E,0x0,0x0,0x0,0x0
                 _S_220:
0003a6 0000
0003a7 0078
0003a8 0030
0003a9 0030      	.DB  0x0,0x0,0x78,0x0,0x30,0x0,0x30,0x0
0003aa 0030
0003ab 0030
0003ac 0030
0003ad f83f      	.DB  0x30,0x0,0x30,0x0,0x30,0x0,0x3F,0xF8
0003ae 0c30
0003af 0630
0003b0 0630
0003b1 0630      	.DB  0x30,0xC,0x30,0x6,0x30,0x6,0x30,0x6
0003b2 0c30
0003b3 f87f
0003b4 0000
0003b5 0000      	.DB  0x30,0xC,0x7F,0xF8,0x0,0x0,0x0,0x0
                 _S_221:
0003b6 0000
0003b7 e007
0003b8 781e
0003b9 1c38      	.DB  0x0,0x0,0x7,0xE0,0x1E,0x78,0x38,0x1C
0003ba 0c30
0003bb 0e00
0003bc 0e00
0003bd fe00      	.DB  0x30,0xC,0x0,0xE,0x0,0xE,0x0,0xFE
0003be 0e00
0003bf 0e00
0003c0 0c30
0003c1 1c38      	.DB  0x0,0xE,0x0,0xE,0x30,0xC,0x38,0x1C
0003c2 781e
0003c3 e007
0003c4 0000
0003c5 0000      	.DB  0x1E,0x78,0x7,0xE0,0x0,0x0,0x0,0x0
                 _S_222:
0003c6 0000
0003c7 f879
0003c8 0c33
0003c9 0432      	.DB  0x0,0x0,0x79,0xF8,0x33,0xC,0x32,0x4
0003ca 0636
0003cb 0636
0003cc 0636
0003cd 063e      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x3E,0x6
0003ce 0636
0003cf 0636
0003d0 0636
0003d1 0432      	.DB  0x36,0x6,0x36,0x6,0x36,0x6,0x32,0x4
0003d2 0c33
0003d3 f879
0003d4 0000
0003d5 0000      	.DB  0x33,0xC,0x79,0xF8,0x0,0x0,0x0,0x0
                 _S_223:
0003d6 0000
0003d7 fe03
0003d8 0c06
0003d9 0c0c      	.DB  0x0,0x0,0x3,0xFE,0x6,0xC,0xC,0xC
0003da 0c0c
0003db 0c0c
0003dc 0c06
0003dd fc03      	.DB  0xC,0xC,0xC,0xC,0x6,0xC,0x3,0xFC
0003de 0c03
0003df 0c06
0003e0 0c0c
0003e1 0c18      	.DB  0x3,0xC,0x6,0xC,0xC,0xC,0x18,0xC
0003e2 0c30
0003e3 1e78
0003e4 0000
0003e5 0000      	.DB  0x30,0xC,0x78,0x1E,0x0,0x0,0x0,0x0
                 _tbl10_G101:
0003e6 2710
0003e7 03e8
0003e8 0064
0003e9 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
0003ea 0001      	.DB  0x1,0x0
                 _tbl16_G101:
0003eb 1000
0003ec 0100
0003ed 0010
0003ee 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
0003ef 0000      	.DW  0x0000
                 
                 _0x113:
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1412): warning: .cseg .db misalignment - padding zero byte
0003f0 005a      	.DB  0x5A
                 _0x0:
0003f1 2020
0003f2 2020
0003f3 0020
0003f4 c5cc      	.DB  0x20,0x20,0x20,0x20,0x20,0x0,0xCC,0xC5
0003f5 decd
0003f6 2000
0003f7 2b20
0003f8 2000      	.DB  0xCD,0xDE,0x0,0x20,0x20,0x2B,0x0,0x20
0003f9 2d20
0003fa cf00
0003fb d3c0
0003fc c0c7      	.DB  0x20,0x2D,0x0,0xCF,0xC0,0xD3,0xC7,0xC0
0003fd 2000
0003fe 2020
0003ff 2020
000400 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000401 2020
000402 2020
000403 2020
000404 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000405 0020
000406 c0cd
000407 d0cf
000408 c6df      	.DB  0x20,0x0,0xCD,0xC0,0xCF,0xD0,0xDF,0xC6
000409 cdc5
00040a c5c8
00040b d400
00040c c7c0      	.DB  0xC5,0xCD,0xC8,0xC5,0x0,0xD4,0xC0,0xC7
00040d d200
00040e cace
00040f cd00
000410 cfc0      	.DB  0x0,0xD2,0xCE,0xCA,0x0,0xCD,0xC0,0xCF
000411 dfd0
000412 c5c6
000413 c8cd
000414 20c5      	.DB  0xD0,0xDF,0xC6,0xC5,0xCD,0xC8,0xC5,0x20
000415 20c8
000416 ced2
000417 00ca
000418 cec2      	.DB  0xC8,0x20,0xD2,0xCE,0xCA,0x0,0xC2,0xCE
000419 c1c7
00041a c6d3
00041b c5c4
00041c c8cd      	.DB  0xC7,0xC1,0xD3,0xC6,0xC4,0xC5,0xCD,0xC8
00041d 00df
00041e c5c4
00041f cad1
000420 ccce      	.DB  0xDF,0x0,0xC4,0xC5,0xD1,0xCA,0xCE,0xCC
000421 d100
000422 c0d2
000423 d2d0
D:\Проекты от студии\mnsauV3 (07.07.15)\mega128CONTR\List\mega128CONTR.asm(1426): warning: .cseg .db misalignment - padding zero byte
000424 0000      	.DB  0x0,0xD1,0xD2,0xC0,0xD0,0xD2,0x0
                 
                 __GLOBAL_INI_TBL:
000425 0001      	.DW  0x01
000426 0002      	.DW  0x02
000427 07de      	.DW  __REG_BIT_VARS*2
                 
000428 0006      	.DW  0x06
000429 0500      	.DW  _0xEE
00042a 07e2      	.DW  _0x0*2
                 
00042b 0006      	.DW  0x06
00042c 0506      	.DW  _0xEE+6
00042d 07e2      	.DW  _0x0*2
                 
00042e 0006      	.DW  0x06
00042f 050c      	.DW  _0xEE+12
000430 07e2      	.DW  _0x0*2
                 
000431 0006      	.DW  0x06
000432 0512      	.DW  _0xEE+18
000433 07e2      	.DW  _0x0*2
                 
000434 0005      	.DW  0x05
000435 0518      	.DW  _0xF2
000436 07e8      	.DW  _0x0*2+6
                 
000437 0004      	.DW  0x04
000438 051d      	.DW  _0xF2+5
000439 07ed      	.DW  _0x0*2+11
                 
00043a 0004      	.DW  0x04
00043b 0521      	.DW  _0xF2+9
00043c 07f1      	.DW  _0x0*2+15
                 
00043d 0006      	.DW  0x06
00043e 0525      	.DW  _0xF2+13
00043f 07f5      	.DW  _0x0*2+19
                 
000440 0011      	.DW  0x11
000441 052b      	.DW  _0x10C
000442 07fb      	.DW  _0x0*2+25
                 
000443 0011      	.DW  0x11
000444 053c      	.DW  _0x10C+17
000445 07fb      	.DW  _0x0*2+25
                 
000446 000b      	.DW  0x0B
000447 054d      	.DW  _0x10C+34
000448 080c      	.DW  _0x0*2+42
                 
000449 0004      	.DW  0x04
00044a 0558      	.DW  _0x10C+45
00044b 0817      	.DW  _0x0*2+53
                 
00044c 0004      	.DW  0x04
00044d 055c      	.DW  _0x10C+49
00044e 081b      	.DW  _0x0*2+57
                 
00044f 0004      	.DW  0x04
000450 0560      	.DW  _0x10C+53
000451 0817      	.DW  _0x0*2+53
                 
000452 0011      	.DW  0x11
000453 0564      	.DW  _0x10C+57
000454 081f      	.DW  _0x0*2+61
                 
000455 000c      	.DW  0x0C
000456 0575      	.DW  _0x10C+74
000457 0830      	.DW  _0x0*2+78
                 
000458 0001      	.DW  0x01
000459 070f      	.DW  _Amplitude
00045a 07e0      	.DW  _0x113*2
                 
00045b 0007      	.DW  0x07
00045c 0581      	.DW  _0x13A
00045d 083c      	.DW  _0x0*2+90
                 
00045e 0007      	.DW  0x07
00045f 0588      	.DW  _0x13A+7
000460 083c      	.DW  _0x0*2+90
                 
000461 0007      	.DW  0x07
000462 058f      	.DW  _0x13A+14
000463 083c      	.DW  _0x0*2+90
                 
000464 0007      	.DW  0x07
000465 0596      	.DW  _0x13A+21
000466 0805      	.DW  _0x0*2+35
                 
000467 0007      	.DW  0x07
000468 059d      	.DW  _0x13A+28
000469 0805      	.DW  _0x0*2+35
                 
00046a 0007      	.DW  0x07
00046b 05a4      	.DW  _0x13A+35
00046c 0805      	.DW  _0x0*2+35
                 
00046d 0006      	.DW  0x06
00046e 05ab      	.DW  _0x13A+42
00046f 0843      	.DW  _0x0*2+97
                 
000470 0006      	.DW  0x06
000471 05b1      	.DW  _0x13A+48
000472 07f5      	.DW  _0x0*2+19
                 
                 _0xFFFFFFFF:
000473 0000      	.DW  0
                 
                 __RESET:
000474 94f8      	CLI
000475 27ee      	CLR  R30
000476 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000477 e0f1      	LDI  R31,1
000478 bff5      	OUT  MCUCR,R31
000479 bfe5      	OUT  MCUCR,R30
00047a 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00047c e1f8      	LDI  R31,0x18
00047d bdf1      	OUT  WDTCR,R31
00047e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00047f e08d      	LDI  R24,(14-2)+1
000480 e0a2      	LDI  R26,2
000481 27bb      	CLR  R27
                 __CLEAR_REG:
000482 93ed      	ST   X+,R30
000483 958a      	DEC  R24
000484 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000485 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000486 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000487 e0a0      	LDI  R26,LOW(__SRAM_START)
000488 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000489 93ed      	ST   X+,R30
00048a 9701      	SBIW R24,1
00048b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00048c e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00048d e0f8      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00048e 9185      	LPM  R24,Z+
00048f 9195      	LPM  R25,Z+
000490 9700      	SBIW R24,0
000491 f061      	BREQ __GLOBAL_INI_END
000492 91a5      	LPM  R26,Z+
000493 91b5      	LPM  R27,Z+
000494 9005      	LPM  R0,Z+
000495 9015      	LPM  R1,Z+
000496 01bf      	MOVW R22,R30
000497 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000498 9005      	LPM  R0,Z+
000499 920d      	ST   X+,R0
00049a 9701      	SBIW R24,1
00049b f7e1      	BRNE __GLOBAL_INI_LOOP
00049c 01fb      	MOVW R30,R22
00049d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00049e bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00049f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0004a0 bfed      	OUT  SPL,R30
0004a1 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0004a2 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0004a3 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0004a4 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0004a5 940c 0d93 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include "Font16x16.c"
                 ;flash char blank_symb[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_46[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_UP[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000111, 0b11100000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_DOWN[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01111111, 0b11111110,
                 ;0b01100000, 0b00000110,
                 ;0b01100000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000110, 0b01100000,
                 ;0b00000111, 0b11100000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// цифры
                 ;flash char S_48[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_49[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b10000000,
                 ;0b00000111, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_50[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00011000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_51[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001000, 0b00010000,
                 ;0b00010000, 0b00001000,
                 ;0b00010000, 0b00001000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00001000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_52[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01110000,
                 ;0b00000000, 0b11110000,
                 ;0b00000001, 0b10110000,
                 ;0b00000011, 0b00110000,
                 ;0b00000110, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00110000,
                 ;0b00011111, 0b11111000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_53[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11111000,
                 ;0b00001111, 0b11110000,
                 ;0b00001000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011100, 0b00110000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_54[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11100000,
                 ;0b00000110, 0b00010000,
                 ;0b00001100, 0b00000000,
                 ;0b00001000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11100000,
                 ;0b00011100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_55[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00010000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_56[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001000, 0b00010000,
                 ;0b00001000, 0b00010000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00110000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_57[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00001100, 0b00110000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00011000, 0b00011000,
                 ;0b00001100, 0b00111000,
                 ;0b00000111, 0b11111000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00010000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// спец символы
                 ;flash char S_32[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_33[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_40[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000100, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000010, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_41[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b00100000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b01000000,
                 ;0b00000000, 0b10000000,
                 ;0b00000001, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_47[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00011000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00010000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_43[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_45[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_58[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_60[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_61[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11110000,
                 ;0b00001111, 0b11110000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_62[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b11000000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b00000000,
                 ;0b00000110, 0b00000000,
                 ;0b00001100, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_63[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000110, 0b01100000,
                 ;0b00001100, 0b00110000,
                 ;0b00001100, 0b00110000,
                 ;0b00000100, 0b00110000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;// русские заглавные буквы
                 ;flash char S_192[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b11100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000001, 0b00100000,
                 ;0b00000010, 0b00110000,
                 ;0b00000010, 0b00010000,
                 ;0b00000100, 0b00010000,
                 ;0b00000100, 0b00011000,
                 ;0b00001111, 0b11111000,
                 ;0b00011000, 0b00011000,
                 ;0b00010000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_193[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_194[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011000,
                 ;0b00111111, 0b11111000,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001110,
                 ;0b00111111, 0b11111100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_195[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00110000, 0b00011110,
                 ;0b00110000, 0b00000010,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_196[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111100,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000001, 0b00011000,
                 ;0b00000010, 0b00011000,
                 ;0b00000100, 0b00011000,
                 ;0b00001000, 0b00011000,
                 ;0b00111111, 0b11111100,
                 ;0b00111000, 0b00111100,
                 ;0b00110000, 0b00001100,
                 ;0b00100000, 0b00000100,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_197[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00111111, 0b10000000,
                 ;0b00110000, 0b10000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00110000, 0b00011100,
                 ;0b01111111, 0b11111100,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_198[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01100011, 0b11000110,
                 ;0b01010001, 0b10001010,
                 ;0b00010001, 0b10001000,
                 ;0b00001001, 0b10010000,
                 ;0b00001001, 0b10010000,
                 ;0b00000111, 0b11100000,
                 ;0b00000111, 0b11100000,
                 ;0b00001101, 0b10110000,
                 ;0b00011001, 0b10011000,
                 ;0b00010001, 0b10001000,
                 ;0b00110001, 0b10001100,
                 ;0b00100001, 0b10000100,
                 ;0b01100011, 0b11000110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_199[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00001111, 0b11100000,
                 ;0b00111000, 0b00111000,
                 ;0b01100000, 0b00001100,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00001100,
                 ;0b00000011, 0b11111000,
                 ;0b00000000, 0b00001000,
                 ;0b00000000, 0b00000100,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000110,
                 ;0b01100000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00001111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_200[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_201[32] =
                 ;{
                 ;0b00000011, 0b11000000,
                 ;0b01111001, 0b10011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00011100,
                 ;0b00110000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110011, 0b00001100,
                 ;0b00110110, 0b00001100,
                 ;0b00111100, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_202[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00111100,
                 ;0b00110000, 0b01101100,
                 ;0b00110000, 0b11000000,
                 ;0b00110001, 0b10000000,
                 ;0b00110011, 0b00000000,
                 ;0b00111111, 0b00000000,
                 ;0b00111001, 0b10000000,
                 ;0b00110000, 0b11000000,
                 ;0b00110000, 0b01100000,
                 ;0b00110000, 0b00110000,
                 ;0b00110000, 0b00011000,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_203[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000001, 0b11111110,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000000, 0b10001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000001, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000010, 0b00001100,
                 ;0b00000100, 0b00001100,
                 ;0b01101000, 0b00001100,
                 ;0b01110000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_204[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01110000, 0b00001110,
                 ;0b00111000, 0b00011100,
                 ;0b00111000, 0b00011100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110100, 0b00101100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110010, 0b01001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_205[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111100,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_206[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b01110000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_207[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b00111111, 0b11111100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_208[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_209[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00000100,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b01110000, 0b00000000,
                 ;0b00110000, 0b00000100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_210[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111111, 0b11111110,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_211[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00001110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00000100,
                 ;0b00001100, 0b00001000,
                 ;0b00000110, 0b00001000,
                 ;0b00000011, 0b00010000,
                 ;0b00000001, 0b10010000,
                 ;0b00000000, 0b11100000,
                 ;0b00000000, 0b01100000,
                 ;0b00000000, 0b01000000,
                 ;0b00001100, 0b01000000,
                 ;0b00001100, 0b10000000,
                 ;0b00000111, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_212[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000001, 0b10000000,
                 ;0b00001111, 0b11110000,
                 ;0b00111001, 0b10011100,
                 ;0b01100001, 0b10000110,
                 ;0b01000001, 0b10000010,
                 ;0b01000001, 0b10000010,
                 ;0b01100001, 0b10000110,
                 ;0b00111001, 0b10011100,
                 ;0b00001111, 0b11110000,
                 ;0b00000001, 0b10000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000011, 0b11000000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_213[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00000100,
                 ;0b00011000, 0b00001000,
                 ;0b00001100, 0b00010000,
                 ;0b00000110, 0b00100000,
                 ;0b00000011, 0b01000000,
                 ;0b00000001, 0b10000000,
                 ;0b00000010, 0b11000000,
                 ;0b00000100, 0b01100000,
                 ;0b00001000, 0b00110000,
                 ;0b00010000, 0b00011000,
                 ;0b00100000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_214[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_215[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00001100,
                 ;0b00011111, 0b11111100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00001100,
                 ;0b00000000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_216[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_217[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111011, 0b11011110,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b00110001, 0b10001100,
                 ;0b01111111, 0b11111110,
                 ;0b00000000, 0b00000110,
                 ;0b00000000, 0b00000010,
                 ;};
                 ;
                 ;flash char S_218[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111100, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b01011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011000, 0b00000000,
                 ;0b00011111, 0b11111000,
                 ;0b00011000, 0b00001100,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00000110,
                 ;0b00011000, 0b00001100,
                 ;0b00111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_219[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00011110,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b00111111, 0b10001100,
                 ;0b00110000, 0b01001100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b00101100,
                 ;0b00110000, 0b01001100,
                 ;0b01111111, 0b10011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_220[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00110000, 0b00000000,
                 ;0b00111111, 0b11111000,
                 ;0b00110000, 0b00001100,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00000110,
                 ;0b00110000, 0b00001100,
                 ;0b01111111, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_221[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000111, 0b11100000,
                 ;0b00011110, 0b01111000,
                 ;0b00111000, 0b00011100,
                 ;0b00110000, 0b00001100,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b11111110,
                 ;0b00000000, 0b00001110,
                 ;0b00000000, 0b00001110,
                 ;0b00110000, 0b00001100,
                 ;0b00111000, 0b00011100,
                 ;0b00011110, 0b01111000,
                 ;0b00000111, 0b11100000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_222[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b01111001, 0b11111000,
                 ;0b00110011, 0b00001100,
                 ;0b00110010, 0b00000100,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00111110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110110, 0b00000110,
                 ;0b00110010, 0b00000100,
                 ;0b00110011, 0b00001100,
                 ;0b01111001, 0b11111000,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;flash char S_223[32] =
                 ;{
                 ;0b00000000, 0b00000000,
                 ;0b00000011, 0b11111110,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00000011, 0b11111100,
                 ;0b00000011, 0b00001100,
                 ;0b00000110, 0b00001100,
                 ;0b00001100, 0b00001100,
                 ;0b00011000, 0b00001100,
                 ;0b00110000, 0b00001100,
                 ;0b01111000, 0b00011110,
                 ;0b00000000, 0b00000000,
                 ;0b00000000, 0b00000000,
                 ;};
                 ;
                 ;
                 ;
                 ;#include "SSD1963.c"
                 ;#define flipState       0x03
                 ;#define DISP_WIDTH      480
                 ;#define DISP_HEIGHT     272
                 ;
                 ;#define HDP    (DISP_WIDTH - 1)
                 ;#define HT     900
                 ;#define HPS    90
                 ;#define LPS    8
                 ;#define HPW    10
                 ;
                 ;#define VDP    (DISP_HEIGHT - 1)
                 ;#define VT     300
                 ;#define VPS    12
                 ;#define FPS    4
                 ;#define VPW    10
                 ;
                 ;#define SSD1963_SET_COLUMN_ADDRESS 0x2A
                 ;#define SSD1963_SET_PAGE_ADDRESS 0x2B
                 ;
                 ;// цвет определяется по системе RGB565
                 ;// у пульта лебёдчика идёт всё запутанно
                 ;// вместо 0bRRRRRGGGGGGBBBBB
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;
                 ;// 0bRRRRR GGGGGG BBBBB
                 ;// 0b01111 011111 01111
                 ;
                 ;// 0bGGGRRRRRBBBBBGGG
                 ;// 0b0010000100001000
                 ;#define   BLACK        0x0000
                 ;#define   NAVY         0b111100000000000
                 ;#define   DGREEN       0x03E0
                 ;#define   DCYAN        0x03EF
                 ;#define   MAROON       0x7800
                 ;#define   PURPLE       0x780F
                 ;#define   OLIVE        0x7BE0
                 ;#define   GREY         0xF7DE
                 ;#define   LGRAY        0xC618
                 ;#define   DGRAY        0b0010000100001000
                 ;#define   BLUE         0b0000000011111000
                 ;#define   GREEN        0b1110000000000111
                 ;#define   CYAN         0x07FF
                 ;#define   RED          0b0001111100000000
                 ;#define   MAGENTA      0xF81F
                 ;#define   YELLOW       0b1111111100000111
                 ;#define   WHITE        0xFFFF
                 ;
                 ;#define  SSD1963_RS     PORTD.7
                 ;#define  SSD1963_WR     PORTD.6
                 ;#define  SSD1963_RD     PORTD.5
                 ;#define  SSD1963_CS     PORTE.7
                 ;#define  SSD1963_RESET  PORTE.5
                 ;#define  SSD1963_PORT1  PORTA
                 ;#define  SSD1963_PORT2  PORTC
                 ;
                 ;#define  BACKGROUND_COLOR 0x0000
                 ;#define  FONT_WIDTH 16
                 ;#define  FONT_HEIGHT 16
                 ;
                 ;void SSD1963_PortInit(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _SSD1963_PortInit:
                 ;    //SSD1963_PORT
                 ;    DDRA = 0xFF;
0004a7 efef      	LDI  R30,LOW(255)
0004a8 bbea      	OUT  0x1A,R30
                 ;    DDRC = 0xFF;
0004a9 bbe4      	OUT  0x14,R30
                 ;    //SSD1963 76543210
                 ;    DDRD |= 0b11100000;
0004aa b3e1      	IN   R30,0x11
0004ab 6ee0      	ORI  R30,LOW(0xE0)
0004ac bbe1      	OUT  0x11,R30
                 ;    DDRE |= 0b10100000;
0004ad b1e2      	IN   R30,0x2
0004ae 6ae0      	ORI  R30,LOW(0xA0)
0004af b9e2      	OUT  0x2,R30
                 ;}
0004b0 9508      	RET
                 ;
                 ;#pragma used+
                 ;
                 ;unsigned char RotateByte(unsigned char Value)
                 ;{
                 _RotateByte:
                 ;  //Value = RotationByte[Value];
                 ;  Value = ((Value >> 1) & 0x55) | ((Value << 1) & 0xaa);
                 ;	Value -> Y+0
0004b1 940e 0ec6 	CALL SUBOPT_0x0
0004b3 95f5      	ASR  R31
0004b4 95e7      	ROR  R30
0004b5 75e5      	ANDI R30,LOW(0x55)
0004b6 2fae      	MOV  R26,R30
0004b7 81e8      	LD   R30,Y
0004b8 0fee      	LSL  R30
0004b9 7aea      	ANDI R30,LOW(0xAA)
0004ba 2bea      	OR   R30,R26
0004bb 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 2) & 0x33) | ((Value << 2) & 0xcc);
0004bc 940e 0ec6 	CALL SUBOPT_0x0
0004be 940e 11b7 	CALL __ASRW2
0004c0 73e3      	ANDI R30,LOW(0x33)
0004c1 2fae      	MOV  R26,R30
0004c2 81e8      	LD   R30,Y
0004c3 0fee      	LSL  R30
0004c4 0fee      	LSL  R30
0004c5 7cec      	ANDI R30,LOW(0xCC)
0004c6 2bea      	OR   R30,R26
0004c7 83e8      	ST   Y,R30
                 ;  Value = ((Value >> 4) & 0x0f) | ((Value << 4) & 0xf0);
0004c8 940e 0ec6 	CALL SUBOPT_0x0
0004ca 940e 11b3 	CALL __ASRW4
0004cc 70ef      	ANDI R30,LOW(0xF)
0004cd 2fae      	MOV  R26,R30
0004ce 81e8      	LD   R30,Y
0004cf 95e2      	SWAP R30
0004d0 7fe0      	ANDI R30,LOW(0xF0)
0004d1 2bea      	OR   R30,R26
0004d2 83e8      	ST   Y,R30
                 ;  return Value;
0004d3 c023      	RJMP _0x2080008
                 ;}
                 ;
                 ;void SSD1963_Reset(void)
                 ;{
                 _SSD1963_Reset:
                 ;  SSD1963_RD = 0;
0004d4 9895      	CBI  0x12,5
                 ;  SSD1963_RESET = 1;
0004d5 9a1d      	SBI  0x3,5
                 ;  delay_ms(100);
0004d6 940e 0ec9 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 0;
0004d8 981d      	CBI  0x3,5
                 ;  delay_ms(100);
0004d9 940e 0ec9 	CALL SUBOPT_0x1
                 ;  SSD1963_RESET = 1;
0004db 9a1d      	SBI  0x3,5
                 ;  SSD1963_RD = 1;
0004dc 9a95      	SBI  0x12,5
                 ;  delay_ms(100);
0004dd 940e 0ec9 	CALL SUBOPT_0x1
                 ;}
0004df 9508      	RET
                 ;
                 ;// Запись команды в SSD1963
                 ;inline void SSD1963_WriteCmd(unsigned char cmd)
                 ;{
                 _SSD1963_WriteCmd:
                 ;  SSD1963_RD = 1;
                 ;	cmd -> Y+0
0004e0 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 0;                                                  //запись команды
0004e1 9897      	CBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(cmd);
0004e2 940e 0ecf 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
0004e4 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
0004e5 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
0004e6 9896      	CBI  0x12,6
                 ;  #asm("nop")
0004e7 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
0004e8 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
0004e9 9a96      	SBI  0x12,6
                 ;  #asm("nop")
0004ea 0000      	nop
0004eb c00b      	RJMP _0x2080007
                 ;} // SSD1963_WriteCmd
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b8(unsigned char data)
                 ;{
                 _SSD1963_WriteData_b8:
                 ;  SSD1963_RD = 1;
                 ;	data -> Y+0
0004ec 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
0004ed 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = RotateByte(data);
0004ee 940e 0ecf 	CALL SUBOPT_0x2
                 ;  SSD1963_PORT2 = 0x00;
                 ;  #asm("nop")
0004f0 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
0004f1 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
0004f2 9896      	CBI  0x12,6
                 ;  #asm("nop")
0004f3 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
0004f4 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
0004f5 9a96      	SBI  0x12,6
                 ;  #asm("nop")
0004f6 0000      	nop
                 _0x2080007:
                 ;} // SSD1963_Writedata
                 _0x2080008:
0004f7 9621      	ADIW R28,1
0004f8 9508      	RET
                 ;
                 ;// Запись данных в SSD1963
                 ;inline void SSD1963_WriteData_b16(unsigned int data)
                 ;{
                 _SSD1963_WriteData_b16:
                 ;  char a, b;
                 ;  a = data;
0004f9 931a      	ST   -Y,R17
0004fa 930a      	ST   -Y,R16
                 ;	data -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0004fb 811a      	LDD  R17,Y+2
                 ;  b = data >> 8;
0004fc 810b      	LDD  R16,Y+3
                 ;  SSD1963_RD = 1;
0004fd 9a95      	SBI  0x12,5
                 ;  SSD1963_RS = 1;                                                  //запись ДАННЫХ
0004fe 9a97      	SBI  0x12,7
                 ;  SSD1963_PORT1 = a;
0004ff bb1b      	OUT  0x1B,R17
                 ;  SSD1963_PORT2 = b;
000500 bb05      	OUT  0x15,R16
                 ;  #asm("nop")
000501 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 0;
000502 981f      	CBI  0x3,7
                 ;  SSD1963_WR = 0;
000503 9896      	CBI  0x12,6
                 ;  #asm("nop")
000504 0000      	nop
                 ;  //delay_us(5);
                 ;  SSD1963_CS = 1;
000505 9a1f      	SBI  0x3,7
                 ;  SSD1963_WR = 1;
000506 9a96      	SBI  0x12,6
                 ;  #asm("nop")
000507 0000      	nop
                 ;} // SSD1963_Writedata
000508 8119      	LDD  R17,Y+1
000509 8108      	LDD  R16,Y+0
00050a 9624      	ADIW R28,4
00050b 9508      	RET
                 ;
                 ;// Инициализация дисплея
                 ;void SSD1963_Init(void)
                 ;{
                 _SSD1963_Init:
                 ;  SSD1963_PortInit();
00050c df9a      	RCALL _SSD1963_PortInit
                 ;  SSD1963_Reset();
00050d dfc6      	RCALL _SSD1963_Reset
                 ;  // Soft reset
                 ;  SSD1963_WriteCmd(0x01); //software reset
00050e 940e 0ed7 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000510 940e 0ed7 	CALL SUBOPT_0x3
                 ;  SSD1963_WriteCmd(0x01); //software reset
000512 940e 0ed7 	CALL SUBOPT_0x3
                 ;  delay_ms(200); //задержка
000514 940e 0edb 	CALL SUBOPT_0x4
                 ;
                 ;  SSD1963_WriteCmd(0xE2); //PLLmultiplier, set PLL clock to 120M
000516 eee2      	LDI  R30,LOW(226)
000517 93ea      	ST   -Y,R30
000518 dfc7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
000519 e2e3      	LDI  R30,LOW(35)
00051a 93ea      	ST   -Y,R30
00051b dfd0      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
00051c e0e2      	LDI  R30,LOW(2)
00051d 940e 0ee1 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL
                 ;  /*SSD1963_WriteData_b8(0x23); // множительPLL(M)// N=0x36 for 6.5M, 0x23 for 10M crystal
                 ;  SSD1963_WriteData_b8(0x02); // делительPLL(N)
                 ;  SSD1963_WriteData_b8(0x04); // команда на использование умножителя и делителя PLL*/
                 ;  SSD1963_WriteCmd(0xE0); // запуск PLL
00051f eee0      	LDI  R30,LOW(224)
000520 940e 0ee8 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8(0x01); // PLL включена и использовать внутренний генератор как системный
                 ;  delay_ms(1);//ожидание запуска PLL
000522 940e 0eef 	CALL SUBOPT_0x7
                 ;
                 ;  SSD1963_WriteCmd(0xE0); // Переключение системы с внутреннего генератора на PLL
000524 eee0      	LDI  R30,LOW(224)
000525 940e 0ef5 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03);
                 ;  SSD1963_WriteCmd(0x01); //software reset
000527 940e 0ed7 	CALL SUBOPT_0x3
                 ;  delay_ms(120); //а здесь лучше сделать 120 вместо 5
000529 e7e8      	LDI  R30,LOW(120)
00052a e0f0      	LDI  R31,HIGH(120)
00052b 940e 0efc 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0xE6); //Установка частоты переключения пикселя
00052d eee6      	LDI  R30,LOW(230)
00052e 940e 0ee8 	CALL SUBOPT_0x6
                 ;  //PLL setting for PCLK, depends on resolution
                 ;  SSD1963_WriteData_b8(0x01); //5,3мГц = PLLfreqx ((частотапереключения+1)/2^20)
                 ;  SSD1963_WriteData_b8(0xDA); // для 100мГц должно быть 0х00D916
000530 edea      	LDI  R30,LOW(218)
000531 93ea      	ST   -Y,R30
000532 dfb9      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x73);
000533 e7e3      	LDI  R30,LOW(115)
000534 93ea      	ST   -Y,R30
000535 dfb6      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(0xB0); //Set LCD mode
000536 ebe0      	LDI  R30,LOW(176)
000537 93ea      	ST   -Y,R30
000538 dfa7      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x24); //24bit
000539 e2e4      	LDI  R30,LOW(36)
00053a 940e 0f00 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); //0x0000 и 20 - TFT режим, 40 serial RGB режим
                 ;  SSD1963_WriteData_b8((HDP>>8)&0xFF); //Разрешение по горизонтали //SetHDP
00053c 940e 0f07 	CALL SUBOPT_0xB
                 ;  SSD1963_WriteData_b8(HDP&0xFF);
00053e edef      	LDI  R30,LOW(223)
00053f 940e 0f0b 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8((VDP>>8)&0xFF); // Разрешение по вертикали //SetVDP
                 ;  SSD1963_WriteData_b8(VDP&0xFF);
000541 e0ef      	LDI  R30,LOW(15)
000542 940e 0f00 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00); // а здесь попробуй поставить 0х2D и тогда не надо мучать 36 регистр
                 ;  //00101101-G[5..3]=101
                 ;  //G[2..0]=101-BGR
                 ;
                 ;  //В4 и В6 частота обновления по горизонтали и вертикали (этовкратце)
                 ;  SSD1963_WriteCmd(0xB4); //Sethorizontalperiod
000544 ebe4      	LDI  R30,LOW(180)
000545 940e 0ef5 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8((HT>>8)&0xFF); //SetHT
                 ;  SSD1963_WriteData_b8(HT&0xFF);
000547 e8e4      	LDI  R30,LOW(132)
000548 940e 0f00 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((HPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(HPS&0xFF);
00054a e5ea      	LDI  R30,LOW(90)
00054b 93ea      	ST   -Y,R30
00054c df9f      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(HPW); //SetHPW
00054d e0ea      	LDI  R30,LOW(10)
00054e 940e 0f00 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((LPS>>8)&0XFF); //SetHPS
                 ;  SSD1963_WriteData_b8(LPS&0XFF);
000550 e0e8      	LDI  R30,LOW(8)
000551 940e 0f00 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8(0x00);
                 ;
                 ;  SSD1963_WriteCmd(0xB6); //Set vertical period
000553 ebe6      	LDI  R30,LOW(182)
000554 940e 0ee8 	CALL SUBOPT_0x6
                 ;  SSD1963_WriteData_b8((VT>>8)&0xFF); //SetVT
                 ;  SSD1963_WriteData_b8(VT&0xFF);
000556 e2ec      	LDI  R30,LOW(44)
000557 940e 0f00 	CALL SUBOPT_0xA
                 ;  SSD1963_WriteData_b8((VPS>>8)&0xFF); //SetVPS
                 ;  SSD1963_WriteData_b8(VPS&0xFF);
000559 e0ec      	LDI  R30,LOW(12)
00055a 93ea      	ST   -Y,R30
00055b df90      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(VPW); //SetVPW
00055c e0ea      	LDI  R30,LOW(10)
00055d 93ea      	ST   -Y,R30
00055e df8d      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((FPS>>8)&0xFF); //SetFPS
00055f e0e0      	LDI  R30,LOW(0)
000560 940e 0ee1 	CALL SUBOPT_0x5
                 ;  SSD1963_WriteData_b8(FPS&0xFF);
                 ;
                 ;  //ВА и В8 конфигурация портов между SSD1963 и дисплеем
                 ;  SSD1963_WriteCmd(0xBA);
000562 ebea      	LDI  R30,LOW(186)
000563 93ea      	ST   -Y,R30
000564 df7b      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0F); //GPIO[3:0]out1
000565 e0ef      	LDI  R30,LOW(15)
000566 93ea      	ST   -Y,R30
000567 df84      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteCmd(0xB8);
000568 ebe8      	LDI  R30,LOW(184)
000569 93ea      	ST   -Y,R30
00056a df75      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x07); //0x07 GPIO3 = input, GPIO[2:0] = output
00056b e0e7      	LDI  R30,LOW(7)
00056c 940e 0f0b 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //0x01 GPIO0 normal
                 ;
                 ;  SSD1963_WriteCmd(0x36); //Set Address mode - rotation
00056e e3e6      	LDI  R30,LOW(54)
00056f 940e 0ef5 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(flipState); //бит0 - flipvertical бит1 - fliphorizontal
                 ;
                 ;  SSD1963_WriteCmd(0xBC); //настройка яркости и тд
000571 ebec      	LDI  R30,LOW(188)
000572 93ea      	ST   -Y,R30
000573 df6c      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x50); //контраст
000574 e5e0      	LDI  R30,LOW(80)
000575 93ea      	ST   -Y,R30
000576 df75      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x90); //яркость
000577 e9e0      	LDI  R30,LOW(144)
000578 93ea      	ST   -Y,R30
000579 df72      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(0x50); //насыщеность цвета
00057a e5e0      	LDI  R30,LOW(80)
00057b 940e 0f0b 	CALL SUBOPT_0xC
                 ;  SSD1963_WriteData_b8(0x01); //постпроцессор (1 - вкл параметры, 0 - выкл)
                 ;
                 ;  SSD1963_WriteCmd(0xF0); //pixel data interface
00057d efe0      	LDI  R30,LOW(240)
00057e 940e 0ef5 	CALL SUBOPT_0x8
                 ;  SSD1963_WriteData_b8(0x03); //03h - RGB565
                 ;
                 ;  delay_ms(5);
000580 e0e5      	LDI  R30,LOW(5)
000581 e0f0      	LDI  R31,HIGH(5)
000582 940e 0efc 	CALL SUBOPT_0x9
                 ;
                 ;  SSD1963_WriteCmd(0x29); //display on
000584 e2e9      	LDI  R30,LOW(41)
000585 93ea      	ST   -Y,R30
000586 df59      	RCALL _SSD1963_WriteCmd
                 ;
                 ;  SSD1963_WriteCmd(0xD0); //отключено ручное управление яркостью //Dynamic Bright Control
000587 ede0      	LDI  R30,LOW(208)
000588 93ea      	ST   -Y,R30
000589 df56      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(0x0D); //режим энергосбережения - агрессивный
00058a e0ed      	LDI  R30,LOW(13)
00058b 93ea      	ST   -Y,R30
00058c df5f      	RCALL _SSD1963_WriteData_b8
                 ;} // SSD1963_Init
00058d 9508      	RET
                 ;
                 ;void SSD1963_SetArea(unsigned int StartX, unsigned int EndX, unsigned int StartY, unsigned int EndY)
                 ;{
                 _SSD1963_SetArea:
                 ;  SSD1963_WriteCmd(SSD1963_SET_COLUMN_ADDRESS);
                 ;	StartX -> Y+6
                 ;	EndX -> Y+4
                 ;	StartY -> Y+2
                 ;	EndY -> Y+0
00058e e2ea      	LDI  R30,LOW(42)
00058f 93ea      	ST   -Y,R30
000590 df4f      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8(StartX >> 8);
000591 81ef      	LDD  R30,Y+7
000592 93ea      	ST   -Y,R30
000593 df58      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartX);
000594 81ee      	LDD  R30,Y+6
000595 93ea      	ST   -Y,R30
000596 df55      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndX >> 8));
000597 81ed      	LDD  R30,Y+5
000598 93ea      	ST   -Y,R30
000599 df52      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndX);
00059a 81ec      	LDD  R30,Y+4
00059b 93ea      	ST   -Y,R30
00059c df4f      	RCALL _SSD1963_WriteData_b8
                 ;
                 ;  SSD1963_WriteCmd(SSD1963_SET_PAGE_ADDRESS);
00059d e2eb      	LDI  R30,LOW(43)
00059e 93ea      	ST   -Y,R30
00059f df40      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_WriteData_b8((StartY >> 8));
0005a0 81eb      	LDD  R30,Y+3
0005a1 93ea      	ST   -Y,R30
0005a2 df49      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(StartY);
0005a3 81ea      	LDD  R30,Y+2
0005a4 93ea      	ST   -Y,R30
0005a5 df46      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8((EndY >> 8));
0005a6 81e9      	LDD  R30,Y+1
0005a7 93ea      	ST   -Y,R30
0005a8 df43      	RCALL _SSD1963_WriteData_b8
                 ;  SSD1963_WriteData_b8(EndY);
0005a9 81e8      	LD   R30,Y
0005aa 93ea      	ST   -Y,R30
0005ab df40      	RCALL _SSD1963_WriteData_b8
                 ;}
0005ac 9628      	ADIW R28,8
0005ad 9508      	RET
                 ;
                 ;void SSD1963_ClearScreen(unsigned int color)
                 ;{
                 _SSD1963_ClearScreen:
                 ;  unsigned int x,y;
                 ;  SSD1963_WriteCmd(0x28);
0005ae 940e 121f 	CALL __SAVELOCR4
                 ;	color -> Y+4
                 ;	x -> R16,R17
                 ;	y -> R18,R19
0005b0 e2e8      	LDI  R30,LOW(40)
0005b1 93ea      	ST   -Y,R30
0005b2 df2d      	RCALL _SSD1963_WriteCmd
                 ;  SSD1963_SetArea(0, HDP , 0, VDP);
0005b3 940e 0f0f 	CALL SUBOPT_0xD
0005b5 edef      	LDI  R30,LOW(479)
0005b6 e0f1      	LDI  R31,HIGH(479)
0005b7 940e 0f14 	CALL SUBOPT_0xE
0005b9 e0ef      	LDI  R30,LOW(271)
0005ba e0f1      	LDI  R31,HIGH(271)
0005bb 940e 0f17 	CALL SUBOPT_0xF
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  x=0;
                +
0005bd e000     +LDI R16 , LOW ( 0 )
0005be e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  while(x <= VDP)
                 _0x31:
                +
0005bf 3100     +CPI R16 , LOW ( 272 )
0005c0 e0e1     +LDI R30 , HIGH ( 272 )
0005c1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,272
0005c2 f480      	BRSH _0x33
                 ;  {
                 ;    y=0;
                +
0005c3 e020     +LDI R18 , LOW ( 0 )
0005c4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    while(y <= HDP)
                 _0x34:
                +
0005c5 3e20     +CPI R18 , LOW ( 480 )
0005c6 e0e1     +LDI R30 , HIGH ( 480 )
0005c7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,480
0005c8 f438      	BRSH _0x36
                 ;    {
                 ;      SSD1963_WriteData_b16(color);
0005c9 81ec      	LDD  R30,Y+4
0005ca 81fd      	LDD  R31,Y+4+1
0005cb 940e 0f1f 	CALL SUBOPT_0x10
                 ;      y++;
                +
0005cd 5f2f     +SUBI R18 , LOW ( - 1 )
0005ce 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
0005cf cff5      	RJMP _0x34
                 _0x36:
                 ;  x++;
                +
0005d0 5f0f     +SUBI R16 , LOW ( - 1 )
0005d1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ;  }
0005d2 cfec      	RJMP _0x31
                 _0x33:
                 ;  SSD1963_WriteCmd(0x29);
0005d3 e2e9      	LDI  R30,LOW(41)
0005d4 93ea      	ST   -Y,R30
0005d5 df0a      	RCALL _SSD1963_WriteCmd
                 ;}
0005d6 940e 1226 	CALL __LOADLOCR4
0005d8 9626      	ADIW R28,6
0005d9 9508      	RET
                 ;
                 ;void SSD1963_PrintSymbol16(flash char Symb[32], unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PrintSymbol16:
                 ;  char i, j;
                 ;  SSD1963_SetArea(X, X + FONT_WIDTH - 1, Y, Y + FONT_HEIGHT - 1);
0005da 931a      	ST   -Y,R17
0005db 930a      	ST   -Y,R16
                 ;	X -> Y+8
                 ;	Y -> Y+6
                 ;	Color -> Y+4
                 ;	BackColor -> Y+2
                 ;	i -> R17
                 ;	j -> R16
0005dc 940e 0f23 	CALL SUBOPT_0x11
0005de 85aa      	LDD  R26,Y+10
0005df 85bb      	LDD  R27,Y+10+1
0005e0 9650      	ADIW R26,16
0005e1 9711      	SBIW R26,1
0005e2 93ba      	ST   -Y,R27
0005e3 93aa      	ST   -Y,R26
0005e4 940e 0f28 	CALL SUBOPT_0x12
0005e6 85ac      	LDD  R26,Y+12
0005e7 85bd      	LDD  R27,Y+12+1
0005e8 9650      	ADIW R26,16
0005e9 9711      	SBIW R26,1
0005ea 93ba      	ST   -Y,R27
0005eb 93aa      	ST   -Y,R26
0005ec dfa1      	RCALL _SSD1963_SetArea
                 ;  SSD1963_WriteCmd(0x2c);
0005ed e2ec      	LDI  R30,LOW(44)
0005ee 93ea      	ST   -Y,R30
0005ef def0      	RCALL _SSD1963_WriteCmd
                 ;  for (i = 0; i < 32; i++)
0005f0 e010      	LDI  R17,LOW(0)
                 _0x38:
0005f1 3210      	CPI  R17,32
0005f2 f4e8      	BRSH _0x39
                 ;  {
                 ;    for (j = 0; j < 8; j++)
0005f3 e000      	LDI  R16,LOW(0)
                 _0x3B:
0005f4 3008      	CPI  R16,8
0005f5 f4c0      	BRSH _0x3C
                 ;    {
                 ;      if ((Symb[i] & (0b10000000 >> j)) > 0) SSD1963_WriteData_b16(Color);
0005f6 2fe1      	MOV  R30,R17
0005f7 85aa      	LDD  R26,Y+10
0005f8 85bb      	LDD  R27,Y+10+1
0005f9 e0f0      	LDI  R31,0
0005fa 0fea      	ADD  R30,R26
0005fb 1ffb      	ADC  R31,R27
0005fc 9014      	LPM  R1,Z
0005fd 2fe0      	MOV  R30,R16
0005fe e8a0      	LDI  R26,LOW(128)
0005ff 940e 11ab 	CALL __LSRB12
000601 21e1      	AND  R30,R1
000602 30e1      	CPI  R30,LOW(0x1)
000603 f018      	BRLO _0x3D
000604 81ec      	LDD  R30,Y+4
000605 81fd      	LDD  R31,Y+4+1
000606 c002      	RJMP _0x15A
                 ;      else SSD1963_WriteData_b16(BackColor);
                 _0x3D:
000607 81ea      	LDD  R30,Y+2
000608 81fb      	LDD  R31,Y+2+1
                 _0x15A:
000609 93fa      	ST   -Y,R31
00060a 93ea      	ST   -Y,R30
00060b deed      	RCALL _SSD1963_WriteData_b16
                 ;    }
00060c 5f0f      	SUBI R16,-1
00060d cfe6      	RJMP _0x3B
                 _0x3C:
                 ;  }
00060e 5f1f      	SUBI R17,-1
00060f cfe1      	RJMP _0x38
                 _0x39:
                 ;}
000610 8119      	LDD  R17,Y+1
000611 8108      	LDD  R16,Y+0
000612 c2c2      	RJMP _0x2080006
                 ;
                 ;void SSD1963_PutChar16(char Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutChar16:
                 ;  switch(Value)
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000613 85e8      	LDD  R30,Y+8
000614 e0f0      	LDI  R31,0
                 ;  {
                 ;    case '0' : SSD1963_PrintSymbol16(S_48, X, Y, Color, BackColor);
000615 33e0      	CPI  R30,LOW(0x30)
000616 e0a0      	LDI  R26,HIGH(0x30)
000617 07fa      	CPC  R31,R26
000618 f419      	BRNE _0x42
000619 e0ec      	LDI  R30,LOW(_S_48*2)
00061a e0f1      	LDI  R31,HIGH(_S_48*2)
00061b c18e      	RJMP _0x15B
                 ;    break;
                 ;    case '1' : SSD1963_PrintSymbol16(S_49, X, Y, Color, BackColor);
                 _0x42:
00061c 33e1      	CPI  R30,LOW(0x31)
00061d e0a0      	LDI  R26,HIGH(0x31)
00061e 07fa      	CPC  R31,R26
00061f f419      	BRNE _0x43
000620 e2ec      	LDI  R30,LOW(_S_49*2)
000621 e0f1      	LDI  R31,HIGH(_S_49*2)
000622 c187      	RJMP _0x15B
                 ;    break;
                 ;    case '2' : SSD1963_PrintSymbol16(S_50, X, Y, Color, BackColor);
                 _0x43:
000623 33e2      	CPI  R30,LOW(0x32)
000624 e0a0      	LDI  R26,HIGH(0x32)
000625 07fa      	CPC  R31,R26
000626 f419      	BRNE _0x44
000627 e4ec      	LDI  R30,LOW(_S_50*2)
000628 e0f1      	LDI  R31,HIGH(_S_50*2)
000629 c180      	RJMP _0x15B
                 ;    break;
                 ;    case '3' : SSD1963_PrintSymbol16(S_51, X, Y, Color, BackColor);
                 _0x44:
00062a 33e3      	CPI  R30,LOW(0x33)
00062b e0a0      	LDI  R26,HIGH(0x33)
00062c 07fa      	CPC  R31,R26
00062d f419      	BRNE _0x45
00062e e6ec      	LDI  R30,LOW(_S_51*2)
00062f e0f1      	LDI  R31,HIGH(_S_51*2)
000630 c179      	RJMP _0x15B
                 ;    break;
                 ;    case '4' : SSD1963_PrintSymbol16(S_52, X, Y, Color, BackColor);
                 _0x45:
000631 33e4      	CPI  R30,LOW(0x34)
000632 e0a0      	LDI  R26,HIGH(0x34)
000633 07fa      	CPC  R31,R26
000634 f419      	BRNE _0x46
000635 e8ec      	LDI  R30,LOW(_S_52*2)
000636 e0f1      	LDI  R31,HIGH(_S_52*2)
000637 c172      	RJMP _0x15B
                 ;    break;
                 ;    case '5' : SSD1963_PrintSymbol16(S_53, X, Y, Color, BackColor);
                 _0x46:
000638 33e5      	CPI  R30,LOW(0x35)
000639 e0a0      	LDI  R26,HIGH(0x35)
00063a 07fa      	CPC  R31,R26
00063b f419      	BRNE _0x47
00063c eaec      	LDI  R30,LOW(_S_53*2)
00063d e0f1      	LDI  R31,HIGH(_S_53*2)
00063e c16b      	RJMP _0x15B
                 ;    break;
                 ;    case '6' : SSD1963_PrintSymbol16(S_54, X, Y, Color, BackColor);
                 _0x47:
00063f 33e6      	CPI  R30,LOW(0x36)
000640 e0a0      	LDI  R26,HIGH(0x36)
000641 07fa      	CPC  R31,R26
000642 f419      	BRNE _0x48
000643 ecec      	LDI  R30,LOW(_S_54*2)
000644 e0f1      	LDI  R31,HIGH(_S_54*2)
000645 c164      	RJMP _0x15B
                 ;    break;
                 ;    case '7' : SSD1963_PrintSymbol16(S_55, X, Y, Color, BackColor);
                 _0x48:
000646 33e7      	CPI  R30,LOW(0x37)
000647 e0a0      	LDI  R26,HIGH(0x37)
000648 07fa      	CPC  R31,R26
000649 f419      	BRNE _0x49
00064a eeec      	LDI  R30,LOW(_S_55*2)
00064b e0f1      	LDI  R31,HIGH(_S_55*2)
00064c c15d      	RJMP _0x15B
                 ;    break;
                 ;    case '8' : SSD1963_PrintSymbol16(S_56, X, Y, Color, BackColor);
                 _0x49:
00064d 33e8      	CPI  R30,LOW(0x38)
00064e e0a0      	LDI  R26,HIGH(0x38)
00064f 07fa      	CPC  R31,R26
000650 f419      	BRNE _0x4A
000651 e0ec      	LDI  R30,LOW(_S_56*2)
000652 e0f2      	LDI  R31,HIGH(_S_56*2)
000653 c156      	RJMP _0x15B
                 ;    break;
                 ;    case '9' : SSD1963_PrintSymbol16(S_57, X, Y, Color, BackColor);
                 _0x4A:
000654 33e9      	CPI  R30,LOW(0x39)
000655 e0a0      	LDI  R26,HIGH(0x39)
000656 07fa      	CPC  R31,R26
000657 f419      	BRNE _0x4B
000658 e2ec      	LDI  R30,LOW(_S_57*2)
000659 e0f2      	LDI  R31,HIGH(_S_57*2)
00065a c14f      	RJMP _0x15B
                 ;    break;
                 ;
                 ;    case '!' : SSD1963_PrintSymbol16(S_33, X, Y, Color, BackColor);
                 _0x4B:
00065b 32e1      	CPI  R30,LOW(0x21)
00065c e0a0      	LDI  R26,HIGH(0x21)
00065d 07fa      	CPC  R31,R26
00065e f419      	BRNE _0x4C
00065f e6ec      	LDI  R30,LOW(_S_33*2)
000660 e0f2      	LDI  R31,HIGH(_S_33*2)
000661 c148      	RJMP _0x15B
                 ;    break;
                 ;    case '(' : SSD1963_PrintSymbol16(S_40, X, Y, Color, BackColor);
                 _0x4C:
000662 32e8      	CPI  R30,LOW(0x28)
000663 e0a0      	LDI  R26,HIGH(0x28)
000664 07fa      	CPC  R31,R26
000665 f419      	BRNE _0x4D
000666 e8ec      	LDI  R30,LOW(_S_40*2)
000667 e0f2      	LDI  R31,HIGH(_S_40*2)
000668 c141      	RJMP _0x15B
                 ;    break;
                 ;    case ')' : SSD1963_PrintSymbol16(S_41, X, Y, Color, BackColor);
                 _0x4D:
000669 32e9      	CPI  R30,LOW(0x29)
00066a e0a0      	LDI  R26,HIGH(0x29)
00066b 07fa      	CPC  R31,R26
00066c f419      	BRNE _0x4E
00066d eaec      	LDI  R30,LOW(_S_41*2)
00066e e0f2      	LDI  R31,HIGH(_S_41*2)
00066f c13a      	RJMP _0x15B
                 ;    break;
                 ;    case '/' : SSD1963_PrintSymbol16(S_47, X, Y, Color, BackColor);
                 _0x4E:
000670 32ef      	CPI  R30,LOW(0x2F)
000671 e0a0      	LDI  R26,HIGH(0x2F)
000672 07fa      	CPC  R31,R26
000673 f419      	BRNE _0x4F
000674 ecec      	LDI  R30,LOW(_S_47*2)
000675 e0f2      	LDI  R31,HIGH(_S_47*2)
000676 c133      	RJMP _0x15B
                 ;    break;
                 ;    case ':' : SSD1963_PrintSymbol16(S_58, X, Y, Color, BackColor);
                 _0x4F:
000677 33ea      	CPI  R30,LOW(0x3A)
000678 e0a0      	LDI  R26,HIGH(0x3A)
000679 07fa      	CPC  R31,R26
00067a f419      	BRNE _0x50
00067b e2ec      	LDI  R30,LOW(_S_58*2)
00067c e0f3      	LDI  R31,HIGH(_S_58*2)
00067d c12c      	RJMP _0x15B
                 ;    break;
                 ;    case '<' : SSD1963_PrintSymbol16(S_60, X, Y, Color, BackColor);
                 _0x50:
00067e 33ec      	CPI  R30,LOW(0x3C)
00067f e0a0      	LDI  R26,HIGH(0x3C)
000680 07fa      	CPC  R31,R26
000681 f419      	BRNE _0x51
000682 e4ec      	LDI  R30,LOW(_S_60*2)
000683 e0f3      	LDI  R31,HIGH(_S_60*2)
000684 c125      	RJMP _0x15B
                 ;    break;
                 ;    case '=' : SSD1963_PrintSymbol16(S_61, X, Y, Color, BackColor);
                 _0x51:
000685 33ed      	CPI  R30,LOW(0x3D)
000686 e0a0      	LDI  R26,HIGH(0x3D)
000687 07fa      	CPC  R31,R26
000688 f419      	BRNE _0x52
000689 e6ec      	LDI  R30,LOW(_S_61*2)
00068a e0f3      	LDI  R31,HIGH(_S_61*2)
00068b c11e      	RJMP _0x15B
                 ;    break;
                 ;    case '>' : SSD1963_PrintSymbol16(S_62, X, Y, Color, BackColor);
                 _0x52:
00068c 33ee      	CPI  R30,LOW(0x3E)
00068d e0a0      	LDI  R26,HIGH(0x3E)
00068e 07fa      	CPC  R31,R26
00068f f419      	BRNE _0x53
000690 e8ec      	LDI  R30,LOW(_S_62*2)
000691 e0f3      	LDI  R31,HIGH(_S_62*2)
000692 c117      	RJMP _0x15B
                 ;    break;
                 ;    case '?' : SSD1963_PrintSymbol16(S_63, X, Y, Color, BackColor);
                 _0x53:
000693 33ef      	CPI  R30,LOW(0x3F)
000694 e0a0      	LDI  R26,HIGH(0x3F)
000695 07fa      	CPC  R31,R26
000696 f419      	BRNE _0x54
000697 eaec      	LDI  R30,LOW(_S_63*2)
000698 e0f3      	LDI  R31,HIGH(_S_63*2)
000699 c110      	RJMP _0x15B
                 ;    break;
                 ;    case '+' : SSD1963_PrintSymbol16(S_43, X, Y, Color, BackColor);
                 _0x54:
00069a 32eb      	CPI  R30,LOW(0x2B)
00069b e0a0      	LDI  R26,HIGH(0x2B)
00069c 07fa      	CPC  R31,R26
00069d f419      	BRNE _0x55
00069e eeec      	LDI  R30,LOW(_S_43*2)
00069f e0f2      	LDI  R31,HIGH(_S_43*2)
0006a0 c109      	RJMP _0x15B
                 ;    break;
                 ;    case '-' : SSD1963_PrintSymbol16(S_45, X, Y, Color, BackColor);
                 _0x55:
0006a1 32ed      	CPI  R30,LOW(0x2D)
0006a2 e0a0      	LDI  R26,HIGH(0x2D)
0006a3 07fa      	CPC  R31,R26
0006a4 f419      	BRNE _0x56
0006a5 e0ec      	LDI  R30,LOW(_S_45*2)
0006a6 e0f3      	LDI  R31,HIGH(_S_45*2)
0006a7 c102      	RJMP _0x15B
                 ;    break;
                 ;
                 ;    case 'А' : SSD1963_PrintSymbol16(S_192, X, Y, Color, BackColor);
                 _0x56:
0006a8 3ce0      	CPI  R30,LOW(0xC0)
0006a9 e0a0      	LDI  R26,HIGH(0xC0)
0006aa 07fa      	CPC  R31,R26
0006ab f419      	BRNE _0x57
0006ac ecec      	LDI  R30,LOW(_S_192*2)
0006ad e0f3      	LDI  R31,HIGH(_S_192*2)
0006ae c0fb      	RJMP _0x15B
                 ;    break;
                 ;    case 'Б' : SSD1963_PrintSymbol16(S_193, X, Y, Color, BackColor);
                 _0x57:
0006af 3ce1      	CPI  R30,LOW(0xC1)
0006b0 e0a0      	LDI  R26,HIGH(0xC1)
0006b1 07fa      	CPC  R31,R26
0006b2 f419      	BRNE _0x58
0006b3 eeec      	LDI  R30,LOW(_S_193*2)
0006b4 e0f3      	LDI  R31,HIGH(_S_193*2)
0006b5 c0f4      	RJMP _0x15B
                 ;    break;
                 ;    case 'В' : SSD1963_PrintSymbol16(S_194, X, Y, Color, BackColor);
                 _0x58:
0006b6 3ce2      	CPI  R30,LOW(0xC2)
0006b7 e0a0      	LDI  R26,HIGH(0xC2)
0006b8 07fa      	CPC  R31,R26
0006b9 f419      	BRNE _0x59
0006ba e0ec      	LDI  R30,LOW(_S_194*2)
0006bb e0f4      	LDI  R31,HIGH(_S_194*2)
0006bc c0ed      	RJMP _0x15B
                 ;    break;
                 ;    case 'Г' : SSD1963_PrintSymbol16(S_195, X, Y, Color, BackColor);
                 _0x59:
0006bd 3ce3      	CPI  R30,LOW(0xC3)
0006be e0a0      	LDI  R26,HIGH(0xC3)
0006bf 07fa      	CPC  R31,R26
0006c0 f419      	BRNE _0x5A
0006c1 e2ec      	LDI  R30,LOW(_S_195*2)
0006c2 e0f4      	LDI  R31,HIGH(_S_195*2)
0006c3 c0e6      	RJMP _0x15B
                 ;    break;
                 ;    case 'Д' : SSD1963_PrintSymbol16(S_196, X, Y, Color, BackColor);
                 _0x5A:
0006c4 3ce4      	CPI  R30,LOW(0xC4)
0006c5 e0a0      	LDI  R26,HIGH(0xC4)
0006c6 07fa      	CPC  R31,R26
0006c7 f419      	BRNE _0x5B
0006c8 e4ec      	LDI  R30,LOW(_S_196*2)
0006c9 e0f4      	LDI  R31,HIGH(_S_196*2)
0006ca c0df      	RJMP _0x15B
                 ;    break;
                 ;    case 'Е' : SSD1963_PrintSymbol16(S_197, X, Y, Color, BackColor);
                 _0x5B:
0006cb 3ce5      	CPI  R30,LOW(0xC5)
0006cc e0a0      	LDI  R26,HIGH(0xC5)
0006cd 07fa      	CPC  R31,R26
0006ce f419      	BRNE _0x5C
0006cf e6ec      	LDI  R30,LOW(_S_197*2)
0006d0 e0f4      	LDI  R31,HIGH(_S_197*2)
0006d1 c0d8      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ж' : SSD1963_PrintSymbol16(S_198, X, Y, Color, BackColor);
                 _0x5C:
0006d2 3ce6      	CPI  R30,LOW(0xC6)
0006d3 e0a0      	LDI  R26,HIGH(0xC6)
0006d4 07fa      	CPC  R31,R26
0006d5 f419      	BRNE _0x5D
0006d6 e8ec      	LDI  R30,LOW(_S_198*2)
0006d7 e0f4      	LDI  R31,HIGH(_S_198*2)
0006d8 c0d1      	RJMP _0x15B
                 ;    break;
                 ;    case 'З' : SSD1963_PrintSymbol16(S_199, X, Y, Color, BackColor);
                 _0x5D:
0006d9 3ce7      	CPI  R30,LOW(0xC7)
0006da e0a0      	LDI  R26,HIGH(0xC7)
0006db 07fa      	CPC  R31,R26
0006dc f419      	BRNE _0x5E
0006dd eaec      	LDI  R30,LOW(_S_199*2)
0006de e0f4      	LDI  R31,HIGH(_S_199*2)
0006df c0ca      	RJMP _0x15B
                 ;    break;
                 ;    case 'И' : SSD1963_PrintSymbol16(S_200, X, Y, Color, BackColor);
                 _0x5E:
0006e0 3ce8      	CPI  R30,LOW(0xC8)
0006e1 e0a0      	LDI  R26,HIGH(0xC8)
0006e2 07fa      	CPC  R31,R26
0006e3 f419      	BRNE _0x5F
0006e4 ecec      	LDI  R30,LOW(_S_200*2)
0006e5 e0f4      	LDI  R31,HIGH(_S_200*2)
0006e6 c0c3      	RJMP _0x15B
                 ;    break;
                 ;    case 'Й' : SSD1963_PrintSymbol16(S_201, X, Y, Color, BackColor);
                 _0x5F:
0006e7 3ce9      	CPI  R30,LOW(0xC9)
0006e8 e0a0      	LDI  R26,HIGH(0xC9)
0006e9 07fa      	CPC  R31,R26
0006ea f419      	BRNE _0x60
0006eb eeec      	LDI  R30,LOW(_S_201*2)
0006ec e0f4      	LDI  R31,HIGH(_S_201*2)
0006ed c0bc      	RJMP _0x15B
                 ;    break;
                 ;    case 'К' : SSD1963_PrintSymbol16(S_202, X, Y, Color, BackColor);
                 _0x60:
0006ee 3cea      	CPI  R30,LOW(0xCA)
0006ef e0a0      	LDI  R26,HIGH(0xCA)
0006f0 07fa      	CPC  R31,R26
0006f1 f419      	BRNE _0x61
0006f2 e0ec      	LDI  R30,LOW(_S_202*2)
0006f3 e0f5      	LDI  R31,HIGH(_S_202*2)
0006f4 c0b5      	RJMP _0x15B
                 ;    break;
                 ;    case 'Л' : SSD1963_PrintSymbol16(S_203, X, Y, Color, BackColor);
                 _0x61:
0006f5 3ceb      	CPI  R30,LOW(0xCB)
0006f6 e0a0      	LDI  R26,HIGH(0xCB)
0006f7 07fa      	CPC  R31,R26
0006f8 f419      	BRNE _0x62
0006f9 e2ec      	LDI  R30,LOW(_S_203*2)
0006fa e0f5      	LDI  R31,HIGH(_S_203*2)
0006fb c0ae      	RJMP _0x15B
                 ;    break;
                 ;    case 'М' : SSD1963_PrintSymbol16(S_204, X, Y, Color, BackColor);
                 _0x62:
0006fc 3cec      	CPI  R30,LOW(0xCC)
0006fd e0a0      	LDI  R26,HIGH(0xCC)
0006fe 07fa      	CPC  R31,R26
0006ff f419      	BRNE _0x63
000700 e4ec      	LDI  R30,LOW(_S_204*2)
000701 e0f5      	LDI  R31,HIGH(_S_204*2)
000702 c0a7      	RJMP _0x15B
                 ;    break;
                 ;    case 'Н' : SSD1963_PrintSymbol16(S_205, X, Y, Color, BackColor);
                 _0x63:
000703 3ced      	CPI  R30,LOW(0xCD)
000704 e0a0      	LDI  R26,HIGH(0xCD)
000705 07fa      	CPC  R31,R26
000706 f419      	BRNE _0x64
000707 e6ec      	LDI  R30,LOW(_S_205*2)
000708 e0f5      	LDI  R31,HIGH(_S_205*2)
000709 c0a0      	RJMP _0x15B
                 ;    break;
                 ;    case 'О' : SSD1963_PrintSymbol16(S_206, X, Y, Color, BackColor);
                 _0x64:
00070a 3cee      	CPI  R30,LOW(0xCE)
00070b e0a0      	LDI  R26,HIGH(0xCE)
00070c 07fa      	CPC  R31,R26
00070d f419      	BRNE _0x65
00070e e8ec      	LDI  R30,LOW(_S_206*2)
00070f e0f5      	LDI  R31,HIGH(_S_206*2)
000710 c099      	RJMP _0x15B
                 ;    break;
                 ;    case 'П' : SSD1963_PrintSymbol16(S_207, X, Y, Color, BackColor);
                 _0x65:
000711 3cef      	CPI  R30,LOW(0xCF)
000712 e0a0      	LDI  R26,HIGH(0xCF)
000713 07fa      	CPC  R31,R26
000714 f419      	BRNE _0x66
000715 eaec      	LDI  R30,LOW(_S_207*2)
000716 e0f5      	LDI  R31,HIGH(_S_207*2)
000717 c092      	RJMP _0x15B
                 ;    break;
                 ;    case 'Р' : SSD1963_PrintSymbol16(S_208, X, Y, Color, BackColor);
                 _0x66:
000718 3de0      	CPI  R30,LOW(0xD0)
000719 e0a0      	LDI  R26,HIGH(0xD0)
00071a 07fa      	CPC  R31,R26
00071b f419      	BRNE _0x67
00071c ecec      	LDI  R30,LOW(_S_208*2)
00071d e0f5      	LDI  R31,HIGH(_S_208*2)
00071e c08b      	RJMP _0x15B
                 ;    break;
                 ;    case 'С' : SSD1963_PrintSymbol16(S_209, X, Y, Color, BackColor);
                 _0x67:
00071f 3de1      	CPI  R30,LOW(0xD1)
000720 e0a0      	LDI  R26,HIGH(0xD1)
000721 07fa      	CPC  R31,R26
000722 f419      	BRNE _0x68
000723 eeec      	LDI  R30,LOW(_S_209*2)
000724 e0f5      	LDI  R31,HIGH(_S_209*2)
000725 c084      	RJMP _0x15B
                 ;    break;
                 ;    case 'Т' : SSD1963_PrintSymbol16(S_210, X, Y, Color, BackColor);
                 _0x68:
000726 3de2      	CPI  R30,LOW(0xD2)
000727 e0a0      	LDI  R26,HIGH(0xD2)
000728 07fa      	CPC  R31,R26
000729 f419      	BRNE _0x69
00072a e0ec      	LDI  R30,LOW(_S_210*2)
00072b e0f6      	LDI  R31,HIGH(_S_210*2)
00072c c07d      	RJMP _0x15B
                 ;    break;
                 ;    case 'У' : SSD1963_PrintSymbol16(S_211, X, Y, Color, BackColor);
                 _0x69:
00072d 3de3      	CPI  R30,LOW(0xD3)
00072e e0a0      	LDI  R26,HIGH(0xD3)
00072f 07fa      	CPC  R31,R26
000730 f419      	BRNE _0x6A
000731 e2ec      	LDI  R30,LOW(_S_211*2)
000732 e0f6      	LDI  R31,HIGH(_S_211*2)
000733 c076      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ф' : SSD1963_PrintSymbol16(S_212, X, Y, Color, BackColor);
                 _0x6A:
000734 3de4      	CPI  R30,LOW(0xD4)
000735 e0a0      	LDI  R26,HIGH(0xD4)
000736 07fa      	CPC  R31,R26
000737 f419      	BRNE _0x6B
000738 e4ec      	LDI  R30,LOW(_S_212*2)
000739 e0f6      	LDI  R31,HIGH(_S_212*2)
00073a c06f      	RJMP _0x15B
                 ;    break;
                 ;    case 'Х' : SSD1963_PrintSymbol16(S_213, X, Y, Color, BackColor);
                 _0x6B:
00073b 3de5      	CPI  R30,LOW(0xD5)
00073c e0a0      	LDI  R26,HIGH(0xD5)
00073d 07fa      	CPC  R31,R26
00073e f419      	BRNE _0x6C
00073f e6ec      	LDI  R30,LOW(_S_213*2)
000740 e0f6      	LDI  R31,HIGH(_S_213*2)
000741 c068      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ц' : SSD1963_PrintSymbol16(S_214, X, Y, Color, BackColor);
                 _0x6C:
000742 3de6      	CPI  R30,LOW(0xD6)
000743 e0a0      	LDI  R26,HIGH(0xD6)
000744 07fa      	CPC  R31,R26
000745 f419      	BRNE _0x6D
000746 e8ec      	LDI  R30,LOW(_S_214*2)
000747 e0f6      	LDI  R31,HIGH(_S_214*2)
000748 c061      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ч' : SSD1963_PrintSymbol16(S_215, X, Y, Color, BackColor);
                 _0x6D:
000749 3de7      	CPI  R30,LOW(0xD7)
00074a e0a0      	LDI  R26,HIGH(0xD7)
00074b 07fa      	CPC  R31,R26
00074c f419      	BRNE _0x6E
00074d eaec      	LDI  R30,LOW(_S_215*2)
00074e e0f6      	LDI  R31,HIGH(_S_215*2)
00074f c05a      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ш' : SSD1963_PrintSymbol16(S_216, X, Y, Color, BackColor);
                 _0x6E:
000750 3de8      	CPI  R30,LOW(0xD8)
000751 e0a0      	LDI  R26,HIGH(0xD8)
000752 07fa      	CPC  R31,R26
000753 f419      	BRNE _0x6F
000754 ecec      	LDI  R30,LOW(_S_216*2)
000755 e0f6      	LDI  R31,HIGH(_S_216*2)
000756 c053      	RJMP _0x15B
                 ;    break;
                 ;    case 'Щ' : SSD1963_PrintSymbol16(S_217, X, Y, Color, BackColor);
                 _0x6F:
000757 3de9      	CPI  R30,LOW(0xD9)
000758 e0a0      	LDI  R26,HIGH(0xD9)
000759 07fa      	CPC  R31,R26
00075a f419      	BRNE _0x70
00075b eeec      	LDI  R30,LOW(_S_217*2)
00075c e0f6      	LDI  R31,HIGH(_S_217*2)
00075d c04c      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ъ' : SSD1963_PrintSymbol16(S_218, X, Y, Color, BackColor);
                 _0x70:
00075e 3dea      	CPI  R30,LOW(0xDA)
00075f e0a0      	LDI  R26,HIGH(0xDA)
000760 07fa      	CPC  R31,R26
000761 f419      	BRNE _0x71
000762 e0ec      	LDI  R30,LOW(_S_218*2)
000763 e0f7      	LDI  R31,HIGH(_S_218*2)
000764 c045      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ы' : SSD1963_PrintSymbol16(S_219, X, Y, Color, BackColor);
                 _0x71:
000765 3deb      	CPI  R30,LOW(0xDB)
000766 e0a0      	LDI  R26,HIGH(0xDB)
000767 07fa      	CPC  R31,R26
000768 f419      	BRNE _0x72
000769 e2ec      	LDI  R30,LOW(_S_219*2)
00076a e0f7      	LDI  R31,HIGH(_S_219*2)
00076b c03e      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ь' : SSD1963_PrintSymbol16(S_220, X, Y, Color, BackColor);
                 _0x72:
00076c 3dec      	CPI  R30,LOW(0xDC)
00076d e0a0      	LDI  R26,HIGH(0xDC)
00076e 07fa      	CPC  R31,R26
00076f f419      	BRNE _0x73
000770 e4ec      	LDI  R30,LOW(_S_220*2)
000771 e0f7      	LDI  R31,HIGH(_S_220*2)
000772 c037      	RJMP _0x15B
                 ;    break;
                 ;    case 'Э' : SSD1963_PrintSymbol16(S_221, X, Y, Color, BackColor);
                 _0x73:
000773 3ded      	CPI  R30,LOW(0xDD)
000774 e0a0      	LDI  R26,HIGH(0xDD)
000775 07fa      	CPC  R31,R26
000776 f419      	BRNE _0x74
000777 e6ec      	LDI  R30,LOW(_S_221*2)
000778 e0f7      	LDI  R31,HIGH(_S_221*2)
000779 c030      	RJMP _0x15B
                 ;    break;
                 ;    case 'Ю' : SSD1963_PrintSymbol16(S_222, X, Y, Color, BackColor);
                 _0x74:
00077a 3dee      	CPI  R30,LOW(0xDE)
00077b e0a0      	LDI  R26,HIGH(0xDE)
00077c 07fa      	CPC  R31,R26
00077d f419      	BRNE _0x75
00077e e8ec      	LDI  R30,LOW(_S_222*2)
00077f e0f7      	LDI  R31,HIGH(_S_222*2)
000780 c029      	RJMP _0x15B
                 ;    break;
                 ;    case 'Я' : SSD1963_PrintSymbol16(S_223, X, Y, Color, BackColor);
                 _0x75:
000781 3def      	CPI  R30,LOW(0xDF)
000782 e0a0      	LDI  R26,HIGH(0xDF)
000783 07fa      	CPC  R31,R26
000784 f419      	BRNE _0x76
000785 eaec      	LDI  R30,LOW(_S_223*2)
000786 e0f7      	LDI  R31,HIGH(_S_223*2)
000787 c022      	RJMP _0x15B
                 ;    break;
                 ;
                 ;    case '.' : SSD1963_PrintSymbol16(S_46, X, Y, Color, BackColor);
                 _0x76:
000788 32ee      	CPI  R30,LOW(0x2E)
000789 e0a0      	LDI  R26,HIGH(0x2E)
00078a 07fa      	CPC  R31,R26
00078b f419      	BRNE _0x77
00078c eaec      	LDI  R30,LOW(_S_46*2)
00078d e0f0      	LDI  R31,HIGH(_S_46*2)
00078e c01b      	RJMP _0x15B
                 ;    break;
                 ;    case ' ' : SSD1963_PrintSymbol16(S_32, X, Y, Color, BackColor);
                 _0x77:
00078f 32e0      	CPI  R30,LOW(0x20)
000790 e0a0      	LDI  R26,HIGH(0x20)
000791 07fa      	CPC  R31,R26
000792 f419      	BRNE _0x78
000793 e4ec      	LDI  R30,LOW(_S_32*2)
000794 e0f2      	LDI  R31,HIGH(_S_32*2)
000795 c014      	RJMP _0x15B
                 ;    break;
                 ;    case 1 : SSD1963_PrintSymbol16(S_UP, X, Y, Color, BackColor);
                 _0x78:
000796 30e1      	CPI  R30,LOW(0x1)
000797 e0a0      	LDI  R26,HIGH(0x1)
000798 07fa      	CPC  R31,R26
000799 f419      	BRNE _0x79
00079a ecec      	LDI  R30,LOW(_S_UP*2)
00079b e0f0      	LDI  R31,HIGH(_S_UP*2)
00079c c00d      	RJMP _0x15B
                 ;    break;
                 ;    case 2 : SSD1963_PrintSymbol16(S_DOWN, X, Y, Color, BackColor);
                 _0x79:
00079d 30e2      	CPI  R30,LOW(0x2)
00079e e0a0      	LDI  R26,HIGH(0x2)
00079f 07fa      	CPC  R31,R26
0007a0 f419      	BRNE _0x7A
0007a1 eeec      	LDI  R30,LOW(_S_DOWN*2)
0007a2 e0f0      	LDI  R31,HIGH(_S_DOWN*2)
0007a3 c006      	RJMP _0x15B
                 ;    break;
                 ;    case 3 : SSD1963_PrintSymbol16(blank_symb, X, Y, Color, BackColor);
                 _0x7A:
0007a4 30e3      	CPI  R30,LOW(0x3)
0007a5 e0a0      	LDI  R26,HIGH(0x3)
0007a6 07fa      	CPC  R31,R26
0007a7 f469      	BRNE _0x41
0007a8 e8ec      	LDI  R30,LOW(_blank_symb*2)
0007a9 e0f0      	LDI  R31,HIGH(_blank_symb*2)
                 _0x15B:
0007aa 93fa      	ST   -Y,R31
0007ab 93ea      	ST   -Y,R30
0007ac 940e 0f23 	CALL SUBOPT_0x11
0007ae 940e 0f23 	CALL SUBOPT_0x11
0007b0 940e 0f23 	CALL SUBOPT_0x11
0007b2 940e 0f23 	CALL SUBOPT_0x11
0007b4 de25      	RCALL _SSD1963_PrintSymbol16
                 ;    break;
                 ;  }
                 _0x41:
                 ;}
0007b5 9629      	ADIW R28,9
0007b6 9508      	RET
                 ;
                 ;void SSD1963_PutString16(unsigned char* string, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 _SSD1963_PutString16:
                 ;  while (*string) {SSD1963_PutChar16(*string++, X, Y, Color, BackColor); X += FONT_WIDTH;}
                 ;	*string -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 _0x7C:
0007b7 85a8      	LDD  R26,Y+8
0007b8 85b9      	LDD  R27,Y+8+1
0007b9 91ec      	LD   R30,X
0007ba 30e0      	CPI  R30,0
0007bb f099      	BREQ _0x7E
0007bc 91ed      	LD   R30,X+
0007bd 87a8      	STD  Y+8,R26
0007be 87b9      	STD  Y+8+1,R27
0007bf 93ea      	ST   -Y,R30
0007c0 940e 0f2d 	CALL SUBOPT_0x13
0007c2 940e 0f2d 	CALL SUBOPT_0x13
0007c4 940e 0f2d 	CALL SUBOPT_0x13
0007c6 940e 0f2d 	CALL SUBOPT_0x13
0007c8 de4a      	RCALL _SSD1963_PutChar16
0007c9 81ee      	LDD  R30,Y+6
0007ca 81ff      	LDD  R31,Y+6+1
0007cb 9670      	ADIW R30,16
0007cc 83ee      	STD  Y+6,R30
0007cd 83ff      	STD  Y+6+1,R31
0007ce cfe8      	RJMP _0x7C
                 _0x7E:
                 ;}
0007cf 962a      	ADIW R28,10
0007d0 9508      	RET
                 ;
                 ;void SSD1963_PutValue16(unsigned int Value, unsigned int X, unsigned int Y, char N, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  switch(N)
                 ;	Value -> Y+9
                 ;	X -> Y+7
                 ;	Y -> Y+5
                 ;	N -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  {
                 ;    case 5 :
                 ;      SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10000;
                 ;      X += FONT_WIDTH;
                 ;    case 4 :
                 ;      SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;      Value %= 1000;
                 ;      X += FONT_WIDTH;
                 ;    case 3 :
                 ;      SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;      Value %= 100;
                 ;      X += FONT_WIDTH;
                 ;    case 2 :
                 ;      SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;      Value %= 10;
                 ;      X += FONT_WIDTH;
                 ;    case 1 :
                 ;      SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;    break;
                 ;  }
                 ;}
                 ;
                 ;void SSD1963_DrawFastLine(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFastLine:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
0007d1 940e 0f32 	CALL SUBOPT_0x14
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
0007d3 940e 0f44 	CALL SUBOPT_0x15
                 ;  if (j < 0) j *= -1;
0007d5 f412      	BRPL _0x8B
0007d6 940e 0f4e 	CALL SUBOPT_0x16
                 ;  k = StopY - StartY + 1;
                 _0x8B:
0007d8 940e 0f55 	CALL SUBOPT_0x17
                 ;  if (k < 0) k *= -1;
0007da f422      	BRPL _0x8C
0007db 940e 0f65 	CALL SUBOPT_0x18
0007dd 940e 0f6a 	CALL SUBOPT_0x19
                 ;  k = k * j;
                 _0x8C:
0007df 940e 0f75 	CALL SUBOPT_0x1A
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0x8E:
0007e1 940e 0f88 	CALL SUBOPT_0x1B
0007e3 f43c      	BRGE _0x8F
0007e4 85ea      	LDD  R30,Y+10
0007e5 85fb      	LDD  R31,Y+10+1
0007e6 940e 0f1f 	CALL SUBOPT_0x10
0007e8 940e 0f90 	CALL SUBOPT_0x1C
0007ea cff6      	RJMP _0x8E
                 _0x8F:
0007eb c105      	RJMP _0x2080005
                 ;
                 ;void SSD1963_DrawLine (unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color, char Width)
                 ;{
                 _SSD1963_DrawLine:
                 ;	int i, k;
                 ;  int deltaX, deltaY, signX, signY, error, error2;
                 ;  deltaX = (StopX - StartX);
0007ec 972a      	SBIW R28,10
0007ed 940e 121d 	CALL __SAVELOCR6
                 ;	StartX -> Y+25
                 ;	StopX -> Y+23
                 ;	StartY -> Y+21
                 ;	StopY -> Y+19
                 ;	Color -> Y+17
                 ;	Width -> Y+16
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	deltaX -> R20,R21
                 ;	deltaY -> Y+14
                 ;	signX -> Y+12
                 ;	signY -> Y+10
                 ;	error -> Y+8
                 ;	error2 -> Y+6
0007ef 8da9      	LDD  R26,Y+25
0007f0 8dba      	LDD  R27,Y+25+1
0007f1 89ef      	LDD  R30,Y+23
0007f2 8df8      	LDD  R31,Y+23+1
0007f3 1bea      	SUB  R30,R26
0007f4 0bfb      	SBC  R31,R27
0007f5 01af      	MOVW R20,R30
                 ;  if (deltaX < 0) deltaX *= -1;
0007f6 2355      	TST  R21
0007f7 f432      	BRPL _0x90
0007f8 01fa      	MOVW R30,R20
0007f9 efaf      	LDI  R26,LOW(65535)
0007fa efbf      	LDI  R27,HIGH(65535)
0007fb 940e 11e9 	CALL __MULW12
0007fd 01af      	MOVW R20,R30
                 ;	deltaY = (StopY - StartY);
                 _0x90:
0007fe 89ad      	LDD  R26,Y+21
0007ff 89be      	LDD  R27,Y+21+1
000800 89eb      	LDD  R30,Y+19
000801 89fc      	LDD  R31,Y+19+1
000802 1bea      	SUB  R30,R26
000803 0bfb      	SBC  R31,R27
000804 87ee      	STD  Y+14,R30
000805 87ff      	STD  Y+14+1,R31
                 ;  if (deltaY < 0) deltaY *= -1;
000806 85af      	LDD  R26,Y+15
000807 23aa      	TST  R26
000808 f432      	BRPL _0x91
000809 efaf      	LDI  R26,LOW(65535)
00080a efbf      	LDI  R27,HIGH(65535)
00080b 940e 11e9 	CALL __MULW12
00080d 87ee      	STD  Y+14,R30
00080e 87ff      	STD  Y+14+1,R31
                 ;	signX = StartX < StopX ? 1 : -1;
                 _0x91:
00080f 89ef      	LDD  R30,Y+23
000810 8df8      	LDD  R31,Y+23+1
000811 8da9      	LDD  R26,Y+25
000812 8dba      	LDD  R27,Y+25+1
000813 17ae      	CP   R26,R30
000814 07bf      	CPC  R27,R31
000815 f418      	BRSH _0x92
000816 e0e1      	LDI  R30,LOW(1)
000817 e0f0      	LDI  R31,HIGH(1)
000818 c002      	RJMP _0x93
                 _0x92:
000819 efef      	LDI  R30,LOW(65535)
00081a efff      	LDI  R31,HIGH(65535)
                 _0x93:
00081b 87ec      	STD  Y+12,R30
00081c 87fd      	STD  Y+12+1,R31
                 ;	signY = StartY < StopY ? 1 : -1;
00081d 89eb      	LDD  R30,Y+19
00081e 89fc      	LDD  R31,Y+19+1
00081f 89ad      	LDD  R26,Y+21
000820 89be      	LDD  R27,Y+21+1
000821 17ae      	CP   R26,R30
000822 07bf      	CPC  R27,R31
000823 f418      	BRSH _0x95
000824 e0e1      	LDI  R30,LOW(1)
000825 e0f0      	LDI  R31,HIGH(1)
000826 c002      	RJMP _0x96
                 _0x95:
000827 efef      	LDI  R30,LOW(65535)
000828 efff      	LDI  R31,HIGH(65535)
                 _0x96:
000829 87ea      	STD  Y+10,R30
00082a 87fb      	STD  Y+10+1,R31
                 ;	error = deltaX - deltaY;
00082b 85ae      	LDD  R26,Y+14
00082c 85bf      	LDD  R27,Y+14+1
00082d 01fa      	MOVW R30,R20
00082e 1bea      	SUB  R30,R26
00082f 0bfb      	SBC  R31,R27
000830 87e8      	STD  Y+8,R30
000831 87f9      	STD  Y+8+1,R31
                 ;
                 ;	while(1)
                 _0x98:
                 ;	{
                 ;	  SSD1963_SetArea(StartX, StartX + Width, StartY, StartY + Width);
000832 8de9      	LDD  R30,Y+25
000833 8dfa      	LDD  R31,Y+25+1
000834 93fa      	ST   -Y,R31
000835 93ea      	ST   -Y,R30
000836 89ea      	LDD  R30,Y+18
000837 940e 0f9d 	CALL SUBOPT_0x1D
000839 93fa      	ST   -Y,R31
00083a 93ea      	ST   -Y,R30
00083b 8de9      	LDD  R30,Y+25
00083c 8dfa      	LDD  R31,Y+25+1
00083d 93fa      	ST   -Y,R31
00083e 93ea      	ST   -Y,R30
00083f 89ee      	LDD  R30,Y+22
000840 940e 0f9d 	CALL SUBOPT_0x1D
000842 940e 0f17 	CALL SUBOPT_0xF
                 ;    SSD1963_WriteCmd(0x2c);
                 ;    k = Width * Width;
000844 89a8      	LDD  R26,Y+16
000845 27bb      	CLR  R27
000846 89e8      	LDD  R30,Y+16
000847 e0f0      	LDI  R31,0
000848 940e 11e9 	CALL __MULW12
00084a 019f      	MOVW R18,R30
                 ;    for (i = 0; i <= k; i++) SSD1963_WriteData_b16(Color);
                +
00084b e000     +LDI R16 , LOW ( 0 )
00084c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9C:
                +
00084d 1720     +CP R18 , R16
00084e 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
00084f f03c      	BRLT _0x9D
000850 89e9      	LDD  R30,Y+17
000851 89fa      	LDD  R31,Y+17+1
000852 940e 0f1f 	CALL SUBOPT_0x10
                +
000854 5f0f     +SUBI R16 , LOW ( - 1 )
000855 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000856 cff6      	RJMP _0x9C
                 _0x9D:
000857 89ef      	LDD  R30,Y+23
000858 8df8      	LDD  R31,Y+23+1
000859 8da9      	LDD  R26,Y+25
00085a 8dba      	LDD  R27,Y+25+1
00085b 17ea      	CP   R30,R26
00085c 07fb      	CPC  R31,R27
00085d f439      	BRNE _0x9F
00085e 89eb      	LDD  R30,Y+19
00085f 89fc      	LDD  R31,Y+19+1
000860 89ad      	LDD  R26,Y+21
000861 89be      	LDD  R27,Y+21+1
000862 17ea      	CP   R30,R26
000863 07fb      	CPC  R31,R27
000864 f009      	BREQ _0xA0
                 _0x9F:
000865 c001      	RJMP _0x9E
                 _0xA0:
                 ;		break;
000866 c032      	RJMP _0x9A
                 ;
                 ;		error2 = error * 2;
                 _0x9E:
000867 85e8      	LDD  R30,Y+8
000868 85f9      	LDD  R31,Y+8+1
000869 0fee      	LSL  R30
00086a 1fff      	ROL  R31
00086b 83ee      	STD  Y+6,R30
00086c 83ff      	STD  Y+6+1,R31
                 ;
                 ;		if(error2 > -deltaY)
00086d 85ee      	LDD  R30,Y+14
00086e 85ff      	LDD  R31,Y+14+1
00086f 940e 119f 	CALL __ANEGW1
000871 81ae      	LDD  R26,Y+6
000872 81bf      	LDD  R27,Y+6+1
000873 17ea      	CP   R30,R26
000874 07fb      	CPC  R31,R27
000875 f474      	BRGE _0xA1
                 ;		{
                 ;			error -= deltaY;
000876 85ae      	LDD  R26,Y+14
000877 85bf      	LDD  R27,Y+14+1
000878 940e 0fa3 	CALL SUBOPT_0x1E
00087a 87e8      	STD  Y+8,R30
00087b 87f9      	STD  Y+8+1,R31
                 ;			StartX += signX;
00087c 85ec      	LDD  R30,Y+12
00087d 85fd      	LDD  R31,Y+12+1
00087e 8da9      	LDD  R26,Y+25
00087f 8dba      	LDD  R27,Y+25+1
000880 0fea      	ADD  R30,R26
000881 1ffb      	ADC  R31,R27
000882 8fe9      	STD  Y+25,R30
000883 8ffa      	STD  Y+25+1,R31
                 ;		}
                 ;
                 ;		if(error2 < deltaX)
                 _0xA1:
000884 81ae      	LDD  R26,Y+6
000885 81bf      	LDD  R27,Y+6+1
000886 17a4      	CP   R26,R20
000887 07b5      	CPC  R27,R21
000888 f47c      	BRGE _0xA2
                 ;		{
                 ;			error += deltaX;
000889 01fa      	MOVW R30,R20
00088a 85a8      	LDD  R26,Y+8
00088b 85b9      	LDD  R27,Y+8+1
00088c 0fea      	ADD  R30,R26
00088d 1ffb      	ADC  R31,R27
00088e 87e8      	STD  Y+8,R30
00088f 87f9      	STD  Y+8+1,R31
                 ;			StartY += signY;
000890 85ea      	LDD  R30,Y+10
000891 85fb      	LDD  R31,Y+10+1
000892 89ad      	LDD  R26,Y+21
000893 89be      	LDD  R27,Y+21+1
000894 0fea      	ADD  R30,R26
000895 1ffb      	ADC  R31,R27
000896 8bed      	STD  Y+21,R30
000897 8bfe      	STD  Y+21+1,R31
                 ;		}
                 ;	}
                 _0xA2:
000898 cf99      	RJMP _0x98
                 _0x9A:
                 ;}
000899 940e 1224 	CALL __LOADLOCR6
00089b 966b      	ADIW R28,27
00089c 9508      	RET
                 ;
                 ;void SSD1963_DrawRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Width, unsigned int Color)
                 ;{
                 _SSD1963_DrawRect:
                 ;  SSD1963_DrawFastLine(StartX, StopX, StartY, StartY + Width, Color);
                 ;	StartX -> Y+10
                 ;	StopX -> Y+8
                 ;	StartY -> Y+6
                 ;	StopY -> Y+4
                 ;	Width -> Y+2
                 ;	Color -> Y+0
00089d 940e 0f28 	CALL SUBOPT_0x12
00089f 940e 0f28 	CALL SUBOPT_0x12
0008a1 940e 0f28 	CALL SUBOPT_0x12
0008a3 85e8      	LDD  R30,Y+8
0008a4 85f9      	LDD  R31,Y+8+1
0008a5 940e 0fa8 	CALL SUBOPT_0x1F
0008a7 940e 0f23 	CALL SUBOPT_0x11
0008a9 df27      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StartX + Width, StartY, StopY, Color);
0008aa 940e 0f28 	CALL SUBOPT_0x12
0008ac 81ec      	LDD  R30,Y+4
0008ad 81fd      	LDD  R31,Y+4+1
0008ae 940e 0fa8 	CALL SUBOPT_0x1F
0008b0 940e 0f28 	CALL SUBOPT_0x12
0008b2 940e 0f28 	CALL SUBOPT_0x12
0008b4 940e 0f23 	CALL SUBOPT_0x11
0008b6 df1a      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StartX, StopX, StopY - Width, StopY, Color);
0008b7 940e 0f28 	CALL SUBOPT_0x12
0008b9 940e 0f28 	CALL SUBOPT_0x12
0008bb 81ae      	LDD  R26,Y+6
0008bc 81bf      	LDD  R27,Y+6+1
0008bd 940e 0fa3 	CALL SUBOPT_0x1E
0008bf 93fa      	ST   -Y,R31
0008c0 93ea      	ST   -Y,R30
0008c1 940e 0f28 	CALL SUBOPT_0x12
0008c3 940e 0f23 	CALL SUBOPT_0x11
0008c5 df0b      	RCALL _SSD1963_DrawFastLine
                 ;  SSD1963_DrawFastLine(StopX - Width, StopX, StartY, StopY, Color);
0008c6 81aa      	LDD  R26,Y+2
0008c7 81bb      	LDD  R27,Y+2+1
0008c8 940e 0fa3 	CALL SUBOPT_0x1E
0008ca 93fa      	ST   -Y,R31
0008cb 93ea      	ST   -Y,R30
0008cc 940e 0f28 	CALL SUBOPT_0x12
0008ce 940e 0f28 	CALL SUBOPT_0x12
0008d0 940e 0f28 	CALL SUBOPT_0x12
0008d2 940e 0f23 	CALL SUBOPT_0x11
0008d4 defc      	RCALL _SSD1963_DrawFastLine
                 ;}
                 _0x2080006:
0008d5 962c      	ADIW R28,12
0008d6 9508      	RET
                 ;
                 ;void SSD1963_DrawFillRect(unsigned int StartX, unsigned int StopX, unsigned int StartY, unsigned int StopY, unsigned int Color)
                 ;{
                 _SSD1963_DrawFillRect:
                 ;  signed int j;
                 ;  long i, k;
                 ;  SSD1963_SetArea(StartX, StopX, StartY, StopY);
0008d7 940e 0f32 	CALL SUBOPT_0x14
                 ;	StartX -> Y+18
                 ;	StopX -> Y+16
                 ;	StartY -> Y+14
                 ;	StopY -> Y+12
                 ;	Color -> Y+10
                 ;	j -> R16,R17
                 ;	i -> Y+6
                 ;	k -> Y+2
                 ;  SSD1963_WriteCmd(0x2c);
                 ;  j = StopX - StartX + 1;
0008d9 940e 0f44 	CALL SUBOPT_0x15
                 ;  if (j < 0) j *= -1;
0008db f412      	BRPL _0xA3
0008dc 940e 0f4e 	CALL SUBOPT_0x16
                 ;  k = StopY - StartY + 1;
                 _0xA3:
0008de 940e 0f55 	CALL SUBOPT_0x17
                 ;  if (k < 0) k *= -1;
0008e0 f422      	BRPL _0xA4
0008e1 940e 0f65 	CALL SUBOPT_0x18
0008e3 940e 0f6a 	CALL SUBOPT_0x19
                 ;  k = k * j;
                 _0xA4:
0008e5 940e 0f75 	CALL SUBOPT_0x1A
                 ;  for (i = 0; i < k; i++) SSD1963_WriteData_b16(Color);
                 _0xA6:
0008e7 940e 0f88 	CALL SUBOPT_0x1B
0008e9 f43c      	BRGE _0xA7
0008ea 85ea      	LDD  R30,Y+10
0008eb 85fb      	LDD  R31,Y+10+1
0008ec 940e 0f1f 	CALL SUBOPT_0x10
0008ee 940e 0f90 	CALL SUBOPT_0x1C
0008f0 cff6      	RJMP _0xA6
                 _0xA7:
                 _0x2080005:
0008f1 8119      	LDD  R17,Y+1
0008f2 8108      	LDD  R16,Y+0
0008f3 9664      	ADIW R28,20
0008f4 9508      	RET
                 ;
                 ;void SSD1963_PutFloatValue16(unsigned int Value, unsigned int X, unsigned int Y, unsigned int Color, unsigned int BackColor)
                 ;{
                 ;  SSD1963_PutChar16(Value / 10000 + 48, X, Y, Color, BackColor);
                 ;	Value -> Y+8
                 ;	X -> Y+6
                 ;	Y -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
                 ;  Value %= 10000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 1000 + 48, X, Y, Color, BackColor);
                 ;  Value %= 1000;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16('.', X, Y, Color, BackColor);
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 100 + 48, X, Y, Color, BackColor);
                 ;  Value %= 100;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value / 10 + 48, X, Y, Color, BackColor);
                 ;  Value %= 10;
                 ;  X += FONT_WIDTH;
                 ;  SSD1963_PutChar16(Value + 48, X, Y, Color, BackColor);
                 ;}
                 ;
                 ;#pragma used-
                 ;
                 ;#include "TSC2046.c"
                 ;#include <spi.h>
                 ;#include <delay.h>
                 ;
                 ;#define TOUCH_CS PORTE.2
                 ;#define TOUCH_IRQ_PORT PORTE.3
                 ;#define TOUCH_IRQ PINE.3
                 ;
                 ;#define ADC_X_MIN 1300
                 ;#define ADC_Y_MIN 2100
                 ;#define ADC_X_K 61.458333333333333333333333333333
                 ;#define ADC_Y_K 103.30882352941176470588235294118
                 ;
                 ;#define TOUCH_Calc_Max 16
                 ;
                 ;void TSC2046_PortInit(void)
                 ; 0000 001C {
                 _TSC2046_PortInit:
                 ;  DDRE |= 0b00000100;
0008f5 9a12      	SBI  0x2,2
                 ;  DDRE &= 0b11110111;
0008f6 9813      	CBI  0x2,3
                 ;}
0008f7 9508      	RET
                 ;
                 ;#pragma used+
                 ;
                 ;long tempX, tempY;
                 ;unsigned int TOUCH_X, TOUCH_Y, TOUCH_X_LAST, TOUCH_Y_LAST;
                 ;
                 ;unsigned int TSC2046_getADC_Bat(void)
                 ;{
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
                 ;	res -> R16,R17
                 ;  delay_ms(1);
                 ;  spi(0b10100011);
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_X(void)
                 ;{
                 _TSC2046_getADC_X:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
0008f8 931a      	ST   -Y,R17
0008f9 930a      	ST   -Y,R16
                 ;	res -> R16,R17
0008fa 981a      	CBI  0x3,2
                 ;  delay_ms(1);
0008fb 940e 0eef 	CALL SUBOPT_0x7
                 ;  spi(0b11010011);
0008fd ede3      	LDI  R30,LOW(211)
0008fe 940e 0faf 	CALL SUBOPT_0x20
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000900 c0b4      	RJMP _0x2080004
                 ;}
                 ;
                 ;unsigned int TSC2046_getADC_Y(void)
                 ;{
                 _TSC2046_getADC_Y:
                 ;  unsigned int res;
                 ;  TOUCH_CS = 0;
000901 931a      	ST   -Y,R17
000902 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000903 981a      	CBI  0x3,2
                 ;  delay_ms(1);
000904 940e 0eef 	CALL SUBOPT_0x7
                 ;  spi(0b10010011);
000906 e9e3      	LDI  R30,LOW(147)
000907 940e 0faf 	CALL SUBOPT_0x20
                 ;  delay_us(100);
                 ;  res = spi(0x00);
                 ;  res = res << 8;
                 ;  res += spi(0x00);
                 ;  //res = res >> 3;
                 ;  TOUCH_CS = 1;
                 ;  return res;
000909 c0ab      	RJMP _0x2080004
                 ;}
                 ;
                 ;void TSC2046_Stop()
                 ;{
                 _TSC2046_Stop:
                 ;  TOUCH_CS = 0;
00090a 981a      	CBI  0x3,2
                 ;  delay_ms(5);
00090b e0e5      	LDI  R30,LOW(5)
00090c e0f0      	LDI  R31,HIGH(5)
00090d 940e 0efc 	CALL SUBOPT_0x9
                 ;  spi(0b10010000);
00090f e9e0      	LDI  R30,LOW(144)
000910 93ea      	ST   -Y,R30
000911 940e 0ebf 	CALL _spi
                 ;  delay_us(100);
                +
000913 e980     +LDI R24 , LOW ( 400 )
000914 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000915 9701     +SBIW R24 , 1
000916 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ;  spi(0x00);
000917 e0e0      	LDI  R30,LOW(0)
000918 93ea      	ST   -Y,R30
000919 940e 0ebf 	CALL _spi
                 ;  spi(0x00);
00091b e0e0      	LDI  R30,LOW(0)
00091c 93ea      	ST   -Y,R30
00091d 940e 0ebf 	CALL _spi
                 ;  TOUCH_CS = 1;
00091f 9a1a      	SBI  0x3,2
                 ;}
000920 9508      	RET
                 ;
                 ;unsigned int TSC2046_getX(void)
                 ;{
                 _TSC2046_getX:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_X() - ADC_X_MIN;
000921 931a      	ST   -Y,R17
000922 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000923 dfd4      	RCALL _TSC2046_getADC_X
000924 51e4      	SUBI R30,LOW(1300)
000925 40f5      	SBCI R31,HIGH(1300)
000926 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
000927 2311      	TST  R17
000928 f412      	BRPL _0xB8
                +
000929 e000     +LDI R16 , LOW ( 0 )
00092a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_X_K;
                 _0xB8:
00092b 940e 0fc8 	CALL SUBOPT_0x21
                +
00092d e5e5     +LDI R30 , LOW ( 0x4275D555 )
00092e edf5     +LDI R31 , HIGH ( 0x4275D555 )
00092f e765     +LDI R22 , BYTE3 ( 0x4275D555 )
000930 e472     +LDI R23 , BYTE4 ( 0x4275D555 )
                 	__GETD1N 0x4275D555
000931 940e 0fd0 	CALL SUBOPT_0x22
                 ;  return res;
000933 c081      	RJMP _0x2080004
                 ;}
                 ;
                 ;unsigned int TSC2046_getY(void)
                 ;{
                 _TSC2046_getY:
                 ;  signed int res;
                 ;  res = TSC2046_getADC_Y() - ADC_Y_MIN;
000934 931a      	ST   -Y,R17
000935 930a      	ST   -Y,R16
                 ;	res -> R16,R17
000936 dfca      	RCALL _TSC2046_getADC_Y
000937 53e4      	SUBI R30,LOW(2100)
000938 40f8      	SBCI R31,HIGH(2100)
000939 018f      	MOVW R16,R30
                 ;  if (res < 0) res = 0;
00093a 2311      	TST  R17
00093b f412      	BRPL _0xB9
                +
00093c e000     +LDI R16 , LOW ( 0 )
00093d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;  res = res / ADC_Y_K;
                 _0xB9:
00093e 940e 0fc8 	CALL SUBOPT_0x21
                +
000940 e1ee     +LDI R30 , LOW ( 0x42CE9E1E )
000941 e9fe     +LDI R31 , HIGH ( 0x42CE9E1E )
000942 ec6e     +LDI R22 , BYTE3 ( 0x42CE9E1E )
000943 e472     +LDI R23 , BYTE4 ( 0x42CE9E1E )
                 	__GETD1N 0x42CE9E1E
000944 940e 0fd0 	CALL SUBOPT_0x22
                 ;  return res;
000946 c06e      	RJMP _0x2080004
                 ;}
                 ;
                 ;char TSC2046_GetCoordinates(void)
                 ;{
                 _TSC2046_GetCoordinates:
                 ;  char res = 0, i;
                 ;  //TOUCH_CS = 0;
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  //delay_us(10);
                 ;  //TOUCH_IRQ_PORT = 1;
                 ;  //TOUCH_CS = 1;
                 ;  if (TOUCH_IRQ < 1)
000947 931a      	ST   -Y,R17
000948 930a      	ST   -Y,R16
                 ;	res -> R17
                 ;	i -> R16
000949 e010      	LDI  R17,0
00094a e0a0      	LDI  R26,0
00094b 990b      	SBIC 0x1,3
00094c e0a1      	LDI  R26,1
00094d 30a1      	CPI  R26,LOW(0x1)
00094e f010      	BRLO PC+3
00094f 940c 09b4 	JMP _0xBA
                 ;  {
                 ;    tempX = 0;
000951 940e 0fd7 	CALL SUBOPT_0x23
                 ;    tempY = 0;
000953 940e 0fe1 	CALL SUBOPT_0x24
                 ;    for (i = 0; i < TOUCH_Calc_Max; i++)
000955 e000      	LDI  R16,LOW(0)
                 _0xBC:
000956 3100      	CPI  R16,16
000957 f500      	BRSH _0xBD
                 ;    {
                 ;      tempX += TSC2046_getADC_X();
000958 df9f      	RCALL _TSC2046_getADC_X
000959 91a0 05b7 	LDS  R26,_tempX
00095b 91b0 05b8 	LDS  R27,_tempX+1
00095d 9180 05b9 	LDS  R24,_tempX+2
00095f 9190 05ba 	LDS  R25,_tempX+3
000961 2766      	CLR  R22
000962 2777      	CLR  R23
000963 940e 119a 	CALL __ADDD12
000965 940e 0feb 	CALL SUBOPT_0x25
                 ;      tempY += TSC2046_getADC_Y();
000967 df99      	RCALL _TSC2046_getADC_Y
000968 91a0 05bb 	LDS  R26,_tempY
00096a 91b0 05bc 	LDS  R27,_tempY+1
00096c 9180 05bd 	LDS  R24,_tempY+2
00096e 9190 05be 	LDS  R25,_tempY+3
000970 2766      	CLR  R22
000971 2777      	CLR  R23
000972 940e 119a 	CALL __ADDD12
000974 940e 0ff4 	CALL SUBOPT_0x26
                 ;    }
000976 5f0f      	SUBI R16,-1
000977 cfde      	RJMP _0xBC
                 _0xBD:
                 ;    tempX -= ADC_X_MIN * TOUCH_Calc_Max;
000978 940e 0ffd 	CALL SUBOPT_0x27
                +
00097a 54e0     +SUBI R30 , LOW ( 20800 )
00097b 45f1     +SBCI R31 , HIGH ( 20800 )
00097c 4060     +SBCI R22 , BYTE3 ( 20800 )
00097d 4070     +SBCI R23 , BYTE4 ( 20800 )
                 	__SUBD1N 20800
00097e 940e 0feb 	CALL SUBOPT_0x25
                 ;    tempY -= ADC_Y_MIN * TOUCH_Calc_Max;
000980 940e 1006 	CALL SUBOPT_0x28
                +
000982 54e0     +SUBI R30 , LOW ( 33600 )
000983 48f3     +SBCI R31 , HIGH ( 33600 )
000984 4060     +SBCI R22 , BYTE3 ( 33600 )
000985 4070     +SBCI R23 , BYTE4 ( 33600 )
                 	__SUBD1N 33600
000986 940e 0ff4 	CALL SUBOPT_0x26
                 ;    if(tempX < 0) tempX = 0;
000988 91a0 05ba 	LDS  R26,_tempX+3
00098a 23aa      	TST  R26
00098b f412      	BRPL _0xBE
00098c 940e 0fd7 	CALL SUBOPT_0x23
                 ;    if(tempY < 0) tempY = 0;
                 _0xBE:
00098e 91a0 05be 	LDS  R26,_tempY+3
000990 23aa      	TST  R26
000991 f412      	BRPL _0xBF
000992 940e 0fe1 	CALL SUBOPT_0x24
                 ;
                 ;    TOUCH_X = tempX / (TOUCH_Calc_Max * ADC_X_K);
                 _0xBF:
000994 940e 0ffd 	CALL SUBOPT_0x27
000996 940e 1127 	CALL __CDF1
000998 01df      	MOVW R26,R30
000999 01cb      	MOVW R24,R22
                +
00099a e5e5     +LDI R30 , LOW ( 0x4475D555 )
00099b edf5     +LDI R31 , HIGH ( 0x4475D555 )
00099c e765     +LDI R22 , BYTE3 ( 0x4475D555 )
00099d e474     +LDI R23 , BYTE4 ( 0x4475D555 )
                 	__GETD1N 0x4475D555
00099e 940e 1155 	CALL __DIVF21
0009a0 940e 10ee 	CALL __CFD1U
0009a2 012f      	MOVW R4,R30
                 ;    TOUCH_Y = tempY / (TOUCH_Calc_Max * ADC_Y_K);
0009a3 940e 1006 	CALL SUBOPT_0x28
0009a5 940e 1127 	CALL __CDF1
0009a7 01df      	MOVW R26,R30
0009a8 01cb      	MOVW R24,R22
                +
0009a9 e1ee     +LDI R30 , LOW ( 0x44CE9E1E )
0009aa e9fe     +LDI R31 , HIGH ( 0x44CE9E1E )
0009ab ec6e     +LDI R22 , BYTE3 ( 0x44CE9E1E )
0009ac e474     +LDI R23 , BYTE4 ( 0x44CE9E1E )
                 	__GETD1N 0x44CE9E1E
0009ad 940e 1155 	CALL __DIVF21
0009af 940e 10ee 	CALL __CFD1U
0009b1 013f      	MOVW R6,R30
                 ;
                 ;    TSC2046_Stop();
0009b2 df57      	RCALL _TSC2046_Stop
                 ;    res = 1;
0009b3 e011      	LDI  R17,LOW(1)
                 ;  }
                 ;  //TOUCH_IRQ_PORT = 0;
                 ;  return res;
                 _0xBA:
0009b4 2fe1      	MOV  R30,R17
                 _0x2080004:
0009b5 9109      	LD   R16,Y+
0009b6 9119      	LD   R17,Y+
0009b7 9508      	RET
                 ;}
                 ;
                 ;void TSC2046_Init(void)
                 ;{
                 _TSC2046_Init:
                 ;  TSC2046_PortInit();
0009b8 df3c      	RCALL _TSC2046_PortInit
                 ;  TOUCH_CS = 0;
0009b9 981a      	CBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 0;
0009ba 981b      	CBI  0x3,3
                 ;  delay_us(10);
                +
0009bb e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0009bc 958a     +DEC R24
0009bd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ;  TOUCH_CS = 1;
0009be 9a1a      	SBI  0x3,2
                 ;  TOUCH_IRQ_PORT = 1;
0009bf 9a1b      	SBI  0x3,3
                 ;  tempX = 0;
0009c0 940e 0fd7 	CALL SUBOPT_0x23
                 ;  tempY = 0;
0009c2 940e 0fe1 	CALL SUBOPT_0x24
                 ;
                 ;    TOUCH_X = TSC2046_getX();
0009c4 df5c      	RCALL _TSC2046_getX
0009c5 012f      	MOVW R4,R30
                 ;    TOUCH_Y = TSC2046_getY();
0009c6 df6d      	RCALL _TSC2046_getY
0009c7 013f      	MOVW R6,R30
                 ;    TSC2046_Stop();
0009c8 df41      	RCALL _TSC2046_Stop
                 ;}
0009c9 9508      	RET
                 ;
                 ;#pragma used-
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 250
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 004F {
                 _usart0_rx_isr:
0009ca 940e 100f 	CALL SUBOPT_0x29
                 ; 0000 0050 char status,data;
                 ; 0000 0051 status=UCSR0A;
0009cc 931a      	ST   -Y,R17
0009cd 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0009ce b11b      	IN   R17,11
                 ; 0000 0052 data=UDR0;
0009cf b10c      	IN   R16,12
                 ; 0000 0053 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0009d0 2fe1      	MOV  R30,R17
0009d1 71ec      	ANDI R30,LOW(0x1C)
0009d2 f4b1      	BRNE _0xC8
                 ; 0000 0054    {
                 ; 0000 0055    rx_buffer0[rx_wr_index0++]=data;
0009d3 2ded      	MOV  R30,R13
0009d4 94d3      	INC  R13
0009d5 e0f0      	LDI  R31,0
0009d6 54e1      	SUBI R30,LOW(-_rx_buffer0)
0009d7 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
0009d8 8300      	ST   Z,R16
                 ; 0000 0056 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0057    // special case for receiver buffer size=256
                 ; 0000 0058    if (++rx_counter0 == 0)
                 ; 0000 0059       {
                 ; 0000 005A #else
                 ; 0000 005B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0009d9 efea      	LDI  R30,LOW(250)
0009da 15ed      	CP   R30,R13
0009db f409      	BRNE _0xC9
0009dc 24dd      	CLR  R13
                 ; 0000 005C    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0xC9:
0009dd 91a0 06b9 	LDS  R26,_rx_counter0
0009df 5faf      	SUBI R26,-LOW(1)
0009e0 93a0 06b9 	STS  _rx_counter0,R26
0009e2 3faa      	CPI  R26,LOW(0xFA)
0009e3 f429      	BRNE _0xCA
                 ; 0000 005D       {
                 ; 0000 005E       rx_counter0=0;
0009e4 e0e0      	LDI  R30,LOW(0)
0009e5 93e0 06b9 	STS  _rx_counter0,R30
                 ; 0000 005F #endif
                 ; 0000 0060       rx_buffer_overflow0=1;
0009e7 9468      	SET
0009e8 f820      	BLD  R2,0
                 ; 0000 0061       }
                 ; 0000 0062    }
                 _0xCA:
                 ; 0000 0063 }
                 _0xC8:
0009e9 9109      	LD   R16,Y+
0009ea 9119      	LD   R17,Y+
0009eb c09e      	RJMP _0x160
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar0(void)
                 ; 0000 006A {
                 _getchar0:
                 ; 0000 006B char data;
                 ; 0000 006C while (rx_counter0==0);
0009ec 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xCB:
0009ed 91e0 06b9 	LDS  R30,_rx_counter0
0009ef 30e0      	CPI  R30,0
0009f0 f3e1      	BREQ _0xCB
                 ; 0000 006D data=rx_buffer0[rx_rd_index0++];
0009f1 2dec      	MOV  R30,R12
0009f2 94c3      	INC  R12
0009f3 e0f0      	LDI  R31,0
0009f4 54e1      	SUBI R30,LOW(-_rx_buffer0)
0009f5 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
0009f6 8110      	LD   R17,Z
                 ; 0000 006E #if RX_BUFFER_SIZE0 != 256
                 ; 0000 006F if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0009f7 efea      	LDI  R30,LOW(250)
0009f8 15ec      	CP   R30,R12
0009f9 f409      	BRNE _0xCE
0009fa 24cc      	CLR  R12
                 ; 0000 0070 #endif
                 ; 0000 0071 #asm("cli")
                 _0xCE:
0009fb 94f8      	cli
                 ; 0000 0072 --rx_counter0;
0009fc 91e0 06b9 	LDS  R30,_rx_counter0
0009fe 50e1      	SUBI R30,LOW(1)
0009ff 93e0 06b9 	STS  _rx_counter0,R30
                 ; 0000 0073 #asm("sei")
000a01 9478      	sei
                 ; 0000 0074 return data;
000a02 c1a0      	RJMP _0x2080003
                 ; 0000 0075 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0085 {
                 _usart0_tx_isr:
000a03 940e 100f 	CALL SUBOPT_0x29
                 ; 0000 0086 if (tx_counter0)
000a05 91e0 06c4 	LDS  R30,_tx_counter0
000a07 30e0      	CPI  R30,0
000a08 f099      	BREQ _0xCF
                 ; 0000 0087    {
                 ; 0000 0088    --tx_counter0;
000a09 50e1      	SUBI R30,LOW(1)
000a0a 93e0 06c4 	STS  _tx_counter0,R30
                 ; 0000 0089    UDR0=tx_buffer0[tx_rd_index0++];
000a0c 91e0 06c3 	LDS  R30,_tx_rd_index0
000a0e 5fef      	SUBI R30,-LOW(1)
000a0f 93e0 06c3 	STS  _tx_rd_index0,R30
000a11 940e 1015 	CALL SUBOPT_0x2A
000a13 81e0      	LD   R30,Z
000a14 b9ec      	OUT  0xC,R30
                 ; 0000 008A #if TX_BUFFER_SIZE0 != 256
                 ; 0000 008B    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000a15 91a0 06c3 	LDS  R26,_tx_rd_index0
000a17 30a8      	CPI  R26,LOW(0x8)
000a18 f419      	BRNE _0xD0
000a19 e0e0      	LDI  R30,LOW(0)
000a1a 93e0 06c3 	STS  _tx_rd_index0,R30
                 ; 0000 008C #endif
                 ; 0000 008D    }
                 _0xD0:
                 ; 0000 008E }
                 _0xCF:
000a1c c06d      	RJMP _0x160
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar0(char c)
                 ; 0000 0095 {
                 _putchar0:
                 ; 0000 0096 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xD1:
000a1d 91a0 06c4 	LDS  R26,_tx_counter0
000a1f 30a8      	CPI  R26,LOW(0x8)
000a20 f3e1      	BREQ _0xD1
                 ; 0000 0097 #asm("cli")
000a21 94f8      	cli
                 ; 0000 0098 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000a22 91e0 06c4 	LDS  R30,_tx_counter0
000a24 30e0      	CPI  R30,0
000a25 f411      	BRNE _0xD5
000a26 995d      	SBIC 0xB,5
000a27 c016      	RJMP _0xD4
                 _0xD5:
                 ; 0000 0099    {
                 ; 0000 009A    tx_buffer0[tx_wr_index0++]=c;
000a28 91e0 06c2 	LDS  R30,_tx_wr_index0
000a2a 5fef      	SUBI R30,-LOW(1)
000a2b 93e0 06c2 	STS  _tx_wr_index0,R30
000a2d 940e 1015 	CALL SUBOPT_0x2A
000a2f 81a8      	LD   R26,Y
000a30 83a0      	STD  Z+0,R26
                 ; 0000 009B #if TX_BUFFER_SIZE0 != 256
                 ; 0000 009C    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000a31 91a0 06c2 	LDS  R26,_tx_wr_index0
000a33 30a8      	CPI  R26,LOW(0x8)
000a34 f419      	BRNE _0xD7
000a35 e0e0      	LDI  R30,LOW(0)
000a36 93e0 06c2 	STS  _tx_wr_index0,R30
                 ; 0000 009D #endif
                 ; 0000 009E    ++tx_counter0;
                 _0xD7:
000a38 91e0 06c4 	LDS  R30,_tx_counter0
000a3a 5fef      	SUBI R30,-LOW(1)
000a3b 93e0 06c4 	STS  _tx_counter0,R30
                 ; 0000 009F    }
                 ; 0000 00A0 else
000a3d c002      	RJMP _0xD8
                 _0xD4:
                 ; 0000 00A1    UDR0=c;
000a3e 81e8      	LD   R30,Y
000a3f b9ec      	OUT  0xC,R30
                 ; 0000 00A2 #asm("sei")
                 _0xD8:
000a40 9478      	sei
                 ; 0000 00A3 }
000a41 940c 0ec4 	JMP  _0x2080001
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 32
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00B6 {
                 _usart1_rx_isr:
000a43 940e 100f 	CALL SUBOPT_0x29
                 ; 0000 00B7 char status,data;
                 ; 0000 00B8 status=UCSR1A;
000a45 931a      	ST   -Y,R17
000a46 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000a47 9110 009b 	LDS  R17,155
                 ; 0000 00B9 data=UDR1;
000a49 9100 009c 	LDS  R16,156
                 ; 0000 00BA if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000a4b 2fe1      	MOV  R30,R17
000a4c 71ec      	ANDI R30,LOW(0x1C)
000a4d f4e9      	BRNE _0xD9
                 ; 0000 00BB    {
                 ; 0000 00BC    rx_buffer1[rx_wr_index1++]=data;
000a4e 91e0 06e5 	LDS  R30,_rx_wr_index1
000a50 5fef      	SUBI R30,-LOW(1)
000a51 93e0 06e5 	STS  _rx_wr_index1,R30
000a53 50e1      	SUBI R30,LOW(1)
000a54 e0f0      	LDI  R31,0
000a55 53eb      	SUBI R30,LOW(-_rx_buffer1)
000a56 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000a57 8300      	ST   Z,R16
                 ; 0000 00BD #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00BE    // special case for receiver buffer size=256
                 ; 0000 00BF    if (++rx_counter1 == 0)
                 ; 0000 00C0       {
                 ; 0000 00C1 #else
                 ; 0000 00C2    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000a58 91a0 06e5 	LDS  R26,_rx_wr_index1
000a5a 32a0      	CPI  R26,LOW(0x20)
000a5b f419      	BRNE _0xDA
000a5c e0e0      	LDI  R30,LOW(0)
000a5d 93e0 06e5 	STS  _rx_wr_index1,R30
                 ; 0000 00C3    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0xDA:
000a5f 91a0 06e7 	LDS  R26,_rx_counter1
000a61 5faf      	SUBI R26,-LOW(1)
000a62 93a0 06e7 	STS  _rx_counter1,R26
000a64 32a0      	CPI  R26,LOW(0x20)
000a65 f429      	BRNE _0xDB
                 ; 0000 00C4       {
                 ; 0000 00C5       rx_counter1=0;
000a66 e0e0      	LDI  R30,LOW(0)
000a67 93e0 06e7 	STS  _rx_counter1,R30
                 ; 0000 00C6 #endif
                 ; 0000 00C7       rx_buffer_overflow1=1;
000a69 9468      	SET
000a6a f821      	BLD  R2,1
                 ; 0000 00C8       }
                 ; 0000 00C9    }
                 _0xDB:
                 ; 0000 00CA }
                 _0xD9:
000a6b 9109      	LD   R16,Y+
000a6c 9119      	LD   R17,Y+
000a6d c01c      	RJMP _0x160
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 00CF {
                 ; 0000 00D0 char data;
                 ; 0000 00D1 while (rx_counter1==0);
                 ;	data -> R17
                 ; 0000 00D2 data=rx_buffer1[rx_rd_index1++];
                 ; 0000 00D3 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00D4 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
                 ; 0000 00D5 #endif
                 ; 0000 00D6 #asm("cli")
                 ; 0000 00D7 --rx_counter1;
                 ; 0000 00D8 #asm("sei")
                 ; 0000 00D9 return data;
                 ; 0000 00DA }
                 ;#pragma used-
                 ;// USART1 Transmitter buffer
                 ;#define TX_BUFFER_SIZE1 32
                 ;char tx_buffer1[TX_BUFFER_SIZE1];
                 ;
                 ;#if TX_BUFFER_SIZE1 <= 256
                 ;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#else
                 ;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
                 ;#endif
                 ;
                 ;// USART1 Transmitter interrupt service routine
                 ;interrupt [USART1_TXC] void usart1_tx_isr(void)
                 ; 0000 00E8 {
                 _usart1_tx_isr:
000a6e 940e 100f 	CALL SUBOPT_0x29
                 ; 0000 00E9 if (tx_counter1)
000a70 91e0 070a 	LDS  R30,_tx_counter1
000a72 30e0      	CPI  R30,0
000a73 f0b1      	BREQ _0xE0
                 ; 0000 00EA    {
                 ; 0000 00EB    --tx_counter1;
000a74 50e1      	SUBI R30,LOW(1)
000a75 93e0 070a 	STS  _tx_counter1,R30
                 ; 0000 00EC    UDR1=tx_buffer1[tx_rd_index1++];
000a77 91e0 0709 	LDS  R30,_tx_rd_index1
000a79 5fef      	SUBI R30,-LOW(1)
000a7a 93e0 0709 	STS  _tx_rd_index1,R30
000a7c 50e1      	SUBI R30,LOW(1)
000a7d e0f0      	LDI  R31,0
000a7e 51e8      	SUBI R30,LOW(-_tx_buffer1)
000a7f 4ff9      	SBCI R31,HIGH(-_tx_buffer1)
000a80 81e0      	LD   R30,Z
000a81 93e0 009c 	STS  156,R30
                 ; 0000 00ED #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00EE    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
000a83 91a0 0709 	LDS  R26,_tx_rd_index1
000a85 32a0      	CPI  R26,LOW(0x20)
000a86 f419      	BRNE _0xE1
000a87 e0e0      	LDI  R30,LOW(0)
000a88 93e0 0709 	STS  _tx_rd_index1,R30
                 ; 0000 00EF #endif
                 ; 0000 00F0    }
                 _0xE1:
                 ; 0000 00F1 }
                 _0xE0:
                 _0x160:
000a8a 91e9      	LD   R30,Y+
000a8b bfef      	OUT  SREG,R30
000a8c 91f9      	LD   R31,Y+
000a8d 91e9      	LD   R30,Y+
000a8e 91a9      	LD   R26,Y+
000a8f 9518      	RETI
                 ;
                 ;// Write a character to the USART1 Transmitter buffer
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00F6 {
                 ; 0000 00F7 while (tx_counter1 == TX_BUFFER_SIZE1);
                 ;	c -> Y+0
                 ; 0000 00F8 #asm("cli")
                 ; 0000 00F9 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 00FA    {
                 ; 0000 00FB    tx_buffer1[tx_wr_index1++]=c;
                 ; 0000 00FC #if TX_BUFFER_SIZE1 != 256
                 ; 0000 00FD    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
                 ; 0000 00FE #endif
                 ; 0000 00FF    ++tx_counter1;
                 ; 0000 0100    }
                 ; 0000 0101 else
                 ; 0000 0102    UDR1=c;
                 ; 0000 0103 #asm("sei")
                 ; 0000 0104 }
                 ;#pragma used-
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;/////////////////////////////////////////////////////////////////////////////////
                 ;#define RS485 PORTD.4
                 ;#define BACKLIGHT PORTB.7
                 ;
                 ;#define Graph_X_Min 0
                 ;#define Graph_X_Max 479
                 ;#define Graph_Y_Min 52
                 ;#define Graph_Y_Max 232
                 ;#define Graph_X_Step ((Graph_X_Max-Graph_X_Min+1)/64)
                 ;#define Graph_Y_Mid ((Graph_Y_Max-Graph_Y_Min)/2 + Graph_Y_Min)
                 ;
                 ;#define Text_StartX 30
                 ;#define Text_StartY 16
                 ;
                 ;#define BTN_StartX 0
                 ;#define BTN_StartY 240
                 ;#define BTN_Width 100
                 ;#define BTN_Height 30
                 ;#define BTN_Between 20
                 ;
                 ;flash unsigned int BTN1_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN1_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN1_X_Begin = BTN_StartX;
                 ;flash unsigned int BTN1_X_End = BTN_StartX + BTN_Width;
                 ;
                 ;flash unsigned int BTN2_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN2_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN2_X_Begin = BTN_StartX + BTN_Width + BTN_Between;
                 ;flash unsigned int BTN2_X_End = BTN_StartX + (BTN_Width * 2) + BTN_Between;
                 ;
                 ;flash unsigned int BTN3_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN3_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN3_X_Begin = BTN_StartX + (BTN_Width * 2) + (BTN_Between * 2);
                 ;flash unsigned int BTN3_X_End = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 2);
                 ;
                 ;flash unsigned int BTN4_Y_Begin = BTN_StartY;
                 ;flash unsigned int BTN4_Y_End = BTN_StartY + BTN_Height;
                 ;flash unsigned int BTN4_X_Begin = BTN_StartX + (BTN_Width * 3) + (BTN_Between * 3);
                 ;flash unsigned int BTN4_X_End = BTN_StartX + (BTN_Width * 4) + (BTN_Between * 3);
                 ;
                 ;void Repaint_Button(unsigned char* String, char Number, unsigned int Color, unsigned int BackColor)
                 ; 0000 0135 {
                 _Repaint_Button:
                 ; 0000 0136   switch(Number)
                 ;	*String -> Y+5
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	BackColor -> Y+0
000a90 81ec      	LDD  R30,Y+4
000a91 e0f0      	LDI  R31,0
                 ; 0000 0137   {
                 ; 0000 0138     case 1 :
000a92 30e1      	CPI  R30,LOW(0x1)
000a93 e0a0      	LDI  R26,HIGH(0x1)
000a94 07fa      	CPC  R31,R26
000a95 f479      	BRNE _0xED
                 ; 0000 0139       SSD1963_PutString16("     ", BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000a96 e0e0     +LDI R30 , LOW ( _0xEE + ( 0 ) )
000a97 e0f5     +LDI R31 , HIGH ( _0xEE + ( 0 ) )
                 	__POINTW1MN _0xEE,0
000a98 93fa      	ST   -Y,R31
000a99 93ea      	ST   -Y,R30
000a9a e0ea      	LDI  R30,LOW(10)
000a9b e0f0      	LDI  R31,HIGH(10)
000a9c 940e 101a 	CALL SUBOPT_0x2B
000a9e 940e 0f23 	CALL SUBOPT_0x11
000aa0 940e 1021 	CALL SUBOPT_0x2C
                 ; 0000 013A       SSD1963_PutString16(String, BTN1_X_Begin + 10, BTN1_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000aa2 e0ea      	LDI  R30,LOW(10)
000aa3 e0f0      	LDI  R31,HIGH(10)
000aa4 c038      	RJMP _0x15C
                 ; 0000 013B     break;
                 ; 0000 013C     case 2 :
                 _0xED:
000aa5 30e2      	CPI  R30,LOW(0x2)
000aa6 e0a0      	LDI  R26,HIGH(0x2)
000aa7 07fa      	CPC  R31,R26
000aa8 f479      	BRNE _0xEF
                 ; 0000 013D       SSD1963_PutString16("     ", BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000aa9 e0e6     +LDI R30 , LOW ( _0xEE + ( 6 ) )
000aaa e0f5     +LDI R31 , HIGH ( _0xEE + ( 6 ) )
                 	__POINTW1MN _0xEE,6
000aab 93fa      	ST   -Y,R31
000aac 93ea      	ST   -Y,R30
000aad e8e2      	LDI  R30,LOW(130)
000aae e0f0      	LDI  R31,HIGH(130)
000aaf 940e 101a 	CALL SUBOPT_0x2B
000ab1 940e 0f23 	CALL SUBOPT_0x11
000ab3 940e 1021 	CALL SUBOPT_0x2C
                 ; 0000 013E       SSD1963_PutString16(String, BTN2_X_Begin + 10, BTN2_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000ab5 e8e2      	LDI  R30,LOW(130)
000ab6 e0f0      	LDI  R31,HIGH(130)
000ab7 c025      	RJMP _0x15C
                 ; 0000 013F     break;
                 ; 0000 0140     case 3 :
                 _0xEF:
000ab8 30e3      	CPI  R30,LOW(0x3)
000ab9 e0a0      	LDI  R26,HIGH(0x3)
000aba 07fa      	CPC  R31,R26
000abb f479      	BRNE _0xF0
                 ; 0000 0141       SSD1963_PutString16("     ", BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000abc e0ec     +LDI R30 , LOW ( _0xEE + ( 12 ) )
000abd e0f5     +LDI R31 , HIGH ( _0xEE + ( 12 ) )
                 	__POINTW1MN _0xEE,12
000abe 93fa      	ST   -Y,R31
000abf 93ea      	ST   -Y,R30
000ac0 efea      	LDI  R30,LOW(250)
000ac1 e0f0      	LDI  R31,HIGH(250)
000ac2 940e 101a 	CALL SUBOPT_0x2B
000ac4 940e 0f23 	CALL SUBOPT_0x11
000ac6 940e 1021 	CALL SUBOPT_0x2C
                 ; 0000 0142       SSD1963_PutString16(String, BTN3_X_Begin + 10, BTN3_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000ac8 efea      	LDI  R30,LOW(250)
000ac9 e0f0      	LDI  R31,HIGH(250)
000aca c012      	RJMP _0x15C
                 ; 0000 0143     break;
                 ; 0000 0144     case 4 :
                 _0xF0:
000acb 30e4      	CPI  R30,LOW(0x4)
000acc e0a0      	LDI  R26,HIGH(0x4)
000acd 07fa      	CPC  R31,R26
000ace f4c9      	BRNE _0xEC
                 ; 0000 0145       SSD1963_PutString16("     ", BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
                +
000acf e1e2     +LDI R30 , LOW ( _0xEE + ( 18 ) )
000ad0 e0f5     +LDI R31 , HIGH ( _0xEE + ( 18 ) )
                 	__POINTW1MN _0xEE,18
000ad1 93fa      	ST   -Y,R31
000ad2 93ea      	ST   -Y,R30
000ad3 e7e2      	LDI  R30,LOW(370)
000ad4 e0f1      	LDI  R31,HIGH(370)
000ad5 940e 101a 	CALL SUBOPT_0x2B
000ad7 940e 0f23 	CALL SUBOPT_0x11
000ad9 940e 1021 	CALL SUBOPT_0x2C
                 ; 0000 0146       SSD1963_PutString16(String, BTN4_X_Begin + 10, BTN4_Y_Begin + (BTN_Height / 2) - (FONT_HEIGHT / 2), Color, BackColor);
000adb e7e2      	LDI  R30,LOW(370)
000adc e0f1      	LDI  R31,HIGH(370)
                 _0x15C:
000add 93fa      	ST   -Y,R31
000ade 93ea      	ST   -Y,R30
000adf efe7      	LDI  R30,LOW(247)
000ae0 e0f0      	LDI  R31,HIGH(247)
000ae1 93fa      	ST   -Y,R31
000ae2 93ea      	ST   -Y,R30
000ae3 940e 0f23 	CALL SUBOPT_0x11
000ae5 940e 0f23 	CALL SUBOPT_0x11
000ae7 dccf      	RCALL _SSD1963_PutString16
                 ; 0000 0147     break;
                 ; 0000 0148   }
                 _0xEC:
                 ; 0000 0149 }
000ae8 9627      	ADIW R28,7
000ae9 9508      	RET
                 
                 	.DSEG
                 _0xEE:
000500           	.BYTE 0x18
                 ;
                 ;void Prepare_Screen(void)
                 ; 0000 014C {
                 
                 	.CSEG
                 _Prepare_Screen:
                 ; 0000 014D   // рисуем кнопки
                 ; 0000 014E   SSD1963_DrawFillRect(BTN1_X_Begin, BTN1_X_End, BTN1_Y_Begin, BTN1_Y_End, WHITE);
000aea 940e 0f0f 	CALL SUBOPT_0xD
000aec e6e4      	LDI  R30,LOW(100)
000aed e0f0      	LDI  R31,HIGH(100)
000aee 940e 1028 	CALL SUBOPT_0x2D
                 ; 0000 014F   SSD1963_DrawFillRect(BTN2_X_Begin, BTN2_X_End, BTN2_Y_Begin, BTN2_Y_End, WHITE);
000af0 e7e8      	LDI  R30,LOW(120)
000af1 e0f0      	LDI  R31,HIGH(120)
000af2 93fa      	ST   -Y,R31
000af3 93ea      	ST   -Y,R30
000af4 edec      	LDI  R30,LOW(220)
000af5 e0f0      	LDI  R31,HIGH(220)
000af6 940e 1028 	CALL SUBOPT_0x2D
                 ; 0000 0150   SSD1963_DrawFillRect(BTN3_X_Begin, BTN3_X_End, BTN3_Y_Begin, BTN3_Y_End, WHITE);
000af8 efe0      	LDI  R30,LOW(240)
000af9 e0f0      	LDI  R31,HIGH(240)
000afa 93fa      	ST   -Y,R31
000afb 93ea      	ST   -Y,R30
000afc e5e4      	LDI  R30,LOW(340)
000afd e0f1      	LDI  R31,HIGH(340)
000afe 940e 1028 	CALL SUBOPT_0x2D
                 ; 0000 0151   SSD1963_DrawFillRect(BTN4_X_Begin, BTN4_X_End, BTN4_Y_Begin, BTN4_Y_End, WHITE);
000b00 e6e8      	LDI  R30,LOW(360)
000b01 e0f1      	LDI  R31,HIGH(360)
000b02 93fa      	ST   -Y,R31
000b03 93ea      	ST   -Y,R30
000b04 ecec      	LDI  R30,LOW(460)
000b05 e0f1      	LDI  R31,HIGH(460)
000b06 940e 1028 	CALL SUBOPT_0x2D
                 ; 0000 0152   // рисуем окантовку
                 ; 0000 0153   SSD1963_DrawRect(BTN1_X_Begin + 1, BTN1_X_End - 1, BTN1_Y_Begin + 1, BTN1_Y_End - 1, 1, BLACK);
000b08 e0e1      	LDI  R30,LOW(1)
000b09 e0f0      	LDI  R31,HIGH(1)
000b0a 93fa      	ST   -Y,R31
000b0b 93ea      	ST   -Y,R30
000b0c e6e3      	LDI  R30,LOW(99)
000b0d e0f0      	LDI  R31,HIGH(99)
000b0e 940e 1038 	CALL SUBOPT_0x2E
000b10 dd8c      	RCALL _SSD1963_DrawRect
                 ; 0000 0154   SSD1963_DrawRect(BTN2_X_Begin + 1, BTN2_X_End - 1, BTN2_Y_Begin + 1, BTN2_Y_End - 1, 1, BLACK);
000b11 e7e9      	LDI  R30,LOW(121)
000b12 e0f0      	LDI  R31,HIGH(121)
000b13 93fa      	ST   -Y,R31
000b14 93ea      	ST   -Y,R30
000b15 edeb      	LDI  R30,LOW(219)
000b16 e0f0      	LDI  R31,HIGH(219)
000b17 940e 1038 	CALL SUBOPT_0x2E
000b19 dd83      	RCALL _SSD1963_DrawRect
                 ; 0000 0155   SSD1963_DrawRect(BTN3_X_Begin + 1, BTN3_X_End - 1, BTN3_Y_Begin + 1, BTN3_Y_End - 1, 1, BLACK);
000b1a efe1      	LDI  R30,LOW(241)
000b1b e0f0      	LDI  R31,HIGH(241)
000b1c 93fa      	ST   -Y,R31
000b1d 93ea      	ST   -Y,R30
000b1e e5e3      	LDI  R30,LOW(339)
000b1f e0f1      	LDI  R31,HIGH(339)
000b20 940e 1038 	CALL SUBOPT_0x2E
000b22 dd7a      	RCALL _SSD1963_DrawRect
                 ; 0000 0156   SSD1963_DrawRect(BTN4_X_Begin + 1, BTN4_X_End - 1, BTN4_Y_Begin + 1, BTN4_Y_End - 1, 1, BLACK);
000b23 e6e9      	LDI  R30,LOW(361)
000b24 e0f1      	LDI  R31,HIGH(361)
000b25 93fa      	ST   -Y,R31
000b26 93ea      	ST   -Y,R30
000b27 eceb      	LDI  R30,LOW(459)
000b28 e0f1      	LDI  R31,HIGH(459)
000b29 940e 1038 	CALL SUBOPT_0x2E
000b2b dd71      	RCALL _SSD1963_DrawRect
                 ; 0000 0157 
                 ; 0000 0158   Repaint_Button("МЕНЮ", 1, BLACK, WHITE);
                +
000b2c e1e8     +LDI R30 , LOW ( _0xF2 + ( 0 ) )
000b2d e0f5     +LDI R31 , HIGH ( _0xF2 + ( 0 ) )
                 	__POINTW1MN _0xF2,0
000b2e 93fa      	ST   -Y,R31
000b2f 93ea      	ST   -Y,R30
000b30 e0e1      	LDI  R30,LOW(1)
000b31 93ea      	ST   -Y,R30
000b32 940e 0f0f 	CALL SUBOPT_0xD
000b34 940e 1045 	CALL SUBOPT_0x2F
                 ; 0000 0159   Repaint_Button("  +", 2, BLACK, WHITE);
                +
000b36 e1ed     +LDI R30 , LOW ( _0xF2 + ( 5 ) )
000b37 e0f5     +LDI R31 , HIGH ( _0xF2 + ( 5 ) )
                 	__POINTW1MN _0xF2,5
000b38 93fa      	ST   -Y,R31
000b39 93ea      	ST   -Y,R30
000b3a e0e2      	LDI  R30,LOW(2)
000b3b 93ea      	ST   -Y,R30
000b3c 940e 0f0f 	CALL SUBOPT_0xD
000b3e 940e 1045 	CALL SUBOPT_0x2F
                 ; 0000 015A   Repaint_Button("  -", 3, BLACK, WHITE);
                +
000b40 e2e1     +LDI R30 , LOW ( _0xF2 + ( 9 ) )
000b41 e0f5     +LDI R31 , HIGH ( _0xF2 + ( 9 ) )
                 	__POINTW1MN _0xF2,9
000b42 93fa      	ST   -Y,R31
000b43 93ea      	ST   -Y,R30
000b44 e0e3      	LDI  R30,LOW(3)
000b45 93ea      	ST   -Y,R30
000b46 940e 0f0f 	CALL SUBOPT_0xD
000b48 940e 1045 	CALL SUBOPT_0x2F
                 ; 0000 015B   Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000b4a e2e5     +LDI R30 , LOW ( _0xF2 + ( 13 ) )
000b4b e0f5     +LDI R31 , HIGH ( _0xF2 + ( 13 ) )
                 	__POINTW1MN _0xF2,13
000b4c 940e 104b 	CALL SUBOPT_0x30
000b4e 940e 1045 	CALL SUBOPT_0x2F
                 ; 0000 015C }
000b50 9508      	RET
                 
                 	.DSEG
                 _0xF2:
000518           	.BYTE 0x13
                 ;
                 ;char GetButton(void)
                 ; 0000 015F {
                 
                 	.CSEG
                 _GetButton:
                 ; 0000 0160   char res = 0;
                 ; 0000 0161   if (TSC2046_GetCoordinates())
000b51 931a      	ST   -Y,R17
                 ;	res -> R17
000b52 e010      	LDI  R17,0
000b53 ddf3      	RCALL _TSC2046_GetCoordinates
000b54 30e0      	CPI  R30,0
000b55 f411      	BRNE PC+3
000b56 940c 0ba3 	JMP _0xF3
                 ; 0000 0162   {
                 ; 0000 0163     if ((TOUCH_X > BTN1_X_Begin) && (TOUCH_X < BTN1_X_End)) // если X внутри заданного диапазона
000b58 2400      	CLR  R0
000b59 1404      	CP   R0,R4
000b5a 0405      	CPC  R0,R5
000b5b f428      	BRSH _0xF5
000b5c e6e4      	LDI  R30,LOW(100)
000b5d e0f0      	LDI  R31,HIGH(100)
000b5e 164e      	CP   R4,R30
000b5f 065f      	CPC  R5,R31
000b60 f008      	BRLO _0xF6
                 _0xF5:
000b61 c008      	RJMP _0xF4
                 _0xF6:
                 ; 0000 0164     {
                 ; 0000 0165       if ((TOUCH_Y > BTN1_Y_Begin) && (TOUCH_Y < BTN1_Y_End)) res = 1;
000b62 940e 1050 	CALL SUBOPT_0x31
000b64 f418      	BRSH _0xF8
000b65 940e 1055 	CALL SUBOPT_0x32
000b67 f008      	BRLO _0xF9
                 _0xF8:
000b68 c001      	RJMP _0xF7
                 _0xF9:
000b69 e011      	LDI  R17,LOW(1)
                 ; 0000 0166     }
                 _0xF7:
                 ; 0000 0167     if ((TOUCH_X > BTN2_X_Begin) && (TOUCH_X < BTN2_X_End)) // если X внутри заданного диапазона
                 _0xF4:
000b6a e7e8      	LDI  R30,LOW(120)
000b6b e0f0      	LDI  R31,HIGH(120)
000b6c 15e4      	CP   R30,R4
000b6d 05f5      	CPC  R31,R5
000b6e f428      	BRSH _0xFB
000b6f edec      	LDI  R30,LOW(220)
000b70 e0f0      	LDI  R31,HIGH(220)
000b71 164e      	CP   R4,R30
000b72 065f      	CPC  R5,R31
000b73 f008      	BRLO _0xFC
                 _0xFB:
000b74 c008      	RJMP _0xFA
                 _0xFC:
                 ; 0000 0168     {
                 ; 0000 0169       if ((TOUCH_Y > BTN2_Y_Begin) && (TOUCH_Y < BTN2_Y_End)) res = 2;
000b75 940e 1050 	CALL SUBOPT_0x31
000b77 f418      	BRSH _0xFE
000b78 940e 1055 	CALL SUBOPT_0x32
000b7a f008      	BRLO _0xFF
                 _0xFE:
000b7b c001      	RJMP _0xFD
                 _0xFF:
000b7c e012      	LDI  R17,LOW(2)
                 ; 0000 016A     }
                 _0xFD:
                 ; 0000 016B     if ((TOUCH_X > BTN3_X_Begin) && (TOUCH_X < BTN3_X_End)) // если X внутри заданного диапазона
                 _0xFA:
000b7d efe0      	LDI  R30,LOW(240)
000b7e e0f0      	LDI  R31,HIGH(240)
000b7f 15e4      	CP   R30,R4
000b80 05f5      	CPC  R31,R5
000b81 f428      	BRSH _0x101
000b82 e5e4      	LDI  R30,LOW(340)
000b83 e0f1      	LDI  R31,HIGH(340)
000b84 164e      	CP   R4,R30
000b85 065f      	CPC  R5,R31
000b86 f008      	BRLO _0x102
                 _0x101:
000b87 c008      	RJMP _0x100
                 _0x102:
                 ; 0000 016C     {
                 ; 0000 016D       if ((TOUCH_Y > BTN3_Y_Begin) && (TOUCH_Y < BTN3_Y_End)) res = 3;
000b88 940e 1050 	CALL SUBOPT_0x31
000b8a f418      	BRSH _0x104
000b8b 940e 1055 	CALL SUBOPT_0x32
000b8d f008      	BRLO _0x105
                 _0x104:
000b8e c001      	RJMP _0x103
                 _0x105:
000b8f e013      	LDI  R17,LOW(3)
                 ; 0000 016E     }
                 _0x103:
                 ; 0000 016F     if ((TOUCH_X > BTN4_X_Begin) && (TOUCH_X < BTN4_X_End)) // если X внутри заданного диапазона
                 _0x100:
000b90 e6e8      	LDI  R30,LOW(360)
000b91 e0f1      	LDI  R31,HIGH(360)
000b92 15e4      	CP   R30,R4
000b93 05f5      	CPC  R31,R5
000b94 f428      	BRSH _0x107
000b95 ecec      	LDI  R30,LOW(460)
000b96 e0f1      	LDI  R31,HIGH(460)
000b97 164e      	CP   R4,R30
000b98 065f      	CPC  R5,R31
000b99 f008      	BRLO _0x108
                 _0x107:
000b9a c008      	RJMP _0x106
                 _0x108:
                 ; 0000 0170     {
                 ; 0000 0171       if ((TOUCH_Y > BTN4_Y_Begin) && (TOUCH_Y < BTN4_Y_End)) res = 4;
000b9b 940e 1050 	CALL SUBOPT_0x31
000b9d f418      	BRSH _0x10A
000b9e 940e 1055 	CALL SUBOPT_0x32
000ba0 f008      	BRLO _0x10B
                 _0x10A:
000ba1 c001      	RJMP _0x109
                 _0x10B:
000ba2 e014      	LDI  R17,LOW(4)
                 ; 0000 0172     }
                 _0x109:
                 ; 0000 0173   }
                 _0x106:
                 ; 0000 0174   return res;
                 _0xF3:
                 _0x2080003:
000ba3 2fe1      	MOV  R30,R17
000ba4 9119      	LD   R17,Y+
000ba5 9508      	RET
                 ; 0000 0175 }
                 ;
                 ;void PutParameterText(char Number, unsigned int Color)
                 ; 0000 0178 {
                 _PutParameterText:
                 ; 0000 0179   char X = Text_StartX;
                 ; 0000 017A   char Y = Text_StartY;
                 ; 0000 017B 
                 ; 0000 017C   SSD1963_PutString16("                ", X, Y, Color, BLACK);
000ba6 931a      	ST   -Y,R17
000ba7 930a      	ST   -Y,R16
                 ;	Number -> Y+4
                 ;	Color -> Y+2
                 ;	X -> R17
                 ;	Y -> R16
000ba8 e11e      	LDI  R17,30
000ba9 e100      	LDI  R16,16
                +
000baa e2eb     +LDI R30 , LOW ( _0x10C + ( 0 ) )
000bab e0f5     +LDI R31 , HIGH ( _0x10C + ( 0 ) )
                 	__POINTW1MN _0x10C,0
000bac 940e 105a 	CALL SUBOPT_0x33
000bae 940e 1063 	CALL SUBOPT_0x34
000bb0 dc06      	RCALL _SSD1963_PutString16
                 ; 0000 017D   SSD1963_PutString16("                ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000bb1 e3ec     +LDI R30 , LOW ( _0x10C + ( 17 ) )
000bb2 e0f5     +LDI R31 , HIGH ( _0x10C + ( 17 ) )
                 	__POINTW1MN _0x10C,17
000bb3 940e 105a 	CALL SUBOPT_0x33
000bb5 9670      	ADIW R30,16
000bb6 940e 1063 	CALL SUBOPT_0x34
000bb8 dbfe      	RCALL _SSD1963_PutString16
                 ; 0000 017E   switch (Number)
000bb9 81ec      	LDD  R30,Y+4
000bba 940e 1068 	CALL SUBOPT_0x35
                 ; 0000 017F   {
                 ; 0000 0180     case 0 :
000bbc f451      	BRNE _0x110
                 ; 0000 0181       SSD1963_PutString16("НАПРЯЖЕНИЕ", X, Y, Color, BLACK);
                +
000bbd e4ed     +LDI R30 , LOW ( _0x10C + ( 34 ) )
000bbe e0f5     +LDI R31 , HIGH ( _0x10C + ( 34 ) )
                 	__POINTW1MN _0x10C,34
000bbf 940e 105a 	CALL SUBOPT_0x33
000bc1 940e 1063 	CALL SUBOPT_0x34
000bc3 dbf3      	RCALL _SSD1963_PutString16
                 ; 0000 0182       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000bc4 e5e8     +LDI R30 , LOW ( _0x10C + ( 45 ) )
000bc5 e0f5     +LDI R31 , HIGH ( _0x10C + ( 45 ) )
                 	__POINTW1MN _0x10C,45
000bc6 c01b      	RJMP _0x15D
                 ; 0000 0183     break;
                 ; 0000 0184     case 1 :
                 _0x110:
000bc7 30e1      	CPI  R30,LOW(0x1)
000bc8 e0a0      	LDI  R26,HIGH(0x1)
000bc9 07fa      	CPC  R31,R26
000bca f451      	BRNE _0x111
                 ; 0000 0185       SSD1963_PutString16("ТОК", X, Y, Color, BLACK);
                +
000bcb e5ec     +LDI R30 , LOW ( _0x10C + ( 49 ) )
000bcc e0f5     +LDI R31 , HIGH ( _0x10C + ( 49 ) )
                 	__POINTW1MN _0x10C,49
000bcd 940e 105a 	CALL SUBOPT_0x33
000bcf 940e 1063 	CALL SUBOPT_0x34
000bd1 dbe5      	RCALL _SSD1963_PutString16
                 ; 0000 0186       SSD1963_PutString16("ФАЗ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000bd2 e6e0     +LDI R30 , LOW ( _0x10C + ( 53 ) )
000bd3 e0f5     +LDI R31 , HIGH ( _0x10C + ( 53 ) )
                 	__POINTW1MN _0x10C,53
000bd4 c00d      	RJMP _0x15D
                 ; 0000 0187     break;
                 ; 0000 0188     case 2 :
                 _0x111:
000bd5 30e2      	CPI  R30,LOW(0x2)
000bd6 e0a0      	LDI  R26,HIGH(0x2)
000bd7 07fa      	CPC  R31,R26
000bd8 f4a9      	BRNE _0x10F
                 ; 0000 0189       SSD1963_PutString16("НАПРЯЖЕНИЕ И ТОК", X, Y, Color, BLACK);
                +
000bd9 e6e4     +LDI R30 , LOW ( _0x10C + ( 57 ) )
000bda e0f5     +LDI R31 , HIGH ( _0x10C + ( 57 ) )
                 	__POINTW1MN _0x10C,57
000bdb 940e 105a 	CALL SUBOPT_0x33
000bdd 940e 1063 	CALL SUBOPT_0x34
000bdf dbd7      	RCALL _SSD1963_PutString16
                 ; 0000 018A       SSD1963_PutString16("ВОЗБУЖДЕНИЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                +
000be0 e7e5     +LDI R30 , LOW ( _0x10C + ( 74 ) )
000be1 e0f5     +LDI R31 , HIGH ( _0x10C + ( 74 ) )
                 	__POINTW1MN _0x10C,74
                 _0x15D:
000be2 93fa      	ST   -Y,R31
000be3 93ea      	ST   -Y,R30
000be4 2fe1      	MOV  R30,R17
000be5 e0f0      	LDI  R31,0
000be6 93fa      	ST   -Y,R31
000be7 93ea      	ST   -Y,R30
000be8 2fe0      	MOV  R30,R16
000be9 e0f0      	LDI  R31,0
000bea 9670      	ADIW R30,16
000beb 940e 1063 	CALL SUBOPT_0x34
000bed dbc9      	RCALL _SSD1963_PutString16
                 ; 0000 018B     break;
                 ; 0000 018C     /*
                 ; 0000 018D     case 3 :
                 ; 0000 018E       SSD1963_PutString16("ВРЕМЯ ОБРАБОТКИ", X, Y, Color, BLACK);
                 ; 0000 018F       SSD1963_PutString16("СКОРОСТИ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0190     break;
                 ; 0000 0191     case 4 :
                 ; 0000 0192       SSD1963_PutString16("СКОРОСТЬ ТПЧ", X, Y, Color, BLACK);
                 ; 0000 0193       SSD1963_PutString16("МАКСИМАЛЬНАЯ", X, Y + FONT_HEIGHT, Color, BLACK);
                 ; 0000 0194     break;
                 ; 0000 0195    */
                 ; 0000 0196   }
                 _0x10F:
                 ; 0000 0197 }
000bee 8119      	LDD  R17,Y+1
000bef 8108      	LDD  R16,Y+0
000bf0 9625      	ADIW R28,5
000bf1 9508      	RET
                 
                 	.DSEG
                 _0x10C:
00052b           	.BYTE 0x56
                 ;
                 ;///////////////////////////////////////////////
                 ;char State=0, ParameterState=0;
                 ;signed int Graph_X=0;
                 ;signed int Amplitude = 90;
                 ;signed int ValueLast[3]={0,0,0};
                 ;unsigned int WaitADC_mSec = 0;
                 ;
                 ;//////////////////////////////////////////////
                 ;
                 ;//Функция вывода напряжения(тока) и частоты
                 ;//void PutParameterValue(char v1, char v2, char v3, unsigned int fHz)
                 ;
                 ;
                 ;void StartPaint()
                 ; 0000 01A7 {
                 
                 	.CSEG
                 _StartPaint:
                 ; 0000 01A8     signed int mid = Graph_Y_Mid;
                 ; 0000 01A9     signed int Lenght = Graph_X_Max;
                 ; 0000 01AA     Graph_X = Graph_X_Min;
000bf2 940e 121f 	CALL __SAVELOCR4
                 ;	mid -> R16,R17
                 ;	Lenght -> R18,R19
                +
000bf4 e80e     +LDI R16 , LOW ( 142 )
000bf5 e010     +LDI R17 , HIGH ( 142 )
                 	__GETWRN 16,17,142
                +
000bf6 ed2f     +LDI R18 , LOW ( 479 )
000bf7 e031     +LDI R19 , HIGH ( 479 )
                 	__GETWRN 18,19,479
000bf8 e0e0      	LDI  R30,LOW(0)
000bf9 93e0 070d 	STS  _Graph_X,R30
000bfb 93e0 070e 	STS  _Graph_X+1,R30
                 ; 0000 01AB 
                 ; 0000 01AC     //Чтоб первая точка легла
                 ; 0000 01AD     Graph_X = -Graph_X_Step;
000bfd efe9      	LDI  R30,LOW(65529)
000bfe efff      	LDI  R31,HIGH(65529)
000bff 93e0 070d 	STS  _Graph_X,R30
000c01 93f0 070e 	STS  _Graph_X+1,R31
                 ; 0000 01AE }
000c03 940e 1226 	CALL __LOADLOCR4
000c05 9624      	ADIW R28,4
000c06 9508      	RET
                 ;
                 ;
                 ;void Paint_3phase(char a, char b, char c)
                 ; 0000 01B2 {
                 _Paint_3phase:
                 ; 0000 01B3     signed int Value[3];
                 ; 0000 01B4     unsigned int Color[] = {GREEN, YELLOW, RED};
                 ; 0000 01B5     signed int Lenght = Graph_X + Graph_X_Step;
                 ; 0000 01B6     signed int mid = Graph_Y_Mid;
                 ; 0000 01B7     char i;
                 ; 0000 01B8 
                 ; 0000 01B9     if(Graph_X > Graph_X_Max) return; //Некуда дальше
000c07 972c      	SBIW R28,12
000c08 e0e7      	LDI  R30,LOW(7)
000c09 83e8      	ST   Y,R30
000c0a eee0      	LDI  R30,LOW(224)
000c0b 83e9      	STD  Y+1,R30
000c0c e0e7      	LDI  R30,LOW(7)
000c0d 83ea      	STD  Y+2,R30
000c0e efef      	LDI  R30,LOW(255)
000c0f 83eb      	STD  Y+3,R30
000c10 e0e0      	LDI  R30,LOW(0)
000c11 83ec      	STD  Y+4,R30
000c12 e1ef      	LDI  R30,LOW(31)
000c13 83ed      	STD  Y+5,R30
000c14 940e 121d 	CALL __SAVELOCR6
                 ;	a -> Y+20
                 ;	b -> Y+19
                 ;	c -> Y+18
                 ;	Value -> Y+12
                 ;	Color -> Y+6
                 ;	Lenght -> R16,R17
                 ;	mid -> R18,R19
                 ;	i -> R21
000c16 940e 106b 	CALL SUBOPT_0x36
000c18 9637      	ADIW R30,7
000c19 018f      	MOVW R16,R30
                +
000c1a e82e     +LDI R18 , LOW ( 142 )
000c1b e030     +LDI R19 , HIGH ( 142 )
                 	__GETWRN 18,19,142
000c1c 91a0 070d 	LDS  R26,_Graph_X
000c1e 91b0 070e 	LDS  R27,_Graph_X+1
000c20 3ea0      	CPI  R26,LOW(0x1E0)
000c21 e0e1      	LDI  R30,HIGH(0x1E0)
000c22 07be      	CPC  R27,R30
000c23 f00c      	BRLT _0x114
000c24 c107      	RJMP _0x2080002
                 ; 0000 01BA     Value[0] = a;
                 _0x114:
000c25 89ec      	LDD  R30,Y+20
000c26 e0f0      	LDI  R31,0
000c27 87ec      	STD  Y+12,R30
000c28 87fd      	STD  Y+12+1,R31
                 ; 0000 01BB     Value[1] = b;
000c29 89eb      	LDD  R30,Y+19
000c2a e0f0      	LDI  R31,0
000c2b 87ee      	STD  Y+14,R30
000c2c 87ff      	STD  Y+14+1,R31
                 ; 0000 01BC     Value[2] = c;
000c2d 89ea      	LDD  R30,Y+18
000c2e e0f0      	LDI  R31,0
000c2f 8be8      	STD  Y+16,R30
000c30 8bf9      	STD  Y+16+1,R31
                 ; 0000 01BD 
                 ; 0000 01BE     if(Graph_X >= Graph_X_Min)
000c31 91a0 070e 	LDS  R26,_Graph_X+1
000c33 23aa      	TST  R26
000c34 f1e2      	BRMI _0x115
                 ; 0000 01BF     {
                 ; 0000 01C0     // очищаем перед собой столбец пикселей
                 ; 0000 01C1     SSD1963_DrawFillRect(Graph_X, Lenght, Graph_Y_Min, Graph_Y_Max, BLACK);
000c35 940e 1070 	CALL SUBOPT_0x37
000c37 e3e4      	LDI  R30,LOW(52)
000c38 e0f0      	LDI  R31,HIGH(52)
000c39 93fa      	ST   -Y,R31
000c3a 93ea      	ST   -Y,R30
000c3b eee8      	LDI  R30,LOW(232)
000c3c e0f0      	LDI  R31,HIGH(232)
000c3d 940e 0f14 	CALL SUBOPT_0xE
000c3f dc97      	RCALL _SSD1963_DrawFillRect
                 ; 0000 01C2     //Линия нуля
                 ; 0000 01C3     SSD1963_DrawFastLine(Graph_X, Lenght, mid, mid, DGRAY);
000c40 940e 1070 	CALL SUBOPT_0x37
000c42 933a      	ST   -Y,R19
000c43 932a      	ST   -Y,R18
000c44 933a      	ST   -Y,R19
000c45 932a      	ST   -Y,R18
000c46 940e 1076 	CALL SUBOPT_0x38
                 ; 0000 01C4     SSD1963_DrawFastLine(Graph_X, Lenght, mid+45, mid+45, DGRAY);
000c48 01f9      	MOVW R30,R18
000c49 96bd      	ADIW R30,45
000c4a 93fa      	ST   -Y,R31
000c4b 93ea      	ST   -Y,R30
000c4c 01f9      	MOVW R30,R18
000c4d 96bd      	ADIW R30,45
000c4e 940e 107d 	CALL SUBOPT_0x39
                 ; 0000 01C5     SSD1963_DrawFastLine(Graph_X, Lenght, mid-45, mid-45, DGRAY);
000c50 01f9      	MOVW R30,R18
000c51 97bd      	SBIW R30,45
000c52 93fa      	ST   -Y,R31
000c53 93ea      	ST   -Y,R30
000c54 01f9      	MOVW R30,R18
000c55 97bd      	SBIW R30,45
000c56 940e 107d 	CALL SUBOPT_0x39
                 ; 0000 01C6     SSD1963_DrawFastLine(Graph_X, Lenght, mid+90, mid+90, DGRAY);
000c58 01f9      	MOVW R30,R18
000c59 5ae6      	SUBI R30,LOW(-90)
000c5a 4fff      	SBCI R31,HIGH(-90)
000c5b 93fa      	ST   -Y,R31
000c5c 93ea      	ST   -Y,R30
000c5d 01f9      	MOVW R30,R18
000c5e 5ae6      	SUBI R30,LOW(-90)
000c5f 4fff      	SBCI R31,HIGH(-90)
000c60 940e 107d 	CALL SUBOPT_0x39
                 ; 0000 01C7     SSD1963_DrawFastLine(Graph_X, Lenght, mid-90, mid-90, DGRAY);
000c62 01f9      	MOVW R30,R18
000c63 55ea      	SUBI R30,LOW(90)
000c64 40f0      	SBCI R31,HIGH(90)
000c65 93fa      	ST   -Y,R31
000c66 93ea      	ST   -Y,R30
000c67 01f9      	MOVW R30,R18
000c68 55ea      	SUBI R30,LOW(90)
000c69 40f0      	SBCI R31,HIGH(90)
000c6a 93fa      	ST   -Y,R31
000c6b 93ea      	ST   -Y,R30
000c6c e0e8      	LDI  R30,LOW(8456)
000c6d e2f1      	LDI  R31,HIGH(8456)
000c6e 93fa      	ST   -Y,R31
000c6f 93ea      	ST   -Y,R30
000c70 db60      	RCALL _SSD1963_DrawFastLine
                 ; 0000 01C8     }
                 ; 0000 01C9 
                 ; 0000 01CA     for(i=0; i<3; i++)
                 _0x115:
000c71 e050      	LDI  R21,LOW(0)
                 _0x117:
000c72 3053      	CPI  R21,3
000c73 f010      	BRLO PC+3
000c74 940c 0d25 	JMP _0x118
                 ; 0000 01CB     {
                 ; 0000 01CC         Value[i] -= 128;
000c76 940e 1080 	CALL SUBOPT_0x3A
000c78 940e 1087 	CALL SUBOPT_0x3B
000c7a 58e0      	SUBI R30,LOW(128)
000c7b 40f0      	SBCI R31,HIGH(128)
000c7c 93fe      	ST   -X,R31
000c7d 93ee      	ST   -X,R30
                 ; 0000 01CD         Value[i] *= Amplitude;
000c7e 940e 1080 	CALL SUBOPT_0x3A
000c80 0fea      	ADD  R30,R26
000c81 1ffb      	ADC  R31,R27
000c82 01bf      	MOVW R22,R30
000c83 01df      	MOVW R26,R30
000c84 940e 1214 	CALL __GETW1P
000c86 91a0 070f 	LDS  R26,_Amplitude
000c88 91b0 0710 	LDS  R27,_Amplitude+1
000c8a 940e 11e9 	CALL __MULW12
000c8c 01db      	MOVW R26,R22
000c8d 93ed      	ST   X+,R30
000c8e 93fc      	ST   X,R31
                 ; 0000 01CE         Value[i] >>= 7;
000c8f 940e 1080 	CALL SUBOPT_0x3A
000c91 940e 1087 	CALL SUBOPT_0x3B
000c93 940e 11b5 	CALL __ASRW3
000c95 940e 11b3 	CALL __ASRW4
000c97 93fe      	ST   -X,R31
000c98 93ee      	ST   -X,R30
                 ; 0000 01CF         if(Value[i]&0x0100) Value[i] |= 0xFF00;
000c99 940e 1080 	CALL SUBOPT_0x3A
000c9b 940e 108c 	CALL SUBOPT_0x3C
000c9d 70f1      	ANDI R31,HIGH(0x100)
000c9e f039      	BREQ _0x119
000c9f 940e 1080 	CALL SUBOPT_0x3A
000ca1 940e 1087 	CALL SUBOPT_0x3B
000ca3 6fff      	ORI  R31,HIGH(0xFF00)
000ca4 93fe      	ST   -X,R31
000ca5 93ee      	ST   -X,R30
                 ; 0000 01D0 
                 ; 0000 01D1         Value[i] += mid;
                 _0x119:
000ca6 940e 1080 	CALL SUBOPT_0x3A
000ca8 940e 1087 	CALL SUBOPT_0x3B
000caa 0fe2      	ADD  R30,R18
000cab 1ff3      	ADC  R31,R19
000cac 93fe      	ST   -X,R31
000cad 93ee      	ST   -X,R30
                 ; 0000 01D2         if(ParameterState==2)
000cae 91a0 070c 	LDS  R26,_ParameterState
000cb0 30a2      	CPI  R26,LOW(0x2)
000cb1 f4d9      	BRNE _0x11A
                 ; 0000 01D3         {
                 ; 0000 01D4             Value[i] += (i)?-45:+45;
000cb2 940e 1091 	CALL SUBOPT_0x3D
000cb4 01bf      	MOVW R22,R30
000cb5 01de      	MOVW R26,R28
000cb6 961c      	ADIW R26,12
000cb7 0fee      	LSL  R30
000cb8 1fff      	ROL  R31
000cb9 0fea      	ADD  R30,R26
000cba 1ffb      	ADC  R31,R27
000cbb 010f      	MOVW R0,R30
000cbc 01df      	MOVW R26,R30
000cbd 940e 1214 	CALL __GETW1P
000cbf 01df      	MOVW R26,R30
000cc0 2e06      	MOV  R0,R22
000cc1 2a07      	OR   R0,R23
000cc2 f019      	BREQ _0x11B
000cc3 ede3      	LDI  R30,LOW(65491)
000cc4 efff      	LDI  R31,HIGH(65491)
000cc5 c002      	RJMP _0x11C
                 _0x11B:
000cc6 e2ed      	LDI  R30,LOW(45)
000cc7 e0f0      	LDI  R31,HIGH(45)
                 _0x11C:
000cc8 0fea      	ADD  R30,R26
000cc9 1ffb      	ADC  R31,R27
000cca 01d0      	MOVW R26,R0
000ccb 93ed      	ST   X+,R30
000ccc 93fc      	ST   X,R31
                 ; 0000 01D5         }
                 ; 0000 01D6         if(Value[i] > Graph_Y_Max) Value[i] = Graph_Y_Max;
                 _0x11A:
000ccd 940e 1080 	CALL SUBOPT_0x3A
000ccf 940e 108c 	CALL SUBOPT_0x3C
000cd1 3ee9      	CPI  R30,LOW(0xE9)
000cd2 e0a0      	LDI  R26,HIGH(0xE9)
000cd3 07fa      	CPC  R31,R26
000cd4 f044      	BRLT _0x11E
000cd5 940e 1080 	CALL SUBOPT_0x3A
000cd7 0fae      	ADD  R26,R30
000cd8 1fbf      	ADC  R27,R31
000cd9 eee8      	LDI  R30,LOW(232)
000cda e0f0      	LDI  R31,HIGH(232)
000cdb 93ed      	ST   X+,R30
000cdc 93fc      	ST   X,R31
                 ; 0000 01D7         if(Value[i] < Graph_Y_Min) Value[i] = Graph_Y_Min;
                 _0x11E:
000cdd 940e 1080 	CALL SUBOPT_0x3A
000cdf 940e 108c 	CALL SUBOPT_0x3C
000ce1 97f4      	SBIW R30,52
000ce2 f444      	BRGE _0x11F
000ce3 940e 1080 	CALL SUBOPT_0x3A
000ce5 0fae      	ADD  R26,R30
000ce6 1fbf      	ADC  R27,R31
000ce7 e3e4      	LDI  R30,LOW(52)
000ce8 e0f0      	LDI  R31,HIGH(52)
000ce9 93ed      	ST   X+,R30
000cea 93fc      	ST   X,R31
                 ; 0000 01D8 
                 ; 0000 01D9         if(Graph_X >= Graph_X_Min)
                 _0x11F:
000ceb 91a0 070e 	LDS  R26,_Graph_X+1
000ced 23aa      	TST  R26
000cee f102      	BRMI _0x120
                 ; 0000 01DA         {   // пишем точку в столбце
                 ; 0000 01DB             SSD1963_DrawLine(Graph_X, Lenght, ValueLast[i], Value[i], Color[i], 2);
000cef 940e 1070 	CALL SUBOPT_0x37
000cf1 940e 1094 	CALL SUBOPT_0x3E
000cf3 940e 108c 	CALL SUBOPT_0x3C
000cf5 93fa      	ST   -Y,R31
000cf6 93ea      	ST   -Y,R30
000cf7 940e 1091 	CALL SUBOPT_0x3D
000cf9 01de      	MOVW R26,R28
000cfa 9652      	ADIW R26,18
000cfb 0fee      	LSL  R30
000cfc 1fff      	ROL  R31
000cfd 940e 108c 	CALL SUBOPT_0x3C
000cff 93fa      	ST   -Y,R31
000d00 93ea      	ST   -Y,R30
000d01 940e 1091 	CALL SUBOPT_0x3D
000d03 01de      	MOVW R26,R28
000d04 961e      	ADIW R26,14
000d05 0fee      	LSL  R30
000d06 1fff      	ROL  R31
000d07 940e 108c 	CALL SUBOPT_0x3C
000d09 93fa      	ST   -Y,R31
000d0a 93ea      	ST   -Y,R30
000d0b e0e2      	LDI  R30,LOW(2)
000d0c 93ea      	ST   -Y,R30
000d0d 940e 07ec 	CALL _SSD1963_DrawLine
                 ; 0000 01DC         }
                 ; 0000 01DD         // определяем предыдущую точку диограммы
                 ; 0000 01DE         ValueLast[i] = Value[i];
                 _0x120:
000d0f 940e 1094 	CALL SUBOPT_0x3E
000d11 0fea      	ADD  R30,R26
000d12 1ffb      	ADC  R31,R27
000d13 010f      	MOVW R0,R30
000d14 940e 1080 	CALL SUBOPT_0x3A
000d16 940e 108c 	CALL SUBOPT_0x3C
000d18 01d0      	MOVW R26,R0
000d19 93ed      	ST   X+,R30
000d1a 93fc      	ST   X,R31
                 ; 0000 01DF 
                 ; 0000 01E0         if(ParameterState==2 && i==1) break;
000d1b 91a0 070c 	LDS  R26,_ParameterState
000d1d 30a2      	CPI  R26,LOW(0x2)
000d1e f411      	BRNE _0x122
000d1f 3051      	CPI  R21,1
000d20 f009      	BREQ _0x123
                 _0x122:
000d21 c001      	RJMP _0x121
                 _0x123:
000d22 c002      	RJMP _0x118
                 ; 0000 01E1     }
                 _0x121:
000d23 5f5f      	SUBI R21,-1
000d24 cf4d      	RJMP _0x117
                 _0x118:
                 ; 0000 01E2 
                 ; 0000 01E3     Graph_X += Graph_X_Step; // увеличеваем Х диограммы
000d25 940e 106b 	CALL SUBOPT_0x36
000d27 9637      	ADIW R30,7
000d28 93e0 070d 	STS  _Graph_X,R30
000d2a 93f0 070e 	STS  _Graph_X+1,R31
                 ; 0000 01E4 }
                 _0x2080002:
000d2c 940e 1224 	CALL __LOADLOCR6
000d2e 9665      	ADIW R28,21
000d2f 9508      	RET
                 ;
                 ;inline void main_loop()  // основной рабочий режим
                 ; 0000 01E7 {
                 _main_loop:
                 ; 0000 01E8             if(WaitADC_mSec > 10)
000d30 91a0 0717 	LDS  R26,_WaitADC_mSec
000d32 91b0 0718 	LDS  R27,_WaitADC_mSec+1
000d34 971b      	SBIW R26,11
000d35 f0c8      	BRLO _0x124
                 ; 0000 01E9             {
                 ; 0000 01EA               while(rx_counter0>2 || (rx_counter0>1 && ParameterState==2))
                 _0x125:
000d36 91a0 06b9 	LDS  R26,_rx_counter0
000d38 30a3      	CPI  R26,LOW(0x3)
000d39 f438      	BRSH _0x128
000d3a 30a2      	CPI  R26,LOW(0x2)
000d3b f020      	BRLO _0x129
000d3c 91a0 070c 	LDS  R26,_ParameterState
000d3e 30a2      	CPI  R26,LOW(0x2)
000d3f f009      	BREQ _0x128
                 _0x129:
000d40 c00e      	RJMP _0x127
                 _0x128:
                 ; 0000 01EB               {
                 ; 0000 01EC                 if(ParameterState<2)
000d41 91a0 070c 	LDS  R26,_ParameterState
000d43 30a2      	CPI  R26,LOW(0x2)
000d44 f420      	BRSH _0x12C
                 ; 0000 01ED                 {
                 ; 0000 01EE                     Paint_3phase(getchar0(),getchar0(),getchar0());
000d45 940e 109b 	CALL SUBOPT_0x3F
000d47 dca4      	RCALL _getchar0
000d48 c003      	RJMP _0x15E
                 ; 0000 01EF                 }
                 ; 0000 01F0                 else
                 _0x12C:
                 ; 0000 01F1                 {
                 ; 0000 01F2                     Paint_3phase(getchar0(),getchar0(),0);
000d49 940e 109b 	CALL SUBOPT_0x3F
000d4b e0e0      	LDI  R30,LOW(0)
                 _0x15E:
000d4c 93ea      	ST   -Y,R30
000d4d deb9      	RCALL _Paint_3phase
                 ; 0000 01F3                 }
                 ; 0000 01F4               }
000d4e cfe7      	RJMP _0x125
                 _0x127:
                 ; 0000 01F5             }
                 ; 0000 01F6 
                 ; 0000 01F7             if(tx_counter0==0 && WaitADC_mSec > 400)
                 _0x124:
000d4f 91a0 06c4 	LDS  R26,_tx_counter0
000d51 30a0      	CPI  R26,LOW(0x0)
000d52 f441      	BRNE _0x12F
000d53 91a0 0717 	LDS  R26,_WaitADC_mSec
000d55 91b0 0718 	LDS  R27,_WaitADC_mSec+1
000d57 39a1      	CPI  R26,LOW(0x191)
000d58 e0e1      	LDI  R30,HIGH(0x191)
000d59 07be      	CPC  R27,R30
000d5a f408      	BRSH _0x130
                 _0x12F:
000d5b c020      	RJMP _0x12E
                 _0x130:
                 ; 0000 01F8             {
                 ; 0000 01F9                 WaitADC_mSec = 0;
000d5c e0e0      	LDI  R30,LOW(0)
000d5d 93e0 0717 	STS  _WaitADC_mSec,R30
000d5f 93e0 0718 	STS  _WaitADC_mSec+1,R30
                 ; 0000 01FA                 StartPaint();
000d61 de90      	RCALL _StartPaint
                 ; 0000 01FB                 while(rx_counter0) getchar0();
                 _0x131:
000d62 91e0 06b9 	LDS  R30,_rx_counter0
000d64 30e0      	CPI  R30,0
000d65 f011      	BREQ _0x133
000d66 dc85      	RCALL _getchar0
000d67 cffa      	RJMP _0x131
                 _0x133:
                 ; 0000 01FD switch(ParameterState)
000d68 91e0 070c 	LDS  R30,_ParameterState
000d6a 940e 1068 	CALL SUBOPT_0x35
                 ; 0000 01FE                 {
                 ; 0000 01FF                 case 0: putchar0('U'); break;
000d6c f411      	BRNE _0x137
000d6d e5e5      	LDI  R30,LOW(85)
000d6e c00b      	RJMP _0x15F
                 ; 0000 0200                 case 1: putchar0('I'); break;
                 _0x137:
000d6f 30e1      	CPI  R30,LOW(0x1)
000d70 e0a0      	LDI  R26,HIGH(0x1)
000d71 07fa      	CPC  R31,R26
000d72 f411      	BRNE _0x138
000d73 e4e9      	LDI  R30,LOW(73)
000d74 c005      	RJMP _0x15F
                 ; 0000 0201                 case 2: putchar0('Z'); break;
                 _0x138:
000d75 30e2      	CPI  R30,LOW(0x2)
000d76 e0a0      	LDI  R26,HIGH(0x2)
000d77 07fa      	CPC  R31,R26
000d78 f419      	BRNE _0x136
000d79 e5ea      	LDI  R30,LOW(90)
                 _0x15F:
000d7a 93ea      	ST   -Y,R30
000d7b dca1      	RCALL _putchar0
                 ; 0000 0202                 }
                 _0x136:
                 ; 0000 0203             }
                 ; 0000 0204 
                 ; 0000 0205 }
                 _0x12E:
000d7c 9508      	RET
                 ;
                 ;// Timer 0 overflow interrupt 1 ms
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0209 {
                 _timer0_ovf_isr:
000d7d 93aa      	ST   -Y,R26
000d7e 93ba      	ST   -Y,R27
000d7f 93ea      	ST   -Y,R30
000d80 93fa      	ST   -Y,R31
000d81 b7ef      	IN   R30,SREG
000d82 93ea      	ST   -Y,R30
                 ; 0000 020A // Reinitialize Timer 0 value
                 ; 0000 020B TCNT0=0x06;
000d83 e0e6      	LDI  R30,LOW(6)
000d84 bfe2      	OUT  0x32,R30
                 ; 0000 020C // Place your code here
                 ; 0000 020D WaitADC_mSec++;
000d85 e1a7      	LDI  R26,LOW(_WaitADC_mSec)
000d86 e0b7      	LDI  R27,HIGH(_WaitADC_mSec)
000d87 91ed      	LD   R30,X+
000d88 91fd      	LD   R31,X+
000d89 9631      	ADIW R30,1
000d8a 93fe      	ST   -X,R31
000d8b 93ee      	ST   -X,R30
                 ; 0000 020E }
000d8c 91e9      	LD   R30,Y+
000d8d bfef      	OUT  SREG,R30
000d8e 91f9      	LD   R31,Y+
000d8f 91e9      	LD   R30,Y+
000d90 91b9      	LD   R27,Y+
000d91 91a9      	LD   R26,Y+
000d92 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0213 {
                 _main:
                 ; 0000 0214 // Declare your local variables here
                 ; 0000 0215 {
                 ; 0000 0216 // Input/Output Ports initialization
                 ; 0000 0217 // Port A initialization
                 ; 0000 0218 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0219 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 021A PORTA=0x00;
000d93 e0e0      	LDI  R30,LOW(0)
000d94 bbeb      	OUT  0x1B,R30
                 ; 0000 021B DDRA=0x00;
000d95 bbea      	OUT  0x1A,R30
                 ; 0000 021C 
                 ; 0000 021D // Port B initialization
                 ; 0000 021E // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 021F // State7=1 State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0220 PORTB=0x80;
000d96 e8e0      	LDI  R30,LOW(128)
000d97 bbe8      	OUT  0x18,R30
                 ; 0000 0221 DDRB=0x80;
000d98 bbe7      	OUT  0x17,R30
                 ; 0000 0222 
                 ; 0000 0223 // Port C initialization
                 ; 0000 0224 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0225 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0226 PORTC=0x00;
000d99 e0e0      	LDI  R30,LOW(0)
000d9a bbe5      	OUT  0x15,R30
                 ; 0000 0227 DDRC=0x00;
000d9b bbe4      	OUT  0x14,R30
                 ; 0000 0228 
                 ; 0000 0229 // Port D initialization
                 ; 0000 022A // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 022B // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 022C PORTD=0x00;
000d9c bbe2      	OUT  0x12,R30
                 ; 0000 022D DDRD=0x10;
000d9d e1e0      	LDI  R30,LOW(16)
000d9e bbe1      	OUT  0x11,R30
                 ; 0000 022E 
                 ; 0000 022F // Port E initialization
                 ; 0000 0230 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0231 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 0232 PORTE=0x10;  //PE4 - CD off
000d9f b9e3      	OUT  0x3,R30
                 ; 0000 0233 DDRE=0x50;   //PE6 - F_CS ???
000da0 e5e0      	LDI  R30,LOW(80)
000da1 b9e2      	OUT  0x2,R30
                 ; 0000 0234 
                 ; 0000 0235 // Port F initialization
                 ; 0000 0236 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0237 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0238 PORTF=0x00;
000da2 e0e0      	LDI  R30,LOW(0)
000da3 93e0 0062 	STS  98,R30
                 ; 0000 0239 DDRF=0x00;
000da5 93e0 0061 	STS  97,R30
                 ; 0000 023A 
                 ; 0000 023B // Port G initialization
                 ; 0000 023C // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 023D // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 023E PORTG=0x00;
000da7 93e0 0065 	STS  101,R30
                 ; 0000 023F DDRG=0x00;
000da9 93e0 0064 	STS  100,R30
                 ; 0000 0240 
                 ; 0000 0241 // Timer/Counter 0 initialization
                 ; 0000 0242 // Clock source: System Clock
                 ; 0000 0243 // Clock value: 250,000 kHz
                 ; 0000 0244 // Mode: Normal top=0xFF
                 ; 0000 0245 // OC0 output: Disconnected
                 ; 0000 0246 ASSR=0x00;
000dab bfe0      	OUT  0x30,R30
                 ; 0000 0247 TCCR0=0x04;
000dac e0e4      	LDI  R30,LOW(4)
000dad bfe3      	OUT  0x33,R30
                 ; 0000 0248 TCNT0=0x06;
000dae e0e6      	LDI  R30,LOW(6)
000daf bfe2      	OUT  0x32,R30
                 ; 0000 0249 OCR0=0x00;
000db0 e0e0      	LDI  R30,LOW(0)
000db1 bfe1      	OUT  0x31,R30
                 ; 0000 024A 
                 ; 0000 024B // Timer/Counter 1 initialization
                 ; 0000 024C // Clock source: System Clock
                 ; 0000 024D // Clock value: Timer1 Stopped
                 ; 0000 024E // Mode: Normal top=0xFFFF
                 ; 0000 024F // OC1A output: Discon.
                 ; 0000 0250 // OC1B output: Discon.
                 ; 0000 0251 // OC1C output: Discon.
                 ; 0000 0252 // Noise Canceler: Off
                 ; 0000 0253 // Input Capture on Falling Edge
                 ; 0000 0254 // Timer1 Overflow Interrupt: Off
                 ; 0000 0255 // Input Capture Interrupt: Off
                 ; 0000 0256 // Compare A Match Interrupt: Off
                 ; 0000 0257 // Compare B Match Interrupt: Off
                 ; 0000 0258 // Compare C Match Interrupt: Off
                 ; 0000 0259 TCCR1A=0x00;
000db2 bdef      	OUT  0x2F,R30
                 ; 0000 025A TCCR1B=0x00;
000db3 bdee      	OUT  0x2E,R30
                 ; 0000 025B TCNT1H=0x00;
000db4 bded      	OUT  0x2D,R30
                 ; 0000 025C TCNT1L=0x00;
000db5 bdec      	OUT  0x2C,R30
                 ; 0000 025D ICR1H=0x00;
000db6 bde7      	OUT  0x27,R30
                 ; 0000 025E ICR1L=0x00;
000db7 bde6      	OUT  0x26,R30
                 ; 0000 025F OCR1AH=0x00;
000db8 bdeb      	OUT  0x2B,R30
                 ; 0000 0260 OCR1AL=0x00;
000db9 bdea      	OUT  0x2A,R30
                 ; 0000 0261 OCR1BH=0x00;
000dba bde9      	OUT  0x29,R30
                 ; 0000 0262 OCR1BL=0x00;
000dbb bde8      	OUT  0x28,R30
                 ; 0000 0263 OCR1CH=0x00;
000dbc 93e0 0079 	STS  121,R30
                 ; 0000 0264 OCR1CL=0x00;
000dbe 93e0 0078 	STS  120,R30
                 ; 0000 0265 
                 ; 0000 0266 // Timer/Counter 2 initialization
                 ; 0000 0267 // Clock source: System Clock
                 ; 0000 0268 // Clock value: Timer2 Stopped
                 ; 0000 0269 // Mode: Normal top=0xFF
                 ; 0000 026A // OC2 output: Disconnected
                 ; 0000 026B TCCR2=0x00;
000dc0 bde5      	OUT  0x25,R30
                 ; 0000 026C TCNT2=0x00;
000dc1 bde4      	OUT  0x24,R30
                 ; 0000 026D OCR2=0x00;
000dc2 bde3      	OUT  0x23,R30
                 ; 0000 026E 
                 ; 0000 026F // Timer/Counter 3 initialization
                 ; 0000 0270 // Clock source: System Clock
                 ; 0000 0271 // Clock value: Timer3 Stopped
                 ; 0000 0272 // Mode: Normal top=0xFFFF
                 ; 0000 0273 // OC3A output: Discon.
                 ; 0000 0274 // OC3B output: Discon.
                 ; 0000 0275 // OC3C output: Discon.
                 ; 0000 0276 // Noise Canceler: Off
                 ; 0000 0277 // Input Capture on Falling Edge
                 ; 0000 0278 // Timer3 Overflow Interrupt: Off
                 ; 0000 0279 // Input Capture Interrupt: Off
                 ; 0000 027A // Compare A Match Interrupt: Off
                 ; 0000 027B // Compare B Match Interrupt: Off
                 ; 0000 027C // Compare C Match Interrupt: Off
                 ; 0000 027D TCCR3A=0x00;
000dc3 93e0 008b 	STS  139,R30
                 ; 0000 027E TCCR3B=0x00;
000dc5 93e0 008a 	STS  138,R30
                 ; 0000 027F TCNT3H=0x00;
000dc7 93e0 0089 	STS  137,R30
                 ; 0000 0280 TCNT3L=0x00;
000dc9 93e0 0088 	STS  136,R30
                 ; 0000 0281 ICR3H=0x00;
000dcb 93e0 0081 	STS  129,R30
                 ; 0000 0282 ICR3L=0x00;
000dcd 93e0 0080 	STS  128,R30
                 ; 0000 0283 OCR3AH=0x00;
000dcf 93e0 0087 	STS  135,R30
                 ; 0000 0284 OCR3AL=0x00;
000dd1 93e0 0086 	STS  134,R30
                 ; 0000 0285 OCR3BH=0x00;
000dd3 93e0 0085 	STS  133,R30
                 ; 0000 0286 OCR3BL=0x00;
000dd5 93e0 0084 	STS  132,R30
                 ; 0000 0287 OCR3CH=0x00;
000dd7 93e0 0083 	STS  131,R30
                 ; 0000 0288 OCR3CL=0x00;
000dd9 93e0 0082 	STS  130,R30
                 ; 0000 0289 
                 ; 0000 028A // External Interrupt(s) initialization
                 ; 0000 028B // INT0: Off
                 ; 0000 028C // INT1: Off
                 ; 0000 028D // INT2: Off
                 ; 0000 028E // INT3: Off
                 ; 0000 028F // INT4: Off
                 ; 0000 0290 // INT5: Off
                 ; 0000 0291 // INT6: Off
                 ; 0000 0292 // INT7: Off
                 ; 0000 0293 EICRA=0x00;
000ddb 93e0 006a 	STS  106,R30
                 ; 0000 0294 EICRB=0x00;
000ddd bfea      	OUT  0x3A,R30
                 ; 0000 0295 EIMSK=0x00;
000dde bfe9      	OUT  0x39,R30
                 ; 0000 0296 
                 ; 0000 0297 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0298 TIMSK=0x01;
000ddf e0e1      	LDI  R30,LOW(1)
000de0 bfe7      	OUT  0x37,R30
                 ; 0000 0299 
                 ; 0000 029A ETIMSK=0x00;
000de1 e0e0      	LDI  R30,LOW(0)
000de2 93e0 007d 	STS  125,R30
                 ; 0000 029B 
                 ; 0000 029C // USART0 initialization
                 ; 0000 029D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 029E // USART0 Receiver: On
                 ; 0000 029F // USART0 Transmitter: On
                 ; 0000 02A0 // USART0 Mode: Asynchronous
                 ; 0000 02A1 // USART0 Baud Rate: 115200
                 ; 0000 02A2 UCSR0A=0x00;
000de4 b9eb      	OUT  0xB,R30
                 ; 0000 02A3 UCSR0B=0xD8;
000de5 ede8      	LDI  R30,LOW(216)
000de6 b9ea      	OUT  0xA,R30
                 ; 0000 02A4 UCSR0C=0x06;
000de7 e0e6      	LDI  R30,LOW(6)
000de8 93e0 0095 	STS  149,R30
                 ; 0000 02A5 UBRR0H=0x00;
000dea e0e0      	LDI  R30,LOW(0)
000deb 93e0 0090 	STS  144,R30
                 ; 0000 02A6 UBRR0L=0x08;
000ded e0e8      	LDI  R30,LOW(8)
000dee b9e9      	OUT  0x9,R30
                 ; 0000 02A7 
                 ; 0000 02A8 // USART1 initialization
                 ; 0000 02A9 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02AA // USART1 Receiver: On
                 ; 0000 02AB // USART1 Transmitter: On
                 ; 0000 02AC // USART1 Mode: Asynchronous
                 ; 0000 02AD // USART1 Baud Rate: 9600
                 ; 0000 02AE UCSR1A=0x00;
000def e0e0      	LDI  R30,LOW(0)
000df0 93e0 009b 	STS  155,R30
                 ; 0000 02AF UCSR1B=0xD8;
000df2 ede8      	LDI  R30,LOW(216)
000df3 93e0 009a 	STS  154,R30
                 ; 0000 02B0 UCSR1C=0x06;
000df5 e0e6      	LDI  R30,LOW(6)
000df6 93e0 009d 	STS  157,R30
                 ; 0000 02B1 UBRR1H=0x00;
000df8 e0e0      	LDI  R30,LOW(0)
000df9 93e0 0098 	STS  152,R30
                 ; 0000 02B2 UBRR1L=0x67;
000dfb e6e7      	LDI  R30,LOW(103)
000dfc 93e0 0099 	STS  153,R30
                 ; 0000 02B3 
                 ; 0000 02B4 // Analog Comparator initialization
                 ; 0000 02B5 // Analog Comparator: Off
                 ; 0000 02B6 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 02B7 ACSR=0x80;
000dfe e8e0      	LDI  R30,LOW(128)
000dff b9e8      	OUT  0x8,R30
                 ; 0000 02B8 SFIOR=0x00;
000e00 e0e0      	LDI  R30,LOW(0)
000e01 bde0      	OUT  0x20,R30
                 ; 0000 02B9 
                 ; 0000 02BA // ADC initialization
                 ; 0000 02BB // ADC disabled
                 ; 0000 02BC ADCSRA=0x00;
000e02 b9e6      	OUT  0x6,R30
                 ; 0000 02BD 
                 ; 0000 02BE // SPI initialization
                 ; 0000 02BF // SPI Type: Master
                 ; 0000 02C0 // SPI Clock Rate: 2*250,000 kHz
                 ; 0000 02C1 // SPI Clock Phase: Cycle Start
                 ; 0000 02C2 // SPI Clock Polarity: Low
                 ; 0000 02C3 // SPI Data Order: MSB First
                 ; 0000 02C4 SPCR=0x52;
000e03 e5e2      	LDI  R30,LOW(82)
000e04 b9ed      	OUT  0xD,R30
                 ; 0000 02C5 SPSR=0x00;
000e05 e0e0      	LDI  R30,LOW(0)
000e06 b9ee      	OUT  0xE,R30
                 ; 0000 02C6 
                 ; 0000 02C7 // TWI initialization
                 ; 0000 02C8 // TWI disabled
                 ; 0000 02C9 TWCR=0x00;
000e07 93e0 0074 	STS  116,R30
                 ; 0000 02CA }
                 ; 0000 02CB {
                 ; 0000 02CC // Global enable interrupts
                 ; 0000 02CD #asm("sei")
000e09 9478      	sei
                 ; 0000 02CE 
                 ; 0000 02CF SSD1963_Init();
000e0a 940e 050c 	CALL _SSD1963_Init
                 ; 0000 02D0 TSC2046_Init();
000e0c 940e 09b8 	CALL _TSC2046_Init
                 ; 0000 02D1 SSD1963_ClearScreen(BLACK);
000e0e 940e 0f0f 	CALL SUBOPT_0xD
000e10 940e 05ae 	CALL _SSD1963_ClearScreen
                 ; 0000 02D2 
                 ; 0000 02D3   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLUE, BLACK);
                +
000e12 e8e1     +LDI R30 , LOW ( _0x13A + ( 0 ) )
000e13 e0f5     +LDI R31 , HIGH ( _0x13A + ( 0 ) )
                 	__POINTW1MN _0x13A,0
000e14 940e 10a2 	CALL SUBOPT_0x40
000e16 e7e0      	LDI  R30,LOW(112)
000e17 e0f0      	LDI  R31,HIGH(112)
000e18 93fa      	ST   -Y,R31
000e19 93ea      	ST   -Y,R30
000e1a efe8      	LDI  R30,LOW(248)
000e1b e0f0      	LDI  R31,HIGH(248)
000e1c 940e 0f14 	CALL SUBOPT_0xE
000e1e 940e 07b7 	CALL _SSD1963_PutString16
                 ; 0000 02D4   BACKLIGHT = 0; //On
000e20 98c7      	CBI  0x18,7
                 ; 0000 02D5   delay_ms(200);
000e21 940e 0edb 	CALL SUBOPT_0x4
                 ; 0000 02D6   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), RED, BLACK);
                +
000e23 e8e8     +LDI R30 , LOW ( _0x13A + ( 7 ) )
000e24 e0f5     +LDI R31 , HIGH ( _0x13A + ( 7 ) )
                 	__POINTW1MN _0x13A,7
000e25 940e 10a2 	CALL SUBOPT_0x40
000e27 e8e0      	LDI  R30,LOW(128)
000e28 e0f0      	LDI  R31,HIGH(128)
000e29 93fa      	ST   -Y,R31
000e2a 93ea      	ST   -Y,R30
000e2b e0e0      	LDI  R30,LOW(7936)
000e2c e1ff      	LDI  R31,HIGH(7936)
000e2d 940e 0f14 	CALL SUBOPT_0xE
000e2f 940e 10a9 	CALL SUBOPT_0x41
                 ; 0000 02D7   delay_ms(200);
                 ; 0000 02D8   SSD1963_PutString16("ДЕСКОМ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, GREEN, BLACK);
                +
000e31 e8ef     +LDI R30 , LOW ( _0x13A + ( 14 ) )
000e32 e0f5     +LDI R31 , HIGH ( _0x13A + ( 14 ) )
                 	__POINTW1MN _0x13A,14
000e33 940e 10a2 	CALL SUBOPT_0x40
000e35 e9e0      	LDI  R30,LOW(144)
000e36 e0f0      	LDI  R31,HIGH(144)
000e37 93fa      	ST   -Y,R31
000e38 93ea      	ST   -Y,R30
000e39 e0e7      	LDI  R30,LOW(57351)
000e3a eef0      	LDI  R31,HIGH(57351)
000e3b 940e 0f14 	CALL SUBOPT_0xE
000e3d 940e 10a9 	CALL SUBOPT_0x41
                 ; 0000 02D9   delay_ms(200);
                 ; 0000 02DA   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) - FONT_HEIGHT, BLACK, BLACK);
                +
000e3f e9e6     +LDI R30 , LOW ( _0x13A + ( 21 ) )
000e40 e0f5     +LDI R31 , HIGH ( _0x13A + ( 21 ) )
                 	__POINTW1MN _0x13A,21
000e41 940e 10a2 	CALL SUBOPT_0x40
000e43 e7e0      	LDI  R30,LOW(112)
000e44 e0f0      	LDI  R31,HIGH(112)
000e45 940e 0f14 	CALL SUBOPT_0xE
000e47 940e 0f0f 	CALL SUBOPT_0xD
000e49 940e 10a9 	CALL SUBOPT_0x41
                 ; 0000 02DB   delay_ms(200);
                 ; 0000 02DC   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2), BLACK, BLACK);
                +
000e4b e9ed     +LDI R30 , LOW ( _0x13A + ( 28 ) )
000e4c e0f5     +LDI R31 , HIGH ( _0x13A + ( 28 ) )
                 	__POINTW1MN _0x13A,28
000e4d 940e 10a2 	CALL SUBOPT_0x40
000e4f e8e0      	LDI  R30,LOW(128)
000e50 e0f0      	LDI  R31,HIGH(128)
000e51 940e 0f14 	CALL SUBOPT_0xE
000e53 940e 0f0f 	CALL SUBOPT_0xD
000e55 940e 10a9 	CALL SUBOPT_0x41
                 ; 0000 02DD   delay_ms(200);
                 ; 0000 02DE   SSD1963_PutString16("      ", 240 - 3 * FONT_WIDTH, (272 / 2) - (FONT_HEIGHT / 2) + FONT_HEIGHT, BLACK, BLACK);
                +
000e57 eae4     +LDI R30 , LOW ( _0x13A + ( 35 ) )
000e58 e0f5     +LDI R31 , HIGH ( _0x13A + ( 35 ) )
                 	__POINTW1MN _0x13A,35
000e59 940e 10a2 	CALL SUBOPT_0x40
000e5b e9e0      	LDI  R30,LOW(144)
000e5c e0f0      	LDI  R31,HIGH(144)
000e5d 940e 0f14 	CALL SUBOPT_0xE
000e5f 940e 0f0f 	CALL SUBOPT_0xD
000e61 940e 07b7 	CALL _SSD1963_PutString16
                 ; 0000 02DF 
                 ; 0000 02E0 Prepare_Screen();
000e63 dc86      	RCALL _Prepare_Screen
                 ; 0000 02E1 
                 ; 0000 02E2 // Watchdog Timer initialization
                 ; 0000 02E3 // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 02E4 #pragma optsize-
                 ; 0000 02E5 #asm("wdr")
000e64 95a8      	wdr
                 ; 0000 02E6 //WDTCR=0x1F;
                 ; 0000 02E7 //WDTCR=0x0F;
                 ; 0000 02E8 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 02E9 #pragma optsize+
                 ; 0000 02EA #endif
                 ; 0000 02EB }
                 ; 0000 02EC 
                 ; 0000 02ED PutParameterText(ParameterState, BLUE);
000e65 940e 10ac 	CALL SUBOPT_0x42
                 ; 0000 02EE while (1)
                 _0x13D:
                 ; 0000 02EF       {
                 ; 0000 02F0       #asm("wdr")
000e67 95a8      	wdr
                 ; 0000 02F1       switch(State)
000e68 91e0 070b 	LDS  R30,_State
000e6a 940e 1068 	CALL SUBOPT_0x35
                 ; 0000 02F2         {
                 ; 0000 02F3           case 0 : // основной рабочий режим
000e6c f529      	BRNE _0x143
                 ; 0000 02F4           {
                 ; 0000 02F5               main_loop();
000e6d dec2      	RCALL _main_loop
                 ; 0000 02F6               switch (GetButton())
000e6e dce2      	RCALL _GetButton
                 ; 0000 02F7               {
                 ; 0000 02F8               case 1 :
000e6f 30e1      	CPI  R30,LOW(0x1)
000e70 f469      	BRNE _0x147
                 ; 0000 02F9                   if(++ParameterState > 2) ParameterState = 0;
000e71 91a0 070c 	LDS  R26,_ParameterState
000e73 5faf      	SUBI R26,-LOW(1)
000e74 93a0 070c 	STS  _ParameterState,R26
000e76 30a3      	CPI  R26,LOW(0x3)
000e77 f018      	BRLO _0x148
000e78 e0e0      	LDI  R30,LOW(0)
000e79 93e0 070c 	STS  _ParameterState,R30
                 ; 0000 02FA                   PutParameterText(ParameterState, BLUE);
                 _0x148:
000e7b 940e 10ac 	CALL SUBOPT_0x42
                 ; 0000 02FB               break;
000e7d c013      	RJMP _0x146
                 ; 0000 02FC               case 2 :
                 _0x147:
000e7e 30e2      	CPI  R30,LOW(0x2)
000e7f f089      	BREQ _0x146
                 ; 0000 02FD               break;
                 ; 0000 02FE               case 3 :
000e80 30e3      	CPI  R30,LOW(0x3)
000e81 f079      	BREQ _0x146
                 ; 0000 02FF               break;
                 ; 0000 0300               case 4 :
000e82 30e4      	CPI  R30,LOW(0x4)
000e83 f469      	BRNE _0x146
                 ; 0000 0301                 State = 200;
000e84 ece8      	LDI  R30,LOW(200)
000e85 93e0 070b 	STS  _State,R30
                 ; 0000 0302                 Repaint_Button("СТАРТ", 4, BLACK, WHITE);
                +
000e87 eaeb     +LDI R30 , LOW ( _0x13A + ( 42 ) )
000e88 e0f5     +LDI R31 , HIGH ( _0x13A + ( 42 ) )
                 	__POINTW1MN _0x13A,42
000e89 940e 104b 	CALL SUBOPT_0x30
000e8b 940e 1045 	CALL SUBOPT_0x2F
                 ; 0000 0303                 delay_ms(250);
000e8d efea      	LDI  R30,LOW(250)
000e8e e0f0      	LDI  R31,HIGH(250)
000e8f 940e 0efc 	CALL SUBOPT_0x9
                 ; 0000 0304               break;
                 ; 0000 0305               }
                 _0x146:
                 ; 0000 0306           }
                 ; 0000 0307           break;
000e91 c02b      	RJMP _0x142
                 ; 0000 0308           case 1 : // настройки
                 _0x143:
000e92 30e1      	CPI  R30,LOW(0x1)
000e93 e0a0      	LDI  R26,HIGH(0x1)
000e94 07fa      	CPC  R31,R26
000e95 f139      	BREQ _0x142
                 ; 0000 0309           {
                 ; 0000 030A           }
                 ; 0000 030B           break;
                 ; 0000 030C           case 200 : // пауза
000e96 3ce8      	CPI  R30,LOW(0xC8)
000e97 e0a0      	LDI  R26,HIGH(0xC8)
000e98 07fa      	CPC  R31,R26
000e99 f4b9      	BRNE _0x14D
                 ; 0000 030D             //Sleep_mSec = 0;
                 ; 0000 030E             switch (GetButton())
000e9a dcb6      	RCALL _GetButton
                 ; 0000 030F             {
                 ; 0000 0310               case 1 :
000e9b 30e1      	CPI  R30,LOW(0x1)
000e9c f099      	BREQ _0x150
                 ; 0000 0311               break;
                 ; 0000 0312               case 2 :
000e9d 30e2      	CPI  R30,LOW(0x2)
000e9e f089      	BREQ _0x150
                 ; 0000 0313               break;
                 ; 0000 0314               case 3 :
000e9f 30e3      	CPI  R30,LOW(0x3)
000ea0 f079      	BREQ _0x150
                 ; 0000 0315               break;
                 ; 0000 0316               case 4 :
000ea1 30e4      	CPI  R30,LOW(0x4)
000ea2 f469      	BRNE _0x150
                 ; 0000 0317                 State = 0;
000ea3 e0e0      	LDI  R30,LOW(0)
000ea4 93e0 070b 	STS  _State,R30
                 ; 0000 0318                 Repaint_Button("ПАУЗА", 4, BLACK, WHITE);
                +
000ea6 ebe1     +LDI R30 , LOW ( _0x13A + ( 48 ) )
000ea7 e0f5     +LDI R31 , HIGH ( _0x13A + ( 48 ) )
                 	__POINTW1MN _0x13A,48
000ea8 940e 104b 	CALL SUBOPT_0x30
000eaa 940e 1045 	CALL SUBOPT_0x2F
                 ; 0000 0319                 delay_ms(250);
000eac efea      	LDI  R30,LOW(250)
000ead e0f0      	LDI  R31,HIGH(250)
000eae 940e 0efc 	CALL SUBOPT_0x9
                 ; 0000 031A               break;
                 ; 0000 031B             }
                 _0x150:
                 ; 0000 031C 
                 ; 0000 031D           break;
000eb0 c00c      	RJMP _0x142
                 ; 0000 031E           case 250 : // сп¤щий режим
                 _0x14D:
000eb1 3fea      	CPI  R30,LOW(0xFA)
000eb2 e0a0      	LDI  R26,HIGH(0xFA)
000eb3 07fa      	CPC  R31,R26
000eb4 f441      	BRNE _0x142
                 ; 0000 031F           {
                 ; 0000 0320             if (TSC2046_GetCoordinates() > 0)
000eb5 940e 0947 	CALL _TSC2046_GetCoordinates
000eb7 30e1      	CPI  R30,LOW(0x1)
000eb8 f020      	BRLO _0x156
                 ; 0000 0321             {
                 ; 0000 0322               State = 0;
000eb9 e0e0      	LDI  R30,LOW(0)
000eba 93e0 070b 	STS  _State,R30
                 ; 0000 0323               BACKLIGHT = 0; //On
000ebc 98c7      	CBI  0x18,7
                 ; 0000 0324             }
                 ; 0000 0325           }
                 _0x156:
                 ; 0000 0326           break;
                 ; 0000 0327         }
                 _0x142:
                 ; 0000 0328 
                 ; 0000 0329       }
000ebd cfa9      	RJMP _0x13D
                 ; 0000 032A }
                 _0x159:
000ebe cfff      	RJMP _0x159
                 
                 	.DSEG
                 _0x13A:
000581           	.BYTE 0x36
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
000ebf 81e8      	LD   R30,Y
000ec0 b9ef      	OUT  0xF,R30
                 _0x2000003:
000ec1 9b77      	SBIS 0xE,7
000ec2 cffe      	RJMP _0x2000003
000ec3 b1ef      	IN   R30,0xF
                 _0x2080001:
000ec4 9621      	ADIW R28,1
000ec5 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _tempX:
0005b7           	.BYTE 0x4
                 _tempY:
0005bb           	.BYTE 0x4
                 _rx_buffer0:
0005bf           	.BYTE 0xFA
                 _rx_counter0:
0006b9           	.BYTE 0x1
                 _tx_buffer0:
0006ba           	.BYTE 0x8
                 _tx_wr_index0:
0006c2           	.BYTE 0x1
                 _tx_rd_index0:
0006c3           	.BYTE 0x1
                 _tx_counter0:
0006c4           	.BYTE 0x1
                 _rx_buffer1:
0006c5           	.BYTE 0x20
                 _rx_wr_index1:
0006e5           	.BYTE 0x1
                 _rx_rd_index1:
0006e6           	.BYTE 0x1
                 _rx_counter1:
0006e7           	.BYTE 0x1
                 _tx_buffer1:
0006e8           	.BYTE 0x20
                 _tx_wr_index1:
000708           	.BYTE 0x1
                 _tx_rd_index1:
000709           	.BYTE 0x1
                 _tx_counter1:
00070a           	.BYTE 0x1
                 _State:
00070b           	.BYTE 0x1
                 _ParameterState:
00070c           	.BYTE 0x1
                 _Graph_X:
00070d           	.BYTE 0x2
                 _Amplitude:
00070f           	.BYTE 0x2
                 _ValueLast:
000711           	.BYTE 0x6
                 _WaitADC_mSec:
000717           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000ec6 81e8      	LD   R30,Y
000ec7 e0f0      	LDI  R31,0
000ec8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000ec9 e6e4      	LDI  R30,LOW(100)
000eca e0f0      	LDI  R31,HIGH(100)
000ecb 93fa      	ST   -Y,R31
000ecc 93ea      	ST   -Y,R30
000ecd 940c 10b5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000ecf 81e8      	LD   R30,Y
000ed0 93ea      	ST   -Y,R30
000ed1 940e 04b1 	CALL _RotateByte
000ed3 bbeb      	OUT  0x1B,R30
000ed4 e0e0      	LDI  R30,LOW(0)
000ed5 bbe5      	OUT  0x15,R30
000ed6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000ed7 e0e1      	LDI  R30,LOW(1)
000ed8 93ea      	ST   -Y,R30
000ed9 940c 04e0 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4:
000edb ece8      	LDI  R30,LOW(200)
000edc e0f0      	LDI  R31,HIGH(200)
000edd 93fa      	ST   -Y,R31
000ede 93ea      	ST   -Y,R30
000edf 940c 10b5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000ee1 93ea      	ST   -Y,R30
000ee2 940e 04ec 	CALL _SSD1963_WriteData_b8
000ee4 e0e4      	LDI  R30,LOW(4)
000ee5 93ea      	ST   -Y,R30
000ee6 940c 04ec 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000ee8 93ea      	ST   -Y,R30
000ee9 940e 04e0 	CALL _SSD1963_WriteCmd
000eeb e0e1      	LDI  R30,LOW(1)
000eec 93ea      	ST   -Y,R30
000eed 940c 04ec 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000eef e0e1      	LDI  R30,LOW(1)
000ef0 e0f0      	LDI  R31,HIGH(1)
000ef1 93fa      	ST   -Y,R31
000ef2 93ea      	ST   -Y,R30
000ef3 940c 10b5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
000ef5 93ea      	ST   -Y,R30
000ef6 940e 04e0 	CALL _SSD1963_WriteCmd
000ef8 e0e3      	LDI  R30,LOW(3)
000ef9 93ea      	ST   -Y,R30
000efa 940c 04ec 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000efc 93fa      	ST   -Y,R31
000efd 93ea      	ST   -Y,R30
000efe 940c 10b5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xA:
000f00 93ea      	ST   -Y,R30
000f01 940e 04ec 	CALL _SSD1963_WriteData_b8
000f03 e0e0      	LDI  R30,LOW(0)
000f04 93ea      	ST   -Y,R30
000f05 940c 04ec 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000f07 e0e1      	LDI  R30,LOW(1)
000f08 93ea      	ST   -Y,R30
000f09 940c 04ec 	JMP  _SSD1963_WriteData_b8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000f0b 93ea      	ST   -Y,R30
000f0c 940e 04ec 	CALL _SSD1963_WriteData_b8
000f0e cff8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0xD:
000f0f e0e0      	LDI  R30,LOW(0)
000f10 e0f0      	LDI  R31,HIGH(0)
000f11 93fa      	ST   -Y,R31
000f12 93ea      	ST   -Y,R30
000f13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0xE:
000f14 93fa      	ST   -Y,R31
000f15 93ea      	ST   -Y,R30
000f16 cff8      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xF:
000f17 93fa      	ST   -Y,R31
000f18 93ea      	ST   -Y,R30
000f19 940e 058e 	CALL _SSD1963_SetArea
000f1b e2ec      	LDI  R30,LOW(44)
000f1c 93ea      	ST   -Y,R30
000f1d 940c 04e0 	JMP  _SSD1963_WriteCmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
000f1f 93fa      	ST   -Y,R31
000f20 93ea      	ST   -Y,R30
000f21 940c 04f9 	JMP  _SSD1963_WriteData_b16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x11:
000f23 85e8      	LDD  R30,Y+8
000f24 85f9      	LDD  R31,Y+8+1
000f25 93fa      	ST   -Y,R31
000f26 93ea      	ST   -Y,R30
000f27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
000f28 85ea      	LDD  R30,Y+10
000f29 85fb      	LDD  R31,Y+10+1
000f2a 93fa      	ST   -Y,R31
000f2b 93ea      	ST   -Y,R30
000f2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000f2d 81ef      	LDD  R30,Y+7
000f2e 85f8      	LDD  R31,Y+7+1
000f2f 93fa      	ST   -Y,R31
000f30 93ea      	ST   -Y,R30
000f31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x14:
000f32 9728      	SBIW R28,8
000f33 931a      	ST   -Y,R17
000f34 930a      	ST   -Y,R16
000f35 89ea      	LDD  R30,Y+18
000f36 89fb      	LDD  R31,Y+18+1
000f37 93fa      	ST   -Y,R31
000f38 93ea      	ST   -Y,R30
000f39 89ea      	LDD  R30,Y+18
000f3a 89fb      	LDD  R31,Y+18+1
000f3b 93fa      	ST   -Y,R31
000f3c 93ea      	ST   -Y,R30
000f3d 89ea      	LDD  R30,Y+18
000f3e 89fb      	LDD  R31,Y+18+1
000f3f 93fa      	ST   -Y,R31
000f40 93ea      	ST   -Y,R30
000f41 89ea      	LDD  R30,Y+18
000f42 89fb      	LDD  R31,Y+18+1
000f43 cfd3      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
000f44 89aa      	LDD  R26,Y+18
000f45 89bb      	LDD  R27,Y+18+1
000f46 89e8      	LDD  R30,Y+16
000f47 89f9      	LDD  R31,Y+16+1
000f48 1bea      	SUB  R30,R26
000f49 0bfb      	SBC  R31,R27
000f4a 9631      	ADIW R30,1
000f4b 018f      	MOVW R16,R30
000f4c 2311      	TST  R17
000f4d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000f4e 01f8      	MOVW R30,R16
000f4f efaf      	LDI  R26,LOW(65535)
000f50 efbf      	LDI  R27,HIGH(65535)
000f51 940e 11e9 	CALL __MULW12
000f53 018f      	MOVW R16,R30
000f54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x17:
000f55 85ae      	LDD  R26,Y+14
000f56 85bf      	LDD  R27,Y+14+1
000f57 85ec      	LDD  R30,Y+12
000f58 85fd      	LDD  R31,Y+12+1
000f59 1bea      	SUB  R30,R26
000f5a 0bfb      	SBC  R31,R27
000f5b 9631      	ADIW R30,1
000f5c 2766      	CLR  R22
000f5d 2777      	CLR  R23
                +
000f5e 83ea     +STD Y + 2 , R30
000f5f 83fb     +STD Y + 2 + 1 , R31
000f60 836c     +STD Y + 2 + 2 , R22
000f61 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000f62 81ad      	LDD  R26,Y+5
000f63 23aa      	TST  R26
000f64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
                +
000f65 81ea     +LDD R30 , Y + 2
000f66 81fb     +LDD R31 , Y + 2 + 1
000f67 816c     +LDD R22 , Y + 2 + 2
000f68 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000f69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
                +
000f6a efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
000f6b efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
000f6c ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
000f6d ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
000f6e 940e 11ee 	CALL __MULD12
                +
000f70 83ea     +STD Y + 2 , R30
000f71 83fb     +STD Y + 2 + 1 , R31
000f72 836c     +STD Y + 2 + 2 , R22
000f73 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000f74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1A:
000f75 01f8      	MOVW R30,R16
                +
000f76 81aa     +LDD R26 , Y + 2
000f77 81bb     +LDD R27 , Y + 2 + 1
000f78 818c     +LDD R24 , Y + 2 + 2
000f79 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000f7a 940e 11bc 	CALL __CWD1
000f7c 940e 11ee 	CALL __MULD12
                +
000f7e 83ea     +STD Y + 2 , R30
000f7f 83fb     +STD Y + 2 + 1 , R31
000f80 836c     +STD Y + 2 + 2 , R22
000f81 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000f82 e0e0      	LDI  R30,LOW(0)
                +
000f83 83ee     +STD Y + 6 , R30
000f84 83ef     +STD Y + 6 + 1 , R30
000f85 87e8     +STD Y + 6 + 2 , R30
000f86 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
000f87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
000f88 dfdc      	RCALL SUBOPT_0x18
                +
000f89 81ae     +LDD R26 , Y + 6
000f8a 81bf     +LDD R27 , Y + 6 + 1
000f8b 8588     +LDD R24 , Y + 6 + 2
000f8c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000f8d 940e 1218 	CALL __CPD21
000f8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
                +
000f90 81ee     +LDD R30 , Y + 6
000f91 81ff     +LDD R31 , Y + 6 + 1
000f92 8568     +LDD R22 , Y + 6 + 2
000f93 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000f94 5fef     +SUBI R30 , LOW ( - 1 )
000f95 4fff     +SBCI R31 , HIGH ( - 1 )
000f96 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000f97 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000f98 83ee     +STD Y + 6 , R30
000f99 83ff     +STD Y + 6 + 1 , R31
000f9a 8768     +STD Y + 6 + 2 , R22
000f9b 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000f9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
000f9d e0f0      	LDI  R31,0
000f9e 8dab      	LDD  R26,Y+27
000f9f 8dbc      	LDD  R27,Y+27+1
000fa0 0fea      	ADD  R30,R26
000fa1 1ffb      	ADC  R31,R27
000fa2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000fa3 85e8      	LDD  R30,Y+8
000fa4 85f9      	LDD  R31,Y+8+1
000fa5 1bea      	SUB  R30,R26
000fa6 0bfb      	SBC  R31,R27
000fa7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000fa8 85ac      	LDD  R26,Y+12
000fa9 85bd      	LDD  R27,Y+12+1
000faa 0fea      	ADD  R30,R26
000fab 1ffb      	ADC  R31,R27
000fac 93fa      	ST   -Y,R31
000fad 93ea      	ST   -Y,R30
000fae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x20:
000faf 93ea      	ST   -Y,R30
000fb0 940e 0ebf 	CALL _spi
                +
000fb2 e980     +LDI R24 , LOW ( 400 )
000fb3 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000fb4 9701     +SBIW R24 , 1
000fb5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000fb6 e0e0      	LDI  R30,LOW(0)
000fb7 93ea      	ST   -Y,R30
000fb8 940e 0ebf 	CALL _spi
000fba 2f0e      	MOV  R16,R30
000fbb 2711      	CLR  R17
000fbc 2f10      	MOV  R17,R16
000fbd 2700      	CLR  R16
000fbe e0e0      	LDI  R30,LOW(0)
000fbf 93ea      	ST   -Y,R30
000fc0 940e 0ebf 	CALL _spi
000fc2 e0f0      	LDI  R31,0
                +
000fc3 0f0e     +ADD R16 , R30
000fc4 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000fc5 9a1a      	SBI  0x3,2
000fc6 01f8      	MOVW R30,R16
000fc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
000fc8 01f8      	MOVW R30,R16
000fc9 940e 11bc 	CALL __CWD1
000fcb 940e 1127 	CALL __CDF1
000fcd 01df      	MOVW R26,R30
000fce 01cb      	MOVW R24,R22
000fcf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000fd0 940e 1155 	CALL __DIVF21
000fd2 940e 10f0 	CALL __CFD1
000fd4 018f      	MOVW R16,R30
000fd5 01f8      	MOVW R30,R16
000fd6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x23:
000fd7 e0e0      	LDI  R30,LOW(0)
000fd8 93e0 05b7 	STS  _tempX,R30
000fda 93e0 05b8 	STS  _tempX+1,R30
000fdc 93e0 05b9 	STS  _tempX+2,R30
000fde 93e0 05ba 	STS  _tempX+3,R30
000fe0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x24:
000fe1 e0e0      	LDI  R30,LOW(0)
000fe2 93e0 05bb 	STS  _tempY,R30
000fe4 93e0 05bc 	STS  _tempY+1,R30
000fe6 93e0 05bd 	STS  _tempY+2,R30
000fe8 93e0 05be 	STS  _tempY+3,R30
000fea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000feb 93e0 05b7 	STS  _tempX,R30
000fed 93f0 05b8 	STS  _tempX+1,R31
000fef 9360 05b9 	STS  _tempX+2,R22
000ff1 9370 05ba 	STS  _tempX+3,R23
000ff3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000ff4 93e0 05bb 	STS  _tempY,R30
000ff6 93f0 05bc 	STS  _tempY+1,R31
000ff8 9360 05bd 	STS  _tempY+2,R22
000ffa 9370 05be 	STS  _tempY+3,R23
000ffc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
000ffd 91e0 05b7 	LDS  R30,_tempX
000fff 91f0 05b8 	LDS  R31,_tempX+1
001001 9160 05b9 	LDS  R22,_tempX+2
001003 9170 05ba 	LDS  R23,_tempX+3
001005 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
001006 91e0 05bb 	LDS  R30,_tempY
001008 91f0 05bc 	LDS  R31,_tempY+1
00100a 9160 05bd 	LDS  R22,_tempY+2
00100c 9170 05be 	LDS  R23,_tempY+3
00100e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x29:
00100f 93aa      	ST   -Y,R26
001010 93ea      	ST   -Y,R30
001011 93fa      	ST   -Y,R31
001012 b7ef      	IN   R30,SREG
001013 93ea      	ST   -Y,R30
001014 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
001015 50e1      	SUBI R30,LOW(1)
001016 e0f0      	LDI  R31,0
001017 54e6      	SUBI R30,LOW(-_tx_buffer0)
001018 4ff9      	SBCI R31,HIGH(-_tx_buffer0)
001019 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2B:
00101a 93fa      	ST   -Y,R31
00101b 93ea      	ST   -Y,R30
00101c efe7      	LDI  R30,LOW(247)
00101d e0f0      	LDI  R31,HIGH(247)
00101e 93fa      	ST   -Y,R31
00101f 93ea      	ST   -Y,R30
001020 cf02      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
001021 940e 07b7 	CALL _SSD1963_PutString16
001023 81ed      	LDD  R30,Y+5
001024 81fe      	LDD  R31,Y+5+1
001025 93fa      	ST   -Y,R31
001026 93ea      	ST   -Y,R30
001027 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x2D:
001028 93fa      	ST   -Y,R31
001029 93ea      	ST   -Y,R30
00102a efe0      	LDI  R30,LOW(240)
00102b e0f0      	LDI  R31,HIGH(240)
00102c 93fa      	ST   -Y,R31
00102d 93ea      	ST   -Y,R30
00102e e0ee      	LDI  R30,LOW(270)
00102f e0f1      	LDI  R31,HIGH(270)
001030 93fa      	ST   -Y,R31
001031 93ea      	ST   -Y,R30
001032 efef      	LDI  R30,LOW(65535)
001033 efff      	LDI  R31,HIGH(65535)
001034 93fa      	ST   -Y,R31
001035 93ea      	ST   -Y,R30
001036 940c 08d7 	JMP  _SSD1963_DrawFillRect
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x2E:
001038 93fa      	ST   -Y,R31
001039 93ea      	ST   -Y,R30
00103a efe1      	LDI  R30,LOW(241)
00103b e0f0      	LDI  R31,HIGH(241)
00103c 93fa      	ST   -Y,R31
00103d 93ea      	ST   -Y,R30
00103e e0ed      	LDI  R30,LOW(269)
00103f e0f1      	LDI  R31,HIGH(269)
001040 93fa      	ST   -Y,R31
001041 93ea      	ST   -Y,R30
001042 e0e1      	LDI  R30,LOW(1)
001043 e0f0      	LDI  R31,HIGH(1)
001044 cecf      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2F:
001045 efef      	LDI  R30,LOW(65535)
001046 efff      	LDI  R31,HIGH(65535)
001047 93fa      	ST   -Y,R31
001048 93ea      	ST   -Y,R30
001049 940c 0a90 	JMP  _Repaint_Button
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x30:
00104b 93fa      	ST   -Y,R31
00104c 93ea      	ST   -Y,R30
00104d e0e4      	LDI  R30,LOW(4)
00104e 93ea      	ST   -Y,R30
00104f cebf      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
001050 efe0      	LDI  R30,LOW(240)
001051 e0f0      	LDI  R31,HIGH(240)
001052 15e6      	CP   R30,R6
001053 05f7      	CPC  R31,R7
001054 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
001055 e0ee      	LDI  R30,LOW(270)
001056 e0f1      	LDI  R31,HIGH(270)
001057 166e      	CP   R6,R30
001058 067f      	CPC  R7,R31
001059 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x33:
00105a 93fa      	ST   -Y,R31
00105b 93ea      	ST   -Y,R30
00105c 2fe1      	MOV  R30,R17
00105d e0f0      	LDI  R31,0
00105e 93fa      	ST   -Y,R31
00105f 93ea      	ST   -Y,R30
001060 2fe0      	MOV  R30,R16
001061 e0f0      	LDI  R31,0
001062 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x34:
001063 93fa      	ST   -Y,R31
001064 93ea      	ST   -Y,R30
001065 85e8      	LDD  R30,Y+8
001066 85f9      	LDD  R31,Y+8+1
001067 ceac      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
001068 e0f0      	LDI  R31,0
001069 9730      	SBIW R30,0
00106a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x36:
00106b 91e0 070d 	LDS  R30,_Graph_X
00106d 91f0 070e 	LDS  R31,_Graph_X+1
00106f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x37:
001070 dffa      	RCALL SUBOPT_0x36
001071 93fa      	ST   -Y,R31
001072 93ea      	ST   -Y,R30
001073 931a      	ST   -Y,R17
001074 930a      	ST   -Y,R16
001075 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x38:
001076 e0e8      	LDI  R30,LOW(8456)
001077 e2f1      	LDI  R31,HIGH(8456)
001078 93fa      	ST   -Y,R31
001079 93ea      	ST   -Y,R30
00107a 940e 07d1 	CALL _SSD1963_DrawFastLine
00107c cff3      	RJMP SUBOPT_0x37
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
00107d 93fa      	ST   -Y,R31
00107e 93ea      	ST   -Y,R30
00107f cff6      	RJMP SUBOPT_0x38
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x3A:
001080 2fe5      	MOV  R30,R21
001081 e0f0      	LDI  R31,0
001082 01de      	MOVW R26,R28
001083 961c      	ADIW R26,12
001084 0fee      	LSL  R30
001085 1fff      	ROL  R31
001086 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
001087 0fae      	ADD  R26,R30
001088 1fbf      	ADC  R27,R31
001089 91ed      	LD   R30,X+
00108a 91fd      	LD   R31,X+
00108b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3C:
00108c 0fae      	ADD  R26,R30
00108d 1fbf      	ADC  R27,R31
00108e 940e 1214 	CALL __GETW1P
001090 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
001091 2fe5      	MOV  R30,R21
001092 e0f0      	LDI  R31,0
001093 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
001094 2fe5      	MOV  R30,R21
001095 e1a1      	LDI  R26,LOW(_ValueLast)
001096 e0b7      	LDI  R27,HIGH(_ValueLast)
001097 e0f0      	LDI  R31,0
001098 0fee      	LSL  R30
001099 1fff      	ROL  R31
00109a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3F:
00109b 940e 09ec 	CALL _getchar0
00109d 93ea      	ST   -Y,R30
00109e 940e 09ec 	CALL _getchar0
0010a0 93ea      	ST   -Y,R30
0010a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x40:
0010a2 93fa      	ST   -Y,R31
0010a3 93ea      	ST   -Y,R30
0010a4 ece0      	LDI  R30,LOW(192)
0010a5 e0f0      	LDI  R31,HIGH(192)
0010a6 93fa      	ST   -Y,R31
0010a7 93ea      	ST   -Y,R30
0010a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
0010a9 940e 07b7 	CALL _SSD1963_PutString16
0010ab ce2f      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x42:
0010ac 91e0 070c 	LDS  R30,_ParameterState
0010ae 93ea      	ST   -Y,R30
0010af efe8      	LDI  R30,LOW(248)
0010b0 e0f0      	LDI  R31,HIGH(248)
0010b1 93fa      	ST   -Y,R31
0010b2 93ea      	ST   -Y,R30
0010b3 940c 0ba6 	JMP  _PutParameterText
                 
                 
                 	.CSEG
                 _delay_ms:
0010b5 91e9      	ld   r30,y+
0010b6 91f9      	ld   r31,y+
0010b7 9630      	adiw r30,0
0010b8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0010b9 ea80     +LDI R24 , LOW ( 0xFA0 )
0010ba e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0010bb 9701     +SBIW R24 , 1
0010bc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0010bd 95a8      	wdr
0010be 9731      	sbiw r30,1
0010bf f7c9      	brne __delay_ms0
                 __delay_ms1:
0010c0 9508      	ret
                 
                 __ROUND_REPACK:
0010c1 2355      	TST  R21
0010c2 f442      	BRPL __REPACK
0010c3 3850      	CPI  R21,0x80
0010c4 f411      	BRNE __ROUND_REPACK0
0010c5 ffe0      	SBRS R30,0
0010c6 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0010c7 9631      	ADIW R30,1
0010c8 1f69      	ADC  R22,R25
0010c9 1f79      	ADC  R23,R25
0010ca f06b      	BRVS __REPACK1
                 
                 __REPACK:
0010cb e850      	LDI  R21,0x80
0010cc 2757      	EOR  R21,R23
0010cd f411      	BRNE __REPACK0
0010ce 935f      	PUSH R21
0010cf c073      	RJMP __ZERORES
                 __REPACK0:
0010d0 3f5f      	CPI  R21,0xFF
0010d1 f031      	BREQ __REPACK1
0010d2 0f66      	LSL  R22
0010d3 0c00      	LSL  R0
0010d4 9557      	ROR  R21
0010d5 9567      	ROR  R22
0010d6 2f75      	MOV  R23,R21
0010d7 9508      	RET
                 __REPACK1:
0010d8 935f      	PUSH R21
0010d9 2000      	TST  R0
0010da f00a      	BRMI __REPACK2
0010db c073      	RJMP __MAXRES
                 __REPACK2:
0010dc c06c      	RJMP __MINRES
                 
                 __UNPACK:
0010dd e850      	LDI  R21,0x80
0010de 2e19      	MOV  R1,R25
0010df 2215      	AND  R1,R21
0010e0 0f88      	LSL  R24
0010e1 1f99      	ROL  R25
0010e2 2795      	EOR  R25,R21
0010e3 0f55      	LSL  R21
0010e4 9587      	ROR  R24
                 
                 __UNPACK1:
0010e5 e850      	LDI  R21,0x80
0010e6 2e07      	MOV  R0,R23
0010e7 2205      	AND  R0,R21
0010e8 0f66      	LSL  R22
0010e9 1f77      	ROL  R23
0010ea 2775      	EOR  R23,R21
0010eb 0f55      	LSL  R21
0010ec 9567      	ROR  R22
0010ed 9508      	RET
                 
                 __CFD1U:
0010ee 9468      	SET
0010ef c001      	RJMP __CFD1U0
                 __CFD1:
0010f0 94e8      	CLT
                 __CFD1U0:
0010f1 935f      	PUSH R21
0010f2 dff2      	RCALL __UNPACK1
0010f3 3870      	CPI  R23,0x80
0010f4 f018      	BRLO __CFD10
0010f5 3f7f      	CPI  R23,0xFF
0010f6 f408      	BRCC __CFD10
0010f7 c04b      	RJMP __ZERORES
                 __CFD10:
0010f8 e156      	LDI  R21,22
0010f9 1b57      	SUB  R21,R23
0010fa f4aa      	BRPL __CFD11
0010fb 9551      	NEG  R21
0010fc 3058      	CPI  R21,8
0010fd f40e      	BRTC __CFD19
0010fe 3059      	CPI  R21,9
                 __CFD19:
0010ff f030      	BRLO __CFD17
001100 efef      	SER  R30
001101 efff      	SER  R31
001102 ef6f      	SER  R22
001103 e77f      	LDI  R23,0x7F
001104 f977      	BLD  R23,7
001105 c01a      	RJMP __CFD15
                 __CFD17:
001106 2777      	CLR  R23
001107 2355      	TST  R21
001108 f0b9      	BREQ __CFD15
                 __CFD18:
001109 0fee      	LSL  R30
00110a 1fff      	ROL  R31
00110b 1f66      	ROL  R22
00110c 1f77      	ROL  R23
00110d 955a      	DEC  R21
00110e f7d1      	BRNE __CFD18
00110f c010      	RJMP __CFD15
                 __CFD11:
001110 2777      	CLR  R23
                 __CFD12:
001111 3058      	CPI  R21,8
001112 f028      	BRLO __CFD13
001113 2fef      	MOV  R30,R31
001114 2ff6      	MOV  R31,R22
001115 2f67      	MOV  R22,R23
001116 5058      	SUBI R21,8
001117 cff9      	RJMP __CFD12
                 __CFD13:
001118 2355      	TST  R21
001119 f031      	BREQ __CFD15
                 __CFD14:
00111a 9576      	LSR  R23
00111b 9567      	ROR  R22
00111c 95f7      	ROR  R31
00111d 95e7      	ROR  R30
00111e 955a      	DEC  R21
00111f f7d1      	BRNE __CFD14
                 __CFD15:
001120 2000      	TST  R0
001121 f40a      	BRPL __CFD16
001122 d080      	RCALL __ANEGD1
                 __CFD16:
001123 915f      	POP  R21
001124 9508      	RET
                 
                 __CDF1U:
001125 9468      	SET
001126 c001      	RJMP __CDF1U0
                 __CDF1:
001127 94e8      	CLT
                 __CDF1U0:
001128 9730      	SBIW R30,0
001129 4060      	SBCI R22,0
00112a 4070      	SBCI R23,0
00112b f0b1      	BREQ __CDF10
00112c 2400      	CLR  R0
00112d f026      	BRTS __CDF11
00112e 2377      	TST  R23
00112f f412      	BRPL __CDF11
001130 9400      	COM  R0
001131 d071      	RCALL __ANEGD1
                 __CDF11:
001132 2e17      	MOV  R1,R23
001133 e17e      	LDI  R23,30
001134 2011      	TST  R1
                 __CDF12:
001135 f032      	BRMI __CDF13
001136 957a      	DEC  R23
001137 0fee      	LSL  R30
001138 1fff      	ROL  R31
001139 1f66      	ROL  R22
00113a 1c11      	ROL  R1
00113b cff9      	RJMP __CDF12
                 __CDF13:
00113c 2fef      	MOV  R30,R31
00113d 2ff6      	MOV  R31,R22
00113e 2d61      	MOV  R22,R1
00113f 935f      	PUSH R21
001140 df8a      	RCALL __REPACK
001141 915f      	POP  R21
                 __CDF10:
001142 9508      	RET
                 
                 __ZERORES:
001143 27ee      	CLR  R30
001144 27ff      	CLR  R31
001145 2766      	CLR  R22
001146 2777      	CLR  R23
001147 915f      	POP  R21
001148 9508      	RET
                 
                 __MINRES:
001149 efef      	SER  R30
00114a efff      	SER  R31
00114b e76f      	LDI  R22,0x7F
00114c ef7f      	SER  R23
00114d 915f      	POP  R21
00114e 9508      	RET
                 
                 __MAXRES:
00114f efef      	SER  R30
001150 efff      	SER  R31
001151 e76f      	LDI  R22,0x7F
001152 e77f      	LDI  R23,0x7F
001153 915f      	POP  R21
001154 9508      	RET
                 
                 __DIVF21:
001155 935f      	PUSH R21
001156 df86      	RCALL __UNPACK
001157 3870      	CPI  R23,0x80
001158 f421      	BRNE __DIVF210
001159 2011      	TST  R1
                 __DIVF211:
00115a f40a      	BRPL __DIVF219
00115b cfed      	RJMP __MINRES
                 __DIVF219:
00115c cff2      	RJMP __MAXRES
                 __DIVF210:
00115d 3890      	CPI  R25,0x80
00115e f409      	BRNE __DIVF218
                 __DIVF217:
00115f cfe3      	RJMP __ZERORES
                 __DIVF218:
001160 2401      	EOR  R0,R1
001161 9408      	SEC
001162 0b97      	SBC  R25,R23
001163 f41b      	BRVC __DIVF216
001164 f3d4      	BRLT __DIVF217
001165 2000      	TST  R0
001166 cff3      	RJMP __DIVF211
                 __DIVF216:
001167 2f79      	MOV  R23,R25
001168 931f      	PUSH R17
001169 932f      	PUSH R18
00116a 933f      	PUSH R19
00116b 934f      	PUSH R20
00116c 2411      	CLR  R1
00116d 2711      	CLR  R17
00116e 2722      	CLR  R18
00116f 2733      	CLR  R19
001170 2744      	CLR  R20
001171 2755      	CLR  R21
001172 e290      	LDI  R25,32
                 __DIVF212:
001173 17ae      	CP   R26,R30
001174 07bf      	CPC  R27,R31
001175 0786      	CPC  R24,R22
001176 0741      	CPC  R20,R17
001177 f030      	BRLO __DIVF213
001178 1bae      	SUB  R26,R30
001179 0bbf      	SBC  R27,R31
00117a 0b86      	SBC  R24,R22
00117b 0b41      	SBC  R20,R17
00117c 9408      	SEC
00117d c001      	RJMP __DIVF214
                 __DIVF213:
00117e 9488      	CLC
                 __DIVF214:
00117f 1f55      	ROL  R21
001180 1f22      	ROL  R18
001181 1f33      	ROL  R19
001182 1c11      	ROL  R1
001183 1faa      	ROL  R26
001184 1fbb      	ROL  R27
001185 1f88      	ROL  R24
001186 1f44      	ROL  R20
001187 959a      	DEC  R25
001188 f751      	BRNE __DIVF212
001189 01f9      	MOVW R30,R18
00118a 2d61      	MOV  R22,R1
00118b 914f      	POP  R20
00118c 913f      	POP  R19
00118d 912f      	POP  R18
00118e 911f      	POP  R17
00118f 2366      	TST  R22
001190 f032      	BRMI __DIVF215
001191 0f55      	LSL  R21
001192 1fee      	ROL  R30
001193 1fff      	ROL  R31
001194 1f66      	ROL  R22
001195 957a      	DEC  R23
001196 f243      	BRVS __DIVF217
                 __DIVF215:
001197 df29      	RCALL __ROUND_REPACK
001198 915f      	POP  R21
001199 9508      	RET
                 
                 __ADDD12:
00119a 0fea      	ADD  R30,R26
00119b 1ffb      	ADC  R31,R27
00119c 1f68      	ADC  R22,R24
00119d 1f79      	ADC  R23,R25
00119e 9508      	RET
                 
                 __ANEGW1:
00119f 95f1      	NEG  R31
0011a0 95e1      	NEG  R30
0011a1 40f0      	SBCI R31,0
0011a2 9508      	RET
                 
                 __ANEGD1:
0011a3 95f0      	COM  R31
0011a4 9560      	COM  R22
0011a5 9570      	COM  R23
0011a6 95e1      	NEG  R30
0011a7 4fff      	SBCI R31,-1
0011a8 4f6f      	SBCI R22,-1
0011a9 4f7f      	SBCI R23,-1
0011aa 9508      	RET
                 
                 __LSRB12:
0011ab 23ee      	TST  R30
0011ac 2e0e      	MOV  R0,R30
0011ad 2fea      	MOV  R30,R26
0011ae f019      	BREQ __LSRB12R
                 __LSRB12L:
0011af 95e6      	LSR  R30
0011b0 940a      	DEC  R0
0011b1 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
0011b2 9508      	RET
                 
                 __ASRW4:
0011b3 95f5      	ASR  R31
0011b4 95e7      	ROR  R30
                 __ASRW3:
0011b5 95f5      	ASR  R31
0011b6 95e7      	ROR  R30
                 __ASRW2:
0011b7 95f5      	ASR  R31
0011b8 95e7      	ROR  R30
0011b9 95f5      	ASR  R31
0011ba 95e7      	ROR  R30
0011bb 9508      	RET
                 
                 __CWD1:
0011bc 2f6f      	MOV  R22,R31
0011bd 0f66      	ADD  R22,R22
0011be 0b66      	SBC  R22,R22
0011bf 2f76      	MOV  R23,R22
0011c0 9508      	RET
                 
                 __MULW12U:
0011c1 9ffa      	MUL  R31,R26
0011c2 2df0      	MOV  R31,R0
0011c3 9feb      	MUL  R30,R27
0011c4 0df0      	ADD  R31,R0
0011c5 9fea      	MUL  R30,R26
0011c6 2de0      	MOV  R30,R0
0011c7 0df1      	ADD  R31,R1
0011c8 9508      	RET
                 
                 __MULD12U:
0011c9 9f7a      	MUL  R23,R26
0011ca 2d70      	MOV  R23,R0
0011cb 9f6b      	MUL  R22,R27
0011cc 0d70      	ADD  R23,R0
0011cd 9ff8      	MUL  R31,R24
0011ce 0d70      	ADD  R23,R0
0011cf 9fe9      	MUL  R30,R25
0011d0 0d70      	ADD  R23,R0
0011d1 9f6a      	MUL  R22,R26
0011d2 2d60      	MOV  R22,R0
0011d3 0d71      	ADD  R23,R1
0011d4 9ffb      	MUL  R31,R27
0011d5 0d60      	ADD  R22,R0
0011d6 1d71      	ADC  R23,R1
0011d7 9fe8      	MUL  R30,R24
0011d8 0d60      	ADD  R22,R0
0011d9 1d71      	ADC  R23,R1
0011da 2788      	CLR  R24
0011db 9ffa      	MUL  R31,R26
0011dc 2df0      	MOV  R31,R0
0011dd 0d61      	ADD  R22,R1
0011de 1f78      	ADC  R23,R24
0011df 9feb      	MUL  R30,R27
0011e0 0df0      	ADD  R31,R0
0011e1 1d61      	ADC  R22,R1
0011e2 1f78      	ADC  R23,R24
0011e3 9fea      	MUL  R30,R26
0011e4 2de0      	MOV  R30,R0
0011e5 0df1      	ADD  R31,R1
0011e6 1f68      	ADC  R22,R24
0011e7 1f78      	ADC  R23,R24
0011e8 9508      	RET
                 
                 __MULW12:
0011e9 d009      	RCALL __CHKSIGNW
0011ea dfd6      	RCALL __MULW12U
0011eb f40e      	BRTC __MULW121
0011ec dfb2      	RCALL __ANEGW1
                 __MULW121:
0011ed 9508      	RET
                 
                 __MULD12:
0011ee d012      	RCALL __CHKSIGND
0011ef dfd9      	RCALL __MULD12U
0011f0 f40e      	BRTC __MULD121
0011f1 dfb1      	RCALL __ANEGD1
                 __MULD121:
0011f2 9508      	RET
                 
                 __CHKSIGNW:
0011f3 94e8      	CLT
0011f4 fff7      	SBRS R31,7
0011f5 c002      	RJMP __CHKSW1
0011f6 dfa8      	RCALL __ANEGW1
0011f7 9468      	SET
                 __CHKSW1:
0011f8 ffb7      	SBRS R27,7
0011f9 c006      	RJMP __CHKSW2
0011fa 95a0      	COM  R26
0011fb 95b0      	COM  R27
0011fc 9611      	ADIW R26,1
0011fd f800      	BLD  R0,0
0011fe 9403      	INC  R0
0011ff fa00      	BST  R0,0
                 __CHKSW2:
001200 9508      	RET
                 
                 __CHKSIGND:
001201 94e8      	CLT
001202 ff77      	SBRS R23,7
001203 c002      	RJMP __CHKSD1
001204 df9e      	RCALL __ANEGD1
001205 9468      	SET
                 __CHKSD1:
001206 ff97      	SBRS R25,7
001207 c00b      	RJMP __CHKSD2
001208 2400      	CLR  R0
001209 95a0      	COM  R26
00120a 95b0      	COM  R27
00120b 9580      	COM  R24
00120c 9590      	COM  R25
00120d 9611      	ADIW R26,1
00120e 1d80      	ADC  R24,R0
00120f 1d90      	ADC  R25,R0
001210 f800      	BLD  R0,0
001211 9403      	INC  R0
001212 fa00      	BST  R0,0
                 __CHKSD2:
001213 9508      	RET
                 
                 __GETW1P:
001214 91ed      	LD   R30,X+
001215 91fc      	LD   R31,X
001216 9711      	SBIW R26,1
001217 9508      	RET
                 
                 __CPD21:
001218 17ae      	CP   R26,R30
001219 07bf      	CPC  R27,R31
00121a 0786      	CPC  R24,R22
00121b 0797      	CPC  R25,R23
00121c 9508      	RET
                 
                 __SAVELOCR6:
00121d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00121e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00121f 933a      	ST   -Y,R19
                 __SAVELOCR3:
001220 932a      	ST   -Y,R18
                 __SAVELOCR2:
001221 931a      	ST   -Y,R17
001222 930a      	ST   -Y,R16
001223 9508      	RET
                 
                 __LOADLOCR6:
001224 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001225 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001226 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001227 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001228 8119      	LDD  R17,Y+1
001229 8108      	LD   R16,Y
00122a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  46 r1 :  21 r2 :   2 r3 :   0 r4 :  10 r5 :   8 r6 :   4 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   4 r13:   4 r14:   0 r15:   0 
r16:  61 r17:  67 r18:  25 r19:  15 r20:  14 r21:  51 r22:  69 r23:  66 
r24:  40 r25:  26 r26: 314 r27:  86 r28:  22 r29:   1 r30: 969 r31: 508 
x  :  31 y  : 506 z  :  14 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  29 
adiw  :  34 and   :   3 andi  :   9 asr   :   5 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  24 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  19 
brlt  :   4 brmi  :   5 brne  : 106 brpl  :  15 brsh  :  18 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  : 307 
cbi   :  17 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  29 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  21 cpc   :  97 cpi   : 121 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   7 inc   :   4 jmp   :  55 ld    :  39 ldd   : 162 
ldi   : 619 lds   :  60 lpm   :   9 lsl   :  18 lsr   :   2 mov   :  43 
movw  :  53 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   9 
or    :   4 ori   :   3 out   :  60 pop   :  10 push  :   9 rcall :  88 
ret   :  91 reti  :   2 rjmp  : 148 rol   :  25 ror   :  12 sbc   :  11 
sbci  :  30 sbi   :  19 sbic  :   2 sbis  :   1 sbiw  :  19 sbr   :   0 
sbrc  :   0 sbrs  :   5 sec   :   2 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 286 std   :  56 sts   :  75 sub   :   8 subi  :  37 
swap  :   1 tst   :  21 wdr   :   3 
Instructions used: 78 out of 117 (66.7%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002456   7162   2140   9302  131072   7.1%
[.dseg] 0x000100 0x000719      0    537    537    4351  12.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
